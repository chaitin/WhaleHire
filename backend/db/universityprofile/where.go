// Code generated by ent, DO NOT EDIT.

package universityprofile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
	pgvector "github.com/pgvector/pgvector-go"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldDeletedAt, v))
}

// NameCn applies equality check predicate on the "name_cn" field. It's identical to NameCnEQ.
func NameCn(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldNameCn, v))
}

// NameEn applies equality check predicate on the "name_en" field. It's identical to NameEnEQ.
func NameEn(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldNameEn, v))
}

// Alias applies equality check predicate on the "alias" field. It's identical to AliasEQ.
func Alias(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldAlias, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldCountry, v))
}

// IsDoubleFirstClass applies equality check predicate on the "is_double_first_class" field. It's identical to IsDoubleFirstClassEQ.
func IsDoubleFirstClass(v bool) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldIsDoubleFirstClass, v))
}

// IsProject985 applies equality check predicate on the "is_project_985" field. It's identical to IsProject985EQ.
func IsProject985(v bool) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldIsProject985, v))
}

// IsProject211 applies equality check predicate on the "is_project_211" field. It's identical to IsProject211EQ.
func IsProject211(v bool) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldIsProject211, v))
}

// IsQsTop100 applies equality check predicate on the "is_qs_top100" field. It's identical to IsQsTop100EQ.
func IsQsTop100(v bool) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldIsQsTop100, v))
}

// RankQs applies equality check predicate on the "rank_qs" field. It's identical to RankQsEQ.
func RankQs(v int) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldRankQs, v))
}

// OverallScore applies equality check predicate on the "overall_score" field. It's identical to OverallScoreEQ.
func OverallScore(v float64) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldOverallScore, v))
}

// VectorContent applies equality check predicate on the "vector_content" field. It's identical to VectorContentEQ.
func VectorContent(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldVectorContent, v))
}

// Vector applies equality check predicate on the "vector" field. It's identical to VectorEQ.
func Vector(v *pgvector.Vector) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldVector, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotNull(FieldDeletedAt))
}

// NameCnEQ applies the EQ predicate on the "name_cn" field.
func NameCnEQ(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldNameCn, v))
}

// NameCnNEQ applies the NEQ predicate on the "name_cn" field.
func NameCnNEQ(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNEQ(FieldNameCn, v))
}

// NameCnIn applies the In predicate on the "name_cn" field.
func NameCnIn(vs ...string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIn(FieldNameCn, vs...))
}

// NameCnNotIn applies the NotIn predicate on the "name_cn" field.
func NameCnNotIn(vs ...string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotIn(FieldNameCn, vs...))
}

// NameCnGT applies the GT predicate on the "name_cn" field.
func NameCnGT(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGT(FieldNameCn, v))
}

// NameCnGTE applies the GTE predicate on the "name_cn" field.
func NameCnGTE(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGTE(FieldNameCn, v))
}

// NameCnLT applies the LT predicate on the "name_cn" field.
func NameCnLT(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLT(FieldNameCn, v))
}

// NameCnLTE applies the LTE predicate on the "name_cn" field.
func NameCnLTE(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLTE(FieldNameCn, v))
}

// NameCnContains applies the Contains predicate on the "name_cn" field.
func NameCnContains(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldContains(FieldNameCn, v))
}

// NameCnHasPrefix applies the HasPrefix predicate on the "name_cn" field.
func NameCnHasPrefix(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldHasPrefix(FieldNameCn, v))
}

// NameCnHasSuffix applies the HasSuffix predicate on the "name_cn" field.
func NameCnHasSuffix(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldHasSuffix(FieldNameCn, v))
}

// NameCnEqualFold applies the EqualFold predicate on the "name_cn" field.
func NameCnEqualFold(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEqualFold(FieldNameCn, v))
}

// NameCnContainsFold applies the ContainsFold predicate on the "name_cn" field.
func NameCnContainsFold(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldContainsFold(FieldNameCn, v))
}

// NameEnEQ applies the EQ predicate on the "name_en" field.
func NameEnEQ(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldNameEn, v))
}

// NameEnNEQ applies the NEQ predicate on the "name_en" field.
func NameEnNEQ(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNEQ(FieldNameEn, v))
}

// NameEnIn applies the In predicate on the "name_en" field.
func NameEnIn(vs ...string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIn(FieldNameEn, vs...))
}

// NameEnNotIn applies the NotIn predicate on the "name_en" field.
func NameEnNotIn(vs ...string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotIn(FieldNameEn, vs...))
}

// NameEnGT applies the GT predicate on the "name_en" field.
func NameEnGT(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGT(FieldNameEn, v))
}

// NameEnGTE applies the GTE predicate on the "name_en" field.
func NameEnGTE(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGTE(FieldNameEn, v))
}

// NameEnLT applies the LT predicate on the "name_en" field.
func NameEnLT(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLT(FieldNameEn, v))
}

// NameEnLTE applies the LTE predicate on the "name_en" field.
func NameEnLTE(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLTE(FieldNameEn, v))
}

// NameEnContains applies the Contains predicate on the "name_en" field.
func NameEnContains(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldContains(FieldNameEn, v))
}

// NameEnHasPrefix applies the HasPrefix predicate on the "name_en" field.
func NameEnHasPrefix(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldHasPrefix(FieldNameEn, v))
}

// NameEnHasSuffix applies the HasSuffix predicate on the "name_en" field.
func NameEnHasSuffix(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldHasSuffix(FieldNameEn, v))
}

// NameEnIsNil applies the IsNil predicate on the "name_en" field.
func NameEnIsNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIsNull(FieldNameEn))
}

// NameEnNotNil applies the NotNil predicate on the "name_en" field.
func NameEnNotNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotNull(FieldNameEn))
}

// NameEnEqualFold applies the EqualFold predicate on the "name_en" field.
func NameEnEqualFold(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEqualFold(FieldNameEn, v))
}

// NameEnContainsFold applies the ContainsFold predicate on the "name_en" field.
func NameEnContainsFold(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldContainsFold(FieldNameEn, v))
}

// AliasEQ applies the EQ predicate on the "alias" field.
func AliasEQ(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldAlias, v))
}

// AliasNEQ applies the NEQ predicate on the "alias" field.
func AliasNEQ(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNEQ(FieldAlias, v))
}

// AliasIn applies the In predicate on the "alias" field.
func AliasIn(vs ...string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIn(FieldAlias, vs...))
}

// AliasNotIn applies the NotIn predicate on the "alias" field.
func AliasNotIn(vs ...string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotIn(FieldAlias, vs...))
}

// AliasGT applies the GT predicate on the "alias" field.
func AliasGT(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGT(FieldAlias, v))
}

// AliasGTE applies the GTE predicate on the "alias" field.
func AliasGTE(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGTE(FieldAlias, v))
}

// AliasLT applies the LT predicate on the "alias" field.
func AliasLT(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLT(FieldAlias, v))
}

// AliasLTE applies the LTE predicate on the "alias" field.
func AliasLTE(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLTE(FieldAlias, v))
}

// AliasContains applies the Contains predicate on the "alias" field.
func AliasContains(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldContains(FieldAlias, v))
}

// AliasHasPrefix applies the HasPrefix predicate on the "alias" field.
func AliasHasPrefix(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldHasPrefix(FieldAlias, v))
}

// AliasHasSuffix applies the HasSuffix predicate on the "alias" field.
func AliasHasSuffix(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldHasSuffix(FieldAlias, v))
}

// AliasIsNil applies the IsNil predicate on the "alias" field.
func AliasIsNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIsNull(FieldAlias))
}

// AliasNotNil applies the NotNil predicate on the "alias" field.
func AliasNotNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotNull(FieldAlias))
}

// AliasEqualFold applies the EqualFold predicate on the "alias" field.
func AliasEqualFold(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEqualFold(FieldAlias, v))
}

// AliasContainsFold applies the ContainsFold predicate on the "alias" field.
func AliasContainsFold(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldContainsFold(FieldAlias, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryIsNil applies the IsNil predicate on the "country" field.
func CountryIsNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIsNull(FieldCountry))
}

// CountryNotNil applies the NotNil predicate on the "country" field.
func CountryNotNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotNull(FieldCountry))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldContainsFold(FieldCountry, v))
}

// IsDoubleFirstClassEQ applies the EQ predicate on the "is_double_first_class" field.
func IsDoubleFirstClassEQ(v bool) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldIsDoubleFirstClass, v))
}

// IsDoubleFirstClassNEQ applies the NEQ predicate on the "is_double_first_class" field.
func IsDoubleFirstClassNEQ(v bool) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNEQ(FieldIsDoubleFirstClass, v))
}

// IsProject985EQ applies the EQ predicate on the "is_project_985" field.
func IsProject985EQ(v bool) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldIsProject985, v))
}

// IsProject985NEQ applies the NEQ predicate on the "is_project_985" field.
func IsProject985NEQ(v bool) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNEQ(FieldIsProject985, v))
}

// IsProject211EQ applies the EQ predicate on the "is_project_211" field.
func IsProject211EQ(v bool) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldIsProject211, v))
}

// IsProject211NEQ applies the NEQ predicate on the "is_project_211" field.
func IsProject211NEQ(v bool) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNEQ(FieldIsProject211, v))
}

// IsQsTop100EQ applies the EQ predicate on the "is_qs_top100" field.
func IsQsTop100EQ(v bool) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldIsQsTop100, v))
}

// IsQsTop100NEQ applies the NEQ predicate on the "is_qs_top100" field.
func IsQsTop100NEQ(v bool) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNEQ(FieldIsQsTop100, v))
}

// RankQsEQ applies the EQ predicate on the "rank_qs" field.
func RankQsEQ(v int) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldRankQs, v))
}

// RankQsNEQ applies the NEQ predicate on the "rank_qs" field.
func RankQsNEQ(v int) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNEQ(FieldRankQs, v))
}

// RankQsIn applies the In predicate on the "rank_qs" field.
func RankQsIn(vs ...int) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIn(FieldRankQs, vs...))
}

// RankQsNotIn applies the NotIn predicate on the "rank_qs" field.
func RankQsNotIn(vs ...int) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotIn(FieldRankQs, vs...))
}

// RankQsGT applies the GT predicate on the "rank_qs" field.
func RankQsGT(v int) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGT(FieldRankQs, v))
}

// RankQsGTE applies the GTE predicate on the "rank_qs" field.
func RankQsGTE(v int) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGTE(FieldRankQs, v))
}

// RankQsLT applies the LT predicate on the "rank_qs" field.
func RankQsLT(v int) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLT(FieldRankQs, v))
}

// RankQsLTE applies the LTE predicate on the "rank_qs" field.
func RankQsLTE(v int) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLTE(FieldRankQs, v))
}

// RankQsIsNil applies the IsNil predicate on the "rank_qs" field.
func RankQsIsNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIsNull(FieldRankQs))
}

// RankQsNotNil applies the NotNil predicate on the "rank_qs" field.
func RankQsNotNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotNull(FieldRankQs))
}

// OverallScoreEQ applies the EQ predicate on the "overall_score" field.
func OverallScoreEQ(v float64) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldOverallScore, v))
}

// OverallScoreNEQ applies the NEQ predicate on the "overall_score" field.
func OverallScoreNEQ(v float64) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNEQ(FieldOverallScore, v))
}

// OverallScoreIn applies the In predicate on the "overall_score" field.
func OverallScoreIn(vs ...float64) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIn(FieldOverallScore, vs...))
}

// OverallScoreNotIn applies the NotIn predicate on the "overall_score" field.
func OverallScoreNotIn(vs ...float64) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotIn(FieldOverallScore, vs...))
}

// OverallScoreGT applies the GT predicate on the "overall_score" field.
func OverallScoreGT(v float64) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGT(FieldOverallScore, v))
}

// OverallScoreGTE applies the GTE predicate on the "overall_score" field.
func OverallScoreGTE(v float64) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGTE(FieldOverallScore, v))
}

// OverallScoreLT applies the LT predicate on the "overall_score" field.
func OverallScoreLT(v float64) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLT(FieldOverallScore, v))
}

// OverallScoreLTE applies the LTE predicate on the "overall_score" field.
func OverallScoreLTE(v float64) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLTE(FieldOverallScore, v))
}

// OverallScoreIsNil applies the IsNil predicate on the "overall_score" field.
func OverallScoreIsNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIsNull(FieldOverallScore))
}

// OverallScoreNotNil applies the NotNil predicate on the "overall_score" field.
func OverallScoreNotNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotNull(FieldOverallScore))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotNull(FieldMetadata))
}

// VectorContentEQ applies the EQ predicate on the "vector_content" field.
func VectorContentEQ(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldVectorContent, v))
}

// VectorContentNEQ applies the NEQ predicate on the "vector_content" field.
func VectorContentNEQ(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNEQ(FieldVectorContent, v))
}

// VectorContentIn applies the In predicate on the "vector_content" field.
func VectorContentIn(vs ...string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIn(FieldVectorContent, vs...))
}

// VectorContentNotIn applies the NotIn predicate on the "vector_content" field.
func VectorContentNotIn(vs ...string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotIn(FieldVectorContent, vs...))
}

// VectorContentGT applies the GT predicate on the "vector_content" field.
func VectorContentGT(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGT(FieldVectorContent, v))
}

// VectorContentGTE applies the GTE predicate on the "vector_content" field.
func VectorContentGTE(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGTE(FieldVectorContent, v))
}

// VectorContentLT applies the LT predicate on the "vector_content" field.
func VectorContentLT(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLT(FieldVectorContent, v))
}

// VectorContentLTE applies the LTE predicate on the "vector_content" field.
func VectorContentLTE(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLTE(FieldVectorContent, v))
}

// VectorContentContains applies the Contains predicate on the "vector_content" field.
func VectorContentContains(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldContains(FieldVectorContent, v))
}

// VectorContentHasPrefix applies the HasPrefix predicate on the "vector_content" field.
func VectorContentHasPrefix(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldHasPrefix(FieldVectorContent, v))
}

// VectorContentHasSuffix applies the HasSuffix predicate on the "vector_content" field.
func VectorContentHasSuffix(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldHasSuffix(FieldVectorContent, v))
}

// VectorContentIsNil applies the IsNil predicate on the "vector_content" field.
func VectorContentIsNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIsNull(FieldVectorContent))
}

// VectorContentNotNil applies the NotNil predicate on the "vector_content" field.
func VectorContentNotNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotNull(FieldVectorContent))
}

// VectorContentEqualFold applies the EqualFold predicate on the "vector_content" field.
func VectorContentEqualFold(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEqualFold(FieldVectorContent, v))
}

// VectorContentContainsFold applies the ContainsFold predicate on the "vector_content" field.
func VectorContentContainsFold(v string) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldContainsFold(FieldVectorContent, v))
}

// VectorEQ applies the EQ predicate on the "vector" field.
func VectorEQ(v *pgvector.Vector) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldVector, v))
}

// VectorNEQ applies the NEQ predicate on the "vector" field.
func VectorNEQ(v *pgvector.Vector) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNEQ(FieldVector, v))
}

// VectorIn applies the In predicate on the "vector" field.
func VectorIn(vs ...*pgvector.Vector) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIn(FieldVector, vs...))
}

// VectorNotIn applies the NotIn predicate on the "vector" field.
func VectorNotIn(vs ...*pgvector.Vector) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotIn(FieldVector, vs...))
}

// VectorGT applies the GT predicate on the "vector" field.
func VectorGT(v *pgvector.Vector) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGT(FieldVector, v))
}

// VectorGTE applies the GTE predicate on the "vector" field.
func VectorGTE(v *pgvector.Vector) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGTE(FieldVector, v))
}

// VectorLT applies the LT predicate on the "vector" field.
func VectorLT(v *pgvector.Vector) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLT(FieldVector, v))
}

// VectorLTE applies the LTE predicate on the "vector" field.
func VectorLTE(v *pgvector.Vector) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLTE(FieldVector, v))
}

// VectorIsNil applies the IsNil predicate on the "vector" field.
func VectorIsNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIsNull(FieldVector))
}

// VectorNotNil applies the NotNil predicate on the "vector" field.
func VectorNotNil() predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotNull(FieldVector))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UniversityProfile) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UniversityProfile) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UniversityProfile) predicate.UniversityProfile {
	return predicate.UniversityProfile(sql.NotPredicates(p))
}
