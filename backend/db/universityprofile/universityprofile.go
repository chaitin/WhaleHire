// Code generated by ent, DO NOT EDIT.

package universityprofile

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the universityprofile type in the database.
	Label = "university_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldNameCn holds the string denoting the name_cn field in the database.
	FieldNameCn = "name_cn"
	// FieldNameEn holds the string denoting the name_en field in the database.
	FieldNameEn = "name_en"
	// FieldAlias holds the string denoting the alias field in the database.
	FieldAlias = "alias"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldIsDoubleFirstClass holds the string denoting the is_double_first_class field in the database.
	FieldIsDoubleFirstClass = "is_double_first_class"
	// FieldIsProject985 holds the string denoting the is_project_985 field in the database.
	FieldIsProject985 = "is_project_985"
	// FieldIsProject211 holds the string denoting the is_project_211 field in the database.
	FieldIsProject211 = "is_project_211"
	// FieldIsQsTop100 holds the string denoting the is_qs_top100 field in the database.
	FieldIsQsTop100 = "is_qs_top100"
	// FieldRankQs holds the string denoting the rank_qs field in the database.
	FieldRankQs = "rank_qs"
	// FieldOverallScore holds the string denoting the overall_score field in the database.
	FieldOverallScore = "overall_score"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldVectorContent holds the string denoting the vector_content field in the database.
	FieldVectorContent = "vector_content"
	// FieldVector holds the string denoting the vector field in the database.
	FieldVector = "vector"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the universityprofile in the database.
	Table = "university_profiles"
)

// Columns holds all SQL columns for universityprofile fields.
var Columns = []string{
	FieldID,
	FieldDeletedAt,
	FieldNameCn,
	FieldNameEn,
	FieldAlias,
	FieldCountry,
	FieldIsDoubleFirstClass,
	FieldIsProject985,
	FieldIsProject211,
	FieldIsQsTop100,
	FieldRankQs,
	FieldOverallScore,
	FieldMetadata,
	FieldVectorContent,
	FieldVector,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/chaitin/WhaleHire/backend/db/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// NameCnValidator is a validator for the "name_cn" field. It is called by the builders before save.
	NameCnValidator func(string) error
	// DefaultIsDoubleFirstClass holds the default value on creation for the "is_double_first_class" field.
	DefaultIsDoubleFirstClass bool
	// DefaultIsProject985 holds the default value on creation for the "is_project_985" field.
	DefaultIsProject985 bool
	// DefaultIsProject211 holds the default value on creation for the "is_project_211" field.
	DefaultIsProject211 bool
	// DefaultIsQsTop100 holds the default value on creation for the "is_qs_top100" field.
	DefaultIsQsTop100 bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the UniversityProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByNameCn orders the results by the name_cn field.
func ByNameCn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameCn, opts...).ToFunc()
}

// ByNameEn orders the results by the name_en field.
func ByNameEn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameEn, opts...).ToFunc()
}

// ByAlias orders the results by the alias field.
func ByAlias(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlias, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByIsDoubleFirstClass orders the results by the is_double_first_class field.
func ByIsDoubleFirstClass(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDoubleFirstClass, opts...).ToFunc()
}

// ByIsProject985 orders the results by the is_project_985 field.
func ByIsProject985(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsProject985, opts...).ToFunc()
}

// ByIsProject211 orders the results by the is_project_211 field.
func ByIsProject211(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsProject211, opts...).ToFunc()
}

// ByIsQsTop100 orders the results by the is_qs_top100 field.
func ByIsQsTop100(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsQsTop100, opts...).ToFunc()
}

// ByRankQs orders the results by the rank_qs field.
func ByRankQs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRankQs, opts...).ToFunc()
}

// ByOverallScore orders the results by the overall_score field.
func ByOverallScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverallScore, opts...).ToFunc()
}

// ByVectorContent orders the results by the vector_content field.
func ByVectorContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVectorContent, opts...).ToFunc()
}

// ByVector orders the results by the vector field.
func ByVector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVector, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
