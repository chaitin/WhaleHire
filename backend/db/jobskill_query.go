// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/jobskill"
	"github.com/chaitin/WhaleHire/backend/db/jobskillmeta"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// JobSkillQuery is the builder for querying JobSkill entities.
type JobSkillQuery struct {
	config
	ctx        *QueryContext
	order      []jobskill.OrderOption
	inters     []Interceptor
	predicates []predicate.JobSkill
	withJob    *JobPositionQuery
	withSkill  *JobSkillMetaQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JobSkillQuery builder.
func (jsq *JobSkillQuery) Where(ps ...predicate.JobSkill) *JobSkillQuery {
	jsq.predicates = append(jsq.predicates, ps...)
	return jsq
}

// Limit the number of records to be returned by this query.
func (jsq *JobSkillQuery) Limit(limit int) *JobSkillQuery {
	jsq.ctx.Limit = &limit
	return jsq
}

// Offset to start from.
func (jsq *JobSkillQuery) Offset(offset int) *JobSkillQuery {
	jsq.ctx.Offset = &offset
	return jsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (jsq *JobSkillQuery) Unique(unique bool) *JobSkillQuery {
	jsq.ctx.Unique = &unique
	return jsq
}

// Order specifies how the records should be ordered.
func (jsq *JobSkillQuery) Order(o ...jobskill.OrderOption) *JobSkillQuery {
	jsq.order = append(jsq.order, o...)
	return jsq
}

// QueryJob chains the current query on the "job" edge.
func (jsq *JobSkillQuery) QueryJob() *JobPositionQuery {
	query := (&JobPositionClient{config: jsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobskill.Table, jobskill.FieldID, selector),
			sqlgraph.To(jobposition.Table, jobposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobskill.JobTable, jobskill.JobColumn),
		)
		fromU = sqlgraph.SetNeighbors(jsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySkill chains the current query on the "skill" edge.
func (jsq *JobSkillQuery) QuerySkill() *JobSkillMetaQuery {
	query := (&JobSkillMetaClient{config: jsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobskill.Table, jobskill.FieldID, selector),
			sqlgraph.To(jobskillmeta.Table, jobskillmeta.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobskill.SkillTable, jobskill.SkillColumn),
		)
		fromU = sqlgraph.SetNeighbors(jsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first JobSkill entity from the query.
// Returns a *NotFoundError when no JobSkill was found.
func (jsq *JobSkillQuery) First(ctx context.Context) (*JobSkill, error) {
	nodes, err := jsq.Limit(1).All(setContextOp(ctx, jsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{jobskill.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jsq *JobSkillQuery) FirstX(ctx context.Context) *JobSkill {
	node, err := jsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first JobSkill ID from the query.
// Returns a *NotFoundError when no JobSkill ID was found.
func (jsq *JobSkillQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = jsq.Limit(1).IDs(setContextOp(ctx, jsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{jobskill.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (jsq *JobSkillQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := jsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single JobSkill entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one JobSkill entity is found.
// Returns a *NotFoundError when no JobSkill entities are found.
func (jsq *JobSkillQuery) Only(ctx context.Context) (*JobSkill, error) {
	nodes, err := jsq.Limit(2).All(setContextOp(ctx, jsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{jobskill.Label}
	default:
		return nil, &NotSingularError{jobskill.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jsq *JobSkillQuery) OnlyX(ctx context.Context) *JobSkill {
	node, err := jsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only JobSkill ID in the query.
// Returns a *NotSingularError when more than one JobSkill ID is found.
// Returns a *NotFoundError when no entities are found.
func (jsq *JobSkillQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = jsq.Limit(2).IDs(setContextOp(ctx, jsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{jobskill.Label}
	default:
		err = &NotSingularError{jobskill.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (jsq *JobSkillQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := jsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of JobSkills.
func (jsq *JobSkillQuery) All(ctx context.Context) ([]*JobSkill, error) {
	ctx = setContextOp(ctx, jsq.ctx, ent.OpQueryAll)
	if err := jsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*JobSkill, *JobSkillQuery]()
	return withInterceptors[[]*JobSkill](ctx, jsq, qr, jsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (jsq *JobSkillQuery) AllX(ctx context.Context) []*JobSkill {
	nodes, err := jsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of JobSkill IDs.
func (jsq *JobSkillQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if jsq.ctx.Unique == nil && jsq.path != nil {
		jsq.Unique(true)
	}
	ctx = setContextOp(ctx, jsq.ctx, ent.OpQueryIDs)
	if err = jsq.Select(jobskill.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jsq *JobSkillQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := jsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jsq *JobSkillQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jsq.ctx, ent.OpQueryCount)
	if err := jsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, jsq, querierCount[*JobSkillQuery](), jsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (jsq *JobSkillQuery) CountX(ctx context.Context) int {
	count, err := jsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jsq *JobSkillQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, jsq.ctx, ent.OpQueryExist)
	switch _, err := jsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (jsq *JobSkillQuery) ExistX(ctx context.Context) bool {
	exist, err := jsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JobSkillQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jsq *JobSkillQuery) Clone() *JobSkillQuery {
	if jsq == nil {
		return nil
	}
	return &JobSkillQuery{
		config:     jsq.config,
		ctx:        jsq.ctx.Clone(),
		order:      append([]jobskill.OrderOption{}, jsq.order...),
		inters:     append([]Interceptor{}, jsq.inters...),
		predicates: append([]predicate.JobSkill{}, jsq.predicates...),
		withJob:    jsq.withJob.Clone(),
		withSkill:  jsq.withSkill.Clone(),
		// clone intermediate query.
		sql:       jsq.sql.Clone(),
		path:      jsq.path,
		modifiers: append([]func(*sql.Selector){}, jsq.modifiers...),
	}
}

// WithJob tells the query-builder to eager-load the nodes that are connected to
// the "job" edge. The optional arguments are used to configure the query builder of the edge.
func (jsq *JobSkillQuery) WithJob(opts ...func(*JobPositionQuery)) *JobSkillQuery {
	query := (&JobPositionClient{config: jsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jsq.withJob = query
	return jsq
}

// WithSkill tells the query-builder to eager-load the nodes that are connected to
// the "skill" edge. The optional arguments are used to configure the query builder of the edge.
func (jsq *JobSkillQuery) WithSkill(opts ...func(*JobSkillMetaQuery)) *JobSkillQuery {
	query := (&JobSkillMetaClient{config: jsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jsq.withSkill = query
	return jsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		JobID uuid.UUID `json:"job_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.JobSkill.Query().
//		GroupBy(jobskill.FieldJobID).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (jsq *JobSkillQuery) GroupBy(field string, fields ...string) *JobSkillGroupBy {
	jsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &JobSkillGroupBy{build: jsq}
	grbuild.flds = &jsq.ctx.Fields
	grbuild.label = jobskill.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		JobID uuid.UUID `json:"job_id,omitempty"`
//	}
//
//	client.JobSkill.Query().
//		Select(jobskill.FieldJobID).
//		Scan(ctx, &v)
func (jsq *JobSkillQuery) Select(fields ...string) *JobSkillSelect {
	jsq.ctx.Fields = append(jsq.ctx.Fields, fields...)
	sbuild := &JobSkillSelect{JobSkillQuery: jsq}
	sbuild.label = jobskill.Label
	sbuild.flds, sbuild.scan = &jsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a JobSkillSelect configured with the given aggregations.
func (jsq *JobSkillQuery) Aggregate(fns ...AggregateFunc) *JobSkillSelect {
	return jsq.Select().Aggregate(fns...)
}

func (jsq *JobSkillQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range jsq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, jsq); err != nil {
				return err
			}
		}
	}
	for _, f := range jsq.ctx.Fields {
		if !jobskill.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if jsq.path != nil {
		prev, err := jsq.path(ctx)
		if err != nil {
			return err
		}
		jsq.sql = prev
	}
	return nil
}

func (jsq *JobSkillQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*JobSkill, error) {
	var (
		nodes       = []*JobSkill{}
		_spec       = jsq.querySpec()
		loadedTypes = [2]bool{
			jsq.withJob != nil,
			jsq.withSkill != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*JobSkill).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &JobSkill{config: jsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(jsq.modifiers) > 0 {
		_spec.Modifiers = jsq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, jsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := jsq.withJob; query != nil {
		if err := jsq.loadJob(ctx, query, nodes, nil,
			func(n *JobSkill, e *JobPosition) { n.Edges.Job = e }); err != nil {
			return nil, err
		}
	}
	if query := jsq.withSkill; query != nil {
		if err := jsq.loadSkill(ctx, query, nodes, nil,
			func(n *JobSkill, e *JobSkillMeta) { n.Edges.Skill = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (jsq *JobSkillQuery) loadJob(ctx context.Context, query *JobPositionQuery, nodes []*JobSkill, init func(*JobSkill), assign func(*JobSkill, *JobPosition)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*JobSkill)
	for i := range nodes {
		fk := nodes[i].JobID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(jobposition.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "job_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jsq *JobSkillQuery) loadSkill(ctx context.Context, query *JobSkillMetaQuery, nodes []*JobSkill, init func(*JobSkill), assign func(*JobSkill, *JobSkillMeta)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*JobSkill)
	for i := range nodes {
		fk := nodes[i].SkillID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(jobskillmeta.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "skill_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (jsq *JobSkillQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jsq.querySpec()
	if len(jsq.modifiers) > 0 {
		_spec.Modifiers = jsq.modifiers
	}
	_spec.Node.Columns = jsq.ctx.Fields
	if len(jsq.ctx.Fields) > 0 {
		_spec.Unique = jsq.ctx.Unique != nil && *jsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, jsq.driver, _spec)
}

func (jsq *JobSkillQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(jobskill.Table, jobskill.Columns, sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID))
	_spec.From = jsq.sql
	if unique := jsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if jsq.path != nil {
		_spec.Unique = true
	}
	if fields := jsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobskill.FieldID)
		for i := range fields {
			if fields[i] != jobskill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if jsq.withJob != nil {
			_spec.Node.AddColumnOnce(jobskill.FieldJobID)
		}
		if jsq.withSkill != nil {
			_spec.Node.AddColumnOnce(jobskill.FieldSkillID)
		}
	}
	if ps := jsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jsq *JobSkillQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(jsq.driver.Dialect())
	t1 := builder.Table(jobskill.Table)
	columns := jsq.ctx.Fields
	if len(columns) == 0 {
		columns = jobskill.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if jsq.sql != nil {
		selector = jsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if jsq.ctx.Unique != nil && *jsq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range jsq.modifiers {
		m(selector)
	}
	for _, p := range jsq.predicates {
		p(selector)
	}
	for _, p := range jsq.order {
		p(selector)
	}
	if offset := jsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (jsq *JobSkillQuery) ForUpdate(opts ...sql.LockOption) *JobSkillQuery {
	if jsq.driver.Dialect() == dialect.Postgres {
		jsq.Unique(false)
	}
	jsq.modifiers = append(jsq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return jsq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (jsq *JobSkillQuery) ForShare(opts ...sql.LockOption) *JobSkillQuery {
	if jsq.driver.Dialect() == dialect.Postgres {
		jsq.Unique(false)
	}
	jsq.modifiers = append(jsq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return jsq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (jsq *JobSkillQuery) Modify(modifiers ...func(s *sql.Selector)) *JobSkillSelect {
	jsq.modifiers = append(jsq.modifiers, modifiers...)
	return jsq.Select()
}

// JobSkillGroupBy is the group-by builder for JobSkill entities.
type JobSkillGroupBy struct {
	selector
	build *JobSkillQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jsgb *JobSkillGroupBy) Aggregate(fns ...AggregateFunc) *JobSkillGroupBy {
	jsgb.fns = append(jsgb.fns, fns...)
	return jsgb
}

// Scan applies the selector query and scans the result into the given value.
func (jsgb *JobSkillGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jsgb.build.ctx, ent.OpQueryGroupBy)
	if err := jsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobSkillQuery, *JobSkillGroupBy](ctx, jsgb.build, jsgb, jsgb.build.inters, v)
}

func (jsgb *JobSkillGroupBy) sqlScan(ctx context.Context, root *JobSkillQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(jsgb.fns))
	for _, fn := range jsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*jsgb.flds)+len(jsgb.fns))
		for _, f := range *jsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*jsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// JobSkillSelect is the builder for selecting fields of JobSkill entities.
type JobSkillSelect struct {
	*JobSkillQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (jss *JobSkillSelect) Aggregate(fns ...AggregateFunc) *JobSkillSelect {
	jss.fns = append(jss.fns, fns...)
	return jss
}

// Scan applies the selector query and scans the result into the given value.
func (jss *JobSkillSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jss.ctx, ent.OpQuerySelect)
	if err := jss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobSkillQuery, *JobSkillSelect](ctx, jss.JobSkillQuery, jss, jss.inters, v)
}

func (jss *JobSkillSelect) sqlScan(ctx context.Context, root *JobSkillQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(jss.fns))
	for _, fn := range jss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*jss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (jss *JobSkillSelect) Modify(modifiers ...func(s *sql.Selector)) *JobSkillSelect {
	jss.modifiers = append(jss.modifiers, modifiers...)
	return jss
}
