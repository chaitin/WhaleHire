// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/screeningtask"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/google/uuid"
)

// ScreeningTask is the model entity for the ScreeningTask schema.
type ScreeningTask struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// JobPositionID holds the value of the "job_position_id" field.
	JobPositionID uuid.UUID `json:"job_position_id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// pending/running/completed/failed
	Status string `json:"status,omitempty"`
	// 维度权重配置
	DimensionWeights map[string]interface{} `json:"dimension_weights,omitempty"`
	// LLM/Embedding配置
	LlmConfig map[string]interface{} `json:"llm_config,omitempty"`
	// 任务备注
	Notes string `json:"notes,omitempty"`
	// 任务内候选总数
	ResumeTotal int `json:"resume_total,omitempty"`
	// 已处理数
	ResumeProcessed int `json:"resume_processed,omitempty"`
	// 成功匹配数
	ResumeSucceeded int `json:"resume_succeeded,omitempty"`
	// 失败数
	ResumeFailed int `json:"resume_failed,omitempty"`
	// 智能匹配Agent版本号
	AgentVersion string `json:"agent_version,omitempty"`
	// 任务开始时间
	StartedAt time.Time `json:"started_at,omitempty"`
	// 任务完成时间
	FinishedAt time.Time `json:"finished_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScreeningTaskQuery when eager-loading is set.
	Edges        ScreeningTaskEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScreeningTaskEdges holds the relations/edges for other nodes in the graph.
type ScreeningTaskEdges struct {
	// JobPosition holds the value of the job_position edge.
	JobPosition *JobPosition `json:"job_position,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// TaskResumes holds the value of the task_resumes edge.
	TaskResumes []*ScreeningTaskResume `json:"task_resumes,omitempty"`
	// Results holds the value of the results edge.
	Results []*ScreeningResult `json:"results,omitempty"`
	// RunMetrics holds the value of the run_metrics edge.
	RunMetrics []*ScreeningRunMetric `json:"run_metrics,omitempty"`
	// NodeRuns holds the value of the node_runs edge.
	NodeRuns []*ScreeningNodeRun `json:"node_runs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// JobPositionOrErr returns the JobPosition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScreeningTaskEdges) JobPositionOrErr() (*JobPosition, error) {
	if e.JobPosition != nil {
		return e.JobPosition, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: jobposition.Label}
	}
	return nil, &NotLoadedError{edge: "job_position"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScreeningTaskEdges) CreatorOrErr() (*User, error) {
	if e.Creator != nil {
		return e.Creator, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// TaskResumesOrErr returns the TaskResumes value or an error if the edge
// was not loaded in eager-loading.
func (e ScreeningTaskEdges) TaskResumesOrErr() ([]*ScreeningTaskResume, error) {
	if e.loadedTypes[2] {
		return e.TaskResumes, nil
	}
	return nil, &NotLoadedError{edge: "task_resumes"}
}

// ResultsOrErr returns the Results value or an error if the edge
// was not loaded in eager-loading.
func (e ScreeningTaskEdges) ResultsOrErr() ([]*ScreeningResult, error) {
	if e.loadedTypes[3] {
		return e.Results, nil
	}
	return nil, &NotLoadedError{edge: "results"}
}

// RunMetricsOrErr returns the RunMetrics value or an error if the edge
// was not loaded in eager-loading.
func (e ScreeningTaskEdges) RunMetricsOrErr() ([]*ScreeningRunMetric, error) {
	if e.loadedTypes[4] {
		return e.RunMetrics, nil
	}
	return nil, &NotLoadedError{edge: "run_metrics"}
}

// NodeRunsOrErr returns the NodeRuns value or an error if the edge
// was not loaded in eager-loading.
func (e ScreeningTaskEdges) NodeRunsOrErr() ([]*ScreeningNodeRun, error) {
	if e.loadedTypes[5] {
		return e.NodeRuns, nil
	}
	return nil, &NotLoadedError{edge: "node_runs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScreeningTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case screeningtask.FieldDimensionWeights, screeningtask.FieldLlmConfig:
			values[i] = new([]byte)
		case screeningtask.FieldResumeTotal, screeningtask.FieldResumeProcessed, screeningtask.FieldResumeSucceeded, screeningtask.FieldResumeFailed:
			values[i] = new(sql.NullInt64)
		case screeningtask.FieldStatus, screeningtask.FieldNotes, screeningtask.FieldAgentVersion:
			values[i] = new(sql.NullString)
		case screeningtask.FieldDeletedAt, screeningtask.FieldStartedAt, screeningtask.FieldFinishedAt, screeningtask.FieldCreatedAt, screeningtask.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case screeningtask.FieldID, screeningtask.FieldJobPositionID, screeningtask.FieldCreatedBy:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScreeningTask fields.
func (st *ScreeningTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case screeningtask.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				st.ID = *value
			}
		case screeningtask.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				st.DeletedAt = value.Time
			}
		case screeningtask.FieldJobPositionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field job_position_id", values[i])
			} else if value != nil {
				st.JobPositionID = *value
			}
		case screeningtask.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				st.CreatedBy = *value
			}
		case screeningtask.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				st.Status = value.String
			}
		case screeningtask.FieldDimensionWeights:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dimension_weights", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &st.DimensionWeights); err != nil {
					return fmt.Errorf("unmarshal field dimension_weights: %w", err)
				}
			}
		case screeningtask.FieldLlmConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field llm_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &st.LlmConfig); err != nil {
					return fmt.Errorf("unmarshal field llm_config: %w", err)
				}
			}
		case screeningtask.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				st.Notes = value.String
			}
		case screeningtask.FieldResumeTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field resume_total", values[i])
			} else if value.Valid {
				st.ResumeTotal = int(value.Int64)
			}
		case screeningtask.FieldResumeProcessed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field resume_processed", values[i])
			} else if value.Valid {
				st.ResumeProcessed = int(value.Int64)
			}
		case screeningtask.FieldResumeSucceeded:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field resume_succeeded", values[i])
			} else if value.Valid {
				st.ResumeSucceeded = int(value.Int64)
			}
		case screeningtask.FieldResumeFailed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field resume_failed", values[i])
			} else if value.Valid {
				st.ResumeFailed = int(value.Int64)
			}
		case screeningtask.FieldAgentVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_version", values[i])
			} else if value.Valid {
				st.AgentVersion = value.String
			}
		case screeningtask.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				st.StartedAt = value.Time
			}
		case screeningtask.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				st.FinishedAt = value.Time
			}
		case screeningtask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				st.CreatedAt = value.Time
			}
		case screeningtask.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				st.UpdatedAt = value.Time
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScreeningTask.
// This includes values selected through modifiers, order, etc.
func (st *ScreeningTask) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// QueryJobPosition queries the "job_position" edge of the ScreeningTask entity.
func (st *ScreeningTask) QueryJobPosition() *JobPositionQuery {
	return NewScreeningTaskClient(st.config).QueryJobPosition(st)
}

// QueryCreator queries the "creator" edge of the ScreeningTask entity.
func (st *ScreeningTask) QueryCreator() *UserQuery {
	return NewScreeningTaskClient(st.config).QueryCreator(st)
}

// QueryTaskResumes queries the "task_resumes" edge of the ScreeningTask entity.
func (st *ScreeningTask) QueryTaskResumes() *ScreeningTaskResumeQuery {
	return NewScreeningTaskClient(st.config).QueryTaskResumes(st)
}

// QueryResults queries the "results" edge of the ScreeningTask entity.
func (st *ScreeningTask) QueryResults() *ScreeningResultQuery {
	return NewScreeningTaskClient(st.config).QueryResults(st)
}

// QueryRunMetrics queries the "run_metrics" edge of the ScreeningTask entity.
func (st *ScreeningTask) QueryRunMetrics() *ScreeningRunMetricQuery {
	return NewScreeningTaskClient(st.config).QueryRunMetrics(st)
}

// QueryNodeRuns queries the "node_runs" edge of the ScreeningTask entity.
func (st *ScreeningTask) QueryNodeRuns() *ScreeningNodeRunQuery {
	return NewScreeningTaskClient(st.config).QueryNodeRuns(st)
}

// Update returns a builder for updating this ScreeningTask.
// Note that you need to call ScreeningTask.Unwrap() before calling this method if this ScreeningTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *ScreeningTask) Update() *ScreeningTaskUpdateOne {
	return NewScreeningTaskClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the ScreeningTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *ScreeningTask) Unwrap() *ScreeningTask {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("db: ScreeningTask is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *ScreeningTask) String() string {
	var builder strings.Builder
	builder.WriteString("ScreeningTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(st.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("job_position_id=")
	builder.WriteString(fmt.Sprintf("%v", st.JobPositionID))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", st.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(st.Status)
	builder.WriteString(", ")
	builder.WriteString("dimension_weights=")
	builder.WriteString(fmt.Sprintf("%v", st.DimensionWeights))
	builder.WriteString(", ")
	builder.WriteString("llm_config=")
	builder.WriteString(fmt.Sprintf("%v", st.LlmConfig))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(st.Notes)
	builder.WriteString(", ")
	builder.WriteString("resume_total=")
	builder.WriteString(fmt.Sprintf("%v", st.ResumeTotal))
	builder.WriteString(", ")
	builder.WriteString("resume_processed=")
	builder.WriteString(fmt.Sprintf("%v", st.ResumeProcessed))
	builder.WriteString(", ")
	builder.WriteString("resume_succeeded=")
	builder.WriteString(fmt.Sprintf("%v", st.ResumeSucceeded))
	builder.WriteString(", ")
	builder.WriteString("resume_failed=")
	builder.WriteString(fmt.Sprintf("%v", st.ResumeFailed))
	builder.WriteString(", ")
	builder.WriteString("agent_version=")
	builder.WriteString(st.AgentVersion)
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(st.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("finished_at=")
	builder.WriteString(st.FinishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(st.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(st.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ScreeningTasks is a parsable slice of ScreeningTask.
type ScreeningTasks []*ScreeningTask
