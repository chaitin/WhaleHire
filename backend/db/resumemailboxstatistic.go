// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxsetting"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxstatistic"
	"github.com/google/uuid"
)

// ResumeMailboxStatistic is the model entity for the ResumeMailboxStatistic schema.
type ResumeMailboxStatistic struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 邮箱配置ID
	MailboxID uuid.UUID `json:"mailbox_id,omitempty"`
	// 统计日期(按日分区，零点对齐)
	Date time.Time `json:"date,omitempty"`
	// 当日成功同步邮件数
	SyncedEmails int `json:"synced_emails,omitempty"`
	// 成功解析入库的简历附件数量
	ParsedResumes int `json:"parsed_resumes,omitempty"`
	// 解析失败数量
	FailedResumes int `json:"failed_resumes,omitempty"`
	// 被去重或过滤的附件数量
	SkippedAttachments int `json:"skipped_attachments,omitempty"`
	// 最近一次同步耗时(毫秒)
	LastSyncDurationMs int `json:"last_sync_duration_ms,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResumeMailboxStatisticQuery when eager-loading is set.
	Edges        ResumeMailboxStatisticEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ResumeMailboxStatisticEdges holds the relations/edges for other nodes in the graph.
type ResumeMailboxStatisticEdges struct {
	// Mailbox holds the value of the mailbox edge.
	Mailbox *ResumeMailboxSetting `json:"mailbox,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MailboxOrErr returns the Mailbox value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResumeMailboxStatisticEdges) MailboxOrErr() (*ResumeMailboxSetting, error) {
	if e.Mailbox != nil {
		return e.Mailbox, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: resumemailboxsetting.Label}
	}
	return nil, &NotLoadedError{edge: "mailbox"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResumeMailboxStatistic) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resumemailboxstatistic.FieldSyncedEmails, resumemailboxstatistic.FieldParsedResumes, resumemailboxstatistic.FieldFailedResumes, resumemailboxstatistic.FieldSkippedAttachments, resumemailboxstatistic.FieldLastSyncDurationMs:
			values[i] = new(sql.NullInt64)
		case resumemailboxstatistic.FieldDeletedAt, resumemailboxstatistic.FieldDate, resumemailboxstatistic.FieldCreatedAt, resumemailboxstatistic.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case resumemailboxstatistic.FieldID, resumemailboxstatistic.FieldMailboxID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResumeMailboxStatistic fields.
func (rms *ResumeMailboxStatistic) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resumemailboxstatistic.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rms.ID = *value
			}
		case resumemailboxstatistic.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rms.DeletedAt = value.Time
			}
		case resumemailboxstatistic.FieldMailboxID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field mailbox_id", values[i])
			} else if value != nil {
				rms.MailboxID = *value
			}
		case resumemailboxstatistic.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				rms.Date = value.Time
			}
		case resumemailboxstatistic.FieldSyncedEmails:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field synced_emails", values[i])
			} else if value.Valid {
				rms.SyncedEmails = int(value.Int64)
			}
		case resumemailboxstatistic.FieldParsedResumes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parsed_resumes", values[i])
			} else if value.Valid {
				rms.ParsedResumes = int(value.Int64)
			}
		case resumemailboxstatistic.FieldFailedResumes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field failed_resumes", values[i])
			} else if value.Valid {
				rms.FailedResumes = int(value.Int64)
			}
		case resumemailboxstatistic.FieldSkippedAttachments:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field skipped_attachments", values[i])
			} else if value.Valid {
				rms.SkippedAttachments = int(value.Int64)
			}
		case resumemailboxstatistic.FieldLastSyncDurationMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_sync_duration_ms", values[i])
			} else if value.Valid {
				rms.LastSyncDurationMs = int(value.Int64)
			}
		case resumemailboxstatistic.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rms.CreatedAt = value.Time
			}
		case resumemailboxstatistic.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rms.UpdatedAt = value.Time
			}
		default:
			rms.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ResumeMailboxStatistic.
// This includes values selected through modifiers, order, etc.
func (rms *ResumeMailboxStatistic) Value(name string) (ent.Value, error) {
	return rms.selectValues.Get(name)
}

// QueryMailbox queries the "mailbox" edge of the ResumeMailboxStatistic entity.
func (rms *ResumeMailboxStatistic) QueryMailbox() *ResumeMailboxSettingQuery {
	return NewResumeMailboxStatisticClient(rms.config).QueryMailbox(rms)
}

// Update returns a builder for updating this ResumeMailboxStatistic.
// Note that you need to call ResumeMailboxStatistic.Unwrap() before calling this method if this ResumeMailboxStatistic
// was returned from a transaction, and the transaction was committed or rolled back.
func (rms *ResumeMailboxStatistic) Update() *ResumeMailboxStatisticUpdateOne {
	return NewResumeMailboxStatisticClient(rms.config).UpdateOne(rms)
}

// Unwrap unwraps the ResumeMailboxStatistic entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rms *ResumeMailboxStatistic) Unwrap() *ResumeMailboxStatistic {
	_tx, ok := rms.config.driver.(*txDriver)
	if !ok {
		panic("db: ResumeMailboxStatistic is not a transactional entity")
	}
	rms.config.driver = _tx.drv
	return rms
}

// String implements the fmt.Stringer.
func (rms *ResumeMailboxStatistic) String() string {
	var builder strings.Builder
	builder.WriteString("ResumeMailboxStatistic(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rms.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(rms.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mailbox_id=")
	builder.WriteString(fmt.Sprintf("%v", rms.MailboxID))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(rms.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("synced_emails=")
	builder.WriteString(fmt.Sprintf("%v", rms.SyncedEmails))
	builder.WriteString(", ")
	builder.WriteString("parsed_resumes=")
	builder.WriteString(fmt.Sprintf("%v", rms.ParsedResumes))
	builder.WriteString(", ")
	builder.WriteString("failed_resumes=")
	builder.WriteString(fmt.Sprintf("%v", rms.FailedResumes))
	builder.WriteString(", ")
	builder.WriteString("skipped_attachments=")
	builder.WriteString(fmt.Sprintf("%v", rms.SkippedAttachments))
	builder.WriteString(", ")
	builder.WriteString("last_sync_duration_ms=")
	builder.WriteString(fmt.Sprintf("%v", rms.LastSyncDurationMs))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rms.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rms.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ResumeMailboxStatistics is a parsable slice of ResumeMailboxStatistic.
type ResumeMailboxStatistics []*ResumeMailboxStatistic
