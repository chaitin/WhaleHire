// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxcursor"
)

// ResumeMailboxCursorDelete is the builder for deleting a ResumeMailboxCursor entity.
type ResumeMailboxCursorDelete struct {
	config
	hooks    []Hook
	mutation *ResumeMailboxCursorMutation
}

// Where appends a list predicates to the ResumeMailboxCursorDelete builder.
func (rmcd *ResumeMailboxCursorDelete) Where(ps ...predicate.ResumeMailboxCursor) *ResumeMailboxCursorDelete {
	rmcd.mutation.Where(ps...)
	return rmcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rmcd *ResumeMailboxCursorDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rmcd.sqlExec, rmcd.mutation, rmcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rmcd *ResumeMailboxCursorDelete) ExecX(ctx context.Context) int {
	n, err := rmcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rmcd *ResumeMailboxCursorDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(resumemailboxcursor.Table, sqlgraph.NewFieldSpec(resumemailboxcursor.FieldID, field.TypeUUID))
	if ps := rmcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rmcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rmcd.mutation.done = true
	return affected, err
}

// ResumeMailboxCursorDeleteOne is the builder for deleting a single ResumeMailboxCursor entity.
type ResumeMailboxCursorDeleteOne struct {
	rmcd *ResumeMailboxCursorDelete
}

// Where appends a list predicates to the ResumeMailboxCursorDelete builder.
func (rmcdo *ResumeMailboxCursorDeleteOne) Where(ps ...predicate.ResumeMailboxCursor) *ResumeMailboxCursorDeleteOne {
	rmcdo.rmcd.mutation.Where(ps...)
	return rmcdo
}

// Exec executes the deletion query.
func (rmcdo *ResumeMailboxCursorDeleteOne) Exec(ctx context.Context) error {
	n, err := rmcdo.rmcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{resumemailboxcursor.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rmcdo *ResumeMailboxCursorDeleteOne) ExecX(ctx context.Context) {
	if err := rmcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
