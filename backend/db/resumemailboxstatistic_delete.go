// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxstatistic"
)

// ResumeMailboxStatisticDelete is the builder for deleting a ResumeMailboxStatistic entity.
type ResumeMailboxStatisticDelete struct {
	config
	hooks    []Hook
	mutation *ResumeMailboxStatisticMutation
}

// Where appends a list predicates to the ResumeMailboxStatisticDelete builder.
func (rmsd *ResumeMailboxStatisticDelete) Where(ps ...predicate.ResumeMailboxStatistic) *ResumeMailboxStatisticDelete {
	rmsd.mutation.Where(ps...)
	return rmsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rmsd *ResumeMailboxStatisticDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rmsd.sqlExec, rmsd.mutation, rmsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rmsd *ResumeMailboxStatisticDelete) ExecX(ctx context.Context) int {
	n, err := rmsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rmsd *ResumeMailboxStatisticDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(resumemailboxstatistic.Table, sqlgraph.NewFieldSpec(resumemailboxstatistic.FieldID, field.TypeUUID))
	if ps := rmsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rmsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rmsd.mutation.done = true
	return affected, err
}

// ResumeMailboxStatisticDeleteOne is the builder for deleting a single ResumeMailboxStatistic entity.
type ResumeMailboxStatisticDeleteOne struct {
	rmsd *ResumeMailboxStatisticDelete
}

// Where appends a list predicates to the ResumeMailboxStatisticDelete builder.
func (rmsdo *ResumeMailboxStatisticDeleteOne) Where(ps ...predicate.ResumeMailboxStatistic) *ResumeMailboxStatisticDeleteOne {
	rmsdo.rmsd.mutation.Where(ps...)
	return rmsdo
}

// Exec executes the deletion query.
func (rmsdo *ResumeMailboxStatisticDeleteOne) Exec(ctx context.Context) error {
	n, err := rmsdo.rmsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{resumemailboxstatistic.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rmsdo *ResumeMailboxStatisticDeleteOne) ExecX(ctx context.Context) {
	if err := rmsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
