// Code generated by ent, DO NOT EDIT.

package jobeducationrequirement

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldEQ(FieldDeletedAt, v))
}

// JobID applies equality check predicate on the "job_id" field. It's identical to JobIDEQ.
func JobID(v uuid.UUID) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldEQ(FieldJobID, v))
}

// EducationType applies equality check predicate on the "education_type" field. It's identical to EducationTypeEQ.
func EducationType(v consts.JobEducationType) predicate.JobEducationRequirement {
	vc := string(v)
	return predicate.JobEducationRequirement(sql.FieldEQ(FieldEducationType, vc))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldNotNull(FieldDeletedAt))
}

// JobIDEQ applies the EQ predicate on the "job_id" field.
func JobIDEQ(v uuid.UUID) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldEQ(FieldJobID, v))
}

// JobIDNEQ applies the NEQ predicate on the "job_id" field.
func JobIDNEQ(v uuid.UUID) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldNEQ(FieldJobID, v))
}

// JobIDIn applies the In predicate on the "job_id" field.
func JobIDIn(vs ...uuid.UUID) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldIn(FieldJobID, vs...))
}

// JobIDNotIn applies the NotIn predicate on the "job_id" field.
func JobIDNotIn(vs ...uuid.UUID) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldNotIn(FieldJobID, vs...))
}

// EducationTypeEQ applies the EQ predicate on the "education_type" field.
func EducationTypeEQ(v consts.JobEducationType) predicate.JobEducationRequirement {
	vc := string(v)
	return predicate.JobEducationRequirement(sql.FieldEQ(FieldEducationType, vc))
}

// EducationTypeNEQ applies the NEQ predicate on the "education_type" field.
func EducationTypeNEQ(v consts.JobEducationType) predicate.JobEducationRequirement {
	vc := string(v)
	return predicate.JobEducationRequirement(sql.FieldNEQ(FieldEducationType, vc))
}

// EducationTypeIn applies the In predicate on the "education_type" field.
func EducationTypeIn(vs ...consts.JobEducationType) predicate.JobEducationRequirement {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.JobEducationRequirement(sql.FieldIn(FieldEducationType, v...))
}

// EducationTypeNotIn applies the NotIn predicate on the "education_type" field.
func EducationTypeNotIn(vs ...consts.JobEducationType) predicate.JobEducationRequirement {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.JobEducationRequirement(sql.FieldNotIn(FieldEducationType, v...))
}

// EducationTypeGT applies the GT predicate on the "education_type" field.
func EducationTypeGT(v consts.JobEducationType) predicate.JobEducationRequirement {
	vc := string(v)
	return predicate.JobEducationRequirement(sql.FieldGT(FieldEducationType, vc))
}

// EducationTypeGTE applies the GTE predicate on the "education_type" field.
func EducationTypeGTE(v consts.JobEducationType) predicate.JobEducationRequirement {
	vc := string(v)
	return predicate.JobEducationRequirement(sql.FieldGTE(FieldEducationType, vc))
}

// EducationTypeLT applies the LT predicate on the "education_type" field.
func EducationTypeLT(v consts.JobEducationType) predicate.JobEducationRequirement {
	vc := string(v)
	return predicate.JobEducationRequirement(sql.FieldLT(FieldEducationType, vc))
}

// EducationTypeLTE applies the LTE predicate on the "education_type" field.
func EducationTypeLTE(v consts.JobEducationType) predicate.JobEducationRequirement {
	vc := string(v)
	return predicate.JobEducationRequirement(sql.FieldLTE(FieldEducationType, vc))
}

// EducationTypeContains applies the Contains predicate on the "education_type" field.
func EducationTypeContains(v consts.JobEducationType) predicate.JobEducationRequirement {
	vc := string(v)
	return predicate.JobEducationRequirement(sql.FieldContains(FieldEducationType, vc))
}

// EducationTypeHasPrefix applies the HasPrefix predicate on the "education_type" field.
func EducationTypeHasPrefix(v consts.JobEducationType) predicate.JobEducationRequirement {
	vc := string(v)
	return predicate.JobEducationRequirement(sql.FieldHasPrefix(FieldEducationType, vc))
}

// EducationTypeHasSuffix applies the HasSuffix predicate on the "education_type" field.
func EducationTypeHasSuffix(v consts.JobEducationType) predicate.JobEducationRequirement {
	vc := string(v)
	return predicate.JobEducationRequirement(sql.FieldHasSuffix(FieldEducationType, vc))
}

// EducationTypeIsNil applies the IsNil predicate on the "education_type" field.
func EducationTypeIsNil() predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldIsNull(FieldEducationType))
}

// EducationTypeNotNil applies the NotNil predicate on the "education_type" field.
func EducationTypeNotNil() predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldNotNull(FieldEducationType))
}

// EducationTypeEqualFold applies the EqualFold predicate on the "education_type" field.
func EducationTypeEqualFold(v consts.JobEducationType) predicate.JobEducationRequirement {
	vc := string(v)
	return predicate.JobEducationRequirement(sql.FieldEqualFold(FieldEducationType, vc))
}

// EducationTypeContainsFold applies the ContainsFold predicate on the "education_type" field.
func EducationTypeContainsFold(v consts.JobEducationType) predicate.JobEducationRequirement {
	vc := string(v)
	return predicate.JobEducationRequirement(sql.FieldContainsFold(FieldEducationType, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasJob applies the HasEdge predicate on the "job" edge.
func HasJob() predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobWith applies the HasEdge predicate on the "job" edge with a given conditions (other predicates).
func HasJobWith(preds ...predicate.JobPosition) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(func(s *sql.Selector) {
		step := newJobStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JobEducationRequirement) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JobEducationRequirement) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JobEducationRequirement) predicate.JobEducationRequirement {
	return predicate.JobEducationRequirement(sql.NotPredicates(p))
}
