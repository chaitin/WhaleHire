// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/auditlog"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// AuditLogUpdate is the builder for updating AuditLog entities.
type AuditLogUpdate struct {
	config
	hooks     []Hook
	mutation  *AuditLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AuditLogUpdate builder.
func (alu *AuditLogUpdate) Where(ps ...predicate.AuditLog) *AuditLogUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetDeletedAt sets the "deleted_at" field.
func (alu *AuditLogUpdate) SetDeletedAt(t time.Time) *AuditLogUpdate {
	alu.mutation.SetDeletedAt(t)
	return alu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableDeletedAt(t *time.Time) *AuditLogUpdate {
	if t != nil {
		alu.SetDeletedAt(*t)
	}
	return alu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (alu *AuditLogUpdate) ClearDeletedAt() *AuditLogUpdate {
	alu.mutation.ClearDeletedAt()
	return alu
}

// SetOperatorType sets the "operator_type" field.
func (alu *AuditLogUpdate) SetOperatorType(ct consts.OperatorType) *AuditLogUpdate {
	alu.mutation.SetOperatorType(ct)
	return alu
}

// SetNillableOperatorType sets the "operator_type" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableOperatorType(ct *consts.OperatorType) *AuditLogUpdate {
	if ct != nil {
		alu.SetOperatorType(*ct)
	}
	return alu
}

// SetOperatorID sets the "operator_id" field.
func (alu *AuditLogUpdate) SetOperatorID(u uuid.UUID) *AuditLogUpdate {
	alu.mutation.SetOperatorID(u)
	return alu
}

// SetNillableOperatorID sets the "operator_id" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableOperatorID(u *uuid.UUID) *AuditLogUpdate {
	if u != nil {
		alu.SetOperatorID(*u)
	}
	return alu
}

// ClearOperatorID clears the value of the "operator_id" field.
func (alu *AuditLogUpdate) ClearOperatorID() *AuditLogUpdate {
	alu.mutation.ClearOperatorID()
	return alu
}

// SetOperatorName sets the "operator_name" field.
func (alu *AuditLogUpdate) SetOperatorName(s string) *AuditLogUpdate {
	alu.mutation.SetOperatorName(s)
	return alu
}

// SetNillableOperatorName sets the "operator_name" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableOperatorName(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetOperatorName(*s)
	}
	return alu
}

// ClearOperatorName clears the value of the "operator_name" field.
func (alu *AuditLogUpdate) ClearOperatorName() *AuditLogUpdate {
	alu.mutation.ClearOperatorName()
	return alu
}

// SetOperationType sets the "operation_type" field.
func (alu *AuditLogUpdate) SetOperationType(ct consts.OperationType) *AuditLogUpdate {
	alu.mutation.SetOperationType(ct)
	return alu
}

// SetNillableOperationType sets the "operation_type" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableOperationType(ct *consts.OperationType) *AuditLogUpdate {
	if ct != nil {
		alu.SetOperationType(*ct)
	}
	return alu
}

// SetResourceType sets the "resource_type" field.
func (alu *AuditLogUpdate) SetResourceType(ct consts.ResourceType) *AuditLogUpdate {
	alu.mutation.SetResourceType(ct)
	return alu
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableResourceType(ct *consts.ResourceType) *AuditLogUpdate {
	if ct != nil {
		alu.SetResourceType(*ct)
	}
	return alu
}

// SetResourceID sets the "resource_id" field.
func (alu *AuditLogUpdate) SetResourceID(s string) *AuditLogUpdate {
	alu.mutation.SetResourceID(s)
	return alu
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableResourceID(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetResourceID(*s)
	}
	return alu
}

// ClearResourceID clears the value of the "resource_id" field.
func (alu *AuditLogUpdate) ClearResourceID() *AuditLogUpdate {
	alu.mutation.ClearResourceID()
	return alu
}

// SetResourceName sets the "resource_name" field.
func (alu *AuditLogUpdate) SetResourceName(s string) *AuditLogUpdate {
	alu.mutation.SetResourceName(s)
	return alu
}

// SetNillableResourceName sets the "resource_name" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableResourceName(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetResourceName(*s)
	}
	return alu
}

// ClearResourceName clears the value of the "resource_name" field.
func (alu *AuditLogUpdate) ClearResourceName() *AuditLogUpdate {
	alu.mutation.ClearResourceName()
	return alu
}

// SetMethod sets the "method" field.
func (alu *AuditLogUpdate) SetMethod(s string) *AuditLogUpdate {
	alu.mutation.SetMethod(s)
	return alu
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableMethod(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetMethod(*s)
	}
	return alu
}

// SetPath sets the "path" field.
func (alu *AuditLogUpdate) SetPath(s string) *AuditLogUpdate {
	alu.mutation.SetPath(s)
	return alu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillablePath(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetPath(*s)
	}
	return alu
}

// SetQueryParams sets the "query_params" field.
func (alu *AuditLogUpdate) SetQueryParams(s string) *AuditLogUpdate {
	alu.mutation.SetQueryParams(s)
	return alu
}

// SetNillableQueryParams sets the "query_params" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableQueryParams(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetQueryParams(*s)
	}
	return alu
}

// ClearQueryParams clears the value of the "query_params" field.
func (alu *AuditLogUpdate) ClearQueryParams() *AuditLogUpdate {
	alu.mutation.ClearQueryParams()
	return alu
}

// SetRequestBody sets the "request_body" field.
func (alu *AuditLogUpdate) SetRequestBody(s string) *AuditLogUpdate {
	alu.mutation.SetRequestBody(s)
	return alu
}

// SetNillableRequestBody sets the "request_body" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableRequestBody(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetRequestBody(*s)
	}
	return alu
}

// ClearRequestBody clears the value of the "request_body" field.
func (alu *AuditLogUpdate) ClearRequestBody() *AuditLogUpdate {
	alu.mutation.ClearRequestBody()
	return alu
}

// SetUserAgent sets the "user_agent" field.
func (alu *AuditLogUpdate) SetUserAgent(s string) *AuditLogUpdate {
	alu.mutation.SetUserAgent(s)
	return alu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableUserAgent(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetUserAgent(*s)
	}
	return alu
}

// ClearUserAgent clears the value of the "user_agent" field.
func (alu *AuditLogUpdate) ClearUserAgent() *AuditLogUpdate {
	alu.mutation.ClearUserAgent()
	return alu
}

// SetStatusCode sets the "status_code" field.
func (alu *AuditLogUpdate) SetStatusCode(i int) *AuditLogUpdate {
	alu.mutation.ResetStatusCode()
	alu.mutation.SetStatusCode(i)
	return alu
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableStatusCode(i *int) *AuditLogUpdate {
	if i != nil {
		alu.SetStatusCode(*i)
	}
	return alu
}

// AddStatusCode adds i to the "status_code" field.
func (alu *AuditLogUpdate) AddStatusCode(i int) *AuditLogUpdate {
	alu.mutation.AddStatusCode(i)
	return alu
}

// SetStatus sets the "status" field.
func (alu *AuditLogUpdate) SetStatus(cls consts.AuditLogStatus) *AuditLogUpdate {
	alu.mutation.SetStatus(cls)
	return alu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableStatus(cls *consts.AuditLogStatus) *AuditLogUpdate {
	if cls != nil {
		alu.SetStatus(*cls)
	}
	return alu
}

// SetResponseBody sets the "response_body" field.
func (alu *AuditLogUpdate) SetResponseBody(s string) *AuditLogUpdate {
	alu.mutation.SetResponseBody(s)
	return alu
}

// SetNillableResponseBody sets the "response_body" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableResponseBody(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetResponseBody(*s)
	}
	return alu
}

// ClearResponseBody clears the value of the "response_body" field.
func (alu *AuditLogUpdate) ClearResponseBody() *AuditLogUpdate {
	alu.mutation.ClearResponseBody()
	return alu
}

// SetErrorMessage sets the "error_message" field.
func (alu *AuditLogUpdate) SetErrorMessage(s string) *AuditLogUpdate {
	alu.mutation.SetErrorMessage(s)
	return alu
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableErrorMessage(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetErrorMessage(*s)
	}
	return alu
}

// ClearErrorMessage clears the value of the "error_message" field.
func (alu *AuditLogUpdate) ClearErrorMessage() *AuditLogUpdate {
	alu.mutation.ClearErrorMessage()
	return alu
}

// SetIP sets the "ip" field.
func (alu *AuditLogUpdate) SetIP(s string) *AuditLogUpdate {
	alu.mutation.SetIP(s)
	return alu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableIP(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetIP(*s)
	}
	return alu
}

// SetCountry sets the "country" field.
func (alu *AuditLogUpdate) SetCountry(s string) *AuditLogUpdate {
	alu.mutation.SetCountry(s)
	return alu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableCountry(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetCountry(*s)
	}
	return alu
}

// ClearCountry clears the value of the "country" field.
func (alu *AuditLogUpdate) ClearCountry() *AuditLogUpdate {
	alu.mutation.ClearCountry()
	return alu
}

// SetProvince sets the "province" field.
func (alu *AuditLogUpdate) SetProvince(s string) *AuditLogUpdate {
	alu.mutation.SetProvince(s)
	return alu
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableProvince(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetProvince(*s)
	}
	return alu
}

// ClearProvince clears the value of the "province" field.
func (alu *AuditLogUpdate) ClearProvince() *AuditLogUpdate {
	alu.mutation.ClearProvince()
	return alu
}

// SetCity sets the "city" field.
func (alu *AuditLogUpdate) SetCity(s string) *AuditLogUpdate {
	alu.mutation.SetCity(s)
	return alu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableCity(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetCity(*s)
	}
	return alu
}

// ClearCity clears the value of the "city" field.
func (alu *AuditLogUpdate) ClearCity() *AuditLogUpdate {
	alu.mutation.ClearCity()
	return alu
}

// SetIsp sets the "isp" field.
func (alu *AuditLogUpdate) SetIsp(s string) *AuditLogUpdate {
	alu.mutation.SetIsp(s)
	return alu
}

// SetNillableIsp sets the "isp" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableIsp(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetIsp(*s)
	}
	return alu
}

// ClearIsp clears the value of the "isp" field.
func (alu *AuditLogUpdate) ClearIsp() *AuditLogUpdate {
	alu.mutation.ClearIsp()
	return alu
}

// SetSessionID sets the "session_id" field.
func (alu *AuditLogUpdate) SetSessionID(s string) *AuditLogUpdate {
	alu.mutation.SetSessionID(s)
	return alu
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableSessionID(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetSessionID(*s)
	}
	return alu
}

// ClearSessionID clears the value of the "session_id" field.
func (alu *AuditLogUpdate) ClearSessionID() *AuditLogUpdate {
	alu.mutation.ClearSessionID()
	return alu
}

// SetTraceID sets the "trace_id" field.
func (alu *AuditLogUpdate) SetTraceID(s string) *AuditLogUpdate {
	alu.mutation.SetTraceID(s)
	return alu
}

// SetNillableTraceID sets the "trace_id" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableTraceID(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetTraceID(*s)
	}
	return alu
}

// ClearTraceID clears the value of the "trace_id" field.
func (alu *AuditLogUpdate) ClearTraceID() *AuditLogUpdate {
	alu.mutation.ClearTraceID()
	return alu
}

// SetBusinessData sets the "business_data" field.
func (alu *AuditLogUpdate) SetBusinessData(s string) *AuditLogUpdate {
	alu.mutation.SetBusinessData(s)
	return alu
}

// SetNillableBusinessData sets the "business_data" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableBusinessData(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetBusinessData(*s)
	}
	return alu
}

// ClearBusinessData clears the value of the "business_data" field.
func (alu *AuditLogUpdate) ClearBusinessData() *AuditLogUpdate {
	alu.mutation.ClearBusinessData()
	return alu
}

// SetChanges sets the "changes" field.
func (alu *AuditLogUpdate) SetChanges(s string) *AuditLogUpdate {
	alu.mutation.SetChanges(s)
	return alu
}

// SetNillableChanges sets the "changes" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableChanges(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetChanges(*s)
	}
	return alu
}

// ClearChanges clears the value of the "changes" field.
func (alu *AuditLogUpdate) ClearChanges() *AuditLogUpdate {
	alu.mutation.ClearChanges()
	return alu
}

// SetDescription sets the "description" field.
func (alu *AuditLogUpdate) SetDescription(s string) *AuditLogUpdate {
	alu.mutation.SetDescription(s)
	return alu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableDescription(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetDescription(*s)
	}
	return alu
}

// ClearDescription clears the value of the "description" field.
func (alu *AuditLogUpdate) ClearDescription() *AuditLogUpdate {
	alu.mutation.ClearDescription()
	return alu
}

// SetCreatedAt sets the "created_at" field.
func (alu *AuditLogUpdate) SetCreatedAt(t time.Time) *AuditLogUpdate {
	alu.mutation.SetCreatedAt(t)
	return alu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableCreatedAt(t *time.Time) *AuditLogUpdate {
	if t != nil {
		alu.SetCreatedAt(*t)
	}
	return alu
}

// SetUpdatedAt sets the "updated_at" field.
func (alu *AuditLogUpdate) SetUpdatedAt(t time.Time) *AuditLogUpdate {
	alu.mutation.SetUpdatedAt(t)
	return alu
}

// SetDurationMs sets the "duration_ms" field.
func (alu *AuditLogUpdate) SetDurationMs(i int64) *AuditLogUpdate {
	alu.mutation.ResetDurationMs()
	alu.mutation.SetDurationMs(i)
	return alu
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableDurationMs(i *int64) *AuditLogUpdate {
	if i != nil {
		alu.SetDurationMs(*i)
	}
	return alu
}

// AddDurationMs adds i to the "duration_ms" field.
func (alu *AuditLogUpdate) AddDurationMs(i int64) *AuditLogUpdate {
	alu.mutation.AddDurationMs(i)
	return alu
}

// ClearDurationMs clears the value of the "duration_ms" field.
func (alu *AuditLogUpdate) ClearDurationMs() *AuditLogUpdate {
	alu.mutation.ClearDurationMs()
	return alu
}

// Mutation returns the AuditLogMutation object of the builder.
func (alu *AuditLogUpdate) Mutation() *AuditLogMutation {
	return alu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *AuditLogUpdate) Save(ctx context.Context) (int, error) {
	if err := alu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, alu.sqlSave, alu.mutation, alu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (alu *AuditLogUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *AuditLogUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *AuditLogUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alu *AuditLogUpdate) defaults() error {
	if _, ok := alu.mutation.UpdatedAt(); !ok {
		if auditlog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized auditlog.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := auditlog.UpdateDefaultUpdatedAt()
		alu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (alu *AuditLogUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuditLogUpdate {
	alu.modifiers = append(alu.modifiers, modifiers...)
	return alu
}

func (alu *AuditLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(auditlog.Table, auditlog.Columns, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeUUID))
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.DeletedAt(); ok {
		_spec.SetField(auditlog.FieldDeletedAt, field.TypeTime, value)
	}
	if alu.mutation.DeletedAtCleared() {
		_spec.ClearField(auditlog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := alu.mutation.OperatorType(); ok {
		_spec.SetField(auditlog.FieldOperatorType, field.TypeString, value)
	}
	if value, ok := alu.mutation.OperatorID(); ok {
		_spec.SetField(auditlog.FieldOperatorID, field.TypeUUID, value)
	}
	if alu.mutation.OperatorIDCleared() {
		_spec.ClearField(auditlog.FieldOperatorID, field.TypeUUID)
	}
	if value, ok := alu.mutation.OperatorName(); ok {
		_spec.SetField(auditlog.FieldOperatorName, field.TypeString, value)
	}
	if alu.mutation.OperatorNameCleared() {
		_spec.ClearField(auditlog.FieldOperatorName, field.TypeString)
	}
	if value, ok := alu.mutation.OperationType(); ok {
		_spec.SetField(auditlog.FieldOperationType, field.TypeString, value)
	}
	if value, ok := alu.mutation.ResourceType(); ok {
		_spec.SetField(auditlog.FieldResourceType, field.TypeString, value)
	}
	if value, ok := alu.mutation.ResourceID(); ok {
		_spec.SetField(auditlog.FieldResourceID, field.TypeString, value)
	}
	if alu.mutation.ResourceIDCleared() {
		_spec.ClearField(auditlog.FieldResourceID, field.TypeString)
	}
	if value, ok := alu.mutation.ResourceName(); ok {
		_spec.SetField(auditlog.FieldResourceName, field.TypeString, value)
	}
	if alu.mutation.ResourceNameCleared() {
		_spec.ClearField(auditlog.FieldResourceName, field.TypeString)
	}
	if value, ok := alu.mutation.Method(); ok {
		_spec.SetField(auditlog.FieldMethod, field.TypeString, value)
	}
	if value, ok := alu.mutation.Path(); ok {
		_spec.SetField(auditlog.FieldPath, field.TypeString, value)
	}
	if value, ok := alu.mutation.QueryParams(); ok {
		_spec.SetField(auditlog.FieldQueryParams, field.TypeString, value)
	}
	if alu.mutation.QueryParamsCleared() {
		_spec.ClearField(auditlog.FieldQueryParams, field.TypeString)
	}
	if value, ok := alu.mutation.RequestBody(); ok {
		_spec.SetField(auditlog.FieldRequestBody, field.TypeString, value)
	}
	if alu.mutation.RequestBodyCleared() {
		_spec.ClearField(auditlog.FieldRequestBody, field.TypeString)
	}
	if value, ok := alu.mutation.UserAgent(); ok {
		_spec.SetField(auditlog.FieldUserAgent, field.TypeString, value)
	}
	if alu.mutation.UserAgentCleared() {
		_spec.ClearField(auditlog.FieldUserAgent, field.TypeString)
	}
	if value, ok := alu.mutation.StatusCode(); ok {
		_spec.SetField(auditlog.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := alu.mutation.AddedStatusCode(); ok {
		_spec.AddField(auditlog.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := alu.mutation.Status(); ok {
		_spec.SetField(auditlog.FieldStatus, field.TypeString, value)
	}
	if value, ok := alu.mutation.ResponseBody(); ok {
		_spec.SetField(auditlog.FieldResponseBody, field.TypeString, value)
	}
	if alu.mutation.ResponseBodyCleared() {
		_spec.ClearField(auditlog.FieldResponseBody, field.TypeString)
	}
	if value, ok := alu.mutation.ErrorMessage(); ok {
		_spec.SetField(auditlog.FieldErrorMessage, field.TypeString, value)
	}
	if alu.mutation.ErrorMessageCleared() {
		_spec.ClearField(auditlog.FieldErrorMessage, field.TypeString)
	}
	if value, ok := alu.mutation.IP(); ok {
		_spec.SetField(auditlog.FieldIP, field.TypeString, value)
	}
	if value, ok := alu.mutation.Country(); ok {
		_spec.SetField(auditlog.FieldCountry, field.TypeString, value)
	}
	if alu.mutation.CountryCleared() {
		_spec.ClearField(auditlog.FieldCountry, field.TypeString)
	}
	if value, ok := alu.mutation.Province(); ok {
		_spec.SetField(auditlog.FieldProvince, field.TypeString, value)
	}
	if alu.mutation.ProvinceCleared() {
		_spec.ClearField(auditlog.FieldProvince, field.TypeString)
	}
	if value, ok := alu.mutation.City(); ok {
		_spec.SetField(auditlog.FieldCity, field.TypeString, value)
	}
	if alu.mutation.CityCleared() {
		_spec.ClearField(auditlog.FieldCity, field.TypeString)
	}
	if value, ok := alu.mutation.Isp(); ok {
		_spec.SetField(auditlog.FieldIsp, field.TypeString, value)
	}
	if alu.mutation.IspCleared() {
		_spec.ClearField(auditlog.FieldIsp, field.TypeString)
	}
	if value, ok := alu.mutation.SessionID(); ok {
		_spec.SetField(auditlog.FieldSessionID, field.TypeString, value)
	}
	if alu.mutation.SessionIDCleared() {
		_spec.ClearField(auditlog.FieldSessionID, field.TypeString)
	}
	if value, ok := alu.mutation.TraceID(); ok {
		_spec.SetField(auditlog.FieldTraceID, field.TypeString, value)
	}
	if alu.mutation.TraceIDCleared() {
		_spec.ClearField(auditlog.FieldTraceID, field.TypeString)
	}
	if value, ok := alu.mutation.BusinessData(); ok {
		_spec.SetField(auditlog.FieldBusinessData, field.TypeString, value)
	}
	if alu.mutation.BusinessDataCleared() {
		_spec.ClearField(auditlog.FieldBusinessData, field.TypeString)
	}
	if value, ok := alu.mutation.Changes(); ok {
		_spec.SetField(auditlog.FieldChanges, field.TypeString, value)
	}
	if alu.mutation.ChangesCleared() {
		_spec.ClearField(auditlog.FieldChanges, field.TypeString)
	}
	if value, ok := alu.mutation.Description(); ok {
		_spec.SetField(auditlog.FieldDescription, field.TypeString, value)
	}
	if alu.mutation.DescriptionCleared() {
		_spec.ClearField(auditlog.FieldDescription, field.TypeString)
	}
	if value, ok := alu.mutation.CreatedAt(); ok {
		_spec.SetField(auditlog.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := alu.mutation.UpdatedAt(); ok {
		_spec.SetField(auditlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := alu.mutation.DurationMs(); ok {
		_spec.SetField(auditlog.FieldDurationMs, field.TypeInt64, value)
	}
	if value, ok := alu.mutation.AddedDurationMs(); ok {
		_spec.AddField(auditlog.FieldDurationMs, field.TypeInt64, value)
	}
	if alu.mutation.DurationMsCleared() {
		_spec.ClearField(auditlog.FieldDurationMs, field.TypeInt64)
	}
	_spec.AddModifiers(alu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	alu.mutation.done = true
	return n, nil
}

// AuditLogUpdateOne is the builder for updating a single AuditLog entity.
type AuditLogUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AuditLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (aluo *AuditLogUpdateOne) SetDeletedAt(t time.Time) *AuditLogUpdateOne {
	aluo.mutation.SetDeletedAt(t)
	return aluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableDeletedAt(t *time.Time) *AuditLogUpdateOne {
	if t != nil {
		aluo.SetDeletedAt(*t)
	}
	return aluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aluo *AuditLogUpdateOne) ClearDeletedAt() *AuditLogUpdateOne {
	aluo.mutation.ClearDeletedAt()
	return aluo
}

// SetOperatorType sets the "operator_type" field.
func (aluo *AuditLogUpdateOne) SetOperatorType(ct consts.OperatorType) *AuditLogUpdateOne {
	aluo.mutation.SetOperatorType(ct)
	return aluo
}

// SetNillableOperatorType sets the "operator_type" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableOperatorType(ct *consts.OperatorType) *AuditLogUpdateOne {
	if ct != nil {
		aluo.SetOperatorType(*ct)
	}
	return aluo
}

// SetOperatorID sets the "operator_id" field.
func (aluo *AuditLogUpdateOne) SetOperatorID(u uuid.UUID) *AuditLogUpdateOne {
	aluo.mutation.SetOperatorID(u)
	return aluo
}

// SetNillableOperatorID sets the "operator_id" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableOperatorID(u *uuid.UUID) *AuditLogUpdateOne {
	if u != nil {
		aluo.SetOperatorID(*u)
	}
	return aluo
}

// ClearOperatorID clears the value of the "operator_id" field.
func (aluo *AuditLogUpdateOne) ClearOperatorID() *AuditLogUpdateOne {
	aluo.mutation.ClearOperatorID()
	return aluo
}

// SetOperatorName sets the "operator_name" field.
func (aluo *AuditLogUpdateOne) SetOperatorName(s string) *AuditLogUpdateOne {
	aluo.mutation.SetOperatorName(s)
	return aluo
}

// SetNillableOperatorName sets the "operator_name" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableOperatorName(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetOperatorName(*s)
	}
	return aluo
}

// ClearOperatorName clears the value of the "operator_name" field.
func (aluo *AuditLogUpdateOne) ClearOperatorName() *AuditLogUpdateOne {
	aluo.mutation.ClearOperatorName()
	return aluo
}

// SetOperationType sets the "operation_type" field.
func (aluo *AuditLogUpdateOne) SetOperationType(ct consts.OperationType) *AuditLogUpdateOne {
	aluo.mutation.SetOperationType(ct)
	return aluo
}

// SetNillableOperationType sets the "operation_type" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableOperationType(ct *consts.OperationType) *AuditLogUpdateOne {
	if ct != nil {
		aluo.SetOperationType(*ct)
	}
	return aluo
}

// SetResourceType sets the "resource_type" field.
func (aluo *AuditLogUpdateOne) SetResourceType(ct consts.ResourceType) *AuditLogUpdateOne {
	aluo.mutation.SetResourceType(ct)
	return aluo
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableResourceType(ct *consts.ResourceType) *AuditLogUpdateOne {
	if ct != nil {
		aluo.SetResourceType(*ct)
	}
	return aluo
}

// SetResourceID sets the "resource_id" field.
func (aluo *AuditLogUpdateOne) SetResourceID(s string) *AuditLogUpdateOne {
	aluo.mutation.SetResourceID(s)
	return aluo
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableResourceID(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetResourceID(*s)
	}
	return aluo
}

// ClearResourceID clears the value of the "resource_id" field.
func (aluo *AuditLogUpdateOne) ClearResourceID() *AuditLogUpdateOne {
	aluo.mutation.ClearResourceID()
	return aluo
}

// SetResourceName sets the "resource_name" field.
func (aluo *AuditLogUpdateOne) SetResourceName(s string) *AuditLogUpdateOne {
	aluo.mutation.SetResourceName(s)
	return aluo
}

// SetNillableResourceName sets the "resource_name" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableResourceName(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetResourceName(*s)
	}
	return aluo
}

// ClearResourceName clears the value of the "resource_name" field.
func (aluo *AuditLogUpdateOne) ClearResourceName() *AuditLogUpdateOne {
	aluo.mutation.ClearResourceName()
	return aluo
}

// SetMethod sets the "method" field.
func (aluo *AuditLogUpdateOne) SetMethod(s string) *AuditLogUpdateOne {
	aluo.mutation.SetMethod(s)
	return aluo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableMethod(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetMethod(*s)
	}
	return aluo
}

// SetPath sets the "path" field.
func (aluo *AuditLogUpdateOne) SetPath(s string) *AuditLogUpdateOne {
	aluo.mutation.SetPath(s)
	return aluo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillablePath(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetPath(*s)
	}
	return aluo
}

// SetQueryParams sets the "query_params" field.
func (aluo *AuditLogUpdateOne) SetQueryParams(s string) *AuditLogUpdateOne {
	aluo.mutation.SetQueryParams(s)
	return aluo
}

// SetNillableQueryParams sets the "query_params" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableQueryParams(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetQueryParams(*s)
	}
	return aluo
}

// ClearQueryParams clears the value of the "query_params" field.
func (aluo *AuditLogUpdateOne) ClearQueryParams() *AuditLogUpdateOne {
	aluo.mutation.ClearQueryParams()
	return aluo
}

// SetRequestBody sets the "request_body" field.
func (aluo *AuditLogUpdateOne) SetRequestBody(s string) *AuditLogUpdateOne {
	aluo.mutation.SetRequestBody(s)
	return aluo
}

// SetNillableRequestBody sets the "request_body" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableRequestBody(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetRequestBody(*s)
	}
	return aluo
}

// ClearRequestBody clears the value of the "request_body" field.
func (aluo *AuditLogUpdateOne) ClearRequestBody() *AuditLogUpdateOne {
	aluo.mutation.ClearRequestBody()
	return aluo
}

// SetUserAgent sets the "user_agent" field.
func (aluo *AuditLogUpdateOne) SetUserAgent(s string) *AuditLogUpdateOne {
	aluo.mutation.SetUserAgent(s)
	return aluo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableUserAgent(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetUserAgent(*s)
	}
	return aluo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (aluo *AuditLogUpdateOne) ClearUserAgent() *AuditLogUpdateOne {
	aluo.mutation.ClearUserAgent()
	return aluo
}

// SetStatusCode sets the "status_code" field.
func (aluo *AuditLogUpdateOne) SetStatusCode(i int) *AuditLogUpdateOne {
	aluo.mutation.ResetStatusCode()
	aluo.mutation.SetStatusCode(i)
	return aluo
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableStatusCode(i *int) *AuditLogUpdateOne {
	if i != nil {
		aluo.SetStatusCode(*i)
	}
	return aluo
}

// AddStatusCode adds i to the "status_code" field.
func (aluo *AuditLogUpdateOne) AddStatusCode(i int) *AuditLogUpdateOne {
	aluo.mutation.AddStatusCode(i)
	return aluo
}

// SetStatus sets the "status" field.
func (aluo *AuditLogUpdateOne) SetStatus(cls consts.AuditLogStatus) *AuditLogUpdateOne {
	aluo.mutation.SetStatus(cls)
	return aluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableStatus(cls *consts.AuditLogStatus) *AuditLogUpdateOne {
	if cls != nil {
		aluo.SetStatus(*cls)
	}
	return aluo
}

// SetResponseBody sets the "response_body" field.
func (aluo *AuditLogUpdateOne) SetResponseBody(s string) *AuditLogUpdateOne {
	aluo.mutation.SetResponseBody(s)
	return aluo
}

// SetNillableResponseBody sets the "response_body" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableResponseBody(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetResponseBody(*s)
	}
	return aluo
}

// ClearResponseBody clears the value of the "response_body" field.
func (aluo *AuditLogUpdateOne) ClearResponseBody() *AuditLogUpdateOne {
	aluo.mutation.ClearResponseBody()
	return aluo
}

// SetErrorMessage sets the "error_message" field.
func (aluo *AuditLogUpdateOne) SetErrorMessage(s string) *AuditLogUpdateOne {
	aluo.mutation.SetErrorMessage(s)
	return aluo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableErrorMessage(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetErrorMessage(*s)
	}
	return aluo
}

// ClearErrorMessage clears the value of the "error_message" field.
func (aluo *AuditLogUpdateOne) ClearErrorMessage() *AuditLogUpdateOne {
	aluo.mutation.ClearErrorMessage()
	return aluo
}

// SetIP sets the "ip" field.
func (aluo *AuditLogUpdateOne) SetIP(s string) *AuditLogUpdateOne {
	aluo.mutation.SetIP(s)
	return aluo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableIP(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetIP(*s)
	}
	return aluo
}

// SetCountry sets the "country" field.
func (aluo *AuditLogUpdateOne) SetCountry(s string) *AuditLogUpdateOne {
	aluo.mutation.SetCountry(s)
	return aluo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableCountry(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetCountry(*s)
	}
	return aluo
}

// ClearCountry clears the value of the "country" field.
func (aluo *AuditLogUpdateOne) ClearCountry() *AuditLogUpdateOne {
	aluo.mutation.ClearCountry()
	return aluo
}

// SetProvince sets the "province" field.
func (aluo *AuditLogUpdateOne) SetProvince(s string) *AuditLogUpdateOne {
	aluo.mutation.SetProvince(s)
	return aluo
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableProvince(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetProvince(*s)
	}
	return aluo
}

// ClearProvince clears the value of the "province" field.
func (aluo *AuditLogUpdateOne) ClearProvince() *AuditLogUpdateOne {
	aluo.mutation.ClearProvince()
	return aluo
}

// SetCity sets the "city" field.
func (aluo *AuditLogUpdateOne) SetCity(s string) *AuditLogUpdateOne {
	aluo.mutation.SetCity(s)
	return aluo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableCity(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetCity(*s)
	}
	return aluo
}

// ClearCity clears the value of the "city" field.
func (aluo *AuditLogUpdateOne) ClearCity() *AuditLogUpdateOne {
	aluo.mutation.ClearCity()
	return aluo
}

// SetIsp sets the "isp" field.
func (aluo *AuditLogUpdateOne) SetIsp(s string) *AuditLogUpdateOne {
	aluo.mutation.SetIsp(s)
	return aluo
}

// SetNillableIsp sets the "isp" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableIsp(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetIsp(*s)
	}
	return aluo
}

// ClearIsp clears the value of the "isp" field.
func (aluo *AuditLogUpdateOne) ClearIsp() *AuditLogUpdateOne {
	aluo.mutation.ClearIsp()
	return aluo
}

// SetSessionID sets the "session_id" field.
func (aluo *AuditLogUpdateOne) SetSessionID(s string) *AuditLogUpdateOne {
	aluo.mutation.SetSessionID(s)
	return aluo
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableSessionID(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetSessionID(*s)
	}
	return aluo
}

// ClearSessionID clears the value of the "session_id" field.
func (aluo *AuditLogUpdateOne) ClearSessionID() *AuditLogUpdateOne {
	aluo.mutation.ClearSessionID()
	return aluo
}

// SetTraceID sets the "trace_id" field.
func (aluo *AuditLogUpdateOne) SetTraceID(s string) *AuditLogUpdateOne {
	aluo.mutation.SetTraceID(s)
	return aluo
}

// SetNillableTraceID sets the "trace_id" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableTraceID(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetTraceID(*s)
	}
	return aluo
}

// ClearTraceID clears the value of the "trace_id" field.
func (aluo *AuditLogUpdateOne) ClearTraceID() *AuditLogUpdateOne {
	aluo.mutation.ClearTraceID()
	return aluo
}

// SetBusinessData sets the "business_data" field.
func (aluo *AuditLogUpdateOne) SetBusinessData(s string) *AuditLogUpdateOne {
	aluo.mutation.SetBusinessData(s)
	return aluo
}

// SetNillableBusinessData sets the "business_data" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableBusinessData(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetBusinessData(*s)
	}
	return aluo
}

// ClearBusinessData clears the value of the "business_data" field.
func (aluo *AuditLogUpdateOne) ClearBusinessData() *AuditLogUpdateOne {
	aluo.mutation.ClearBusinessData()
	return aluo
}

// SetChanges sets the "changes" field.
func (aluo *AuditLogUpdateOne) SetChanges(s string) *AuditLogUpdateOne {
	aluo.mutation.SetChanges(s)
	return aluo
}

// SetNillableChanges sets the "changes" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableChanges(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetChanges(*s)
	}
	return aluo
}

// ClearChanges clears the value of the "changes" field.
func (aluo *AuditLogUpdateOne) ClearChanges() *AuditLogUpdateOne {
	aluo.mutation.ClearChanges()
	return aluo
}

// SetDescription sets the "description" field.
func (aluo *AuditLogUpdateOne) SetDescription(s string) *AuditLogUpdateOne {
	aluo.mutation.SetDescription(s)
	return aluo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableDescription(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetDescription(*s)
	}
	return aluo
}

// ClearDescription clears the value of the "description" field.
func (aluo *AuditLogUpdateOne) ClearDescription() *AuditLogUpdateOne {
	aluo.mutation.ClearDescription()
	return aluo
}

// SetCreatedAt sets the "created_at" field.
func (aluo *AuditLogUpdateOne) SetCreatedAt(t time.Time) *AuditLogUpdateOne {
	aluo.mutation.SetCreatedAt(t)
	return aluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableCreatedAt(t *time.Time) *AuditLogUpdateOne {
	if t != nil {
		aluo.SetCreatedAt(*t)
	}
	return aluo
}

// SetUpdatedAt sets the "updated_at" field.
func (aluo *AuditLogUpdateOne) SetUpdatedAt(t time.Time) *AuditLogUpdateOne {
	aluo.mutation.SetUpdatedAt(t)
	return aluo
}

// SetDurationMs sets the "duration_ms" field.
func (aluo *AuditLogUpdateOne) SetDurationMs(i int64) *AuditLogUpdateOne {
	aluo.mutation.ResetDurationMs()
	aluo.mutation.SetDurationMs(i)
	return aluo
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableDurationMs(i *int64) *AuditLogUpdateOne {
	if i != nil {
		aluo.SetDurationMs(*i)
	}
	return aluo
}

// AddDurationMs adds i to the "duration_ms" field.
func (aluo *AuditLogUpdateOne) AddDurationMs(i int64) *AuditLogUpdateOne {
	aluo.mutation.AddDurationMs(i)
	return aluo
}

// ClearDurationMs clears the value of the "duration_ms" field.
func (aluo *AuditLogUpdateOne) ClearDurationMs() *AuditLogUpdateOne {
	aluo.mutation.ClearDurationMs()
	return aluo
}

// Mutation returns the AuditLogMutation object of the builder.
func (aluo *AuditLogUpdateOne) Mutation() *AuditLogMutation {
	return aluo.mutation
}

// Where appends a list predicates to the AuditLogUpdate builder.
func (aluo *AuditLogUpdateOne) Where(ps ...predicate.AuditLog) *AuditLogUpdateOne {
	aluo.mutation.Where(ps...)
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *AuditLogUpdateOne) Select(field string, fields ...string) *AuditLogUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated AuditLog entity.
func (aluo *AuditLogUpdateOne) Save(ctx context.Context) (*AuditLog, error) {
	if err := aluo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, aluo.sqlSave, aluo.mutation, aluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *AuditLogUpdateOne) SaveX(ctx context.Context) *AuditLog {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *AuditLogUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *AuditLogUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aluo *AuditLogUpdateOne) defaults() error {
	if _, ok := aluo.mutation.UpdatedAt(); !ok {
		if auditlog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized auditlog.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := auditlog.UpdateDefaultUpdatedAt()
		aluo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aluo *AuditLogUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuditLogUpdateOne {
	aluo.modifiers = append(aluo.modifiers, modifiers...)
	return aluo
}

func (aluo *AuditLogUpdateOne) sqlSave(ctx context.Context) (_node *AuditLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(auditlog.Table, auditlog.Columns, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeUUID))
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "AuditLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, auditlog.FieldID)
		for _, f := range fields {
			if !auditlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != auditlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.DeletedAt(); ok {
		_spec.SetField(auditlog.FieldDeletedAt, field.TypeTime, value)
	}
	if aluo.mutation.DeletedAtCleared() {
		_spec.ClearField(auditlog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := aluo.mutation.OperatorType(); ok {
		_spec.SetField(auditlog.FieldOperatorType, field.TypeString, value)
	}
	if value, ok := aluo.mutation.OperatorID(); ok {
		_spec.SetField(auditlog.FieldOperatorID, field.TypeUUID, value)
	}
	if aluo.mutation.OperatorIDCleared() {
		_spec.ClearField(auditlog.FieldOperatorID, field.TypeUUID)
	}
	if value, ok := aluo.mutation.OperatorName(); ok {
		_spec.SetField(auditlog.FieldOperatorName, field.TypeString, value)
	}
	if aluo.mutation.OperatorNameCleared() {
		_spec.ClearField(auditlog.FieldOperatorName, field.TypeString)
	}
	if value, ok := aluo.mutation.OperationType(); ok {
		_spec.SetField(auditlog.FieldOperationType, field.TypeString, value)
	}
	if value, ok := aluo.mutation.ResourceType(); ok {
		_spec.SetField(auditlog.FieldResourceType, field.TypeString, value)
	}
	if value, ok := aluo.mutation.ResourceID(); ok {
		_spec.SetField(auditlog.FieldResourceID, field.TypeString, value)
	}
	if aluo.mutation.ResourceIDCleared() {
		_spec.ClearField(auditlog.FieldResourceID, field.TypeString)
	}
	if value, ok := aluo.mutation.ResourceName(); ok {
		_spec.SetField(auditlog.FieldResourceName, field.TypeString, value)
	}
	if aluo.mutation.ResourceNameCleared() {
		_spec.ClearField(auditlog.FieldResourceName, field.TypeString)
	}
	if value, ok := aluo.mutation.Method(); ok {
		_spec.SetField(auditlog.FieldMethod, field.TypeString, value)
	}
	if value, ok := aluo.mutation.Path(); ok {
		_spec.SetField(auditlog.FieldPath, field.TypeString, value)
	}
	if value, ok := aluo.mutation.QueryParams(); ok {
		_spec.SetField(auditlog.FieldQueryParams, field.TypeString, value)
	}
	if aluo.mutation.QueryParamsCleared() {
		_spec.ClearField(auditlog.FieldQueryParams, field.TypeString)
	}
	if value, ok := aluo.mutation.RequestBody(); ok {
		_spec.SetField(auditlog.FieldRequestBody, field.TypeString, value)
	}
	if aluo.mutation.RequestBodyCleared() {
		_spec.ClearField(auditlog.FieldRequestBody, field.TypeString)
	}
	if value, ok := aluo.mutation.UserAgent(); ok {
		_spec.SetField(auditlog.FieldUserAgent, field.TypeString, value)
	}
	if aluo.mutation.UserAgentCleared() {
		_spec.ClearField(auditlog.FieldUserAgent, field.TypeString)
	}
	if value, ok := aluo.mutation.StatusCode(); ok {
		_spec.SetField(auditlog.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := aluo.mutation.AddedStatusCode(); ok {
		_spec.AddField(auditlog.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := aluo.mutation.Status(); ok {
		_spec.SetField(auditlog.FieldStatus, field.TypeString, value)
	}
	if value, ok := aluo.mutation.ResponseBody(); ok {
		_spec.SetField(auditlog.FieldResponseBody, field.TypeString, value)
	}
	if aluo.mutation.ResponseBodyCleared() {
		_spec.ClearField(auditlog.FieldResponseBody, field.TypeString)
	}
	if value, ok := aluo.mutation.ErrorMessage(); ok {
		_spec.SetField(auditlog.FieldErrorMessage, field.TypeString, value)
	}
	if aluo.mutation.ErrorMessageCleared() {
		_spec.ClearField(auditlog.FieldErrorMessage, field.TypeString)
	}
	if value, ok := aluo.mutation.IP(); ok {
		_spec.SetField(auditlog.FieldIP, field.TypeString, value)
	}
	if value, ok := aluo.mutation.Country(); ok {
		_spec.SetField(auditlog.FieldCountry, field.TypeString, value)
	}
	if aluo.mutation.CountryCleared() {
		_spec.ClearField(auditlog.FieldCountry, field.TypeString)
	}
	if value, ok := aluo.mutation.Province(); ok {
		_spec.SetField(auditlog.FieldProvince, field.TypeString, value)
	}
	if aluo.mutation.ProvinceCleared() {
		_spec.ClearField(auditlog.FieldProvince, field.TypeString)
	}
	if value, ok := aluo.mutation.City(); ok {
		_spec.SetField(auditlog.FieldCity, field.TypeString, value)
	}
	if aluo.mutation.CityCleared() {
		_spec.ClearField(auditlog.FieldCity, field.TypeString)
	}
	if value, ok := aluo.mutation.Isp(); ok {
		_spec.SetField(auditlog.FieldIsp, field.TypeString, value)
	}
	if aluo.mutation.IspCleared() {
		_spec.ClearField(auditlog.FieldIsp, field.TypeString)
	}
	if value, ok := aluo.mutation.SessionID(); ok {
		_spec.SetField(auditlog.FieldSessionID, field.TypeString, value)
	}
	if aluo.mutation.SessionIDCleared() {
		_spec.ClearField(auditlog.FieldSessionID, field.TypeString)
	}
	if value, ok := aluo.mutation.TraceID(); ok {
		_spec.SetField(auditlog.FieldTraceID, field.TypeString, value)
	}
	if aluo.mutation.TraceIDCleared() {
		_spec.ClearField(auditlog.FieldTraceID, field.TypeString)
	}
	if value, ok := aluo.mutation.BusinessData(); ok {
		_spec.SetField(auditlog.FieldBusinessData, field.TypeString, value)
	}
	if aluo.mutation.BusinessDataCleared() {
		_spec.ClearField(auditlog.FieldBusinessData, field.TypeString)
	}
	if value, ok := aluo.mutation.Changes(); ok {
		_spec.SetField(auditlog.FieldChanges, field.TypeString, value)
	}
	if aluo.mutation.ChangesCleared() {
		_spec.ClearField(auditlog.FieldChanges, field.TypeString)
	}
	if value, ok := aluo.mutation.Description(); ok {
		_spec.SetField(auditlog.FieldDescription, field.TypeString, value)
	}
	if aluo.mutation.DescriptionCleared() {
		_spec.ClearField(auditlog.FieldDescription, field.TypeString)
	}
	if value, ok := aluo.mutation.CreatedAt(); ok {
		_spec.SetField(auditlog.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := aluo.mutation.UpdatedAt(); ok {
		_spec.SetField(auditlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aluo.mutation.DurationMs(); ok {
		_spec.SetField(auditlog.FieldDurationMs, field.TypeInt64, value)
	}
	if value, ok := aluo.mutation.AddedDurationMs(); ok {
		_spec.AddField(auditlog.FieldDurationMs, field.TypeInt64, value)
	}
	if aluo.mutation.DurationMsCleared() {
		_spec.ClearField(auditlog.FieldDurationMs, field.TypeInt64)
	}
	_spec.AddModifiers(aluo.modifiers...)
	_node = &AuditLog{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aluo.mutation.done = true
	return _node, nil
}
