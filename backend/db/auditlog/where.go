// Code generated by ent, DO NOT EDIT.

package auditlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldDeletedAt, v))
}

// OperatorType applies equality check predicate on the "operator_type" field. It's identical to OperatorTypeEQ.
func OperatorType(v consts.OperatorType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldEQ(FieldOperatorType, vc))
}

// OperatorID applies equality check predicate on the "operator_id" field. It's identical to OperatorIDEQ.
func OperatorID(v uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldOperatorID, v))
}

// OperatorName applies equality check predicate on the "operator_name" field. It's identical to OperatorNameEQ.
func OperatorName(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldOperatorName, v))
}

// OperationType applies equality check predicate on the "operation_type" field. It's identical to OperationTypeEQ.
func OperationType(v consts.OperationType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldEQ(FieldOperationType, vc))
}

// ResourceType applies equality check predicate on the "resource_type" field. It's identical to ResourceTypeEQ.
func ResourceType(v consts.ResourceType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldEQ(FieldResourceType, vc))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldResourceID, v))
}

// ResourceName applies equality check predicate on the "resource_name" field. It's identical to ResourceNameEQ.
func ResourceName(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldResourceName, v))
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldMethod, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldPath, v))
}

// QueryParams applies equality check predicate on the "query_params" field. It's identical to QueryParamsEQ.
func QueryParams(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldQueryParams, v))
}

// RequestBody applies equality check predicate on the "request_body" field. It's identical to RequestBodyEQ.
func RequestBody(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldRequestBody, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldUserAgent, v))
}

// StatusCode applies equality check predicate on the "status_code" field. It's identical to StatusCodeEQ.
func StatusCode(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldStatusCode, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v consts.AuditLogStatus) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldEQ(FieldStatus, vc))
}

// ResponseBody applies equality check predicate on the "response_body" field. It's identical to ResponseBodyEQ.
func ResponseBody(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldResponseBody, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldErrorMessage, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldIP, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldCountry, v))
}

// Province applies equality check predicate on the "province" field. It's identical to ProvinceEQ.
func Province(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldProvince, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldCity, v))
}

// Isp applies equality check predicate on the "isp" field. It's identical to IspEQ.
func Isp(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldIsp, v))
}

// SessionID applies equality check predicate on the "session_id" field. It's identical to SessionIDEQ.
func SessionID(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldSessionID, v))
}

// TraceID applies equality check predicate on the "trace_id" field. It's identical to TraceIDEQ.
func TraceID(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldTraceID, v))
}

// BusinessData applies equality check predicate on the "business_data" field. It's identical to BusinessDataEQ.
func BusinessData(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldBusinessData, v))
}

// Changes applies equality check predicate on the "changes" field. It's identical to ChangesEQ.
func Changes(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldChanges, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// DurationMs applies equality check predicate on the "duration_ms" field. It's identical to DurationMsEQ.
func DurationMs(v int64) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldDurationMs, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldDeletedAt))
}

// OperatorTypeEQ applies the EQ predicate on the "operator_type" field.
func OperatorTypeEQ(v consts.OperatorType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldEQ(FieldOperatorType, vc))
}

// OperatorTypeNEQ applies the NEQ predicate on the "operator_type" field.
func OperatorTypeNEQ(v consts.OperatorType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldNEQ(FieldOperatorType, vc))
}

// OperatorTypeIn applies the In predicate on the "operator_type" field.
func OperatorTypeIn(vs ...consts.OperatorType) predicate.AuditLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.AuditLog(sql.FieldIn(FieldOperatorType, v...))
}

// OperatorTypeNotIn applies the NotIn predicate on the "operator_type" field.
func OperatorTypeNotIn(vs ...consts.OperatorType) predicate.AuditLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.AuditLog(sql.FieldNotIn(FieldOperatorType, v...))
}

// OperatorTypeGT applies the GT predicate on the "operator_type" field.
func OperatorTypeGT(v consts.OperatorType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldGT(FieldOperatorType, vc))
}

// OperatorTypeGTE applies the GTE predicate on the "operator_type" field.
func OperatorTypeGTE(v consts.OperatorType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldGTE(FieldOperatorType, vc))
}

// OperatorTypeLT applies the LT predicate on the "operator_type" field.
func OperatorTypeLT(v consts.OperatorType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldLT(FieldOperatorType, vc))
}

// OperatorTypeLTE applies the LTE predicate on the "operator_type" field.
func OperatorTypeLTE(v consts.OperatorType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldLTE(FieldOperatorType, vc))
}

// OperatorTypeContains applies the Contains predicate on the "operator_type" field.
func OperatorTypeContains(v consts.OperatorType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldContains(FieldOperatorType, vc))
}

// OperatorTypeHasPrefix applies the HasPrefix predicate on the "operator_type" field.
func OperatorTypeHasPrefix(v consts.OperatorType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldHasPrefix(FieldOperatorType, vc))
}

// OperatorTypeHasSuffix applies the HasSuffix predicate on the "operator_type" field.
func OperatorTypeHasSuffix(v consts.OperatorType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldHasSuffix(FieldOperatorType, vc))
}

// OperatorTypeEqualFold applies the EqualFold predicate on the "operator_type" field.
func OperatorTypeEqualFold(v consts.OperatorType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldEqualFold(FieldOperatorType, vc))
}

// OperatorTypeContainsFold applies the ContainsFold predicate on the "operator_type" field.
func OperatorTypeContainsFold(v consts.OperatorType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldContainsFold(FieldOperatorType, vc))
}

// OperatorIDEQ applies the EQ predicate on the "operator_id" field.
func OperatorIDEQ(v uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldOperatorID, v))
}

// OperatorIDNEQ applies the NEQ predicate on the "operator_id" field.
func OperatorIDNEQ(v uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldOperatorID, v))
}

// OperatorIDIn applies the In predicate on the "operator_id" field.
func OperatorIDIn(vs ...uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldOperatorID, vs...))
}

// OperatorIDNotIn applies the NotIn predicate on the "operator_id" field.
func OperatorIDNotIn(vs ...uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldOperatorID, vs...))
}

// OperatorIDGT applies the GT predicate on the "operator_id" field.
func OperatorIDGT(v uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldOperatorID, v))
}

// OperatorIDGTE applies the GTE predicate on the "operator_id" field.
func OperatorIDGTE(v uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldOperatorID, v))
}

// OperatorIDLT applies the LT predicate on the "operator_id" field.
func OperatorIDLT(v uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldOperatorID, v))
}

// OperatorIDLTE applies the LTE predicate on the "operator_id" field.
func OperatorIDLTE(v uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldOperatorID, v))
}

// OperatorIDIsNil applies the IsNil predicate on the "operator_id" field.
func OperatorIDIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldOperatorID))
}

// OperatorIDNotNil applies the NotNil predicate on the "operator_id" field.
func OperatorIDNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldOperatorID))
}

// OperatorNameEQ applies the EQ predicate on the "operator_name" field.
func OperatorNameEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldOperatorName, v))
}

// OperatorNameNEQ applies the NEQ predicate on the "operator_name" field.
func OperatorNameNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldOperatorName, v))
}

// OperatorNameIn applies the In predicate on the "operator_name" field.
func OperatorNameIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldOperatorName, vs...))
}

// OperatorNameNotIn applies the NotIn predicate on the "operator_name" field.
func OperatorNameNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldOperatorName, vs...))
}

// OperatorNameGT applies the GT predicate on the "operator_name" field.
func OperatorNameGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldOperatorName, v))
}

// OperatorNameGTE applies the GTE predicate on the "operator_name" field.
func OperatorNameGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldOperatorName, v))
}

// OperatorNameLT applies the LT predicate on the "operator_name" field.
func OperatorNameLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldOperatorName, v))
}

// OperatorNameLTE applies the LTE predicate on the "operator_name" field.
func OperatorNameLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldOperatorName, v))
}

// OperatorNameContains applies the Contains predicate on the "operator_name" field.
func OperatorNameContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldOperatorName, v))
}

// OperatorNameHasPrefix applies the HasPrefix predicate on the "operator_name" field.
func OperatorNameHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldOperatorName, v))
}

// OperatorNameHasSuffix applies the HasSuffix predicate on the "operator_name" field.
func OperatorNameHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldOperatorName, v))
}

// OperatorNameIsNil applies the IsNil predicate on the "operator_name" field.
func OperatorNameIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldOperatorName))
}

// OperatorNameNotNil applies the NotNil predicate on the "operator_name" field.
func OperatorNameNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldOperatorName))
}

// OperatorNameEqualFold applies the EqualFold predicate on the "operator_name" field.
func OperatorNameEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldOperatorName, v))
}

// OperatorNameContainsFold applies the ContainsFold predicate on the "operator_name" field.
func OperatorNameContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldOperatorName, v))
}

// OperationTypeEQ applies the EQ predicate on the "operation_type" field.
func OperationTypeEQ(v consts.OperationType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldEQ(FieldOperationType, vc))
}

// OperationTypeNEQ applies the NEQ predicate on the "operation_type" field.
func OperationTypeNEQ(v consts.OperationType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldNEQ(FieldOperationType, vc))
}

// OperationTypeIn applies the In predicate on the "operation_type" field.
func OperationTypeIn(vs ...consts.OperationType) predicate.AuditLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.AuditLog(sql.FieldIn(FieldOperationType, v...))
}

// OperationTypeNotIn applies the NotIn predicate on the "operation_type" field.
func OperationTypeNotIn(vs ...consts.OperationType) predicate.AuditLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.AuditLog(sql.FieldNotIn(FieldOperationType, v...))
}

// OperationTypeGT applies the GT predicate on the "operation_type" field.
func OperationTypeGT(v consts.OperationType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldGT(FieldOperationType, vc))
}

// OperationTypeGTE applies the GTE predicate on the "operation_type" field.
func OperationTypeGTE(v consts.OperationType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldGTE(FieldOperationType, vc))
}

// OperationTypeLT applies the LT predicate on the "operation_type" field.
func OperationTypeLT(v consts.OperationType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldLT(FieldOperationType, vc))
}

// OperationTypeLTE applies the LTE predicate on the "operation_type" field.
func OperationTypeLTE(v consts.OperationType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldLTE(FieldOperationType, vc))
}

// OperationTypeContains applies the Contains predicate on the "operation_type" field.
func OperationTypeContains(v consts.OperationType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldContains(FieldOperationType, vc))
}

// OperationTypeHasPrefix applies the HasPrefix predicate on the "operation_type" field.
func OperationTypeHasPrefix(v consts.OperationType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldHasPrefix(FieldOperationType, vc))
}

// OperationTypeHasSuffix applies the HasSuffix predicate on the "operation_type" field.
func OperationTypeHasSuffix(v consts.OperationType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldHasSuffix(FieldOperationType, vc))
}

// OperationTypeEqualFold applies the EqualFold predicate on the "operation_type" field.
func OperationTypeEqualFold(v consts.OperationType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldEqualFold(FieldOperationType, vc))
}

// OperationTypeContainsFold applies the ContainsFold predicate on the "operation_type" field.
func OperationTypeContainsFold(v consts.OperationType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldContainsFold(FieldOperationType, vc))
}

// ResourceTypeEQ applies the EQ predicate on the "resource_type" field.
func ResourceTypeEQ(v consts.ResourceType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldEQ(FieldResourceType, vc))
}

// ResourceTypeNEQ applies the NEQ predicate on the "resource_type" field.
func ResourceTypeNEQ(v consts.ResourceType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldNEQ(FieldResourceType, vc))
}

// ResourceTypeIn applies the In predicate on the "resource_type" field.
func ResourceTypeIn(vs ...consts.ResourceType) predicate.AuditLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.AuditLog(sql.FieldIn(FieldResourceType, v...))
}

// ResourceTypeNotIn applies the NotIn predicate on the "resource_type" field.
func ResourceTypeNotIn(vs ...consts.ResourceType) predicate.AuditLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.AuditLog(sql.FieldNotIn(FieldResourceType, v...))
}

// ResourceTypeGT applies the GT predicate on the "resource_type" field.
func ResourceTypeGT(v consts.ResourceType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldGT(FieldResourceType, vc))
}

// ResourceTypeGTE applies the GTE predicate on the "resource_type" field.
func ResourceTypeGTE(v consts.ResourceType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldGTE(FieldResourceType, vc))
}

// ResourceTypeLT applies the LT predicate on the "resource_type" field.
func ResourceTypeLT(v consts.ResourceType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldLT(FieldResourceType, vc))
}

// ResourceTypeLTE applies the LTE predicate on the "resource_type" field.
func ResourceTypeLTE(v consts.ResourceType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldLTE(FieldResourceType, vc))
}

// ResourceTypeContains applies the Contains predicate on the "resource_type" field.
func ResourceTypeContains(v consts.ResourceType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldContains(FieldResourceType, vc))
}

// ResourceTypeHasPrefix applies the HasPrefix predicate on the "resource_type" field.
func ResourceTypeHasPrefix(v consts.ResourceType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldHasPrefix(FieldResourceType, vc))
}

// ResourceTypeHasSuffix applies the HasSuffix predicate on the "resource_type" field.
func ResourceTypeHasSuffix(v consts.ResourceType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldHasSuffix(FieldResourceType, vc))
}

// ResourceTypeEqualFold applies the EqualFold predicate on the "resource_type" field.
func ResourceTypeEqualFold(v consts.ResourceType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldEqualFold(FieldResourceType, vc))
}

// ResourceTypeContainsFold applies the ContainsFold predicate on the "resource_type" field.
func ResourceTypeContainsFold(v consts.ResourceType) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldContainsFold(FieldResourceType, vc))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDContains applies the Contains predicate on the "resource_id" field.
func ResourceIDContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldResourceID, v))
}

// ResourceIDHasPrefix applies the HasPrefix predicate on the "resource_id" field.
func ResourceIDHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldResourceID, v))
}

// ResourceIDHasSuffix applies the HasSuffix predicate on the "resource_id" field.
func ResourceIDHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldResourceID, v))
}

// ResourceIDIsNil applies the IsNil predicate on the "resource_id" field.
func ResourceIDIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldResourceID))
}

// ResourceIDNotNil applies the NotNil predicate on the "resource_id" field.
func ResourceIDNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldResourceID))
}

// ResourceIDEqualFold applies the EqualFold predicate on the "resource_id" field.
func ResourceIDEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldResourceID, v))
}

// ResourceIDContainsFold applies the ContainsFold predicate on the "resource_id" field.
func ResourceIDContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldResourceID, v))
}

// ResourceNameEQ applies the EQ predicate on the "resource_name" field.
func ResourceNameEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldResourceName, v))
}

// ResourceNameNEQ applies the NEQ predicate on the "resource_name" field.
func ResourceNameNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldResourceName, v))
}

// ResourceNameIn applies the In predicate on the "resource_name" field.
func ResourceNameIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldResourceName, vs...))
}

// ResourceNameNotIn applies the NotIn predicate on the "resource_name" field.
func ResourceNameNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldResourceName, vs...))
}

// ResourceNameGT applies the GT predicate on the "resource_name" field.
func ResourceNameGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldResourceName, v))
}

// ResourceNameGTE applies the GTE predicate on the "resource_name" field.
func ResourceNameGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldResourceName, v))
}

// ResourceNameLT applies the LT predicate on the "resource_name" field.
func ResourceNameLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldResourceName, v))
}

// ResourceNameLTE applies the LTE predicate on the "resource_name" field.
func ResourceNameLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldResourceName, v))
}

// ResourceNameContains applies the Contains predicate on the "resource_name" field.
func ResourceNameContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldResourceName, v))
}

// ResourceNameHasPrefix applies the HasPrefix predicate on the "resource_name" field.
func ResourceNameHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldResourceName, v))
}

// ResourceNameHasSuffix applies the HasSuffix predicate on the "resource_name" field.
func ResourceNameHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldResourceName, v))
}

// ResourceNameIsNil applies the IsNil predicate on the "resource_name" field.
func ResourceNameIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldResourceName))
}

// ResourceNameNotNil applies the NotNil predicate on the "resource_name" field.
func ResourceNameNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldResourceName))
}

// ResourceNameEqualFold applies the EqualFold predicate on the "resource_name" field.
func ResourceNameEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldResourceName, v))
}

// ResourceNameContainsFold applies the ContainsFold predicate on the "resource_name" field.
func ResourceNameContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldResourceName, v))
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldMethod, v))
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldMethod, v))
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldMethod, vs...))
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldMethod, vs...))
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldMethod, v))
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldMethod, v))
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldMethod, v))
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldMethod, v))
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldMethod, v))
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldMethod, v))
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldMethod, v))
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldMethod, v))
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldMethod, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldPath, v))
}

// QueryParamsEQ applies the EQ predicate on the "query_params" field.
func QueryParamsEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldQueryParams, v))
}

// QueryParamsNEQ applies the NEQ predicate on the "query_params" field.
func QueryParamsNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldQueryParams, v))
}

// QueryParamsIn applies the In predicate on the "query_params" field.
func QueryParamsIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldQueryParams, vs...))
}

// QueryParamsNotIn applies the NotIn predicate on the "query_params" field.
func QueryParamsNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldQueryParams, vs...))
}

// QueryParamsGT applies the GT predicate on the "query_params" field.
func QueryParamsGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldQueryParams, v))
}

// QueryParamsGTE applies the GTE predicate on the "query_params" field.
func QueryParamsGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldQueryParams, v))
}

// QueryParamsLT applies the LT predicate on the "query_params" field.
func QueryParamsLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldQueryParams, v))
}

// QueryParamsLTE applies the LTE predicate on the "query_params" field.
func QueryParamsLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldQueryParams, v))
}

// QueryParamsContains applies the Contains predicate on the "query_params" field.
func QueryParamsContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldQueryParams, v))
}

// QueryParamsHasPrefix applies the HasPrefix predicate on the "query_params" field.
func QueryParamsHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldQueryParams, v))
}

// QueryParamsHasSuffix applies the HasSuffix predicate on the "query_params" field.
func QueryParamsHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldQueryParams, v))
}

// QueryParamsIsNil applies the IsNil predicate on the "query_params" field.
func QueryParamsIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldQueryParams))
}

// QueryParamsNotNil applies the NotNil predicate on the "query_params" field.
func QueryParamsNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldQueryParams))
}

// QueryParamsEqualFold applies the EqualFold predicate on the "query_params" field.
func QueryParamsEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldQueryParams, v))
}

// QueryParamsContainsFold applies the ContainsFold predicate on the "query_params" field.
func QueryParamsContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldQueryParams, v))
}

// RequestBodyEQ applies the EQ predicate on the "request_body" field.
func RequestBodyEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldRequestBody, v))
}

// RequestBodyNEQ applies the NEQ predicate on the "request_body" field.
func RequestBodyNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldRequestBody, v))
}

// RequestBodyIn applies the In predicate on the "request_body" field.
func RequestBodyIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldRequestBody, vs...))
}

// RequestBodyNotIn applies the NotIn predicate on the "request_body" field.
func RequestBodyNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldRequestBody, vs...))
}

// RequestBodyGT applies the GT predicate on the "request_body" field.
func RequestBodyGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldRequestBody, v))
}

// RequestBodyGTE applies the GTE predicate on the "request_body" field.
func RequestBodyGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldRequestBody, v))
}

// RequestBodyLT applies the LT predicate on the "request_body" field.
func RequestBodyLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldRequestBody, v))
}

// RequestBodyLTE applies the LTE predicate on the "request_body" field.
func RequestBodyLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldRequestBody, v))
}

// RequestBodyContains applies the Contains predicate on the "request_body" field.
func RequestBodyContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldRequestBody, v))
}

// RequestBodyHasPrefix applies the HasPrefix predicate on the "request_body" field.
func RequestBodyHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldRequestBody, v))
}

// RequestBodyHasSuffix applies the HasSuffix predicate on the "request_body" field.
func RequestBodyHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldRequestBody, v))
}

// RequestBodyIsNil applies the IsNil predicate on the "request_body" field.
func RequestBodyIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldRequestBody))
}

// RequestBodyNotNil applies the NotNil predicate on the "request_body" field.
func RequestBodyNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldRequestBody))
}

// RequestBodyEqualFold applies the EqualFold predicate on the "request_body" field.
func RequestBodyEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldRequestBody, v))
}

// RequestBodyContainsFold applies the ContainsFold predicate on the "request_body" field.
func RequestBodyContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldRequestBody, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldUserAgent, v))
}

// StatusCodeEQ applies the EQ predicate on the "status_code" field.
func StatusCodeEQ(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldStatusCode, v))
}

// StatusCodeNEQ applies the NEQ predicate on the "status_code" field.
func StatusCodeNEQ(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldStatusCode, v))
}

// StatusCodeIn applies the In predicate on the "status_code" field.
func StatusCodeIn(vs ...int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldStatusCode, vs...))
}

// StatusCodeNotIn applies the NotIn predicate on the "status_code" field.
func StatusCodeNotIn(vs ...int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldStatusCode, vs...))
}

// StatusCodeGT applies the GT predicate on the "status_code" field.
func StatusCodeGT(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldStatusCode, v))
}

// StatusCodeGTE applies the GTE predicate on the "status_code" field.
func StatusCodeGTE(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldStatusCode, v))
}

// StatusCodeLT applies the LT predicate on the "status_code" field.
func StatusCodeLT(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldStatusCode, v))
}

// StatusCodeLTE applies the LTE predicate on the "status_code" field.
func StatusCodeLTE(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldStatusCode, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v consts.AuditLogStatus) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v consts.AuditLogStatus) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...consts.AuditLogStatus) predicate.AuditLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.AuditLog(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...consts.AuditLogStatus) predicate.AuditLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.AuditLog(sql.FieldNotIn(FieldStatus, v...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v consts.AuditLogStatus) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldGT(FieldStatus, vc))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v consts.AuditLogStatus) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldGTE(FieldStatus, vc))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v consts.AuditLogStatus) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldLT(FieldStatus, vc))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v consts.AuditLogStatus) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldLTE(FieldStatus, vc))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v consts.AuditLogStatus) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldContains(FieldStatus, vc))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v consts.AuditLogStatus) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldHasPrefix(FieldStatus, vc))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v consts.AuditLogStatus) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldHasSuffix(FieldStatus, vc))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v consts.AuditLogStatus) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldEqualFold(FieldStatus, vc))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v consts.AuditLogStatus) predicate.AuditLog {
	vc := string(v)
	return predicate.AuditLog(sql.FieldContainsFold(FieldStatus, vc))
}

// ResponseBodyEQ applies the EQ predicate on the "response_body" field.
func ResponseBodyEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldResponseBody, v))
}

// ResponseBodyNEQ applies the NEQ predicate on the "response_body" field.
func ResponseBodyNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldResponseBody, v))
}

// ResponseBodyIn applies the In predicate on the "response_body" field.
func ResponseBodyIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldResponseBody, vs...))
}

// ResponseBodyNotIn applies the NotIn predicate on the "response_body" field.
func ResponseBodyNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldResponseBody, vs...))
}

// ResponseBodyGT applies the GT predicate on the "response_body" field.
func ResponseBodyGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldResponseBody, v))
}

// ResponseBodyGTE applies the GTE predicate on the "response_body" field.
func ResponseBodyGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldResponseBody, v))
}

// ResponseBodyLT applies the LT predicate on the "response_body" field.
func ResponseBodyLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldResponseBody, v))
}

// ResponseBodyLTE applies the LTE predicate on the "response_body" field.
func ResponseBodyLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldResponseBody, v))
}

// ResponseBodyContains applies the Contains predicate on the "response_body" field.
func ResponseBodyContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldResponseBody, v))
}

// ResponseBodyHasPrefix applies the HasPrefix predicate on the "response_body" field.
func ResponseBodyHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldResponseBody, v))
}

// ResponseBodyHasSuffix applies the HasSuffix predicate on the "response_body" field.
func ResponseBodyHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldResponseBody, v))
}

// ResponseBodyIsNil applies the IsNil predicate on the "response_body" field.
func ResponseBodyIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldResponseBody))
}

// ResponseBodyNotNil applies the NotNil predicate on the "response_body" field.
func ResponseBodyNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldResponseBody))
}

// ResponseBodyEqualFold applies the EqualFold predicate on the "response_body" field.
func ResponseBodyEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldResponseBody, v))
}

// ResponseBodyContainsFold applies the ContainsFold predicate on the "response_body" field.
func ResponseBodyContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldResponseBody, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldErrorMessage, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldIP, v))
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldIP, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryIsNil applies the IsNil predicate on the "country" field.
func CountryIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldCountry))
}

// CountryNotNil applies the NotNil predicate on the "country" field.
func CountryNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldCountry))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldCountry, v))
}

// ProvinceEQ applies the EQ predicate on the "province" field.
func ProvinceEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldProvince, v))
}

// ProvinceNEQ applies the NEQ predicate on the "province" field.
func ProvinceNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldProvince, v))
}

// ProvinceIn applies the In predicate on the "province" field.
func ProvinceIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldProvince, vs...))
}

// ProvinceNotIn applies the NotIn predicate on the "province" field.
func ProvinceNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldProvince, vs...))
}

// ProvinceGT applies the GT predicate on the "province" field.
func ProvinceGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldProvince, v))
}

// ProvinceGTE applies the GTE predicate on the "province" field.
func ProvinceGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldProvince, v))
}

// ProvinceLT applies the LT predicate on the "province" field.
func ProvinceLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldProvince, v))
}

// ProvinceLTE applies the LTE predicate on the "province" field.
func ProvinceLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldProvince, v))
}

// ProvinceContains applies the Contains predicate on the "province" field.
func ProvinceContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldProvince, v))
}

// ProvinceHasPrefix applies the HasPrefix predicate on the "province" field.
func ProvinceHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldProvince, v))
}

// ProvinceHasSuffix applies the HasSuffix predicate on the "province" field.
func ProvinceHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldProvince, v))
}

// ProvinceIsNil applies the IsNil predicate on the "province" field.
func ProvinceIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldProvince))
}

// ProvinceNotNil applies the NotNil predicate on the "province" field.
func ProvinceNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldProvince))
}

// ProvinceEqualFold applies the EqualFold predicate on the "province" field.
func ProvinceEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldProvince, v))
}

// ProvinceContainsFold applies the ContainsFold predicate on the "province" field.
func ProvinceContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldProvince, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldCity, v))
}

// CityIsNil applies the IsNil predicate on the "city" field.
func CityIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldCity))
}

// CityNotNil applies the NotNil predicate on the "city" field.
func CityNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldCity))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldCity, v))
}

// IspEQ applies the EQ predicate on the "isp" field.
func IspEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldIsp, v))
}

// IspNEQ applies the NEQ predicate on the "isp" field.
func IspNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldIsp, v))
}

// IspIn applies the In predicate on the "isp" field.
func IspIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldIsp, vs...))
}

// IspNotIn applies the NotIn predicate on the "isp" field.
func IspNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldIsp, vs...))
}

// IspGT applies the GT predicate on the "isp" field.
func IspGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldIsp, v))
}

// IspGTE applies the GTE predicate on the "isp" field.
func IspGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldIsp, v))
}

// IspLT applies the LT predicate on the "isp" field.
func IspLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldIsp, v))
}

// IspLTE applies the LTE predicate on the "isp" field.
func IspLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldIsp, v))
}

// IspContains applies the Contains predicate on the "isp" field.
func IspContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldIsp, v))
}

// IspHasPrefix applies the HasPrefix predicate on the "isp" field.
func IspHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldIsp, v))
}

// IspHasSuffix applies the HasSuffix predicate on the "isp" field.
func IspHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldIsp, v))
}

// IspIsNil applies the IsNil predicate on the "isp" field.
func IspIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldIsp))
}

// IspNotNil applies the NotNil predicate on the "isp" field.
func IspNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldIsp))
}

// IspEqualFold applies the EqualFold predicate on the "isp" field.
func IspEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldIsp, v))
}

// IspContainsFold applies the ContainsFold predicate on the "isp" field.
func IspContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldIsp, v))
}

// SessionIDEQ applies the EQ predicate on the "session_id" field.
func SessionIDEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldSessionID, v))
}

// SessionIDNEQ applies the NEQ predicate on the "session_id" field.
func SessionIDNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldSessionID, v))
}

// SessionIDIn applies the In predicate on the "session_id" field.
func SessionIDIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldSessionID, vs...))
}

// SessionIDNotIn applies the NotIn predicate on the "session_id" field.
func SessionIDNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldSessionID, vs...))
}

// SessionIDGT applies the GT predicate on the "session_id" field.
func SessionIDGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldSessionID, v))
}

// SessionIDGTE applies the GTE predicate on the "session_id" field.
func SessionIDGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldSessionID, v))
}

// SessionIDLT applies the LT predicate on the "session_id" field.
func SessionIDLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldSessionID, v))
}

// SessionIDLTE applies the LTE predicate on the "session_id" field.
func SessionIDLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldSessionID, v))
}

// SessionIDContains applies the Contains predicate on the "session_id" field.
func SessionIDContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldSessionID, v))
}

// SessionIDHasPrefix applies the HasPrefix predicate on the "session_id" field.
func SessionIDHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldSessionID, v))
}

// SessionIDHasSuffix applies the HasSuffix predicate on the "session_id" field.
func SessionIDHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldSessionID, v))
}

// SessionIDIsNil applies the IsNil predicate on the "session_id" field.
func SessionIDIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldSessionID))
}

// SessionIDNotNil applies the NotNil predicate on the "session_id" field.
func SessionIDNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldSessionID))
}

// SessionIDEqualFold applies the EqualFold predicate on the "session_id" field.
func SessionIDEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldSessionID, v))
}

// SessionIDContainsFold applies the ContainsFold predicate on the "session_id" field.
func SessionIDContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldSessionID, v))
}

// TraceIDEQ applies the EQ predicate on the "trace_id" field.
func TraceIDEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldTraceID, v))
}

// TraceIDNEQ applies the NEQ predicate on the "trace_id" field.
func TraceIDNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldTraceID, v))
}

// TraceIDIn applies the In predicate on the "trace_id" field.
func TraceIDIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldTraceID, vs...))
}

// TraceIDNotIn applies the NotIn predicate on the "trace_id" field.
func TraceIDNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldTraceID, vs...))
}

// TraceIDGT applies the GT predicate on the "trace_id" field.
func TraceIDGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldTraceID, v))
}

// TraceIDGTE applies the GTE predicate on the "trace_id" field.
func TraceIDGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldTraceID, v))
}

// TraceIDLT applies the LT predicate on the "trace_id" field.
func TraceIDLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldTraceID, v))
}

// TraceIDLTE applies the LTE predicate on the "trace_id" field.
func TraceIDLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldTraceID, v))
}

// TraceIDContains applies the Contains predicate on the "trace_id" field.
func TraceIDContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldTraceID, v))
}

// TraceIDHasPrefix applies the HasPrefix predicate on the "trace_id" field.
func TraceIDHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldTraceID, v))
}

// TraceIDHasSuffix applies the HasSuffix predicate on the "trace_id" field.
func TraceIDHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldTraceID, v))
}

// TraceIDIsNil applies the IsNil predicate on the "trace_id" field.
func TraceIDIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldTraceID))
}

// TraceIDNotNil applies the NotNil predicate on the "trace_id" field.
func TraceIDNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldTraceID))
}

// TraceIDEqualFold applies the EqualFold predicate on the "trace_id" field.
func TraceIDEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldTraceID, v))
}

// TraceIDContainsFold applies the ContainsFold predicate on the "trace_id" field.
func TraceIDContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldTraceID, v))
}

// BusinessDataEQ applies the EQ predicate on the "business_data" field.
func BusinessDataEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldBusinessData, v))
}

// BusinessDataNEQ applies the NEQ predicate on the "business_data" field.
func BusinessDataNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldBusinessData, v))
}

// BusinessDataIn applies the In predicate on the "business_data" field.
func BusinessDataIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldBusinessData, vs...))
}

// BusinessDataNotIn applies the NotIn predicate on the "business_data" field.
func BusinessDataNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldBusinessData, vs...))
}

// BusinessDataGT applies the GT predicate on the "business_data" field.
func BusinessDataGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldBusinessData, v))
}

// BusinessDataGTE applies the GTE predicate on the "business_data" field.
func BusinessDataGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldBusinessData, v))
}

// BusinessDataLT applies the LT predicate on the "business_data" field.
func BusinessDataLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldBusinessData, v))
}

// BusinessDataLTE applies the LTE predicate on the "business_data" field.
func BusinessDataLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldBusinessData, v))
}

// BusinessDataContains applies the Contains predicate on the "business_data" field.
func BusinessDataContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldBusinessData, v))
}

// BusinessDataHasPrefix applies the HasPrefix predicate on the "business_data" field.
func BusinessDataHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldBusinessData, v))
}

// BusinessDataHasSuffix applies the HasSuffix predicate on the "business_data" field.
func BusinessDataHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldBusinessData, v))
}

// BusinessDataIsNil applies the IsNil predicate on the "business_data" field.
func BusinessDataIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldBusinessData))
}

// BusinessDataNotNil applies the NotNil predicate on the "business_data" field.
func BusinessDataNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldBusinessData))
}

// BusinessDataEqualFold applies the EqualFold predicate on the "business_data" field.
func BusinessDataEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldBusinessData, v))
}

// BusinessDataContainsFold applies the ContainsFold predicate on the "business_data" field.
func BusinessDataContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldBusinessData, v))
}

// ChangesEQ applies the EQ predicate on the "changes" field.
func ChangesEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldChanges, v))
}

// ChangesNEQ applies the NEQ predicate on the "changes" field.
func ChangesNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldChanges, v))
}

// ChangesIn applies the In predicate on the "changes" field.
func ChangesIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldChanges, vs...))
}

// ChangesNotIn applies the NotIn predicate on the "changes" field.
func ChangesNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldChanges, vs...))
}

// ChangesGT applies the GT predicate on the "changes" field.
func ChangesGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldChanges, v))
}

// ChangesGTE applies the GTE predicate on the "changes" field.
func ChangesGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldChanges, v))
}

// ChangesLT applies the LT predicate on the "changes" field.
func ChangesLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldChanges, v))
}

// ChangesLTE applies the LTE predicate on the "changes" field.
func ChangesLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldChanges, v))
}

// ChangesContains applies the Contains predicate on the "changes" field.
func ChangesContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldChanges, v))
}

// ChangesHasPrefix applies the HasPrefix predicate on the "changes" field.
func ChangesHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldChanges, v))
}

// ChangesHasSuffix applies the HasSuffix predicate on the "changes" field.
func ChangesHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldChanges, v))
}

// ChangesIsNil applies the IsNil predicate on the "changes" field.
func ChangesIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldChanges))
}

// ChangesNotNil applies the NotNil predicate on the "changes" field.
func ChangesNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldChanges))
}

// ChangesEqualFold applies the EqualFold predicate on the "changes" field.
func ChangesEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldChanges, v))
}

// ChangesContainsFold applies the ContainsFold predicate on the "changes" field.
func ChangesContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldChanges, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldUpdatedAt, v))
}

// DurationMsEQ applies the EQ predicate on the "duration_ms" field.
func DurationMsEQ(v int64) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldDurationMs, v))
}

// DurationMsNEQ applies the NEQ predicate on the "duration_ms" field.
func DurationMsNEQ(v int64) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldDurationMs, v))
}

// DurationMsIn applies the In predicate on the "duration_ms" field.
func DurationMsIn(vs ...int64) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldDurationMs, vs...))
}

// DurationMsNotIn applies the NotIn predicate on the "duration_ms" field.
func DurationMsNotIn(vs ...int64) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldDurationMs, vs...))
}

// DurationMsGT applies the GT predicate on the "duration_ms" field.
func DurationMsGT(v int64) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldDurationMs, v))
}

// DurationMsGTE applies the GTE predicate on the "duration_ms" field.
func DurationMsGTE(v int64) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldDurationMs, v))
}

// DurationMsLT applies the LT predicate on the "duration_ms" field.
func DurationMsLT(v int64) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldDurationMs, v))
}

// DurationMsLTE applies the LTE predicate on the "duration_ms" field.
func DurationMsLTE(v int64) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldDurationMs, v))
}

// DurationMsIsNil applies the IsNil predicate on the "duration_ms" field.
func DurationMsIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldDurationMs))
}

// DurationMsNotNil applies the NotNil predicate on the "duration_ms" field.
func DurationMsNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldDurationMs))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuditLog) predicate.AuditLog {
	return predicate.AuditLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuditLog) predicate.AuditLog {
	return predicate.AuditLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuditLog) predicate.AuditLog {
	return predicate.AuditLog(sql.NotPredicates(p))
}
