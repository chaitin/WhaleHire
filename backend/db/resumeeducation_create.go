// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumeeducation"
	"github.com/google/uuid"
)

// ResumeEducationCreate is the builder for creating a ResumeEducation entity.
type ResumeEducationCreate struct {
	config
	mutation *ResumeEducationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (rec *ResumeEducationCreate) SetDeletedAt(t time.Time) *ResumeEducationCreate {
	rec.mutation.SetDeletedAt(t)
	return rec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rec *ResumeEducationCreate) SetNillableDeletedAt(t *time.Time) *ResumeEducationCreate {
	if t != nil {
		rec.SetDeletedAt(*t)
	}
	return rec
}

// SetResumeID sets the "resume_id" field.
func (rec *ResumeEducationCreate) SetResumeID(u uuid.UUID) *ResumeEducationCreate {
	rec.mutation.SetResumeID(u)
	return rec
}

// SetSchool sets the "school" field.
func (rec *ResumeEducationCreate) SetSchool(s string) *ResumeEducationCreate {
	rec.mutation.SetSchool(s)
	return rec
}

// SetNillableSchool sets the "school" field if the given value is not nil.
func (rec *ResumeEducationCreate) SetNillableSchool(s *string) *ResumeEducationCreate {
	if s != nil {
		rec.SetSchool(*s)
	}
	return rec
}

// SetDegree sets the "degree" field.
func (rec *ResumeEducationCreate) SetDegree(s string) *ResumeEducationCreate {
	rec.mutation.SetDegree(s)
	return rec
}

// SetNillableDegree sets the "degree" field if the given value is not nil.
func (rec *ResumeEducationCreate) SetNillableDegree(s *string) *ResumeEducationCreate {
	if s != nil {
		rec.SetDegree(*s)
	}
	return rec
}

// SetMajor sets the "major" field.
func (rec *ResumeEducationCreate) SetMajor(s string) *ResumeEducationCreate {
	rec.mutation.SetMajor(s)
	return rec
}

// SetNillableMajor sets the "major" field if the given value is not nil.
func (rec *ResumeEducationCreate) SetNillableMajor(s *string) *ResumeEducationCreate {
	if s != nil {
		rec.SetMajor(*s)
	}
	return rec
}

// SetGpa sets the "gpa" field.
func (rec *ResumeEducationCreate) SetGpa(f float64) *ResumeEducationCreate {
	rec.mutation.SetGpa(f)
	return rec
}

// SetNillableGpa sets the "gpa" field if the given value is not nil.
func (rec *ResumeEducationCreate) SetNillableGpa(f *float64) *ResumeEducationCreate {
	if f != nil {
		rec.SetGpa(*f)
	}
	return rec
}

// SetUniversityTypes sets the "university_types" field.
func (rec *ResumeEducationCreate) SetUniversityTypes(ct []consts.UniversityType) *ResumeEducationCreate {
	rec.mutation.SetUniversityTypes(ct)
	return rec
}

// SetStartDate sets the "start_date" field.
func (rec *ResumeEducationCreate) SetStartDate(t time.Time) *ResumeEducationCreate {
	rec.mutation.SetStartDate(t)
	return rec
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (rec *ResumeEducationCreate) SetNillableStartDate(t *time.Time) *ResumeEducationCreate {
	if t != nil {
		rec.SetStartDate(*t)
	}
	return rec
}

// SetEndDate sets the "end_date" field.
func (rec *ResumeEducationCreate) SetEndDate(t time.Time) *ResumeEducationCreate {
	rec.mutation.SetEndDate(t)
	return rec
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (rec *ResumeEducationCreate) SetNillableEndDate(t *time.Time) *ResumeEducationCreate {
	if t != nil {
		rec.SetEndDate(*t)
	}
	return rec
}

// SetCreatedAt sets the "created_at" field.
func (rec *ResumeEducationCreate) SetCreatedAt(t time.Time) *ResumeEducationCreate {
	rec.mutation.SetCreatedAt(t)
	return rec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rec *ResumeEducationCreate) SetNillableCreatedAt(t *time.Time) *ResumeEducationCreate {
	if t != nil {
		rec.SetCreatedAt(*t)
	}
	return rec
}

// SetUpdatedAt sets the "updated_at" field.
func (rec *ResumeEducationCreate) SetUpdatedAt(t time.Time) *ResumeEducationCreate {
	rec.mutation.SetUpdatedAt(t)
	return rec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rec *ResumeEducationCreate) SetNillableUpdatedAt(t *time.Time) *ResumeEducationCreate {
	if t != nil {
		rec.SetUpdatedAt(*t)
	}
	return rec
}

// SetID sets the "id" field.
func (rec *ResumeEducationCreate) SetID(u uuid.UUID) *ResumeEducationCreate {
	rec.mutation.SetID(u)
	return rec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rec *ResumeEducationCreate) SetNillableID(u *uuid.UUID) *ResumeEducationCreate {
	if u != nil {
		rec.SetID(*u)
	}
	return rec
}

// SetResume sets the "resume" edge to the Resume entity.
func (rec *ResumeEducationCreate) SetResume(r *Resume) *ResumeEducationCreate {
	return rec.SetResumeID(r.ID)
}

// Mutation returns the ResumeEducationMutation object of the builder.
func (rec *ResumeEducationCreate) Mutation() *ResumeEducationMutation {
	return rec.mutation
}

// Save creates the ResumeEducation in the database.
func (rec *ResumeEducationCreate) Save(ctx context.Context) (*ResumeEducation, error) {
	if err := rec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rec.sqlSave, rec.mutation, rec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rec *ResumeEducationCreate) SaveX(ctx context.Context) *ResumeEducation {
	v, err := rec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rec *ResumeEducationCreate) Exec(ctx context.Context) error {
	_, err := rec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rec *ResumeEducationCreate) ExecX(ctx context.Context) {
	if err := rec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rec *ResumeEducationCreate) defaults() error {
	if _, ok := rec.mutation.CreatedAt(); !ok {
		if resumeeducation.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized resumeeducation.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := resumeeducation.DefaultCreatedAt()
		rec.mutation.SetCreatedAt(v)
	}
	if _, ok := rec.mutation.UpdatedAt(); !ok {
		if resumeeducation.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumeeducation.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumeeducation.DefaultUpdatedAt()
		rec.mutation.SetUpdatedAt(v)
	}
	if _, ok := rec.mutation.ID(); !ok {
		if resumeeducation.DefaultID == nil {
			return fmt.Errorf("db: uninitialized resumeeducation.DefaultID (forgotten import db/runtime?)")
		}
		v := resumeeducation.DefaultID()
		rec.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rec *ResumeEducationCreate) check() error {
	if _, ok := rec.mutation.ResumeID(); !ok {
		return &ValidationError{Name: "resume_id", err: errors.New(`db: missing required field "ResumeEducation.resume_id"`)}
	}
	if _, ok := rec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ResumeEducation.created_at"`)}
	}
	if _, ok := rec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "ResumeEducation.updated_at"`)}
	}
	if len(rec.mutation.ResumeIDs()) == 0 {
		return &ValidationError{Name: "resume", err: errors.New(`db: missing required edge "ResumeEducation.resume"`)}
	}
	return nil
}

func (rec *ResumeEducationCreate) sqlSave(ctx context.Context) (*ResumeEducation, error) {
	if err := rec.check(); err != nil {
		return nil, err
	}
	_node, _spec := rec.createSpec()
	if err := sqlgraph.CreateNode(ctx, rec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rec.mutation.id = &_node.ID
	rec.mutation.done = true
	return _node, nil
}

func (rec *ResumeEducationCreate) createSpec() (*ResumeEducation, *sqlgraph.CreateSpec) {
	var (
		_node = &ResumeEducation{config: rec.config}
		_spec = sqlgraph.NewCreateSpec(resumeeducation.Table, sqlgraph.NewFieldSpec(resumeeducation.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rec.conflict
	if id, ok := rec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rec.mutation.DeletedAt(); ok {
		_spec.SetField(resumeeducation.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rec.mutation.School(); ok {
		_spec.SetField(resumeeducation.FieldSchool, field.TypeString, value)
		_node.School = value
	}
	if value, ok := rec.mutation.Degree(); ok {
		_spec.SetField(resumeeducation.FieldDegree, field.TypeString, value)
		_node.Degree = value
	}
	if value, ok := rec.mutation.Major(); ok {
		_spec.SetField(resumeeducation.FieldMajor, field.TypeString, value)
		_node.Major = value
	}
	if value, ok := rec.mutation.Gpa(); ok {
		_spec.SetField(resumeeducation.FieldGpa, field.TypeFloat64, value)
		_node.Gpa = value
	}
	if value, ok := rec.mutation.UniversityTypes(); ok {
		_spec.SetField(resumeeducation.FieldUniversityTypes, field.TypeJSON, value)
		_node.UniversityTypes = value
	}
	if value, ok := rec.mutation.StartDate(); ok {
		_spec.SetField(resumeeducation.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := rec.mutation.EndDate(); ok {
		_spec.SetField(resumeeducation.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := rec.mutation.CreatedAt(); ok {
		_spec.SetField(resumeeducation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rec.mutation.UpdatedAt(); ok {
		_spec.SetField(resumeeducation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rec.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeeducation.ResumeTable,
			Columns: []string{resumeeducation.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResumeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeEducation.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeEducationUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rec *ResumeEducationCreate) OnConflict(opts ...sql.ConflictOption) *ResumeEducationUpsertOne {
	rec.conflict = opts
	return &ResumeEducationUpsertOne{
		create: rec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeEducation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rec *ResumeEducationCreate) OnConflictColumns(columns ...string) *ResumeEducationUpsertOne {
	rec.conflict = append(rec.conflict, sql.ConflictColumns(columns...))
	return &ResumeEducationUpsertOne{
		create: rec,
	}
}

type (
	// ResumeEducationUpsertOne is the builder for "upsert"-ing
	//  one ResumeEducation node.
	ResumeEducationUpsertOne struct {
		create *ResumeEducationCreate
	}

	// ResumeEducationUpsert is the "OnConflict" setter.
	ResumeEducationUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeEducationUpsert) SetDeletedAt(v time.Time) *ResumeEducationUpsert {
	u.Set(resumeeducation.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeEducationUpsert) UpdateDeletedAt() *ResumeEducationUpsert {
	u.SetExcluded(resumeeducation.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeEducationUpsert) ClearDeletedAt() *ResumeEducationUpsert {
	u.SetNull(resumeeducation.FieldDeletedAt)
	return u
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeEducationUpsert) SetResumeID(v uuid.UUID) *ResumeEducationUpsert {
	u.Set(resumeeducation.FieldResumeID, v)
	return u
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeEducationUpsert) UpdateResumeID() *ResumeEducationUpsert {
	u.SetExcluded(resumeeducation.FieldResumeID)
	return u
}

// SetSchool sets the "school" field.
func (u *ResumeEducationUpsert) SetSchool(v string) *ResumeEducationUpsert {
	u.Set(resumeeducation.FieldSchool, v)
	return u
}

// UpdateSchool sets the "school" field to the value that was provided on create.
func (u *ResumeEducationUpsert) UpdateSchool() *ResumeEducationUpsert {
	u.SetExcluded(resumeeducation.FieldSchool)
	return u
}

// ClearSchool clears the value of the "school" field.
func (u *ResumeEducationUpsert) ClearSchool() *ResumeEducationUpsert {
	u.SetNull(resumeeducation.FieldSchool)
	return u
}

// SetDegree sets the "degree" field.
func (u *ResumeEducationUpsert) SetDegree(v string) *ResumeEducationUpsert {
	u.Set(resumeeducation.FieldDegree, v)
	return u
}

// UpdateDegree sets the "degree" field to the value that was provided on create.
func (u *ResumeEducationUpsert) UpdateDegree() *ResumeEducationUpsert {
	u.SetExcluded(resumeeducation.FieldDegree)
	return u
}

// ClearDegree clears the value of the "degree" field.
func (u *ResumeEducationUpsert) ClearDegree() *ResumeEducationUpsert {
	u.SetNull(resumeeducation.FieldDegree)
	return u
}

// SetMajor sets the "major" field.
func (u *ResumeEducationUpsert) SetMajor(v string) *ResumeEducationUpsert {
	u.Set(resumeeducation.FieldMajor, v)
	return u
}

// UpdateMajor sets the "major" field to the value that was provided on create.
func (u *ResumeEducationUpsert) UpdateMajor() *ResumeEducationUpsert {
	u.SetExcluded(resumeeducation.FieldMajor)
	return u
}

// ClearMajor clears the value of the "major" field.
func (u *ResumeEducationUpsert) ClearMajor() *ResumeEducationUpsert {
	u.SetNull(resumeeducation.FieldMajor)
	return u
}

// SetGpa sets the "gpa" field.
func (u *ResumeEducationUpsert) SetGpa(v float64) *ResumeEducationUpsert {
	u.Set(resumeeducation.FieldGpa, v)
	return u
}

// UpdateGpa sets the "gpa" field to the value that was provided on create.
func (u *ResumeEducationUpsert) UpdateGpa() *ResumeEducationUpsert {
	u.SetExcluded(resumeeducation.FieldGpa)
	return u
}

// AddGpa adds v to the "gpa" field.
func (u *ResumeEducationUpsert) AddGpa(v float64) *ResumeEducationUpsert {
	u.Add(resumeeducation.FieldGpa, v)
	return u
}

// ClearGpa clears the value of the "gpa" field.
func (u *ResumeEducationUpsert) ClearGpa() *ResumeEducationUpsert {
	u.SetNull(resumeeducation.FieldGpa)
	return u
}

// SetUniversityTypes sets the "university_types" field.
func (u *ResumeEducationUpsert) SetUniversityTypes(v []consts.UniversityType) *ResumeEducationUpsert {
	u.Set(resumeeducation.FieldUniversityTypes, v)
	return u
}

// UpdateUniversityTypes sets the "university_types" field to the value that was provided on create.
func (u *ResumeEducationUpsert) UpdateUniversityTypes() *ResumeEducationUpsert {
	u.SetExcluded(resumeeducation.FieldUniversityTypes)
	return u
}

// ClearUniversityTypes clears the value of the "university_types" field.
func (u *ResumeEducationUpsert) ClearUniversityTypes() *ResumeEducationUpsert {
	u.SetNull(resumeeducation.FieldUniversityTypes)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *ResumeEducationUpsert) SetStartDate(v time.Time) *ResumeEducationUpsert {
	u.Set(resumeeducation.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *ResumeEducationUpsert) UpdateStartDate() *ResumeEducationUpsert {
	u.SetExcluded(resumeeducation.FieldStartDate)
	return u
}

// ClearStartDate clears the value of the "start_date" field.
func (u *ResumeEducationUpsert) ClearStartDate() *ResumeEducationUpsert {
	u.SetNull(resumeeducation.FieldStartDate)
	return u
}

// SetEndDate sets the "end_date" field.
func (u *ResumeEducationUpsert) SetEndDate(v time.Time) *ResumeEducationUpsert {
	u.Set(resumeeducation.FieldEndDate, v)
	return u
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *ResumeEducationUpsert) UpdateEndDate() *ResumeEducationUpsert {
	u.SetExcluded(resumeeducation.FieldEndDate)
	return u
}

// ClearEndDate clears the value of the "end_date" field.
func (u *ResumeEducationUpsert) ClearEndDate() *ResumeEducationUpsert {
	u.SetNull(resumeeducation.FieldEndDate)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeEducationUpsert) SetCreatedAt(v time.Time) *ResumeEducationUpsert {
	u.Set(resumeeducation.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeEducationUpsert) UpdateCreatedAt() *ResumeEducationUpsert {
	u.SetExcluded(resumeeducation.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeEducationUpsert) SetUpdatedAt(v time.Time) *ResumeEducationUpsert {
	u.Set(resumeeducation.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeEducationUpsert) UpdateUpdatedAt() *ResumeEducationUpsert {
	u.SetExcluded(resumeeducation.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ResumeEducation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumeeducation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeEducationUpsertOne) UpdateNewValues() *ResumeEducationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resumeeducation.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeEducation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResumeEducationUpsertOne) Ignore() *ResumeEducationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeEducationUpsertOne) DoNothing() *ResumeEducationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeEducationCreate.OnConflict
// documentation for more info.
func (u *ResumeEducationUpsertOne) Update(set func(*ResumeEducationUpsert)) *ResumeEducationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeEducationUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeEducationUpsertOne) SetDeletedAt(v time.Time) *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeEducationUpsertOne) UpdateDeletedAt() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeEducationUpsertOne) ClearDeletedAt() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.ClearDeletedAt()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeEducationUpsertOne) SetResumeID(v uuid.UUID) *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeEducationUpsertOne) UpdateResumeID() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateResumeID()
	})
}

// SetSchool sets the "school" field.
func (u *ResumeEducationUpsertOne) SetSchool(v string) *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetSchool(v)
	})
}

// UpdateSchool sets the "school" field to the value that was provided on create.
func (u *ResumeEducationUpsertOne) UpdateSchool() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateSchool()
	})
}

// ClearSchool clears the value of the "school" field.
func (u *ResumeEducationUpsertOne) ClearSchool() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.ClearSchool()
	})
}

// SetDegree sets the "degree" field.
func (u *ResumeEducationUpsertOne) SetDegree(v string) *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetDegree(v)
	})
}

// UpdateDegree sets the "degree" field to the value that was provided on create.
func (u *ResumeEducationUpsertOne) UpdateDegree() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateDegree()
	})
}

// ClearDegree clears the value of the "degree" field.
func (u *ResumeEducationUpsertOne) ClearDegree() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.ClearDegree()
	})
}

// SetMajor sets the "major" field.
func (u *ResumeEducationUpsertOne) SetMajor(v string) *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetMajor(v)
	})
}

// UpdateMajor sets the "major" field to the value that was provided on create.
func (u *ResumeEducationUpsertOne) UpdateMajor() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateMajor()
	})
}

// ClearMajor clears the value of the "major" field.
func (u *ResumeEducationUpsertOne) ClearMajor() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.ClearMajor()
	})
}

// SetGpa sets the "gpa" field.
func (u *ResumeEducationUpsertOne) SetGpa(v float64) *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetGpa(v)
	})
}

// AddGpa adds v to the "gpa" field.
func (u *ResumeEducationUpsertOne) AddGpa(v float64) *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.AddGpa(v)
	})
}

// UpdateGpa sets the "gpa" field to the value that was provided on create.
func (u *ResumeEducationUpsertOne) UpdateGpa() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateGpa()
	})
}

// ClearGpa clears the value of the "gpa" field.
func (u *ResumeEducationUpsertOne) ClearGpa() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.ClearGpa()
	})
}

// SetUniversityTypes sets the "university_types" field.
func (u *ResumeEducationUpsertOne) SetUniversityTypes(v []consts.UniversityType) *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetUniversityTypes(v)
	})
}

// UpdateUniversityTypes sets the "university_types" field to the value that was provided on create.
func (u *ResumeEducationUpsertOne) UpdateUniversityTypes() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateUniversityTypes()
	})
}

// ClearUniversityTypes clears the value of the "university_types" field.
func (u *ResumeEducationUpsertOne) ClearUniversityTypes() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.ClearUniversityTypes()
	})
}

// SetStartDate sets the "start_date" field.
func (u *ResumeEducationUpsertOne) SetStartDate(v time.Time) *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *ResumeEducationUpsertOne) UpdateStartDate() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *ResumeEducationUpsertOne) ClearStartDate() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *ResumeEducationUpsertOne) SetEndDate(v time.Time) *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *ResumeEducationUpsertOne) UpdateEndDate() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *ResumeEducationUpsertOne) ClearEndDate() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.ClearEndDate()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeEducationUpsertOne) SetCreatedAt(v time.Time) *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeEducationUpsertOne) UpdateCreatedAt() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeEducationUpsertOne) SetUpdatedAt(v time.Time) *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeEducationUpsertOne) UpdateUpdatedAt() *ResumeEducationUpsertOne {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeEducationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeEducationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeEducationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResumeEducationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ResumeEducationUpsertOne.ID is not supported by MySQL driver. Use ResumeEducationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResumeEducationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResumeEducationCreateBulk is the builder for creating many ResumeEducation entities in bulk.
type ResumeEducationCreateBulk struct {
	config
	err      error
	builders []*ResumeEducationCreate
	conflict []sql.ConflictOption
}

// Save creates the ResumeEducation entities in the database.
func (recb *ResumeEducationCreateBulk) Save(ctx context.Context) ([]*ResumeEducation, error) {
	if recb.err != nil {
		return nil, recb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(recb.builders))
	nodes := make([]*ResumeEducation, len(recb.builders))
	mutators := make([]Mutator, len(recb.builders))
	for i := range recb.builders {
		func(i int, root context.Context) {
			builder := recb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResumeEducationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, recb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = recb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, recb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, recb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (recb *ResumeEducationCreateBulk) SaveX(ctx context.Context) []*ResumeEducation {
	v, err := recb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (recb *ResumeEducationCreateBulk) Exec(ctx context.Context) error {
	_, err := recb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (recb *ResumeEducationCreateBulk) ExecX(ctx context.Context) {
	if err := recb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeEducation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeEducationUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (recb *ResumeEducationCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResumeEducationUpsertBulk {
	recb.conflict = opts
	return &ResumeEducationUpsertBulk{
		create: recb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeEducation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (recb *ResumeEducationCreateBulk) OnConflictColumns(columns ...string) *ResumeEducationUpsertBulk {
	recb.conflict = append(recb.conflict, sql.ConflictColumns(columns...))
	return &ResumeEducationUpsertBulk{
		create: recb,
	}
}

// ResumeEducationUpsertBulk is the builder for "upsert"-ing
// a bulk of ResumeEducation nodes.
type ResumeEducationUpsertBulk struct {
	create *ResumeEducationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ResumeEducation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumeeducation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeEducationUpsertBulk) UpdateNewValues() *ResumeEducationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resumeeducation.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeEducation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResumeEducationUpsertBulk) Ignore() *ResumeEducationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeEducationUpsertBulk) DoNothing() *ResumeEducationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeEducationCreateBulk.OnConflict
// documentation for more info.
func (u *ResumeEducationUpsertBulk) Update(set func(*ResumeEducationUpsert)) *ResumeEducationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeEducationUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeEducationUpsertBulk) SetDeletedAt(v time.Time) *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeEducationUpsertBulk) UpdateDeletedAt() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeEducationUpsertBulk) ClearDeletedAt() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.ClearDeletedAt()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeEducationUpsertBulk) SetResumeID(v uuid.UUID) *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeEducationUpsertBulk) UpdateResumeID() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateResumeID()
	})
}

// SetSchool sets the "school" field.
func (u *ResumeEducationUpsertBulk) SetSchool(v string) *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetSchool(v)
	})
}

// UpdateSchool sets the "school" field to the value that was provided on create.
func (u *ResumeEducationUpsertBulk) UpdateSchool() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateSchool()
	})
}

// ClearSchool clears the value of the "school" field.
func (u *ResumeEducationUpsertBulk) ClearSchool() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.ClearSchool()
	})
}

// SetDegree sets the "degree" field.
func (u *ResumeEducationUpsertBulk) SetDegree(v string) *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetDegree(v)
	})
}

// UpdateDegree sets the "degree" field to the value that was provided on create.
func (u *ResumeEducationUpsertBulk) UpdateDegree() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateDegree()
	})
}

// ClearDegree clears the value of the "degree" field.
func (u *ResumeEducationUpsertBulk) ClearDegree() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.ClearDegree()
	})
}

// SetMajor sets the "major" field.
func (u *ResumeEducationUpsertBulk) SetMajor(v string) *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetMajor(v)
	})
}

// UpdateMajor sets the "major" field to the value that was provided on create.
func (u *ResumeEducationUpsertBulk) UpdateMajor() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateMajor()
	})
}

// ClearMajor clears the value of the "major" field.
func (u *ResumeEducationUpsertBulk) ClearMajor() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.ClearMajor()
	})
}

// SetGpa sets the "gpa" field.
func (u *ResumeEducationUpsertBulk) SetGpa(v float64) *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetGpa(v)
	})
}

// AddGpa adds v to the "gpa" field.
func (u *ResumeEducationUpsertBulk) AddGpa(v float64) *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.AddGpa(v)
	})
}

// UpdateGpa sets the "gpa" field to the value that was provided on create.
func (u *ResumeEducationUpsertBulk) UpdateGpa() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateGpa()
	})
}

// ClearGpa clears the value of the "gpa" field.
func (u *ResumeEducationUpsertBulk) ClearGpa() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.ClearGpa()
	})
}

// SetUniversityTypes sets the "university_types" field.
func (u *ResumeEducationUpsertBulk) SetUniversityTypes(v []consts.UniversityType) *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetUniversityTypes(v)
	})
}

// UpdateUniversityTypes sets the "university_types" field to the value that was provided on create.
func (u *ResumeEducationUpsertBulk) UpdateUniversityTypes() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateUniversityTypes()
	})
}

// ClearUniversityTypes clears the value of the "university_types" field.
func (u *ResumeEducationUpsertBulk) ClearUniversityTypes() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.ClearUniversityTypes()
	})
}

// SetStartDate sets the "start_date" field.
func (u *ResumeEducationUpsertBulk) SetStartDate(v time.Time) *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *ResumeEducationUpsertBulk) UpdateStartDate() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *ResumeEducationUpsertBulk) ClearStartDate() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *ResumeEducationUpsertBulk) SetEndDate(v time.Time) *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *ResumeEducationUpsertBulk) UpdateEndDate() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *ResumeEducationUpsertBulk) ClearEndDate() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.ClearEndDate()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeEducationUpsertBulk) SetCreatedAt(v time.Time) *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeEducationUpsertBulk) UpdateCreatedAt() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeEducationUpsertBulk) SetUpdatedAt(v time.Time) *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeEducationUpsertBulk) UpdateUpdatedAt() *ResumeEducationUpsertBulk {
	return u.Update(func(s *ResumeEducationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeEducationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ResumeEducationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeEducationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeEducationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
