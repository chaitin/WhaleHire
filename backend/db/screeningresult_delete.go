// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/screeningresult"
)

// ScreeningResultDelete is the builder for deleting a ScreeningResult entity.
type ScreeningResultDelete struct {
	config
	hooks    []Hook
	mutation *ScreeningResultMutation
}

// Where appends a list predicates to the ScreeningResultDelete builder.
func (srd *ScreeningResultDelete) Where(ps ...predicate.ScreeningResult) *ScreeningResultDelete {
	srd.mutation.Where(ps...)
	return srd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (srd *ScreeningResultDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, srd.sqlExec, srd.mutation, srd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (srd *ScreeningResultDelete) ExecX(ctx context.Context) int {
	n, err := srd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (srd *ScreeningResultDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(screeningresult.Table, sqlgraph.NewFieldSpec(screeningresult.FieldID, field.TypeUUID))
	if ps := srd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, srd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	srd.mutation.done = true
	return affected, err
}

// ScreeningResultDeleteOne is the builder for deleting a single ScreeningResult entity.
type ScreeningResultDeleteOne struct {
	srd *ScreeningResultDelete
}

// Where appends a list predicates to the ScreeningResultDelete builder.
func (srdo *ScreeningResultDeleteOne) Where(ps ...predicate.ScreeningResult) *ScreeningResultDeleteOne {
	srdo.srd.mutation.Where(ps...)
	return srdo
}

// Exec executes the deletion query.
func (srdo *ScreeningResultDeleteOne) Exec(ctx context.Context) error {
	n, err := srdo.srd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{screeningresult.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (srdo *ScreeningResultDeleteOne) ExecX(ctx context.Context) {
	if err := srdo.Exec(ctx); err != nil {
		panic(err)
	}
}
