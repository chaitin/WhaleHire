// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobskillmeta"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
)

// JobSkillMetaDelete is the builder for deleting a JobSkillMeta entity.
type JobSkillMetaDelete struct {
	config
	hooks    []Hook
	mutation *JobSkillMetaMutation
}

// Where appends a list predicates to the JobSkillMetaDelete builder.
func (jsmd *JobSkillMetaDelete) Where(ps ...predicate.JobSkillMeta) *JobSkillMetaDelete {
	jsmd.mutation.Where(ps...)
	return jsmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jsmd *JobSkillMetaDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, jsmd.sqlExec, jsmd.mutation, jsmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jsmd *JobSkillMetaDelete) ExecX(ctx context.Context) int {
	n, err := jsmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jsmd *JobSkillMetaDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(jobskillmeta.Table, sqlgraph.NewFieldSpec(jobskillmeta.FieldID, field.TypeUUID))
	if ps := jsmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jsmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jsmd.mutation.done = true
	return affected, err
}

// JobSkillMetaDeleteOne is the builder for deleting a single JobSkillMeta entity.
type JobSkillMetaDeleteOne struct {
	jsmd *JobSkillMetaDelete
}

// Where appends a list predicates to the JobSkillMetaDelete builder.
func (jsmdo *JobSkillMetaDeleteOne) Where(ps ...predicate.JobSkillMeta) *JobSkillMetaDeleteOne {
	jsmdo.jsmd.mutation.Where(ps...)
	return jsmdo
}

// Exec executes the deletion query.
func (jsmdo *JobSkillMetaDeleteOne) Exec(ctx context.Context) error {
	n, err := jsmdo.jsmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{jobskillmeta.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jsmdo *JobSkillMetaDeleteOne) ExecX(ctx context.Context) {
	if err := jsmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
