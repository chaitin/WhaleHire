// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/notificationsetting"
	"github.com/google/uuid"
)

// NotificationSettingCreate is the builder for creating a NotificationSetting entity.
type NotificationSettingCreate struct {
	config
	mutation *NotificationSettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (nsc *NotificationSettingCreate) SetDeletedAt(t time.Time) *NotificationSettingCreate {
	nsc.mutation.SetDeletedAt(t)
	return nsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillableDeletedAt(t *time.Time) *NotificationSettingCreate {
	if t != nil {
		nsc.SetDeletedAt(*t)
	}
	return nsc
}

// SetChannel sets the "channel" field.
func (nsc *NotificationSettingCreate) SetChannel(cc consts.NotificationChannel) *NotificationSettingCreate {
	nsc.mutation.SetChannel(cc)
	return nsc
}

// SetEnabled sets the "enabled" field.
func (nsc *NotificationSettingCreate) SetEnabled(b bool) *NotificationSettingCreate {
	nsc.mutation.SetEnabled(b)
	return nsc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillableEnabled(b *bool) *NotificationSettingCreate {
	if b != nil {
		nsc.SetEnabled(*b)
	}
	return nsc
}

// SetDingtalkConfig sets the "dingtalk_config" field.
func (nsc *NotificationSettingCreate) SetDingtalkConfig(m map[string]interface{}) *NotificationSettingCreate {
	nsc.mutation.SetDingtalkConfig(m)
	return nsc
}

// SetMaxRetry sets the "max_retry" field.
func (nsc *NotificationSettingCreate) SetMaxRetry(i int) *NotificationSettingCreate {
	nsc.mutation.SetMaxRetry(i)
	return nsc
}

// SetNillableMaxRetry sets the "max_retry" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillableMaxRetry(i *int) *NotificationSettingCreate {
	if i != nil {
		nsc.SetMaxRetry(*i)
	}
	return nsc
}

// SetTimeout sets the "timeout" field.
func (nsc *NotificationSettingCreate) SetTimeout(i int) *NotificationSettingCreate {
	nsc.mutation.SetTimeout(i)
	return nsc
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillableTimeout(i *int) *NotificationSettingCreate {
	if i != nil {
		nsc.SetTimeout(*i)
	}
	return nsc
}

// SetDescription sets the "description" field.
func (nsc *NotificationSettingCreate) SetDescription(s string) *NotificationSettingCreate {
	nsc.mutation.SetDescription(s)
	return nsc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillableDescription(s *string) *NotificationSettingCreate {
	if s != nil {
		nsc.SetDescription(*s)
	}
	return nsc
}

// SetCreatedAt sets the "created_at" field.
func (nsc *NotificationSettingCreate) SetCreatedAt(t time.Time) *NotificationSettingCreate {
	nsc.mutation.SetCreatedAt(t)
	return nsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillableCreatedAt(t *time.Time) *NotificationSettingCreate {
	if t != nil {
		nsc.SetCreatedAt(*t)
	}
	return nsc
}

// SetUpdatedAt sets the "updated_at" field.
func (nsc *NotificationSettingCreate) SetUpdatedAt(t time.Time) *NotificationSettingCreate {
	nsc.mutation.SetUpdatedAt(t)
	return nsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillableUpdatedAt(t *time.Time) *NotificationSettingCreate {
	if t != nil {
		nsc.SetUpdatedAt(*t)
	}
	return nsc
}

// SetID sets the "id" field.
func (nsc *NotificationSettingCreate) SetID(u uuid.UUID) *NotificationSettingCreate {
	nsc.mutation.SetID(u)
	return nsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (nsc *NotificationSettingCreate) SetNillableID(u *uuid.UUID) *NotificationSettingCreate {
	if u != nil {
		nsc.SetID(*u)
	}
	return nsc
}

// Mutation returns the NotificationSettingMutation object of the builder.
func (nsc *NotificationSettingCreate) Mutation() *NotificationSettingMutation {
	return nsc.mutation
}

// Save creates the NotificationSetting in the database.
func (nsc *NotificationSettingCreate) Save(ctx context.Context) (*NotificationSetting, error) {
	if err := nsc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, nsc.sqlSave, nsc.mutation, nsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nsc *NotificationSettingCreate) SaveX(ctx context.Context) *NotificationSetting {
	v, err := nsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nsc *NotificationSettingCreate) Exec(ctx context.Context) error {
	_, err := nsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsc *NotificationSettingCreate) ExecX(ctx context.Context) {
	if err := nsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nsc *NotificationSettingCreate) defaults() error {
	if _, ok := nsc.mutation.Enabled(); !ok {
		v := notificationsetting.DefaultEnabled
		nsc.mutation.SetEnabled(v)
	}
	if _, ok := nsc.mutation.MaxRetry(); !ok {
		v := notificationsetting.DefaultMaxRetry
		nsc.mutation.SetMaxRetry(v)
	}
	if _, ok := nsc.mutation.Timeout(); !ok {
		v := notificationsetting.DefaultTimeout
		nsc.mutation.SetTimeout(v)
	}
	if _, ok := nsc.mutation.CreatedAt(); !ok {
		if notificationsetting.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized notificationsetting.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := notificationsetting.DefaultCreatedAt()
		nsc.mutation.SetCreatedAt(v)
	}
	if _, ok := nsc.mutation.UpdatedAt(); !ok {
		if notificationsetting.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized notificationsetting.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := notificationsetting.DefaultUpdatedAt()
		nsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := nsc.mutation.ID(); !ok {
		if notificationsetting.DefaultID == nil {
			return fmt.Errorf("db: uninitialized notificationsetting.DefaultID (forgotten import db/runtime?)")
		}
		v := notificationsetting.DefaultID()
		nsc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (nsc *NotificationSettingCreate) check() error {
	if _, ok := nsc.mutation.Channel(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`db: missing required field "NotificationSetting.channel"`)}
	}
	if _, ok := nsc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`db: missing required field "NotificationSetting.enabled"`)}
	}
	if _, ok := nsc.mutation.MaxRetry(); !ok {
		return &ValidationError{Name: "max_retry", err: errors.New(`db: missing required field "NotificationSetting.max_retry"`)}
	}
	if _, ok := nsc.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New(`db: missing required field "NotificationSetting.timeout"`)}
	}
	if _, ok := nsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "NotificationSetting.created_at"`)}
	}
	if _, ok := nsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "NotificationSetting.updated_at"`)}
	}
	return nil
}

func (nsc *NotificationSettingCreate) sqlSave(ctx context.Context) (*NotificationSetting, error) {
	if err := nsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	nsc.mutation.id = &_node.ID
	nsc.mutation.done = true
	return _node, nil
}

func (nsc *NotificationSettingCreate) createSpec() (*NotificationSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &NotificationSetting{config: nsc.config}
		_spec = sqlgraph.NewCreateSpec(notificationsetting.Table, sqlgraph.NewFieldSpec(notificationsetting.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = nsc.conflict
	if id, ok := nsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := nsc.mutation.DeletedAt(); ok {
		_spec.SetField(notificationsetting.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := nsc.mutation.Channel(); ok {
		_spec.SetField(notificationsetting.FieldChannel, field.TypeString, value)
		_node.Channel = value
	}
	if value, ok := nsc.mutation.Enabled(); ok {
		_spec.SetField(notificationsetting.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := nsc.mutation.DingtalkConfig(); ok {
		_spec.SetField(notificationsetting.FieldDingtalkConfig, field.TypeJSON, value)
		_node.DingtalkConfig = value
	}
	if value, ok := nsc.mutation.MaxRetry(); ok {
		_spec.SetField(notificationsetting.FieldMaxRetry, field.TypeInt, value)
		_node.MaxRetry = value
	}
	if value, ok := nsc.mutation.Timeout(); ok {
		_spec.SetField(notificationsetting.FieldTimeout, field.TypeInt, value)
		_node.Timeout = value
	}
	if value, ok := nsc.mutation.Description(); ok {
		_spec.SetField(notificationsetting.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := nsc.mutation.CreatedAt(); ok {
		_spec.SetField(notificationsetting.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nsc.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationsetting.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationSetting.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationSettingUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (nsc *NotificationSettingCreate) OnConflict(opts ...sql.ConflictOption) *NotificationSettingUpsertOne {
	nsc.conflict = opts
	return &NotificationSettingUpsertOne{
		create: nsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nsc *NotificationSettingCreate) OnConflictColumns(columns ...string) *NotificationSettingUpsertOne {
	nsc.conflict = append(nsc.conflict, sql.ConflictColumns(columns...))
	return &NotificationSettingUpsertOne{
		create: nsc,
	}
}

type (
	// NotificationSettingUpsertOne is the builder for "upsert"-ing
	//  one NotificationSetting node.
	NotificationSettingUpsertOne struct {
		create *NotificationSettingCreate
	}

	// NotificationSettingUpsert is the "OnConflict" setter.
	NotificationSettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationSettingUpsert) SetDeletedAt(v time.Time) *NotificationSettingUpsert {
	u.Set(notificationsetting.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationSettingUpsert) UpdateDeletedAt() *NotificationSettingUpsert {
	u.SetExcluded(notificationsetting.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationSettingUpsert) ClearDeletedAt() *NotificationSettingUpsert {
	u.SetNull(notificationsetting.FieldDeletedAt)
	return u
}

// SetChannel sets the "channel" field.
func (u *NotificationSettingUpsert) SetChannel(v consts.NotificationChannel) *NotificationSettingUpsert {
	u.Set(notificationsetting.FieldChannel, v)
	return u
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *NotificationSettingUpsert) UpdateChannel() *NotificationSettingUpsert {
	u.SetExcluded(notificationsetting.FieldChannel)
	return u
}

// SetEnabled sets the "enabled" field.
func (u *NotificationSettingUpsert) SetEnabled(v bool) *NotificationSettingUpsert {
	u.Set(notificationsetting.FieldEnabled, v)
	return u
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *NotificationSettingUpsert) UpdateEnabled() *NotificationSettingUpsert {
	u.SetExcluded(notificationsetting.FieldEnabled)
	return u
}

// SetDingtalkConfig sets the "dingtalk_config" field.
func (u *NotificationSettingUpsert) SetDingtalkConfig(v map[string]interface{}) *NotificationSettingUpsert {
	u.Set(notificationsetting.FieldDingtalkConfig, v)
	return u
}

// UpdateDingtalkConfig sets the "dingtalk_config" field to the value that was provided on create.
func (u *NotificationSettingUpsert) UpdateDingtalkConfig() *NotificationSettingUpsert {
	u.SetExcluded(notificationsetting.FieldDingtalkConfig)
	return u
}

// ClearDingtalkConfig clears the value of the "dingtalk_config" field.
func (u *NotificationSettingUpsert) ClearDingtalkConfig() *NotificationSettingUpsert {
	u.SetNull(notificationsetting.FieldDingtalkConfig)
	return u
}

// SetMaxRetry sets the "max_retry" field.
func (u *NotificationSettingUpsert) SetMaxRetry(v int) *NotificationSettingUpsert {
	u.Set(notificationsetting.FieldMaxRetry, v)
	return u
}

// UpdateMaxRetry sets the "max_retry" field to the value that was provided on create.
func (u *NotificationSettingUpsert) UpdateMaxRetry() *NotificationSettingUpsert {
	u.SetExcluded(notificationsetting.FieldMaxRetry)
	return u
}

// AddMaxRetry adds v to the "max_retry" field.
func (u *NotificationSettingUpsert) AddMaxRetry(v int) *NotificationSettingUpsert {
	u.Add(notificationsetting.FieldMaxRetry, v)
	return u
}

// SetTimeout sets the "timeout" field.
func (u *NotificationSettingUpsert) SetTimeout(v int) *NotificationSettingUpsert {
	u.Set(notificationsetting.FieldTimeout, v)
	return u
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *NotificationSettingUpsert) UpdateTimeout() *NotificationSettingUpsert {
	u.SetExcluded(notificationsetting.FieldTimeout)
	return u
}

// AddTimeout adds v to the "timeout" field.
func (u *NotificationSettingUpsert) AddTimeout(v int) *NotificationSettingUpsert {
	u.Add(notificationsetting.FieldTimeout, v)
	return u
}

// SetDescription sets the "description" field.
func (u *NotificationSettingUpsert) SetDescription(v string) *NotificationSettingUpsert {
	u.Set(notificationsetting.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NotificationSettingUpsert) UpdateDescription() *NotificationSettingUpsert {
	u.SetExcluded(notificationsetting.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *NotificationSettingUpsert) ClearDescription() *NotificationSettingUpsert {
	u.SetNull(notificationsetting.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *NotificationSettingUpsert) SetCreatedAt(v time.Time) *NotificationSettingUpsert {
	u.Set(notificationsetting.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *NotificationSettingUpsert) UpdateCreatedAt() *NotificationSettingUpsert {
	u.SetExcluded(notificationsetting.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationSettingUpsert) SetUpdatedAt(v time.Time) *NotificationSettingUpsert {
	u.Set(notificationsetting.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationSettingUpsert) UpdateUpdatedAt() *NotificationSettingUpsert {
	u.SetExcluded(notificationsetting.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NotificationSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationSettingUpsertOne) UpdateNewValues() *NotificationSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(notificationsetting.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationSetting.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NotificationSettingUpsertOne) Ignore() *NotificationSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationSettingUpsertOne) DoNothing() *NotificationSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationSettingCreate.OnConflict
// documentation for more info.
func (u *NotificationSettingUpsertOne) Update(set func(*NotificationSettingUpsert)) *NotificationSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationSettingUpsertOne) SetDeletedAt(v time.Time) *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationSettingUpsertOne) UpdateDeletedAt() *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationSettingUpsertOne) ClearDeletedAt() *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.ClearDeletedAt()
	})
}

// SetChannel sets the "channel" field.
func (u *NotificationSettingUpsertOne) SetChannel(v consts.NotificationChannel) *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *NotificationSettingUpsertOne) UpdateChannel() *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateChannel()
	})
}

// SetEnabled sets the "enabled" field.
func (u *NotificationSettingUpsertOne) SetEnabled(v bool) *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *NotificationSettingUpsertOne) UpdateEnabled() *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateEnabled()
	})
}

// SetDingtalkConfig sets the "dingtalk_config" field.
func (u *NotificationSettingUpsertOne) SetDingtalkConfig(v map[string]interface{}) *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetDingtalkConfig(v)
	})
}

// UpdateDingtalkConfig sets the "dingtalk_config" field to the value that was provided on create.
func (u *NotificationSettingUpsertOne) UpdateDingtalkConfig() *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateDingtalkConfig()
	})
}

// ClearDingtalkConfig clears the value of the "dingtalk_config" field.
func (u *NotificationSettingUpsertOne) ClearDingtalkConfig() *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.ClearDingtalkConfig()
	})
}

// SetMaxRetry sets the "max_retry" field.
func (u *NotificationSettingUpsertOne) SetMaxRetry(v int) *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetMaxRetry(v)
	})
}

// AddMaxRetry adds v to the "max_retry" field.
func (u *NotificationSettingUpsertOne) AddMaxRetry(v int) *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.AddMaxRetry(v)
	})
}

// UpdateMaxRetry sets the "max_retry" field to the value that was provided on create.
func (u *NotificationSettingUpsertOne) UpdateMaxRetry() *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateMaxRetry()
	})
}

// SetTimeout sets the "timeout" field.
func (u *NotificationSettingUpsertOne) SetTimeout(v int) *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetTimeout(v)
	})
}

// AddTimeout adds v to the "timeout" field.
func (u *NotificationSettingUpsertOne) AddTimeout(v int) *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.AddTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *NotificationSettingUpsertOne) UpdateTimeout() *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateTimeout()
	})
}

// SetDescription sets the "description" field.
func (u *NotificationSettingUpsertOne) SetDescription(v string) *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NotificationSettingUpsertOne) UpdateDescription() *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *NotificationSettingUpsertOne) ClearDescription() *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *NotificationSettingUpsertOne) SetCreatedAt(v time.Time) *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *NotificationSettingUpsertOne) UpdateCreatedAt() *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationSettingUpsertOne) SetUpdatedAt(v time.Time) *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationSettingUpsertOne) UpdateUpdatedAt() *NotificationSettingUpsertOne {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *NotificationSettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for NotificationSettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationSettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NotificationSettingUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: NotificationSettingUpsertOne.ID is not supported by MySQL driver. Use NotificationSettingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NotificationSettingUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NotificationSettingCreateBulk is the builder for creating many NotificationSetting entities in bulk.
type NotificationSettingCreateBulk struct {
	config
	err      error
	builders []*NotificationSettingCreate
	conflict []sql.ConflictOption
}

// Save creates the NotificationSetting entities in the database.
func (nscb *NotificationSettingCreateBulk) Save(ctx context.Context) ([]*NotificationSetting, error) {
	if nscb.err != nil {
		return nil, nscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nscb.builders))
	nodes := make([]*NotificationSetting, len(nscb.builders))
	mutators := make([]Mutator, len(nscb.builders))
	for i := range nscb.builders {
		func(i int, root context.Context) {
			builder := nscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = nscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nscb *NotificationSettingCreateBulk) SaveX(ctx context.Context) []*NotificationSetting {
	v, err := nscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nscb *NotificationSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := nscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nscb *NotificationSettingCreateBulk) ExecX(ctx context.Context) {
	if err := nscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationSetting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationSettingUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (nscb *NotificationSettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *NotificationSettingUpsertBulk {
	nscb.conflict = opts
	return &NotificationSettingUpsertBulk{
		create: nscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nscb *NotificationSettingCreateBulk) OnConflictColumns(columns ...string) *NotificationSettingUpsertBulk {
	nscb.conflict = append(nscb.conflict, sql.ConflictColumns(columns...))
	return &NotificationSettingUpsertBulk{
		create: nscb,
	}
}

// NotificationSettingUpsertBulk is the builder for "upsert"-ing
// a bulk of NotificationSetting nodes.
type NotificationSettingUpsertBulk struct {
	create *NotificationSettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NotificationSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationSettingUpsertBulk) UpdateNewValues() *NotificationSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(notificationsetting.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationSetting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NotificationSettingUpsertBulk) Ignore() *NotificationSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationSettingUpsertBulk) DoNothing() *NotificationSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationSettingCreateBulk.OnConflict
// documentation for more info.
func (u *NotificationSettingUpsertBulk) Update(set func(*NotificationSettingUpsert)) *NotificationSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationSettingUpsertBulk) SetDeletedAt(v time.Time) *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationSettingUpsertBulk) UpdateDeletedAt() *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationSettingUpsertBulk) ClearDeletedAt() *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.ClearDeletedAt()
	})
}

// SetChannel sets the "channel" field.
func (u *NotificationSettingUpsertBulk) SetChannel(v consts.NotificationChannel) *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *NotificationSettingUpsertBulk) UpdateChannel() *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateChannel()
	})
}

// SetEnabled sets the "enabled" field.
func (u *NotificationSettingUpsertBulk) SetEnabled(v bool) *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *NotificationSettingUpsertBulk) UpdateEnabled() *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateEnabled()
	})
}

// SetDingtalkConfig sets the "dingtalk_config" field.
func (u *NotificationSettingUpsertBulk) SetDingtalkConfig(v map[string]interface{}) *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetDingtalkConfig(v)
	})
}

// UpdateDingtalkConfig sets the "dingtalk_config" field to the value that was provided on create.
func (u *NotificationSettingUpsertBulk) UpdateDingtalkConfig() *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateDingtalkConfig()
	})
}

// ClearDingtalkConfig clears the value of the "dingtalk_config" field.
func (u *NotificationSettingUpsertBulk) ClearDingtalkConfig() *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.ClearDingtalkConfig()
	})
}

// SetMaxRetry sets the "max_retry" field.
func (u *NotificationSettingUpsertBulk) SetMaxRetry(v int) *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetMaxRetry(v)
	})
}

// AddMaxRetry adds v to the "max_retry" field.
func (u *NotificationSettingUpsertBulk) AddMaxRetry(v int) *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.AddMaxRetry(v)
	})
}

// UpdateMaxRetry sets the "max_retry" field to the value that was provided on create.
func (u *NotificationSettingUpsertBulk) UpdateMaxRetry() *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateMaxRetry()
	})
}

// SetTimeout sets the "timeout" field.
func (u *NotificationSettingUpsertBulk) SetTimeout(v int) *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetTimeout(v)
	})
}

// AddTimeout adds v to the "timeout" field.
func (u *NotificationSettingUpsertBulk) AddTimeout(v int) *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.AddTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *NotificationSettingUpsertBulk) UpdateTimeout() *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateTimeout()
	})
}

// SetDescription sets the "description" field.
func (u *NotificationSettingUpsertBulk) SetDescription(v string) *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NotificationSettingUpsertBulk) UpdateDescription() *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *NotificationSettingUpsertBulk) ClearDescription() *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *NotificationSettingUpsertBulk) SetCreatedAt(v time.Time) *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *NotificationSettingUpsertBulk) UpdateCreatedAt() *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationSettingUpsertBulk) SetUpdatedAt(v time.Time) *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationSettingUpsertBulk) UpdateUpdatedAt() *NotificationSettingUpsertBulk {
	return u.Update(func(s *NotificationSettingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *NotificationSettingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the NotificationSettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for NotificationSettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationSettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
