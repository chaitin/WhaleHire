// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ptonlix/whalehire/backend/db/attachment"
	"github.com/ptonlix/whalehire/backend/db/message"
	"github.com/ptonlix/whalehire/backend/db/predicate"
)

// AttachmentUpdate is the builder for updating Attachment entities.
type AttachmentUpdate struct {
	config
	hooks     []Hook
	mutation  *AttachmentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AttachmentUpdate builder.
func (au *AttachmentUpdate) Where(ps ...predicate.Attachment) *AttachmentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AttachmentUpdate) SetDeletedAt(t time.Time) *AttachmentUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableDeletedAt(t *time.Time) *AttachmentUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AttachmentUpdate) ClearDeletedAt() *AttachmentUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetMessageID sets the "message_id" field.
func (au *AttachmentUpdate) SetMessageID(u uuid.UUID) *AttachmentUpdate {
	au.mutation.SetMessageID(u)
	return au
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableMessageID(u *uuid.UUID) *AttachmentUpdate {
	if u != nil {
		au.SetMessageID(*u)
	}
	return au
}

// SetType sets the "type" field.
func (au *AttachmentUpdate) SetType(s string) *AttachmentUpdate {
	au.mutation.SetType(s)
	return au
}

// SetNillableType sets the "type" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableType(s *string) *AttachmentUpdate {
	if s != nil {
		au.SetType(*s)
	}
	return au
}

// SetURL sets the "url" field.
func (au *AttachmentUpdate) SetURL(s string) *AttachmentUpdate {
	au.mutation.SetURL(s)
	return au
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableURL(s *string) *AttachmentUpdate {
	if s != nil {
		au.SetURL(*s)
	}
	return au
}

// SetMetadata sets the "metadata" field.
func (au *AttachmentUpdate) SetMetadata(m map[string]interface{}) *AttachmentUpdate {
	au.mutation.SetMetadata(m)
	return au
}

// ClearMetadata clears the value of the "metadata" field.
func (au *AttachmentUpdate) ClearMetadata() *AttachmentUpdate {
	au.mutation.ClearMetadata()
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AttachmentUpdate) SetCreatedAt(t time.Time) *AttachmentUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableCreatedAt(t *time.Time) *AttachmentUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AttachmentUpdate) SetUpdatedAt(t time.Time) *AttachmentUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetMessage sets the "message" edge to the Message entity.
func (au *AttachmentUpdate) SetMessage(m *Message) *AttachmentUpdate {
	return au.SetMessageID(m.ID)
}

// Mutation returns the AttachmentMutation object of the builder.
func (au *AttachmentUpdate) Mutation() *AttachmentMutation {
	return au.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (au *AttachmentUpdate) ClearMessage() *AttachmentUpdate {
	au.mutation.ClearMessage()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AttachmentUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AttachmentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AttachmentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AttachmentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AttachmentUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if attachment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized attachment.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := attachment.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (au *AttachmentUpdate) check() error {
	if v, ok := au.mutation.GetType(); ok {
		if err := attachment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "Attachment.type": %w`, err)}
		}
	}
	if v, ok := au.mutation.URL(); ok {
		if err := attachment.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`db: validator failed for field "Attachment.url": %w`, err)}
		}
	}
	if au.mutation.MessageCleared() && len(au.mutation.MessageIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Attachment.message"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AttachmentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AttachmentUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AttachmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attachment.Table, attachment.Columns, sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(attachment.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(attachment.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(attachment.FieldType, field.TypeString, value)
	}
	if value, ok := au.mutation.URL(); ok {
		_spec.SetField(attachment.FieldURL, field.TypeString, value)
	}
	if value, ok := au.mutation.Metadata(); ok {
		_spec.SetField(attachment.FieldMetadata, field.TypeJSON, value)
	}
	if au.mutation.MetadataCleared() {
		_spec.ClearField(attachment.FieldMetadata, field.TypeJSON)
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(attachment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(attachment.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.MessageTable,
			Columns: []string{attachment.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.MessageTable,
			Columns: []string{attachment.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AttachmentUpdateOne is the builder for updating a single Attachment entity.
type AttachmentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AttachmentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AttachmentUpdateOne) SetDeletedAt(t time.Time) *AttachmentUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableDeletedAt(t *time.Time) *AttachmentUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AttachmentUpdateOne) ClearDeletedAt() *AttachmentUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetMessageID sets the "message_id" field.
func (auo *AttachmentUpdateOne) SetMessageID(u uuid.UUID) *AttachmentUpdateOne {
	auo.mutation.SetMessageID(u)
	return auo
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableMessageID(u *uuid.UUID) *AttachmentUpdateOne {
	if u != nil {
		auo.SetMessageID(*u)
	}
	return auo
}

// SetType sets the "type" field.
func (auo *AttachmentUpdateOne) SetType(s string) *AttachmentUpdateOne {
	auo.mutation.SetType(s)
	return auo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableType(s *string) *AttachmentUpdateOne {
	if s != nil {
		auo.SetType(*s)
	}
	return auo
}

// SetURL sets the "url" field.
func (auo *AttachmentUpdateOne) SetURL(s string) *AttachmentUpdateOne {
	auo.mutation.SetURL(s)
	return auo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableURL(s *string) *AttachmentUpdateOne {
	if s != nil {
		auo.SetURL(*s)
	}
	return auo
}

// SetMetadata sets the "metadata" field.
func (auo *AttachmentUpdateOne) SetMetadata(m map[string]interface{}) *AttachmentUpdateOne {
	auo.mutation.SetMetadata(m)
	return auo
}

// ClearMetadata clears the value of the "metadata" field.
func (auo *AttachmentUpdateOne) ClearMetadata() *AttachmentUpdateOne {
	auo.mutation.ClearMetadata()
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *AttachmentUpdateOne) SetCreatedAt(t time.Time) *AttachmentUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableCreatedAt(t *time.Time) *AttachmentUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AttachmentUpdateOne) SetUpdatedAt(t time.Time) *AttachmentUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetMessage sets the "message" edge to the Message entity.
func (auo *AttachmentUpdateOne) SetMessage(m *Message) *AttachmentUpdateOne {
	return auo.SetMessageID(m.ID)
}

// Mutation returns the AttachmentMutation object of the builder.
func (auo *AttachmentUpdateOne) Mutation() *AttachmentMutation {
	return auo.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (auo *AttachmentUpdateOne) ClearMessage() *AttachmentUpdateOne {
	auo.mutation.ClearMessage()
	return auo
}

// Where appends a list predicates to the AttachmentUpdate builder.
func (auo *AttachmentUpdateOne) Where(ps ...predicate.Attachment) *AttachmentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AttachmentUpdateOne) Select(field string, fields ...string) *AttachmentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Attachment entity.
func (auo *AttachmentUpdateOne) Save(ctx context.Context) (*Attachment, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AttachmentUpdateOne) SaveX(ctx context.Context) *Attachment {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AttachmentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AttachmentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AttachmentUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if attachment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized attachment.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := attachment.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auo *AttachmentUpdateOne) check() error {
	if v, ok := auo.mutation.GetType(); ok {
		if err := attachment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "Attachment.type": %w`, err)}
		}
	}
	if v, ok := auo.mutation.URL(); ok {
		if err := attachment.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`db: validator failed for field "Attachment.url": %w`, err)}
		}
	}
	if auo.mutation.MessageCleared() && len(auo.mutation.MessageIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Attachment.message"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AttachmentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AttachmentUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AttachmentUpdateOne) sqlSave(ctx context.Context) (_node *Attachment, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attachment.Table, attachment.Columns, sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Attachment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attachment.FieldID)
		for _, f := range fields {
			if !attachment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != attachment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(attachment.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(attachment.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(attachment.FieldType, field.TypeString, value)
	}
	if value, ok := auo.mutation.URL(); ok {
		_spec.SetField(attachment.FieldURL, field.TypeString, value)
	}
	if value, ok := auo.mutation.Metadata(); ok {
		_spec.SetField(attachment.FieldMetadata, field.TypeJSON, value)
	}
	if auo.mutation.MetadataCleared() {
		_spec.ClearField(attachment.FieldMetadata, field.TypeJSON)
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(attachment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(attachment.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.MessageTable,
			Columns: []string{attachment.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.MessageTable,
			Columns: []string{attachment.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Attachment{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
