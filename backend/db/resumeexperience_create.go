// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumeexperience"
	"github.com/google/uuid"
)

// ResumeExperienceCreate is the builder for creating a ResumeExperience entity.
type ResumeExperienceCreate struct {
	config
	mutation *ResumeExperienceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (rec *ResumeExperienceCreate) SetDeletedAt(t time.Time) *ResumeExperienceCreate {
	rec.mutation.SetDeletedAt(t)
	return rec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rec *ResumeExperienceCreate) SetNillableDeletedAt(t *time.Time) *ResumeExperienceCreate {
	if t != nil {
		rec.SetDeletedAt(*t)
	}
	return rec
}

// SetResumeID sets the "resume_id" field.
func (rec *ResumeExperienceCreate) SetResumeID(u uuid.UUID) *ResumeExperienceCreate {
	rec.mutation.SetResumeID(u)
	return rec
}

// SetCompany sets the "company" field.
func (rec *ResumeExperienceCreate) SetCompany(s string) *ResumeExperienceCreate {
	rec.mutation.SetCompany(s)
	return rec
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (rec *ResumeExperienceCreate) SetNillableCompany(s *string) *ResumeExperienceCreate {
	if s != nil {
		rec.SetCompany(*s)
	}
	return rec
}

// SetPosition sets the "position" field.
func (rec *ResumeExperienceCreate) SetPosition(s string) *ResumeExperienceCreate {
	rec.mutation.SetPosition(s)
	return rec
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (rec *ResumeExperienceCreate) SetNillablePosition(s *string) *ResumeExperienceCreate {
	if s != nil {
		rec.SetPosition(*s)
	}
	return rec
}

// SetTitle sets the "title" field.
func (rec *ResumeExperienceCreate) SetTitle(s string) *ResumeExperienceCreate {
	rec.mutation.SetTitle(s)
	return rec
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (rec *ResumeExperienceCreate) SetNillableTitle(s *string) *ResumeExperienceCreate {
	if s != nil {
		rec.SetTitle(*s)
	}
	return rec
}

// SetStartDate sets the "start_date" field.
func (rec *ResumeExperienceCreate) SetStartDate(t time.Time) *ResumeExperienceCreate {
	rec.mutation.SetStartDate(t)
	return rec
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (rec *ResumeExperienceCreate) SetNillableStartDate(t *time.Time) *ResumeExperienceCreate {
	if t != nil {
		rec.SetStartDate(*t)
	}
	return rec
}

// SetEndDate sets the "end_date" field.
func (rec *ResumeExperienceCreate) SetEndDate(t time.Time) *ResumeExperienceCreate {
	rec.mutation.SetEndDate(t)
	return rec
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (rec *ResumeExperienceCreate) SetNillableEndDate(t *time.Time) *ResumeExperienceCreate {
	if t != nil {
		rec.SetEndDate(*t)
	}
	return rec
}

// SetDescription sets the "description" field.
func (rec *ResumeExperienceCreate) SetDescription(s string) *ResumeExperienceCreate {
	rec.mutation.SetDescription(s)
	return rec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rec *ResumeExperienceCreate) SetNillableDescription(s *string) *ResumeExperienceCreate {
	if s != nil {
		rec.SetDescription(*s)
	}
	return rec
}

// SetCreatedAt sets the "created_at" field.
func (rec *ResumeExperienceCreate) SetCreatedAt(t time.Time) *ResumeExperienceCreate {
	rec.mutation.SetCreatedAt(t)
	return rec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rec *ResumeExperienceCreate) SetNillableCreatedAt(t *time.Time) *ResumeExperienceCreate {
	if t != nil {
		rec.SetCreatedAt(*t)
	}
	return rec
}

// SetUpdatedAt sets the "updated_at" field.
func (rec *ResumeExperienceCreate) SetUpdatedAt(t time.Time) *ResumeExperienceCreate {
	rec.mutation.SetUpdatedAt(t)
	return rec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rec *ResumeExperienceCreate) SetNillableUpdatedAt(t *time.Time) *ResumeExperienceCreate {
	if t != nil {
		rec.SetUpdatedAt(*t)
	}
	return rec
}

// SetID sets the "id" field.
func (rec *ResumeExperienceCreate) SetID(u uuid.UUID) *ResumeExperienceCreate {
	rec.mutation.SetID(u)
	return rec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rec *ResumeExperienceCreate) SetNillableID(u *uuid.UUID) *ResumeExperienceCreate {
	if u != nil {
		rec.SetID(*u)
	}
	return rec
}

// SetResume sets the "resume" edge to the Resume entity.
func (rec *ResumeExperienceCreate) SetResume(r *Resume) *ResumeExperienceCreate {
	return rec.SetResumeID(r.ID)
}

// Mutation returns the ResumeExperienceMutation object of the builder.
func (rec *ResumeExperienceCreate) Mutation() *ResumeExperienceMutation {
	return rec.mutation
}

// Save creates the ResumeExperience in the database.
func (rec *ResumeExperienceCreate) Save(ctx context.Context) (*ResumeExperience, error) {
	if err := rec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rec.sqlSave, rec.mutation, rec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rec *ResumeExperienceCreate) SaveX(ctx context.Context) *ResumeExperience {
	v, err := rec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rec *ResumeExperienceCreate) Exec(ctx context.Context) error {
	_, err := rec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rec *ResumeExperienceCreate) ExecX(ctx context.Context) {
	if err := rec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rec *ResumeExperienceCreate) defaults() error {
	if _, ok := rec.mutation.CreatedAt(); !ok {
		if resumeexperience.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized resumeexperience.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := resumeexperience.DefaultCreatedAt()
		rec.mutation.SetCreatedAt(v)
	}
	if _, ok := rec.mutation.UpdatedAt(); !ok {
		if resumeexperience.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumeexperience.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumeexperience.DefaultUpdatedAt()
		rec.mutation.SetUpdatedAt(v)
	}
	if _, ok := rec.mutation.ID(); !ok {
		if resumeexperience.DefaultID == nil {
			return fmt.Errorf("db: uninitialized resumeexperience.DefaultID (forgotten import db/runtime?)")
		}
		v := resumeexperience.DefaultID()
		rec.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rec *ResumeExperienceCreate) check() error {
	if _, ok := rec.mutation.ResumeID(); !ok {
		return &ValidationError{Name: "resume_id", err: errors.New(`db: missing required field "ResumeExperience.resume_id"`)}
	}
	if _, ok := rec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ResumeExperience.created_at"`)}
	}
	if _, ok := rec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "ResumeExperience.updated_at"`)}
	}
	if len(rec.mutation.ResumeIDs()) == 0 {
		return &ValidationError{Name: "resume", err: errors.New(`db: missing required edge "ResumeExperience.resume"`)}
	}
	return nil
}

func (rec *ResumeExperienceCreate) sqlSave(ctx context.Context) (*ResumeExperience, error) {
	if err := rec.check(); err != nil {
		return nil, err
	}
	_node, _spec := rec.createSpec()
	if err := sqlgraph.CreateNode(ctx, rec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rec.mutation.id = &_node.ID
	rec.mutation.done = true
	return _node, nil
}

func (rec *ResumeExperienceCreate) createSpec() (*ResumeExperience, *sqlgraph.CreateSpec) {
	var (
		_node = &ResumeExperience{config: rec.config}
		_spec = sqlgraph.NewCreateSpec(resumeexperience.Table, sqlgraph.NewFieldSpec(resumeexperience.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rec.conflict
	if id, ok := rec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rec.mutation.DeletedAt(); ok {
		_spec.SetField(resumeexperience.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rec.mutation.Company(); ok {
		_spec.SetField(resumeexperience.FieldCompany, field.TypeString, value)
		_node.Company = value
	}
	if value, ok := rec.mutation.Position(); ok {
		_spec.SetField(resumeexperience.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := rec.mutation.Title(); ok {
		_spec.SetField(resumeexperience.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := rec.mutation.StartDate(); ok {
		_spec.SetField(resumeexperience.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := rec.mutation.EndDate(); ok {
		_spec.SetField(resumeexperience.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := rec.mutation.Description(); ok {
		_spec.SetField(resumeexperience.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rec.mutation.CreatedAt(); ok {
		_spec.SetField(resumeexperience.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rec.mutation.UpdatedAt(); ok {
		_spec.SetField(resumeexperience.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rec.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeexperience.ResumeTable,
			Columns: []string{resumeexperience.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResumeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeExperience.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeExperienceUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rec *ResumeExperienceCreate) OnConflict(opts ...sql.ConflictOption) *ResumeExperienceUpsertOne {
	rec.conflict = opts
	return &ResumeExperienceUpsertOne{
		create: rec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeExperience.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rec *ResumeExperienceCreate) OnConflictColumns(columns ...string) *ResumeExperienceUpsertOne {
	rec.conflict = append(rec.conflict, sql.ConflictColumns(columns...))
	return &ResumeExperienceUpsertOne{
		create: rec,
	}
}

type (
	// ResumeExperienceUpsertOne is the builder for "upsert"-ing
	//  one ResumeExperience node.
	ResumeExperienceUpsertOne struct {
		create *ResumeExperienceCreate
	}

	// ResumeExperienceUpsert is the "OnConflict" setter.
	ResumeExperienceUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeExperienceUpsert) SetDeletedAt(v time.Time) *ResumeExperienceUpsert {
	u.Set(resumeexperience.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeExperienceUpsert) UpdateDeletedAt() *ResumeExperienceUpsert {
	u.SetExcluded(resumeexperience.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeExperienceUpsert) ClearDeletedAt() *ResumeExperienceUpsert {
	u.SetNull(resumeexperience.FieldDeletedAt)
	return u
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeExperienceUpsert) SetResumeID(v uuid.UUID) *ResumeExperienceUpsert {
	u.Set(resumeexperience.FieldResumeID, v)
	return u
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeExperienceUpsert) UpdateResumeID() *ResumeExperienceUpsert {
	u.SetExcluded(resumeexperience.FieldResumeID)
	return u
}

// SetCompany sets the "company" field.
func (u *ResumeExperienceUpsert) SetCompany(v string) *ResumeExperienceUpsert {
	u.Set(resumeexperience.FieldCompany, v)
	return u
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *ResumeExperienceUpsert) UpdateCompany() *ResumeExperienceUpsert {
	u.SetExcluded(resumeexperience.FieldCompany)
	return u
}

// ClearCompany clears the value of the "company" field.
func (u *ResumeExperienceUpsert) ClearCompany() *ResumeExperienceUpsert {
	u.SetNull(resumeexperience.FieldCompany)
	return u
}

// SetPosition sets the "position" field.
func (u *ResumeExperienceUpsert) SetPosition(v string) *ResumeExperienceUpsert {
	u.Set(resumeexperience.FieldPosition, v)
	return u
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *ResumeExperienceUpsert) UpdatePosition() *ResumeExperienceUpsert {
	u.SetExcluded(resumeexperience.FieldPosition)
	return u
}

// ClearPosition clears the value of the "position" field.
func (u *ResumeExperienceUpsert) ClearPosition() *ResumeExperienceUpsert {
	u.SetNull(resumeexperience.FieldPosition)
	return u
}

// SetTitle sets the "title" field.
func (u *ResumeExperienceUpsert) SetTitle(v string) *ResumeExperienceUpsert {
	u.Set(resumeexperience.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ResumeExperienceUpsert) UpdateTitle() *ResumeExperienceUpsert {
	u.SetExcluded(resumeexperience.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *ResumeExperienceUpsert) ClearTitle() *ResumeExperienceUpsert {
	u.SetNull(resumeexperience.FieldTitle)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *ResumeExperienceUpsert) SetStartDate(v time.Time) *ResumeExperienceUpsert {
	u.Set(resumeexperience.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *ResumeExperienceUpsert) UpdateStartDate() *ResumeExperienceUpsert {
	u.SetExcluded(resumeexperience.FieldStartDate)
	return u
}

// ClearStartDate clears the value of the "start_date" field.
func (u *ResumeExperienceUpsert) ClearStartDate() *ResumeExperienceUpsert {
	u.SetNull(resumeexperience.FieldStartDate)
	return u
}

// SetEndDate sets the "end_date" field.
func (u *ResumeExperienceUpsert) SetEndDate(v time.Time) *ResumeExperienceUpsert {
	u.Set(resumeexperience.FieldEndDate, v)
	return u
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *ResumeExperienceUpsert) UpdateEndDate() *ResumeExperienceUpsert {
	u.SetExcluded(resumeexperience.FieldEndDate)
	return u
}

// ClearEndDate clears the value of the "end_date" field.
func (u *ResumeExperienceUpsert) ClearEndDate() *ResumeExperienceUpsert {
	u.SetNull(resumeexperience.FieldEndDate)
	return u
}

// SetDescription sets the "description" field.
func (u *ResumeExperienceUpsert) SetDescription(v string) *ResumeExperienceUpsert {
	u.Set(resumeexperience.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResumeExperienceUpsert) UpdateDescription() *ResumeExperienceUpsert {
	u.SetExcluded(resumeexperience.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ResumeExperienceUpsert) ClearDescription() *ResumeExperienceUpsert {
	u.SetNull(resumeexperience.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeExperienceUpsert) SetCreatedAt(v time.Time) *ResumeExperienceUpsert {
	u.Set(resumeexperience.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeExperienceUpsert) UpdateCreatedAt() *ResumeExperienceUpsert {
	u.SetExcluded(resumeexperience.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeExperienceUpsert) SetUpdatedAt(v time.Time) *ResumeExperienceUpsert {
	u.Set(resumeexperience.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeExperienceUpsert) UpdateUpdatedAt() *ResumeExperienceUpsert {
	u.SetExcluded(resumeexperience.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ResumeExperience.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumeexperience.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeExperienceUpsertOne) UpdateNewValues() *ResumeExperienceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resumeexperience.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeExperience.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResumeExperienceUpsertOne) Ignore() *ResumeExperienceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeExperienceUpsertOne) DoNothing() *ResumeExperienceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeExperienceCreate.OnConflict
// documentation for more info.
func (u *ResumeExperienceUpsertOne) Update(set func(*ResumeExperienceUpsert)) *ResumeExperienceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeExperienceUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeExperienceUpsertOne) SetDeletedAt(v time.Time) *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeExperienceUpsertOne) UpdateDeletedAt() *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeExperienceUpsertOne) ClearDeletedAt() *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeExperienceUpsertOne) SetResumeID(v uuid.UUID) *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeExperienceUpsertOne) UpdateResumeID() *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateResumeID()
	})
}

// SetCompany sets the "company" field.
func (u *ResumeExperienceUpsertOne) SetCompany(v string) *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *ResumeExperienceUpsertOne) UpdateCompany() *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateCompany()
	})
}

// ClearCompany clears the value of the "company" field.
func (u *ResumeExperienceUpsertOne) ClearCompany() *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.ClearCompany()
	})
}

// SetPosition sets the "position" field.
func (u *ResumeExperienceUpsertOne) SetPosition(v string) *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetPosition(v)
	})
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *ResumeExperienceUpsertOne) UpdatePosition() *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdatePosition()
	})
}

// ClearPosition clears the value of the "position" field.
func (u *ResumeExperienceUpsertOne) ClearPosition() *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.ClearPosition()
	})
}

// SetTitle sets the "title" field.
func (u *ResumeExperienceUpsertOne) SetTitle(v string) *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ResumeExperienceUpsertOne) UpdateTitle() *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *ResumeExperienceUpsertOne) ClearTitle() *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.ClearTitle()
	})
}

// SetStartDate sets the "start_date" field.
func (u *ResumeExperienceUpsertOne) SetStartDate(v time.Time) *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *ResumeExperienceUpsertOne) UpdateStartDate() *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *ResumeExperienceUpsertOne) ClearStartDate() *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *ResumeExperienceUpsertOne) SetEndDate(v time.Time) *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *ResumeExperienceUpsertOne) UpdateEndDate() *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *ResumeExperienceUpsertOne) ClearEndDate() *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.ClearEndDate()
	})
}

// SetDescription sets the "description" field.
func (u *ResumeExperienceUpsertOne) SetDescription(v string) *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResumeExperienceUpsertOne) UpdateDescription() *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ResumeExperienceUpsertOne) ClearDescription() *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeExperienceUpsertOne) SetCreatedAt(v time.Time) *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeExperienceUpsertOne) UpdateCreatedAt() *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeExperienceUpsertOne) SetUpdatedAt(v time.Time) *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeExperienceUpsertOne) UpdateUpdatedAt() *ResumeExperienceUpsertOne {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeExperienceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeExperienceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeExperienceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResumeExperienceUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ResumeExperienceUpsertOne.ID is not supported by MySQL driver. Use ResumeExperienceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResumeExperienceUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResumeExperienceCreateBulk is the builder for creating many ResumeExperience entities in bulk.
type ResumeExperienceCreateBulk struct {
	config
	err      error
	builders []*ResumeExperienceCreate
	conflict []sql.ConflictOption
}

// Save creates the ResumeExperience entities in the database.
func (recb *ResumeExperienceCreateBulk) Save(ctx context.Context) ([]*ResumeExperience, error) {
	if recb.err != nil {
		return nil, recb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(recb.builders))
	nodes := make([]*ResumeExperience, len(recb.builders))
	mutators := make([]Mutator, len(recb.builders))
	for i := range recb.builders {
		func(i int, root context.Context) {
			builder := recb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResumeExperienceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, recb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = recb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, recb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, recb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (recb *ResumeExperienceCreateBulk) SaveX(ctx context.Context) []*ResumeExperience {
	v, err := recb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (recb *ResumeExperienceCreateBulk) Exec(ctx context.Context) error {
	_, err := recb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (recb *ResumeExperienceCreateBulk) ExecX(ctx context.Context) {
	if err := recb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeExperience.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeExperienceUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (recb *ResumeExperienceCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResumeExperienceUpsertBulk {
	recb.conflict = opts
	return &ResumeExperienceUpsertBulk{
		create: recb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeExperience.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (recb *ResumeExperienceCreateBulk) OnConflictColumns(columns ...string) *ResumeExperienceUpsertBulk {
	recb.conflict = append(recb.conflict, sql.ConflictColumns(columns...))
	return &ResumeExperienceUpsertBulk{
		create: recb,
	}
}

// ResumeExperienceUpsertBulk is the builder for "upsert"-ing
// a bulk of ResumeExperience nodes.
type ResumeExperienceUpsertBulk struct {
	create *ResumeExperienceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ResumeExperience.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumeexperience.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeExperienceUpsertBulk) UpdateNewValues() *ResumeExperienceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resumeexperience.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeExperience.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResumeExperienceUpsertBulk) Ignore() *ResumeExperienceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeExperienceUpsertBulk) DoNothing() *ResumeExperienceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeExperienceCreateBulk.OnConflict
// documentation for more info.
func (u *ResumeExperienceUpsertBulk) Update(set func(*ResumeExperienceUpsert)) *ResumeExperienceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeExperienceUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeExperienceUpsertBulk) SetDeletedAt(v time.Time) *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeExperienceUpsertBulk) UpdateDeletedAt() *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeExperienceUpsertBulk) ClearDeletedAt() *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeExperienceUpsertBulk) SetResumeID(v uuid.UUID) *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeExperienceUpsertBulk) UpdateResumeID() *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateResumeID()
	})
}

// SetCompany sets the "company" field.
func (u *ResumeExperienceUpsertBulk) SetCompany(v string) *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *ResumeExperienceUpsertBulk) UpdateCompany() *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateCompany()
	})
}

// ClearCompany clears the value of the "company" field.
func (u *ResumeExperienceUpsertBulk) ClearCompany() *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.ClearCompany()
	})
}

// SetPosition sets the "position" field.
func (u *ResumeExperienceUpsertBulk) SetPosition(v string) *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetPosition(v)
	})
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *ResumeExperienceUpsertBulk) UpdatePosition() *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdatePosition()
	})
}

// ClearPosition clears the value of the "position" field.
func (u *ResumeExperienceUpsertBulk) ClearPosition() *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.ClearPosition()
	})
}

// SetTitle sets the "title" field.
func (u *ResumeExperienceUpsertBulk) SetTitle(v string) *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ResumeExperienceUpsertBulk) UpdateTitle() *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *ResumeExperienceUpsertBulk) ClearTitle() *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.ClearTitle()
	})
}

// SetStartDate sets the "start_date" field.
func (u *ResumeExperienceUpsertBulk) SetStartDate(v time.Time) *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *ResumeExperienceUpsertBulk) UpdateStartDate() *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *ResumeExperienceUpsertBulk) ClearStartDate() *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *ResumeExperienceUpsertBulk) SetEndDate(v time.Time) *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *ResumeExperienceUpsertBulk) UpdateEndDate() *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *ResumeExperienceUpsertBulk) ClearEndDate() *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.ClearEndDate()
	})
}

// SetDescription sets the "description" field.
func (u *ResumeExperienceUpsertBulk) SetDescription(v string) *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResumeExperienceUpsertBulk) UpdateDescription() *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ResumeExperienceUpsertBulk) ClearDescription() *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeExperienceUpsertBulk) SetCreatedAt(v time.Time) *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeExperienceUpsertBulk) UpdateCreatedAt() *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeExperienceUpsertBulk) SetUpdatedAt(v time.Time) *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeExperienceUpsertBulk) UpdateUpdatedAt() *ResumeExperienceUpsertBulk {
	return u.Update(func(s *ResumeExperienceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeExperienceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ResumeExperienceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeExperienceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeExperienceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
