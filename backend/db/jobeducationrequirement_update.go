// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobeducationrequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// JobEducationRequirementUpdate is the builder for updating JobEducationRequirement entities.
type JobEducationRequirementUpdate struct {
	config
	hooks     []Hook
	mutation  *JobEducationRequirementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the JobEducationRequirementUpdate builder.
func (jeru *JobEducationRequirementUpdate) Where(ps ...predicate.JobEducationRequirement) *JobEducationRequirementUpdate {
	jeru.mutation.Where(ps...)
	return jeru
}

// SetDeletedAt sets the "deleted_at" field.
func (jeru *JobEducationRequirementUpdate) SetDeletedAt(t time.Time) *JobEducationRequirementUpdate {
	jeru.mutation.SetDeletedAt(t)
	return jeru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jeru *JobEducationRequirementUpdate) SetNillableDeletedAt(t *time.Time) *JobEducationRequirementUpdate {
	if t != nil {
		jeru.SetDeletedAt(*t)
	}
	return jeru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jeru *JobEducationRequirementUpdate) ClearDeletedAt() *JobEducationRequirementUpdate {
	jeru.mutation.ClearDeletedAt()
	return jeru
}

// SetJobID sets the "job_id" field.
func (jeru *JobEducationRequirementUpdate) SetJobID(u uuid.UUID) *JobEducationRequirementUpdate {
	jeru.mutation.SetJobID(u)
	return jeru
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (jeru *JobEducationRequirementUpdate) SetNillableJobID(u *uuid.UUID) *JobEducationRequirementUpdate {
	if u != nil {
		jeru.SetJobID(*u)
	}
	return jeru
}

// SetMinDegree sets the "min_degree" field.
func (jeru *JobEducationRequirementUpdate) SetMinDegree(s string) *JobEducationRequirementUpdate {
	jeru.mutation.SetMinDegree(s)
	return jeru
}

// SetNillableMinDegree sets the "min_degree" field if the given value is not nil.
func (jeru *JobEducationRequirementUpdate) SetNillableMinDegree(s *string) *JobEducationRequirementUpdate {
	if s != nil {
		jeru.SetMinDegree(*s)
	}
	return jeru
}

// SetWeight sets the "weight" field.
func (jeru *JobEducationRequirementUpdate) SetWeight(i int) *JobEducationRequirementUpdate {
	jeru.mutation.ResetWeight()
	jeru.mutation.SetWeight(i)
	return jeru
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (jeru *JobEducationRequirementUpdate) SetNillableWeight(i *int) *JobEducationRequirementUpdate {
	if i != nil {
		jeru.SetWeight(*i)
	}
	return jeru
}

// AddWeight adds i to the "weight" field.
func (jeru *JobEducationRequirementUpdate) AddWeight(i int) *JobEducationRequirementUpdate {
	jeru.mutation.AddWeight(i)
	return jeru
}

// SetUpdatedAt sets the "updated_at" field.
func (jeru *JobEducationRequirementUpdate) SetUpdatedAt(t time.Time) *JobEducationRequirementUpdate {
	jeru.mutation.SetUpdatedAt(t)
	return jeru
}

// SetJob sets the "job" edge to the JobPosition entity.
func (jeru *JobEducationRequirementUpdate) SetJob(j *JobPosition) *JobEducationRequirementUpdate {
	return jeru.SetJobID(j.ID)
}

// Mutation returns the JobEducationRequirementMutation object of the builder.
func (jeru *JobEducationRequirementUpdate) Mutation() *JobEducationRequirementMutation {
	return jeru.mutation
}

// ClearJob clears the "job" edge to the JobPosition entity.
func (jeru *JobEducationRequirementUpdate) ClearJob() *JobEducationRequirementUpdate {
	jeru.mutation.ClearJob()
	return jeru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jeru *JobEducationRequirementUpdate) Save(ctx context.Context) (int, error) {
	if err := jeru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, jeru.sqlSave, jeru.mutation, jeru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jeru *JobEducationRequirementUpdate) SaveX(ctx context.Context) int {
	affected, err := jeru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jeru *JobEducationRequirementUpdate) Exec(ctx context.Context) error {
	_, err := jeru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jeru *JobEducationRequirementUpdate) ExecX(ctx context.Context) {
	if err := jeru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jeru *JobEducationRequirementUpdate) defaults() error {
	if _, ok := jeru.mutation.UpdatedAt(); !ok {
		if jobeducationrequirement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized jobeducationrequirement.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := jobeducationrequirement.UpdateDefaultUpdatedAt()
		jeru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jeru *JobEducationRequirementUpdate) check() error {
	if v, ok := jeru.mutation.MinDegree(); ok {
		if err := jobeducationrequirement.MinDegreeValidator(v); err != nil {
			return &ValidationError{Name: "min_degree", err: fmt.Errorf(`db: validator failed for field "JobEducationRequirement.min_degree": %w`, err)}
		}
	}
	if v, ok := jeru.mutation.Weight(); ok {
		if err := jobeducationrequirement.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`db: validator failed for field "JobEducationRequirement.weight": %w`, err)}
		}
	}
	if jeru.mutation.JobCleared() && len(jeru.mutation.JobIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "JobEducationRequirement.job"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jeru *JobEducationRequirementUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobEducationRequirementUpdate {
	jeru.modifiers = append(jeru.modifiers, modifiers...)
	return jeru
}

func (jeru *JobEducationRequirementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jeru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobeducationrequirement.Table, jobeducationrequirement.Columns, sqlgraph.NewFieldSpec(jobeducationrequirement.FieldID, field.TypeUUID))
	if ps := jeru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jeru.mutation.DeletedAt(); ok {
		_spec.SetField(jobeducationrequirement.FieldDeletedAt, field.TypeTime, value)
	}
	if jeru.mutation.DeletedAtCleared() {
		_spec.ClearField(jobeducationrequirement.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jeru.mutation.MinDegree(); ok {
		_spec.SetField(jobeducationrequirement.FieldMinDegree, field.TypeString, value)
	}
	if value, ok := jeru.mutation.Weight(); ok {
		_spec.SetField(jobeducationrequirement.FieldWeight, field.TypeInt, value)
	}
	if value, ok := jeru.mutation.AddedWeight(); ok {
		_spec.AddField(jobeducationrequirement.FieldWeight, field.TypeInt, value)
	}
	if value, ok := jeru.mutation.UpdatedAt(); ok {
		_spec.SetField(jobeducationrequirement.FieldUpdatedAt, field.TypeTime, value)
	}
	if jeru.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobeducationrequirement.JobTable,
			Columns: []string{jobeducationrequirement.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jeru.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobeducationrequirement.JobTable,
			Columns: []string{jobeducationrequirement.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(jeru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, jeru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobeducationrequirement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jeru.mutation.done = true
	return n, nil
}

// JobEducationRequirementUpdateOne is the builder for updating a single JobEducationRequirement entity.
type JobEducationRequirementUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *JobEducationRequirementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (jeruo *JobEducationRequirementUpdateOne) SetDeletedAt(t time.Time) *JobEducationRequirementUpdateOne {
	jeruo.mutation.SetDeletedAt(t)
	return jeruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jeruo *JobEducationRequirementUpdateOne) SetNillableDeletedAt(t *time.Time) *JobEducationRequirementUpdateOne {
	if t != nil {
		jeruo.SetDeletedAt(*t)
	}
	return jeruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jeruo *JobEducationRequirementUpdateOne) ClearDeletedAt() *JobEducationRequirementUpdateOne {
	jeruo.mutation.ClearDeletedAt()
	return jeruo
}

// SetJobID sets the "job_id" field.
func (jeruo *JobEducationRequirementUpdateOne) SetJobID(u uuid.UUID) *JobEducationRequirementUpdateOne {
	jeruo.mutation.SetJobID(u)
	return jeruo
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (jeruo *JobEducationRequirementUpdateOne) SetNillableJobID(u *uuid.UUID) *JobEducationRequirementUpdateOne {
	if u != nil {
		jeruo.SetJobID(*u)
	}
	return jeruo
}

// SetMinDegree sets the "min_degree" field.
func (jeruo *JobEducationRequirementUpdateOne) SetMinDegree(s string) *JobEducationRequirementUpdateOne {
	jeruo.mutation.SetMinDegree(s)
	return jeruo
}

// SetNillableMinDegree sets the "min_degree" field if the given value is not nil.
func (jeruo *JobEducationRequirementUpdateOne) SetNillableMinDegree(s *string) *JobEducationRequirementUpdateOne {
	if s != nil {
		jeruo.SetMinDegree(*s)
	}
	return jeruo
}

// SetWeight sets the "weight" field.
func (jeruo *JobEducationRequirementUpdateOne) SetWeight(i int) *JobEducationRequirementUpdateOne {
	jeruo.mutation.ResetWeight()
	jeruo.mutation.SetWeight(i)
	return jeruo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (jeruo *JobEducationRequirementUpdateOne) SetNillableWeight(i *int) *JobEducationRequirementUpdateOne {
	if i != nil {
		jeruo.SetWeight(*i)
	}
	return jeruo
}

// AddWeight adds i to the "weight" field.
func (jeruo *JobEducationRequirementUpdateOne) AddWeight(i int) *JobEducationRequirementUpdateOne {
	jeruo.mutation.AddWeight(i)
	return jeruo
}

// SetUpdatedAt sets the "updated_at" field.
func (jeruo *JobEducationRequirementUpdateOne) SetUpdatedAt(t time.Time) *JobEducationRequirementUpdateOne {
	jeruo.mutation.SetUpdatedAt(t)
	return jeruo
}

// SetJob sets the "job" edge to the JobPosition entity.
func (jeruo *JobEducationRequirementUpdateOne) SetJob(j *JobPosition) *JobEducationRequirementUpdateOne {
	return jeruo.SetJobID(j.ID)
}

// Mutation returns the JobEducationRequirementMutation object of the builder.
func (jeruo *JobEducationRequirementUpdateOne) Mutation() *JobEducationRequirementMutation {
	return jeruo.mutation
}

// ClearJob clears the "job" edge to the JobPosition entity.
func (jeruo *JobEducationRequirementUpdateOne) ClearJob() *JobEducationRequirementUpdateOne {
	jeruo.mutation.ClearJob()
	return jeruo
}

// Where appends a list predicates to the JobEducationRequirementUpdate builder.
func (jeruo *JobEducationRequirementUpdateOne) Where(ps ...predicate.JobEducationRequirement) *JobEducationRequirementUpdateOne {
	jeruo.mutation.Where(ps...)
	return jeruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jeruo *JobEducationRequirementUpdateOne) Select(field string, fields ...string) *JobEducationRequirementUpdateOne {
	jeruo.fields = append([]string{field}, fields...)
	return jeruo
}

// Save executes the query and returns the updated JobEducationRequirement entity.
func (jeruo *JobEducationRequirementUpdateOne) Save(ctx context.Context) (*JobEducationRequirement, error) {
	if err := jeruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jeruo.sqlSave, jeruo.mutation, jeruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jeruo *JobEducationRequirementUpdateOne) SaveX(ctx context.Context) *JobEducationRequirement {
	node, err := jeruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jeruo *JobEducationRequirementUpdateOne) Exec(ctx context.Context) error {
	_, err := jeruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jeruo *JobEducationRequirementUpdateOne) ExecX(ctx context.Context) {
	if err := jeruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jeruo *JobEducationRequirementUpdateOne) defaults() error {
	if _, ok := jeruo.mutation.UpdatedAt(); !ok {
		if jobeducationrequirement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized jobeducationrequirement.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := jobeducationrequirement.UpdateDefaultUpdatedAt()
		jeruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jeruo *JobEducationRequirementUpdateOne) check() error {
	if v, ok := jeruo.mutation.MinDegree(); ok {
		if err := jobeducationrequirement.MinDegreeValidator(v); err != nil {
			return &ValidationError{Name: "min_degree", err: fmt.Errorf(`db: validator failed for field "JobEducationRequirement.min_degree": %w`, err)}
		}
	}
	if v, ok := jeruo.mutation.Weight(); ok {
		if err := jobeducationrequirement.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`db: validator failed for field "JobEducationRequirement.weight": %w`, err)}
		}
	}
	if jeruo.mutation.JobCleared() && len(jeruo.mutation.JobIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "JobEducationRequirement.job"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jeruo *JobEducationRequirementUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobEducationRequirementUpdateOne {
	jeruo.modifiers = append(jeruo.modifiers, modifiers...)
	return jeruo
}

func (jeruo *JobEducationRequirementUpdateOne) sqlSave(ctx context.Context) (_node *JobEducationRequirement, err error) {
	if err := jeruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobeducationrequirement.Table, jobeducationrequirement.Columns, sqlgraph.NewFieldSpec(jobeducationrequirement.FieldID, field.TypeUUID))
	id, ok := jeruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "JobEducationRequirement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jeruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobeducationrequirement.FieldID)
		for _, f := range fields {
			if !jobeducationrequirement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != jobeducationrequirement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jeruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jeruo.mutation.DeletedAt(); ok {
		_spec.SetField(jobeducationrequirement.FieldDeletedAt, field.TypeTime, value)
	}
	if jeruo.mutation.DeletedAtCleared() {
		_spec.ClearField(jobeducationrequirement.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jeruo.mutation.MinDegree(); ok {
		_spec.SetField(jobeducationrequirement.FieldMinDegree, field.TypeString, value)
	}
	if value, ok := jeruo.mutation.Weight(); ok {
		_spec.SetField(jobeducationrequirement.FieldWeight, field.TypeInt, value)
	}
	if value, ok := jeruo.mutation.AddedWeight(); ok {
		_spec.AddField(jobeducationrequirement.FieldWeight, field.TypeInt, value)
	}
	if value, ok := jeruo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobeducationrequirement.FieldUpdatedAt, field.TypeTime, value)
	}
	if jeruo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobeducationrequirement.JobTable,
			Columns: []string{jobeducationrequirement.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jeruo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobeducationrequirement.JobTable,
			Columns: []string{jobeducationrequirement.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(jeruo.modifiers...)
	_node = &JobEducationRequirement{config: jeruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jeruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobeducationrequirement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jeruo.mutation.done = true
	return _node, nil
}
