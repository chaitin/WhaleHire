// Code generated by ent, DO NOT EDIT.

package resumedocumentparse

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldDeletedAt, v))
}

// ResumeID applies equality check predicate on the "resume_id" field. It's identical to ResumeIDEQ.
func ResumeID(v uuid.UUID) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldResumeID, v))
}

// FileID applies equality check predicate on the "file_id" field. It's identical to FileIDEQ.
func FileID(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldFileID, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldContent, v))
}

// FileType applies equality check predicate on the "file_type" field. It's identical to FileTypeEQ.
func FileType(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldFileType, v))
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldFilename, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldTitle, v))
}

// UploadAt applies equality check predicate on the "upload_at" field. It's identical to UploadAtEQ.
func UploadAt(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldUploadAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldStatus, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldErrorMessage, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotNull(FieldDeletedAt))
}

// ResumeIDEQ applies the EQ predicate on the "resume_id" field.
func ResumeIDEQ(v uuid.UUID) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldResumeID, v))
}

// ResumeIDNEQ applies the NEQ predicate on the "resume_id" field.
func ResumeIDNEQ(v uuid.UUID) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNEQ(FieldResumeID, v))
}

// ResumeIDIn applies the In predicate on the "resume_id" field.
func ResumeIDIn(vs ...uuid.UUID) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIn(FieldResumeID, vs...))
}

// ResumeIDNotIn applies the NotIn predicate on the "resume_id" field.
func ResumeIDNotIn(vs ...uuid.UUID) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotIn(FieldResumeID, vs...))
}

// FileIDEQ applies the EQ predicate on the "file_id" field.
func FileIDEQ(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldFileID, v))
}

// FileIDNEQ applies the NEQ predicate on the "file_id" field.
func FileIDNEQ(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNEQ(FieldFileID, v))
}

// FileIDIn applies the In predicate on the "file_id" field.
func FileIDIn(vs ...string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIn(FieldFileID, vs...))
}

// FileIDNotIn applies the NotIn predicate on the "file_id" field.
func FileIDNotIn(vs ...string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotIn(FieldFileID, vs...))
}

// FileIDGT applies the GT predicate on the "file_id" field.
func FileIDGT(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGT(FieldFileID, v))
}

// FileIDGTE applies the GTE predicate on the "file_id" field.
func FileIDGTE(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGTE(FieldFileID, v))
}

// FileIDLT applies the LT predicate on the "file_id" field.
func FileIDLT(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLT(FieldFileID, v))
}

// FileIDLTE applies the LTE predicate on the "file_id" field.
func FileIDLTE(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLTE(FieldFileID, v))
}

// FileIDContains applies the Contains predicate on the "file_id" field.
func FileIDContains(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldContains(FieldFileID, v))
}

// FileIDHasPrefix applies the HasPrefix predicate on the "file_id" field.
func FileIDHasPrefix(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldHasPrefix(FieldFileID, v))
}

// FileIDHasSuffix applies the HasSuffix predicate on the "file_id" field.
func FileIDHasSuffix(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldHasSuffix(FieldFileID, v))
}

// FileIDIsNil applies the IsNil predicate on the "file_id" field.
func FileIDIsNil() predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIsNull(FieldFileID))
}

// FileIDNotNil applies the NotNil predicate on the "file_id" field.
func FileIDNotNil() predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotNull(FieldFileID))
}

// FileIDEqualFold applies the EqualFold predicate on the "file_id" field.
func FileIDEqualFold(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEqualFold(FieldFileID, v))
}

// FileIDContainsFold applies the ContainsFold predicate on the "file_id" field.
func FileIDContainsFold(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldContainsFold(FieldFileID, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldHasSuffix(FieldContent, v))
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIsNull(FieldContent))
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotNull(FieldContent))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldContainsFold(FieldContent, v))
}

// FileTypeEQ applies the EQ predicate on the "file_type" field.
func FileTypeEQ(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldFileType, v))
}

// FileTypeNEQ applies the NEQ predicate on the "file_type" field.
func FileTypeNEQ(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNEQ(FieldFileType, v))
}

// FileTypeIn applies the In predicate on the "file_type" field.
func FileTypeIn(vs ...string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIn(FieldFileType, vs...))
}

// FileTypeNotIn applies the NotIn predicate on the "file_type" field.
func FileTypeNotIn(vs ...string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotIn(FieldFileType, vs...))
}

// FileTypeGT applies the GT predicate on the "file_type" field.
func FileTypeGT(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGT(FieldFileType, v))
}

// FileTypeGTE applies the GTE predicate on the "file_type" field.
func FileTypeGTE(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGTE(FieldFileType, v))
}

// FileTypeLT applies the LT predicate on the "file_type" field.
func FileTypeLT(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLT(FieldFileType, v))
}

// FileTypeLTE applies the LTE predicate on the "file_type" field.
func FileTypeLTE(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLTE(FieldFileType, v))
}

// FileTypeContains applies the Contains predicate on the "file_type" field.
func FileTypeContains(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldContains(FieldFileType, v))
}

// FileTypeHasPrefix applies the HasPrefix predicate on the "file_type" field.
func FileTypeHasPrefix(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldHasPrefix(FieldFileType, v))
}

// FileTypeHasSuffix applies the HasSuffix predicate on the "file_type" field.
func FileTypeHasSuffix(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldHasSuffix(FieldFileType, v))
}

// FileTypeIsNil applies the IsNil predicate on the "file_type" field.
func FileTypeIsNil() predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIsNull(FieldFileType))
}

// FileTypeNotNil applies the NotNil predicate on the "file_type" field.
func FileTypeNotNil() predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotNull(FieldFileType))
}

// FileTypeEqualFold applies the EqualFold predicate on the "file_type" field.
func FileTypeEqualFold(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEqualFold(FieldFileType, v))
}

// FileTypeContainsFold applies the ContainsFold predicate on the "file_type" field.
func FileTypeContainsFold(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldContainsFold(FieldFileType, v))
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldFilename, v))
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNEQ(FieldFilename, v))
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIn(FieldFilename, vs...))
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotIn(FieldFilename, vs...))
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGT(FieldFilename, v))
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGTE(FieldFilename, v))
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLT(FieldFilename, v))
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLTE(FieldFilename, v))
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldContains(FieldFilename, v))
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldHasPrefix(FieldFilename, v))
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldHasSuffix(FieldFilename, v))
}

// FilenameIsNil applies the IsNil predicate on the "filename" field.
func FilenameIsNil() predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIsNull(FieldFilename))
}

// FilenameNotNil applies the NotNil predicate on the "filename" field.
func FilenameNotNil() predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotNull(FieldFilename))
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEqualFold(FieldFilename, v))
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldContainsFold(FieldFilename, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldContainsFold(FieldTitle, v))
}

// UploadAtEQ applies the EQ predicate on the "upload_at" field.
func UploadAtEQ(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldUploadAt, v))
}

// UploadAtNEQ applies the NEQ predicate on the "upload_at" field.
func UploadAtNEQ(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNEQ(FieldUploadAt, v))
}

// UploadAtIn applies the In predicate on the "upload_at" field.
func UploadAtIn(vs ...time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIn(FieldUploadAt, vs...))
}

// UploadAtNotIn applies the NotIn predicate on the "upload_at" field.
func UploadAtNotIn(vs ...time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotIn(FieldUploadAt, vs...))
}

// UploadAtGT applies the GT predicate on the "upload_at" field.
func UploadAtGT(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGT(FieldUploadAt, v))
}

// UploadAtGTE applies the GTE predicate on the "upload_at" field.
func UploadAtGTE(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGTE(FieldUploadAt, v))
}

// UploadAtLT applies the LT predicate on the "upload_at" field.
func UploadAtLT(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLT(FieldUploadAt, v))
}

// UploadAtLTE applies the LTE predicate on the "upload_at" field.
func UploadAtLTE(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLTE(FieldUploadAt, v))
}

// UploadAtIsNil applies the IsNil predicate on the "upload_at" field.
func UploadAtIsNil() predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIsNull(FieldUploadAt))
}

// UploadAtNotNil applies the NotNil predicate on the "upload_at" field.
func UploadAtNotNil() predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotNull(FieldUploadAt))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldContainsFold(FieldStatus, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldContainsFold(FieldErrorMessage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasResume applies the HasEdge predicate on the "resume" edge.
func HasResume() predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ResumeTable, ResumeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResumeWith applies the HasEdge predicate on the "resume" edge with a given conditions (other predicates).
func HasResumeWith(preds ...predicate.Resume) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(func(s *sql.Selector) {
		step := newResumeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ResumeDocumentParse) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ResumeDocumentParse) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ResumeDocumentParse) predicate.ResumeDocumentParse {
	return predicate.ResumeDocumentParse(sql.NotPredicates(p))
}
