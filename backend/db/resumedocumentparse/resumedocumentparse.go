// Code generated by ent, DO NOT EDIT.

package resumedocumentparse

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the resumedocumentparse type in the database.
	Label = "resume_document_parse"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldResumeID holds the string denoting the resume_id field in the database.
	FieldResumeID = "resume_id"
	// FieldFileID holds the string denoting the file_id field in the database.
	FieldFileID = "file_id"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldFileType holds the string denoting the file_type field in the database.
	FieldFileType = "file_type"
	// FieldFilename holds the string denoting the filename field in the database.
	FieldFilename = "filename"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldUploadAt holds the string denoting the upload_at field in the database.
	FieldUploadAt = "upload_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeResume holds the string denoting the resume edge name in mutations.
	EdgeResume = "resume"
	// Table holds the table name of the resumedocumentparse in the database.
	Table = "resume_document_parses"
	// ResumeTable is the table that holds the resume relation/edge.
	ResumeTable = "resume_document_parses"
	// ResumeInverseTable is the table name for the Resume entity.
	// It exists in this package in order to avoid circular dependency with the "resume" package.
	ResumeInverseTable = "resumes"
	// ResumeColumn is the table column denoting the resume relation/edge.
	ResumeColumn = "resume_id"
)

// Columns holds all SQL columns for resumedocumentparse fields.
var Columns = []string{
	FieldID,
	FieldDeletedAt,
	FieldResumeID,
	FieldFileID,
	FieldContent,
	FieldFileType,
	FieldFilename,
	FieldTitle,
	FieldUploadAt,
	FieldStatus,
	FieldErrorMessage,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/chaitin/WhaleHire/backend/db/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ResumeDocumentParse queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByResumeID orders the results by the resume_id field.
func ByResumeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResumeID, opts...).ToFunc()
}

// ByFileID orders the results by the file_id field.
func ByFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileID, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByFileType orders the results by the file_type field.
func ByFileType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileType, opts...).ToFunc()
}

// ByFilename orders the results by the filename field.
func ByFilename(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilename, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByUploadAt orders the results by the upload_at field.
func ByUploadAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploadAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByResumeField orders the results by resume field.
func ByResumeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResumeStep(), sql.OrderByField(field, opts...))
	}
}
func newResumeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResumeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ResumeTable, ResumeColumn),
	)
}
