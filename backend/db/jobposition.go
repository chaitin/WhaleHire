// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/department"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/google/uuid"
)

// JobPosition is the model entity for the JobPosition schema.
type JobPosition struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DepartmentID holds the value of the "department_id" field.
	DepartmentID uuid.UUID `json:"department_id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy *uuid.UUID `json:"created_by,omitempty"`
	// Status holds the value of the "status" field.
	Status consts.JobPositionStatus `json:"status,omitempty"`
	// Location holds the value of the "location" field.
	Location *string `json:"location,omitempty"`
	// SalaryMin holds the value of the "salary_min" field.
	SalaryMin *float64 `json:"salary_min,omitempty"`
	// SalaryMax holds the value of the "salary_max" field.
	SalaryMax *float64 `json:"salary_max,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobPositionQuery when eager-loading is set.
	Edges        JobPositionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JobPositionEdges holds the relations/edges for other nodes in the graph.
type JobPositionEdges struct {
	// Department holds the value of the department edge.
	Department *Department `json:"department,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// Responsibilities holds the value of the responsibilities edge.
	Responsibilities []*JobResponsibility `json:"responsibilities,omitempty"`
	// Skills holds the value of the skills edge.
	Skills []*JobSkill `json:"skills,omitempty"`
	// EducationRequirements holds the value of the education_requirements edge.
	EducationRequirements []*JobEducationRequirement `json:"education_requirements,omitempty"`
	// ExperienceRequirements holds the value of the experience_requirements edge.
	ExperienceRequirements []*JobExperienceRequirement `json:"experience_requirements,omitempty"`
	// IndustryRequirements holds the value of the industry_requirements edge.
	IndustryRequirements []*JobIndustryRequirement `json:"industry_requirements,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobPositionEdges) DepartmentOrErr() (*Department, error) {
	if e.Department != nil {
		return e.Department, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: department.Label}
	}
	return nil, &NotLoadedError{edge: "department"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobPositionEdges) CreatorOrErr() (*User, error) {
	if e.Creator != nil {
		return e.Creator, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// ResponsibilitiesOrErr returns the Responsibilities value or an error if the edge
// was not loaded in eager-loading.
func (e JobPositionEdges) ResponsibilitiesOrErr() ([]*JobResponsibility, error) {
	if e.loadedTypes[2] {
		return e.Responsibilities, nil
	}
	return nil, &NotLoadedError{edge: "responsibilities"}
}

// SkillsOrErr returns the Skills value or an error if the edge
// was not loaded in eager-loading.
func (e JobPositionEdges) SkillsOrErr() ([]*JobSkill, error) {
	if e.loadedTypes[3] {
		return e.Skills, nil
	}
	return nil, &NotLoadedError{edge: "skills"}
}

// EducationRequirementsOrErr returns the EducationRequirements value or an error if the edge
// was not loaded in eager-loading.
func (e JobPositionEdges) EducationRequirementsOrErr() ([]*JobEducationRequirement, error) {
	if e.loadedTypes[4] {
		return e.EducationRequirements, nil
	}
	return nil, &NotLoadedError{edge: "education_requirements"}
}

// ExperienceRequirementsOrErr returns the ExperienceRequirements value or an error if the edge
// was not loaded in eager-loading.
func (e JobPositionEdges) ExperienceRequirementsOrErr() ([]*JobExperienceRequirement, error) {
	if e.loadedTypes[5] {
		return e.ExperienceRequirements, nil
	}
	return nil, &NotLoadedError{edge: "experience_requirements"}
}

// IndustryRequirementsOrErr returns the IndustryRequirements value or an error if the edge
// was not loaded in eager-loading.
func (e JobPositionEdges) IndustryRequirementsOrErr() ([]*JobIndustryRequirement, error) {
	if e.loadedTypes[6] {
		return e.IndustryRequirements, nil
	}
	return nil, &NotLoadedError{edge: "industry_requirements"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobPosition) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobposition.FieldCreatedBy:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case jobposition.FieldSalaryMin, jobposition.FieldSalaryMax:
			values[i] = new(sql.NullFloat64)
		case jobposition.FieldName, jobposition.FieldStatus, jobposition.FieldLocation, jobposition.FieldDescription:
			values[i] = new(sql.NullString)
		case jobposition.FieldDeletedAt, jobposition.FieldCreatedAt, jobposition.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case jobposition.FieldID, jobposition.FieldDepartmentID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobPosition fields.
func (jp *JobPosition) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobposition.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				jp.ID = *value
			}
		case jobposition.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				jp.DeletedAt = value.Time
			}
		case jobposition.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				jp.Name = value.String
			}
		case jobposition.FieldDepartmentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field department_id", values[i])
			} else if value != nil {
				jp.DepartmentID = *value
			}
		case jobposition.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				jp.CreatedBy = new(uuid.UUID)
				*jp.CreatedBy = *value.S.(*uuid.UUID)
			}
		case jobposition.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				jp.Status = consts.JobPositionStatus(value.String)
			}
		case jobposition.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				jp.Location = new(string)
				*jp.Location = value.String
			}
		case jobposition.FieldSalaryMin:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field salary_min", values[i])
			} else if value.Valid {
				jp.SalaryMin = new(float64)
				*jp.SalaryMin = value.Float64
			}
		case jobposition.FieldSalaryMax:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field salary_max", values[i])
			} else if value.Valid {
				jp.SalaryMax = new(float64)
				*jp.SalaryMax = value.Float64
			}
		case jobposition.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				jp.Description = new(string)
				*jp.Description = value.String
			}
		case jobposition.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				jp.CreatedAt = value.Time
			}
		case jobposition.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				jp.UpdatedAt = value.Time
			}
		default:
			jp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobPosition.
// This includes values selected through modifiers, order, etc.
func (jp *JobPosition) Value(name string) (ent.Value, error) {
	return jp.selectValues.Get(name)
}

// QueryDepartment queries the "department" edge of the JobPosition entity.
func (jp *JobPosition) QueryDepartment() *DepartmentQuery {
	return NewJobPositionClient(jp.config).QueryDepartment(jp)
}

// QueryCreator queries the "creator" edge of the JobPosition entity.
func (jp *JobPosition) QueryCreator() *UserQuery {
	return NewJobPositionClient(jp.config).QueryCreator(jp)
}

// QueryResponsibilities queries the "responsibilities" edge of the JobPosition entity.
func (jp *JobPosition) QueryResponsibilities() *JobResponsibilityQuery {
	return NewJobPositionClient(jp.config).QueryResponsibilities(jp)
}

// QuerySkills queries the "skills" edge of the JobPosition entity.
func (jp *JobPosition) QuerySkills() *JobSkillQuery {
	return NewJobPositionClient(jp.config).QuerySkills(jp)
}

// QueryEducationRequirements queries the "education_requirements" edge of the JobPosition entity.
func (jp *JobPosition) QueryEducationRequirements() *JobEducationRequirementQuery {
	return NewJobPositionClient(jp.config).QueryEducationRequirements(jp)
}

// QueryExperienceRequirements queries the "experience_requirements" edge of the JobPosition entity.
func (jp *JobPosition) QueryExperienceRequirements() *JobExperienceRequirementQuery {
	return NewJobPositionClient(jp.config).QueryExperienceRequirements(jp)
}

// QueryIndustryRequirements queries the "industry_requirements" edge of the JobPosition entity.
func (jp *JobPosition) QueryIndustryRequirements() *JobIndustryRequirementQuery {
	return NewJobPositionClient(jp.config).QueryIndustryRequirements(jp)
}

// Update returns a builder for updating this JobPosition.
// Note that you need to call JobPosition.Unwrap() before calling this method if this JobPosition
// was returned from a transaction, and the transaction was committed or rolled back.
func (jp *JobPosition) Update() *JobPositionUpdateOne {
	return NewJobPositionClient(jp.config).UpdateOne(jp)
}

// Unwrap unwraps the JobPosition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jp *JobPosition) Unwrap() *JobPosition {
	_tx, ok := jp.config.driver.(*txDriver)
	if !ok {
		panic("db: JobPosition is not a transactional entity")
	}
	jp.config.driver = _tx.drv
	return jp
}

// String implements the fmt.Stringer.
func (jp *JobPosition) String() string {
	var builder strings.Builder
	builder.WriteString("JobPosition(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jp.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(jp.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(jp.Name)
	builder.WriteString(", ")
	builder.WriteString("department_id=")
	builder.WriteString(fmt.Sprintf("%v", jp.DepartmentID))
	builder.WriteString(", ")
	if v := jp.CreatedBy; v != nil {
		builder.WriteString("created_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", jp.Status))
	builder.WriteString(", ")
	if v := jp.Location; v != nil {
		builder.WriteString("location=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := jp.SalaryMin; v != nil {
		builder.WriteString("salary_min=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := jp.SalaryMax; v != nil {
		builder.WriteString("salary_max=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := jp.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(jp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(jp.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// JobPositions is a parsable slice of JobPosition.
type JobPositions []*JobPosition
