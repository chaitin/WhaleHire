// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/jobskill"
	"github.com/chaitin/WhaleHire/backend/db/jobskillmeta"
	"github.com/google/uuid"
)

// JobSkill is the model entity for the JobSkill schema.
type JobSkill struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// JobID holds the value of the "job_id" field.
	JobID uuid.UUID `json:"job_id,omitempty"`
	// SkillID holds the value of the "skill_id" field.
	SkillID uuid.UUID `json:"skill_id,omitempty"`
	// Type holds the value of the "type" field.
	Type jobskill.Type `json:"type,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight int `json:"weight,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobSkillQuery when eager-loading is set.
	Edges        JobSkillEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JobSkillEdges holds the relations/edges for other nodes in the graph.
type JobSkillEdges struct {
	// Job holds the value of the job edge.
	Job *JobPosition `json:"job,omitempty"`
	// Skill holds the value of the skill edge.
	Skill *JobSkillMeta `json:"skill,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// JobOrErr returns the Job value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobSkillEdges) JobOrErr() (*JobPosition, error) {
	if e.Job != nil {
		return e.Job, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: jobposition.Label}
	}
	return nil, &NotLoadedError{edge: "job"}
}

// SkillOrErr returns the Skill value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobSkillEdges) SkillOrErr() (*JobSkillMeta, error) {
	if e.Skill != nil {
		return e.Skill, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: jobskillmeta.Label}
	}
	return nil, &NotLoadedError{edge: "skill"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobSkill) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobskill.FieldWeight:
			values[i] = new(sql.NullInt64)
		case jobskill.FieldType:
			values[i] = new(sql.NullString)
		case jobskill.FieldDeletedAt, jobskill.FieldCreatedAt, jobskill.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case jobskill.FieldID, jobskill.FieldJobID, jobskill.FieldSkillID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobSkill fields.
func (js *JobSkill) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobskill.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				js.ID = *value
			}
		case jobskill.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				js.DeletedAt = value.Time
			}
		case jobskill.FieldJobID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field job_id", values[i])
			} else if value != nil {
				js.JobID = *value
			}
		case jobskill.FieldSkillID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field skill_id", values[i])
			} else if value != nil {
				js.SkillID = *value
			}
		case jobskill.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				js.Type = jobskill.Type(value.String)
			}
		case jobskill.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				js.Weight = int(value.Int64)
			}
		case jobskill.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				js.CreatedAt = value.Time
			}
		case jobskill.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				js.UpdatedAt = value.Time
			}
		default:
			js.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobSkill.
// This includes values selected through modifiers, order, etc.
func (js *JobSkill) Value(name string) (ent.Value, error) {
	return js.selectValues.Get(name)
}

// QueryJob queries the "job" edge of the JobSkill entity.
func (js *JobSkill) QueryJob() *JobPositionQuery {
	return NewJobSkillClient(js.config).QueryJob(js)
}

// QuerySkill queries the "skill" edge of the JobSkill entity.
func (js *JobSkill) QuerySkill() *JobSkillMetaQuery {
	return NewJobSkillClient(js.config).QuerySkill(js)
}

// Update returns a builder for updating this JobSkill.
// Note that you need to call JobSkill.Unwrap() before calling this method if this JobSkill
// was returned from a transaction, and the transaction was committed or rolled back.
func (js *JobSkill) Update() *JobSkillUpdateOne {
	return NewJobSkillClient(js.config).UpdateOne(js)
}

// Unwrap unwraps the JobSkill entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (js *JobSkill) Unwrap() *JobSkill {
	_tx, ok := js.config.driver.(*txDriver)
	if !ok {
		panic("db: JobSkill is not a transactional entity")
	}
	js.config.driver = _tx.drv
	return js
}

// String implements the fmt.Stringer.
func (js *JobSkill) String() string {
	var builder strings.Builder
	builder.WriteString("JobSkill(")
	builder.WriteString(fmt.Sprintf("id=%v, ", js.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(js.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("job_id=")
	builder.WriteString(fmt.Sprintf("%v", js.JobID))
	builder.WriteString(", ")
	builder.WriteString("skill_id=")
	builder.WriteString(fmt.Sprintf("%v", js.SkillID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", js.Type))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", js.Weight))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(js.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(js.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// JobSkills is a parsable slice of JobSkill.
type JobSkills []*JobSkill
