// Code generated by ent, DO NOT EDIT.

package screeningtaskresume

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldDeletedAt, v))
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldTaskID, v))
}

// ResumeID applies equality check predicate on the "resume_id" field. It's identical to ResumeIDEQ.
func ResumeID(v uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldResumeID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldStatus, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldErrorMessage, v))
}

// Ranking applies equality check predicate on the "ranking" field. It's identical to RankingEQ.
func Ranking(v int) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldRanking, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v float64) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldScore, v))
}

// ProcessedAt applies equality check predicate on the "processed_at" field. It's identical to ProcessedAtEQ.
func ProcessedAt(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldProcessedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNotNull(FieldDeletedAt))
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNotIn(FieldTaskID, vs...))
}

// ResumeIDEQ applies the EQ predicate on the "resume_id" field.
func ResumeIDEQ(v uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldResumeID, v))
}

// ResumeIDNEQ applies the NEQ predicate on the "resume_id" field.
func ResumeIDNEQ(v uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNEQ(FieldResumeID, v))
}

// ResumeIDIn applies the In predicate on the "resume_id" field.
func ResumeIDIn(vs ...uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldIn(FieldResumeID, vs...))
}

// ResumeIDNotIn applies the NotIn predicate on the "resume_id" field.
func ResumeIDNotIn(vs ...uuid.UUID) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNotIn(FieldResumeID, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldContainsFold(FieldStatus, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldContainsFold(FieldErrorMessage, v))
}

// RankingEQ applies the EQ predicate on the "ranking" field.
func RankingEQ(v int) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldRanking, v))
}

// RankingNEQ applies the NEQ predicate on the "ranking" field.
func RankingNEQ(v int) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNEQ(FieldRanking, v))
}

// RankingIn applies the In predicate on the "ranking" field.
func RankingIn(vs ...int) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldIn(FieldRanking, vs...))
}

// RankingNotIn applies the NotIn predicate on the "ranking" field.
func RankingNotIn(vs ...int) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNotIn(FieldRanking, vs...))
}

// RankingGT applies the GT predicate on the "ranking" field.
func RankingGT(v int) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGT(FieldRanking, v))
}

// RankingGTE applies the GTE predicate on the "ranking" field.
func RankingGTE(v int) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGTE(FieldRanking, v))
}

// RankingLT applies the LT predicate on the "ranking" field.
func RankingLT(v int) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLT(FieldRanking, v))
}

// RankingLTE applies the LTE predicate on the "ranking" field.
func RankingLTE(v int) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLTE(FieldRanking, v))
}

// RankingIsNil applies the IsNil predicate on the "ranking" field.
func RankingIsNil() predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldIsNull(FieldRanking))
}

// RankingNotNil applies the NotNil predicate on the "ranking" field.
func RankingNotNil() predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNotNull(FieldRanking))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v float64) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v float64) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...float64) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...float64) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v float64) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v float64) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v float64) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v float64) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLTE(FieldScore, v))
}

// ScoreIsNil applies the IsNil predicate on the "score" field.
func ScoreIsNil() predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldIsNull(FieldScore))
}

// ScoreNotNil applies the NotNil predicate on the "score" field.
func ScoreNotNil() predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNotNull(FieldScore))
}

// ProcessedAtEQ applies the EQ predicate on the "processed_at" field.
func ProcessedAtEQ(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldProcessedAt, v))
}

// ProcessedAtNEQ applies the NEQ predicate on the "processed_at" field.
func ProcessedAtNEQ(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNEQ(FieldProcessedAt, v))
}

// ProcessedAtIn applies the In predicate on the "processed_at" field.
func ProcessedAtIn(vs ...time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldIn(FieldProcessedAt, vs...))
}

// ProcessedAtNotIn applies the NotIn predicate on the "processed_at" field.
func ProcessedAtNotIn(vs ...time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNotIn(FieldProcessedAt, vs...))
}

// ProcessedAtGT applies the GT predicate on the "processed_at" field.
func ProcessedAtGT(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGT(FieldProcessedAt, v))
}

// ProcessedAtGTE applies the GTE predicate on the "processed_at" field.
func ProcessedAtGTE(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGTE(FieldProcessedAt, v))
}

// ProcessedAtLT applies the LT predicate on the "processed_at" field.
func ProcessedAtLT(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLT(FieldProcessedAt, v))
}

// ProcessedAtLTE applies the LTE predicate on the "processed_at" field.
func ProcessedAtLTE(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLTE(FieldProcessedAt, v))
}

// ProcessedAtIsNil applies the IsNil predicate on the "processed_at" field.
func ProcessedAtIsNil() predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldIsNull(FieldProcessedAt))
}

// ProcessedAtNotNil applies the NotNil predicate on the "processed_at" field.
func ProcessedAtNotNil() predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNotNull(FieldProcessedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.ScreeningTask) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasResume applies the HasEdge predicate on the "resume" edge.
func HasResume() predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ResumeTable, ResumeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResumeWith applies the HasEdge predicate on the "resume" edge with a given conditions (other predicates).
func HasResumeWith(preds ...predicate.Resume) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(func(s *sql.Selector) {
		step := newResumeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNodeRuns applies the HasEdge predicate on the "node_runs" edge.
func HasNodeRuns() predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NodeRunsTable, NodeRunsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeRunsWith applies the HasEdge predicate on the "node_runs" edge with a given conditions (other predicates).
func HasNodeRunsWith(preds ...predicate.ScreeningNodeRun) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(func(s *sql.Selector) {
		step := newNodeRunsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScreeningTaskResume) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScreeningTaskResume) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScreeningTaskResume) predicate.ScreeningTaskResume {
	return predicate.ScreeningTaskResume(sql.NotPredicates(p))
}
