// Code generated by ent, DO NOT EDIT.

package screeningtaskresume

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the screeningtaskresume type in the database.
	Label = "screening_task_resume"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldResumeID holds the string denoting the resume_id field in the database.
	FieldResumeID = "resume_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldRanking holds the string denoting the ranking field in the database.
	FieldRanking = "ranking"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldProcessedAt holds the string denoting the processed_at field in the database.
	FieldProcessedAt = "processed_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// EdgeResume holds the string denoting the resume edge name in mutations.
	EdgeResume = "resume"
	// EdgeNodeRuns holds the string denoting the node_runs edge name in mutations.
	EdgeNodeRuns = "node_runs"
	// Table holds the table name of the screeningtaskresume in the database.
	Table = "screening_task_resumes"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "screening_task_resumes"
	// TaskInverseTable is the table name for the ScreeningTask entity.
	// It exists in this package in order to avoid circular dependency with the "screeningtask" package.
	TaskInverseTable = "screening_tasks"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_id"
	// ResumeTable is the table that holds the resume relation/edge.
	ResumeTable = "screening_task_resumes"
	// ResumeInverseTable is the table name for the Resume entity.
	// It exists in this package in order to avoid circular dependency with the "resume" package.
	ResumeInverseTable = "resumes"
	// ResumeColumn is the table column denoting the resume relation/edge.
	ResumeColumn = "resume_id"
	// NodeRunsTable is the table that holds the node_runs relation/edge.
	NodeRunsTable = "screening_node_runs"
	// NodeRunsInverseTable is the table name for the ScreeningNodeRun entity.
	// It exists in this package in order to avoid circular dependency with the "screeningnoderun" package.
	NodeRunsInverseTable = "screening_node_runs"
	// NodeRunsColumn is the table column denoting the node_runs relation/edge.
	NodeRunsColumn = "task_resume_id"
)

// Columns holds all SQL columns for screeningtaskresume fields.
var Columns = []string{
	FieldID,
	FieldDeletedAt,
	FieldTaskID,
	FieldResumeID,
	FieldStatus,
	FieldErrorMessage,
	FieldRanking,
	FieldScore,
	FieldProcessedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/chaitin/WhaleHire/backend/db/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ScreeningTaskResume queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByResumeID orders the results by the resume_id field.
func ByResumeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResumeID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByRanking orders the results by the ranking field.
func ByRanking(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRanking, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByProcessedAt orders the results by the processed_at field.
func ByProcessedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}

// ByResumeField orders the results by resume field.
func ByResumeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResumeStep(), sql.OrderByField(field, opts...))
	}
}

// ByNodeRunsCount orders the results by node_runs count.
func ByNodeRunsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNodeRunsStep(), opts...)
	}
}

// ByNodeRuns orders the results by node_runs terms.
func ByNodeRuns(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodeRunsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
	)
}
func newResumeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResumeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ResumeTable, ResumeColumn),
	)
}
func newNodeRunsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodeRunsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NodeRunsTable, NodeRunsColumn),
	)
}
