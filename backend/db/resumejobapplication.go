// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumejobapplication"
	"github.com/google/uuid"
)

// ResumeJobApplication is the model entity for the ResumeJobApplication schema.
type ResumeJobApplication struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// ResumeID holds the value of the "resume_id" field.
	ResumeID uuid.UUID `json:"resume_id,omitempty"`
	// JobPositionID holds the value of the "job_position_id" field.
	JobPositionID uuid.UUID `json:"job_position_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// AppliedAt holds the value of the "applied_at" field.
	AppliedAt time.Time `json:"applied_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResumeJobApplicationQuery when eager-loading is set.
	Edges        ResumeJobApplicationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ResumeJobApplicationEdges holds the relations/edges for other nodes in the graph.
type ResumeJobApplicationEdges struct {
	// Resume holds the value of the resume edge.
	Resume *Resume `json:"resume,omitempty"`
	// JobPosition holds the value of the job_position edge.
	JobPosition *JobPosition `json:"job_position,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ResumeOrErr returns the Resume value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResumeJobApplicationEdges) ResumeOrErr() (*Resume, error) {
	if e.Resume != nil {
		return e.Resume, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: resume.Label}
	}
	return nil, &NotLoadedError{edge: "resume"}
}

// JobPositionOrErr returns the JobPosition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResumeJobApplicationEdges) JobPositionOrErr() (*JobPosition, error) {
	if e.JobPosition != nil {
		return e.JobPosition, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: jobposition.Label}
	}
	return nil, &NotLoadedError{edge: "job_position"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResumeJobApplication) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resumejobapplication.FieldStatus, resumejobapplication.FieldSource, resumejobapplication.FieldNotes:
			values[i] = new(sql.NullString)
		case resumejobapplication.FieldDeletedAt, resumejobapplication.FieldAppliedAt, resumejobapplication.FieldCreatedAt, resumejobapplication.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case resumejobapplication.FieldID, resumejobapplication.FieldResumeID, resumejobapplication.FieldJobPositionID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResumeJobApplication fields.
func (rja *ResumeJobApplication) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resumejobapplication.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rja.ID = *value
			}
		case resumejobapplication.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rja.DeletedAt = value.Time
			}
		case resumejobapplication.FieldResumeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field resume_id", values[i])
			} else if value != nil {
				rja.ResumeID = *value
			}
		case resumejobapplication.FieldJobPositionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field job_position_id", values[i])
			} else if value != nil {
				rja.JobPositionID = *value
			}
		case resumejobapplication.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				rja.Status = value.String
			}
		case resumejobapplication.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				rja.Source = value.String
			}
		case resumejobapplication.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				rja.Notes = value.String
			}
		case resumejobapplication.FieldAppliedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field applied_at", values[i])
			} else if value.Valid {
				rja.AppliedAt = value.Time
			}
		case resumejobapplication.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rja.CreatedAt = value.Time
			}
		case resumejobapplication.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rja.UpdatedAt = value.Time
			}
		default:
			rja.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ResumeJobApplication.
// This includes values selected through modifiers, order, etc.
func (rja *ResumeJobApplication) Value(name string) (ent.Value, error) {
	return rja.selectValues.Get(name)
}

// QueryResume queries the "resume" edge of the ResumeJobApplication entity.
func (rja *ResumeJobApplication) QueryResume() *ResumeQuery {
	return NewResumeJobApplicationClient(rja.config).QueryResume(rja)
}

// QueryJobPosition queries the "job_position" edge of the ResumeJobApplication entity.
func (rja *ResumeJobApplication) QueryJobPosition() *JobPositionQuery {
	return NewResumeJobApplicationClient(rja.config).QueryJobPosition(rja)
}

// Update returns a builder for updating this ResumeJobApplication.
// Note that you need to call ResumeJobApplication.Unwrap() before calling this method if this ResumeJobApplication
// was returned from a transaction, and the transaction was committed or rolled back.
func (rja *ResumeJobApplication) Update() *ResumeJobApplicationUpdateOne {
	return NewResumeJobApplicationClient(rja.config).UpdateOne(rja)
}

// Unwrap unwraps the ResumeJobApplication entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rja *ResumeJobApplication) Unwrap() *ResumeJobApplication {
	_tx, ok := rja.config.driver.(*txDriver)
	if !ok {
		panic("db: ResumeJobApplication is not a transactional entity")
	}
	rja.config.driver = _tx.drv
	return rja
}

// String implements the fmt.Stringer.
func (rja *ResumeJobApplication) String() string {
	var builder strings.Builder
	builder.WriteString("ResumeJobApplication(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rja.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(rja.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("resume_id=")
	builder.WriteString(fmt.Sprintf("%v", rja.ResumeID))
	builder.WriteString(", ")
	builder.WriteString("job_position_id=")
	builder.WriteString(fmt.Sprintf("%v", rja.JobPositionID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(rja.Status)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(rja.Source)
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(rja.Notes)
	builder.WriteString(", ")
	builder.WriteString("applied_at=")
	builder.WriteString(rja.AppliedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rja.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rja.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ResumeJobApplications is a parsable slice of ResumeJobApplication.
type ResumeJobApplications []*ResumeJobApplication
