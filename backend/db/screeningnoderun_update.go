// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/screeningnoderun"
	"github.com/chaitin/WhaleHire/backend/db/screeningtask"
	"github.com/chaitin/WhaleHire/backend/db/screeningtaskresume"
	"github.com/google/uuid"
)

// ScreeningNodeRunUpdate is the builder for updating ScreeningNodeRun entities.
type ScreeningNodeRunUpdate struct {
	config
	hooks     []Hook
	mutation  *ScreeningNodeRunMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ScreeningNodeRunUpdate builder.
func (snru *ScreeningNodeRunUpdate) Where(ps ...predicate.ScreeningNodeRun) *ScreeningNodeRunUpdate {
	snru.mutation.Where(ps...)
	return snru
}

// SetDeletedAt sets the "deleted_at" field.
func (snru *ScreeningNodeRunUpdate) SetDeletedAt(t time.Time) *ScreeningNodeRunUpdate {
	snru.mutation.SetDeletedAt(t)
	return snru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (snru *ScreeningNodeRunUpdate) SetNillableDeletedAt(t *time.Time) *ScreeningNodeRunUpdate {
	if t != nil {
		snru.SetDeletedAt(*t)
	}
	return snru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (snru *ScreeningNodeRunUpdate) ClearDeletedAt() *ScreeningNodeRunUpdate {
	snru.mutation.ClearDeletedAt()
	return snru
}

// SetTaskID sets the "task_id" field.
func (snru *ScreeningNodeRunUpdate) SetTaskID(u uuid.UUID) *ScreeningNodeRunUpdate {
	snru.mutation.SetTaskID(u)
	return snru
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (snru *ScreeningNodeRunUpdate) SetNillableTaskID(u *uuid.UUID) *ScreeningNodeRunUpdate {
	if u != nil {
		snru.SetTaskID(*u)
	}
	return snru
}

// SetTaskResumeID sets the "task_resume_id" field.
func (snru *ScreeningNodeRunUpdate) SetTaskResumeID(u uuid.UUID) *ScreeningNodeRunUpdate {
	snru.mutation.SetTaskResumeID(u)
	return snru
}

// SetNillableTaskResumeID sets the "task_resume_id" field if the given value is not nil.
func (snru *ScreeningNodeRunUpdate) SetNillableTaskResumeID(u *uuid.UUID) *ScreeningNodeRunUpdate {
	if u != nil {
		snru.SetTaskResumeID(*u)
	}
	return snru
}

// SetNodeKey sets the "node_key" field.
func (snru *ScreeningNodeRunUpdate) SetNodeKey(s string) *ScreeningNodeRunUpdate {
	snru.mutation.SetNodeKey(s)
	return snru
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (snru *ScreeningNodeRunUpdate) SetNillableNodeKey(s *string) *ScreeningNodeRunUpdate {
	if s != nil {
		snru.SetNodeKey(*s)
	}
	return snru
}

// ClearNodeKey clears the value of the "node_key" field.
func (snru *ScreeningNodeRunUpdate) ClearNodeKey() *ScreeningNodeRunUpdate {
	snru.mutation.ClearNodeKey()
	return snru
}

// SetStatus sets the "status" field.
func (snru *ScreeningNodeRunUpdate) SetStatus(s string) *ScreeningNodeRunUpdate {
	snru.mutation.SetStatus(s)
	return snru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (snru *ScreeningNodeRunUpdate) SetNillableStatus(s *string) *ScreeningNodeRunUpdate {
	if s != nil {
		snru.SetStatus(*s)
	}
	return snru
}

// SetAttemptNo sets the "attempt_no" field.
func (snru *ScreeningNodeRunUpdate) SetAttemptNo(i int) *ScreeningNodeRunUpdate {
	snru.mutation.ResetAttemptNo()
	snru.mutation.SetAttemptNo(i)
	return snru
}

// SetNillableAttemptNo sets the "attempt_no" field if the given value is not nil.
func (snru *ScreeningNodeRunUpdate) SetNillableAttemptNo(i *int) *ScreeningNodeRunUpdate {
	if i != nil {
		snru.SetAttemptNo(*i)
	}
	return snru
}

// AddAttemptNo adds i to the "attempt_no" field.
func (snru *ScreeningNodeRunUpdate) AddAttemptNo(i int) *ScreeningNodeRunUpdate {
	snru.mutation.AddAttemptNo(i)
	return snru
}

// SetTraceID sets the "trace_id" field.
func (snru *ScreeningNodeRunUpdate) SetTraceID(s string) *ScreeningNodeRunUpdate {
	snru.mutation.SetTraceID(s)
	return snru
}

// SetNillableTraceID sets the "trace_id" field if the given value is not nil.
func (snru *ScreeningNodeRunUpdate) SetNillableTraceID(s *string) *ScreeningNodeRunUpdate {
	if s != nil {
		snru.SetTraceID(*s)
	}
	return snru
}

// ClearTraceID clears the value of the "trace_id" field.
func (snru *ScreeningNodeRunUpdate) ClearTraceID() *ScreeningNodeRunUpdate {
	snru.mutation.ClearTraceID()
	return snru
}

// SetAgentVersion sets the "agent_version" field.
func (snru *ScreeningNodeRunUpdate) SetAgentVersion(s string) *ScreeningNodeRunUpdate {
	snru.mutation.SetAgentVersion(s)
	return snru
}

// SetNillableAgentVersion sets the "agent_version" field if the given value is not nil.
func (snru *ScreeningNodeRunUpdate) SetNillableAgentVersion(s *string) *ScreeningNodeRunUpdate {
	if s != nil {
		snru.SetAgentVersion(*s)
	}
	return snru
}

// ClearAgentVersion clears the value of the "agent_version" field.
func (snru *ScreeningNodeRunUpdate) ClearAgentVersion() *ScreeningNodeRunUpdate {
	snru.mutation.ClearAgentVersion()
	return snru
}

// SetModelName sets the "model_name" field.
func (snru *ScreeningNodeRunUpdate) SetModelName(s string) *ScreeningNodeRunUpdate {
	snru.mutation.SetModelName(s)
	return snru
}

// SetNillableModelName sets the "model_name" field if the given value is not nil.
func (snru *ScreeningNodeRunUpdate) SetNillableModelName(s *string) *ScreeningNodeRunUpdate {
	if s != nil {
		snru.SetModelName(*s)
	}
	return snru
}

// ClearModelName clears the value of the "model_name" field.
func (snru *ScreeningNodeRunUpdate) ClearModelName() *ScreeningNodeRunUpdate {
	snru.mutation.ClearModelName()
	return snru
}

// SetModelProvider sets the "model_provider" field.
func (snru *ScreeningNodeRunUpdate) SetModelProvider(s string) *ScreeningNodeRunUpdate {
	snru.mutation.SetModelProvider(s)
	return snru
}

// SetNillableModelProvider sets the "model_provider" field if the given value is not nil.
func (snru *ScreeningNodeRunUpdate) SetNillableModelProvider(s *string) *ScreeningNodeRunUpdate {
	if s != nil {
		snru.SetModelProvider(*s)
	}
	return snru
}

// ClearModelProvider clears the value of the "model_provider" field.
func (snru *ScreeningNodeRunUpdate) ClearModelProvider() *ScreeningNodeRunUpdate {
	snru.mutation.ClearModelProvider()
	return snru
}

// SetLlmParams sets the "llm_params" field.
func (snru *ScreeningNodeRunUpdate) SetLlmParams(m map[string]interface{}) *ScreeningNodeRunUpdate {
	snru.mutation.SetLlmParams(m)
	return snru
}

// ClearLlmParams clears the value of the "llm_params" field.
func (snru *ScreeningNodeRunUpdate) ClearLlmParams() *ScreeningNodeRunUpdate {
	snru.mutation.ClearLlmParams()
	return snru
}

// SetInputPayload sets the "input_payload" field.
func (snru *ScreeningNodeRunUpdate) SetInputPayload(m map[string]interface{}) *ScreeningNodeRunUpdate {
	snru.mutation.SetInputPayload(m)
	return snru
}

// ClearInputPayload clears the value of the "input_payload" field.
func (snru *ScreeningNodeRunUpdate) ClearInputPayload() *ScreeningNodeRunUpdate {
	snru.mutation.ClearInputPayload()
	return snru
}

// SetOutputPayload sets the "output_payload" field.
func (snru *ScreeningNodeRunUpdate) SetOutputPayload(m map[string]interface{}) *ScreeningNodeRunUpdate {
	snru.mutation.SetOutputPayload(m)
	return snru
}

// ClearOutputPayload clears the value of the "output_payload" field.
func (snru *ScreeningNodeRunUpdate) ClearOutputPayload() *ScreeningNodeRunUpdate {
	snru.mutation.ClearOutputPayload()
	return snru
}

// SetErrorMessage sets the "error_message" field.
func (snru *ScreeningNodeRunUpdate) SetErrorMessage(s string) *ScreeningNodeRunUpdate {
	snru.mutation.SetErrorMessage(s)
	return snru
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (snru *ScreeningNodeRunUpdate) SetNillableErrorMessage(s *string) *ScreeningNodeRunUpdate {
	if s != nil {
		snru.SetErrorMessage(*s)
	}
	return snru
}

// ClearErrorMessage clears the value of the "error_message" field.
func (snru *ScreeningNodeRunUpdate) ClearErrorMessage() *ScreeningNodeRunUpdate {
	snru.mutation.ClearErrorMessage()
	return snru
}

// SetTokensInput sets the "tokens_input" field.
func (snru *ScreeningNodeRunUpdate) SetTokensInput(i int64) *ScreeningNodeRunUpdate {
	snru.mutation.ResetTokensInput()
	snru.mutation.SetTokensInput(i)
	return snru
}

// SetNillableTokensInput sets the "tokens_input" field if the given value is not nil.
func (snru *ScreeningNodeRunUpdate) SetNillableTokensInput(i *int64) *ScreeningNodeRunUpdate {
	if i != nil {
		snru.SetTokensInput(*i)
	}
	return snru
}

// AddTokensInput adds i to the "tokens_input" field.
func (snru *ScreeningNodeRunUpdate) AddTokensInput(i int64) *ScreeningNodeRunUpdate {
	snru.mutation.AddTokensInput(i)
	return snru
}

// ClearTokensInput clears the value of the "tokens_input" field.
func (snru *ScreeningNodeRunUpdate) ClearTokensInput() *ScreeningNodeRunUpdate {
	snru.mutation.ClearTokensInput()
	return snru
}

// SetTokensOutput sets the "tokens_output" field.
func (snru *ScreeningNodeRunUpdate) SetTokensOutput(i int64) *ScreeningNodeRunUpdate {
	snru.mutation.ResetTokensOutput()
	snru.mutation.SetTokensOutput(i)
	return snru
}

// SetNillableTokensOutput sets the "tokens_output" field if the given value is not nil.
func (snru *ScreeningNodeRunUpdate) SetNillableTokensOutput(i *int64) *ScreeningNodeRunUpdate {
	if i != nil {
		snru.SetTokensOutput(*i)
	}
	return snru
}

// AddTokensOutput adds i to the "tokens_output" field.
func (snru *ScreeningNodeRunUpdate) AddTokensOutput(i int64) *ScreeningNodeRunUpdate {
	snru.mutation.AddTokensOutput(i)
	return snru
}

// ClearTokensOutput clears the value of the "tokens_output" field.
func (snru *ScreeningNodeRunUpdate) ClearTokensOutput() *ScreeningNodeRunUpdate {
	snru.mutation.ClearTokensOutput()
	return snru
}

// SetTotalCost sets the "total_cost" field.
func (snru *ScreeningNodeRunUpdate) SetTotalCost(f float64) *ScreeningNodeRunUpdate {
	snru.mutation.ResetTotalCost()
	snru.mutation.SetTotalCost(f)
	return snru
}

// SetNillableTotalCost sets the "total_cost" field if the given value is not nil.
func (snru *ScreeningNodeRunUpdate) SetNillableTotalCost(f *float64) *ScreeningNodeRunUpdate {
	if f != nil {
		snru.SetTotalCost(*f)
	}
	return snru
}

// AddTotalCost adds f to the "total_cost" field.
func (snru *ScreeningNodeRunUpdate) AddTotalCost(f float64) *ScreeningNodeRunUpdate {
	snru.mutation.AddTotalCost(f)
	return snru
}

// ClearTotalCost clears the value of the "total_cost" field.
func (snru *ScreeningNodeRunUpdate) ClearTotalCost() *ScreeningNodeRunUpdate {
	snru.mutation.ClearTotalCost()
	return snru
}

// SetStartedAt sets the "started_at" field.
func (snru *ScreeningNodeRunUpdate) SetStartedAt(t time.Time) *ScreeningNodeRunUpdate {
	snru.mutation.SetStartedAt(t)
	return snru
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (snru *ScreeningNodeRunUpdate) SetNillableStartedAt(t *time.Time) *ScreeningNodeRunUpdate {
	if t != nil {
		snru.SetStartedAt(*t)
	}
	return snru
}

// ClearStartedAt clears the value of the "started_at" field.
func (snru *ScreeningNodeRunUpdate) ClearStartedAt() *ScreeningNodeRunUpdate {
	snru.mutation.ClearStartedAt()
	return snru
}

// SetFinishedAt sets the "finished_at" field.
func (snru *ScreeningNodeRunUpdate) SetFinishedAt(t time.Time) *ScreeningNodeRunUpdate {
	snru.mutation.SetFinishedAt(t)
	return snru
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (snru *ScreeningNodeRunUpdate) SetNillableFinishedAt(t *time.Time) *ScreeningNodeRunUpdate {
	if t != nil {
		snru.SetFinishedAt(*t)
	}
	return snru
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (snru *ScreeningNodeRunUpdate) ClearFinishedAt() *ScreeningNodeRunUpdate {
	snru.mutation.ClearFinishedAt()
	return snru
}

// SetDurationMs sets the "duration_ms" field.
func (snru *ScreeningNodeRunUpdate) SetDurationMs(i int) *ScreeningNodeRunUpdate {
	snru.mutation.ResetDurationMs()
	snru.mutation.SetDurationMs(i)
	return snru
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (snru *ScreeningNodeRunUpdate) SetNillableDurationMs(i *int) *ScreeningNodeRunUpdate {
	if i != nil {
		snru.SetDurationMs(*i)
	}
	return snru
}

// AddDurationMs adds i to the "duration_ms" field.
func (snru *ScreeningNodeRunUpdate) AddDurationMs(i int) *ScreeningNodeRunUpdate {
	snru.mutation.AddDurationMs(i)
	return snru
}

// ClearDurationMs clears the value of the "duration_ms" field.
func (snru *ScreeningNodeRunUpdate) ClearDurationMs() *ScreeningNodeRunUpdate {
	snru.mutation.ClearDurationMs()
	return snru
}

// SetUpdatedAt sets the "updated_at" field.
func (snru *ScreeningNodeRunUpdate) SetUpdatedAt(t time.Time) *ScreeningNodeRunUpdate {
	snru.mutation.SetUpdatedAt(t)
	return snru
}

// SetTask sets the "task" edge to the ScreeningTask entity.
func (snru *ScreeningNodeRunUpdate) SetTask(s *ScreeningTask) *ScreeningNodeRunUpdate {
	return snru.SetTaskID(s.ID)
}

// SetTaskResume sets the "task_resume" edge to the ScreeningTaskResume entity.
func (snru *ScreeningNodeRunUpdate) SetTaskResume(s *ScreeningTaskResume) *ScreeningNodeRunUpdate {
	return snru.SetTaskResumeID(s.ID)
}

// Mutation returns the ScreeningNodeRunMutation object of the builder.
func (snru *ScreeningNodeRunUpdate) Mutation() *ScreeningNodeRunMutation {
	return snru.mutation
}

// ClearTask clears the "task" edge to the ScreeningTask entity.
func (snru *ScreeningNodeRunUpdate) ClearTask() *ScreeningNodeRunUpdate {
	snru.mutation.ClearTask()
	return snru
}

// ClearTaskResume clears the "task_resume" edge to the ScreeningTaskResume entity.
func (snru *ScreeningNodeRunUpdate) ClearTaskResume() *ScreeningNodeRunUpdate {
	snru.mutation.ClearTaskResume()
	return snru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (snru *ScreeningNodeRunUpdate) Save(ctx context.Context) (int, error) {
	if err := snru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, snru.sqlSave, snru.mutation, snru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snru *ScreeningNodeRunUpdate) SaveX(ctx context.Context) int {
	affected, err := snru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (snru *ScreeningNodeRunUpdate) Exec(ctx context.Context) error {
	_, err := snru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snru *ScreeningNodeRunUpdate) ExecX(ctx context.Context) {
	if err := snru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (snru *ScreeningNodeRunUpdate) defaults() error {
	if _, ok := snru.mutation.UpdatedAt(); !ok {
		if screeningnoderun.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningnoderun.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := screeningnoderun.UpdateDefaultUpdatedAt()
		snru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (snru *ScreeningNodeRunUpdate) check() error {
	if v, ok := snru.mutation.TraceID(); ok {
		if err := screeningnoderun.TraceIDValidator(v); err != nil {
			return &ValidationError{Name: "trace_id", err: fmt.Errorf(`db: validator failed for field "ScreeningNodeRun.trace_id": %w`, err)}
		}
	}
	if v, ok := snru.mutation.AgentVersion(); ok {
		if err := screeningnoderun.AgentVersionValidator(v); err != nil {
			return &ValidationError{Name: "agent_version", err: fmt.Errorf(`db: validator failed for field "ScreeningNodeRun.agent_version": %w`, err)}
		}
	}
	if v, ok := snru.mutation.ModelName(); ok {
		if err := screeningnoderun.ModelNameValidator(v); err != nil {
			return &ValidationError{Name: "model_name", err: fmt.Errorf(`db: validator failed for field "ScreeningNodeRun.model_name": %w`, err)}
		}
	}
	if v, ok := snru.mutation.ModelProvider(); ok {
		if err := screeningnoderun.ModelProviderValidator(v); err != nil {
			return &ValidationError{Name: "model_provider", err: fmt.Errorf(`db: validator failed for field "ScreeningNodeRun.model_provider": %w`, err)}
		}
	}
	if snru.mutation.TaskCleared() && len(snru.mutation.TaskIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ScreeningNodeRun.task"`)
	}
	if snru.mutation.TaskResumeCleared() && len(snru.mutation.TaskResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ScreeningNodeRun.task_resume"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (snru *ScreeningNodeRunUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScreeningNodeRunUpdate {
	snru.modifiers = append(snru.modifiers, modifiers...)
	return snru
}

func (snru *ScreeningNodeRunUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := snru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(screeningnoderun.Table, screeningnoderun.Columns, sqlgraph.NewFieldSpec(screeningnoderun.FieldID, field.TypeUUID))
	if ps := snru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := snru.mutation.DeletedAt(); ok {
		_spec.SetField(screeningnoderun.FieldDeletedAt, field.TypeTime, value)
	}
	if snru.mutation.DeletedAtCleared() {
		_spec.ClearField(screeningnoderun.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := snru.mutation.NodeKey(); ok {
		_spec.SetField(screeningnoderun.FieldNodeKey, field.TypeString, value)
	}
	if snru.mutation.NodeKeyCleared() {
		_spec.ClearField(screeningnoderun.FieldNodeKey, field.TypeString)
	}
	if value, ok := snru.mutation.Status(); ok {
		_spec.SetField(screeningnoderun.FieldStatus, field.TypeString, value)
	}
	if value, ok := snru.mutation.AttemptNo(); ok {
		_spec.SetField(screeningnoderun.FieldAttemptNo, field.TypeInt, value)
	}
	if value, ok := snru.mutation.AddedAttemptNo(); ok {
		_spec.AddField(screeningnoderun.FieldAttemptNo, field.TypeInt, value)
	}
	if value, ok := snru.mutation.TraceID(); ok {
		_spec.SetField(screeningnoderun.FieldTraceID, field.TypeString, value)
	}
	if snru.mutation.TraceIDCleared() {
		_spec.ClearField(screeningnoderun.FieldTraceID, field.TypeString)
	}
	if value, ok := snru.mutation.AgentVersion(); ok {
		_spec.SetField(screeningnoderun.FieldAgentVersion, field.TypeString, value)
	}
	if snru.mutation.AgentVersionCleared() {
		_spec.ClearField(screeningnoderun.FieldAgentVersion, field.TypeString)
	}
	if value, ok := snru.mutation.ModelName(); ok {
		_spec.SetField(screeningnoderun.FieldModelName, field.TypeString, value)
	}
	if snru.mutation.ModelNameCleared() {
		_spec.ClearField(screeningnoderun.FieldModelName, field.TypeString)
	}
	if value, ok := snru.mutation.ModelProvider(); ok {
		_spec.SetField(screeningnoderun.FieldModelProvider, field.TypeString, value)
	}
	if snru.mutation.ModelProviderCleared() {
		_spec.ClearField(screeningnoderun.FieldModelProvider, field.TypeString)
	}
	if value, ok := snru.mutation.LlmParams(); ok {
		_spec.SetField(screeningnoderun.FieldLlmParams, field.TypeJSON, value)
	}
	if snru.mutation.LlmParamsCleared() {
		_spec.ClearField(screeningnoderun.FieldLlmParams, field.TypeJSON)
	}
	if value, ok := snru.mutation.InputPayload(); ok {
		_spec.SetField(screeningnoderun.FieldInputPayload, field.TypeJSON, value)
	}
	if snru.mutation.InputPayloadCleared() {
		_spec.ClearField(screeningnoderun.FieldInputPayload, field.TypeJSON)
	}
	if value, ok := snru.mutation.OutputPayload(); ok {
		_spec.SetField(screeningnoderun.FieldOutputPayload, field.TypeJSON, value)
	}
	if snru.mutation.OutputPayloadCleared() {
		_spec.ClearField(screeningnoderun.FieldOutputPayload, field.TypeJSON)
	}
	if value, ok := snru.mutation.ErrorMessage(); ok {
		_spec.SetField(screeningnoderun.FieldErrorMessage, field.TypeString, value)
	}
	if snru.mutation.ErrorMessageCleared() {
		_spec.ClearField(screeningnoderun.FieldErrorMessage, field.TypeString)
	}
	if value, ok := snru.mutation.TokensInput(); ok {
		_spec.SetField(screeningnoderun.FieldTokensInput, field.TypeInt64, value)
	}
	if value, ok := snru.mutation.AddedTokensInput(); ok {
		_spec.AddField(screeningnoderun.FieldTokensInput, field.TypeInt64, value)
	}
	if snru.mutation.TokensInputCleared() {
		_spec.ClearField(screeningnoderun.FieldTokensInput, field.TypeInt64)
	}
	if value, ok := snru.mutation.TokensOutput(); ok {
		_spec.SetField(screeningnoderun.FieldTokensOutput, field.TypeInt64, value)
	}
	if value, ok := snru.mutation.AddedTokensOutput(); ok {
		_spec.AddField(screeningnoderun.FieldTokensOutput, field.TypeInt64, value)
	}
	if snru.mutation.TokensOutputCleared() {
		_spec.ClearField(screeningnoderun.FieldTokensOutput, field.TypeInt64)
	}
	if value, ok := snru.mutation.TotalCost(); ok {
		_spec.SetField(screeningnoderun.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := snru.mutation.AddedTotalCost(); ok {
		_spec.AddField(screeningnoderun.FieldTotalCost, field.TypeFloat64, value)
	}
	if snru.mutation.TotalCostCleared() {
		_spec.ClearField(screeningnoderun.FieldTotalCost, field.TypeFloat64)
	}
	if value, ok := snru.mutation.StartedAt(); ok {
		_spec.SetField(screeningnoderun.FieldStartedAt, field.TypeTime, value)
	}
	if snru.mutation.StartedAtCleared() {
		_spec.ClearField(screeningnoderun.FieldStartedAt, field.TypeTime)
	}
	if value, ok := snru.mutation.FinishedAt(); ok {
		_spec.SetField(screeningnoderun.FieldFinishedAt, field.TypeTime, value)
	}
	if snru.mutation.FinishedAtCleared() {
		_spec.ClearField(screeningnoderun.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := snru.mutation.DurationMs(); ok {
		_spec.SetField(screeningnoderun.FieldDurationMs, field.TypeInt, value)
	}
	if value, ok := snru.mutation.AddedDurationMs(); ok {
		_spec.AddField(screeningnoderun.FieldDurationMs, field.TypeInt, value)
	}
	if snru.mutation.DurationMsCleared() {
		_spec.ClearField(screeningnoderun.FieldDurationMs, field.TypeInt)
	}
	if value, ok := snru.mutation.UpdatedAt(); ok {
		_spec.SetField(screeningnoderun.FieldUpdatedAt, field.TypeTime, value)
	}
	if snru.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningnoderun.TaskTable,
			Columns: []string{screeningnoderun.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snru.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningnoderun.TaskTable,
			Columns: []string{screeningnoderun.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snru.mutation.TaskResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningnoderun.TaskResumeTable,
			Columns: []string{screeningnoderun.TaskResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtaskresume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snru.mutation.TaskResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningnoderun.TaskResumeTable,
			Columns: []string{screeningnoderun.TaskResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtaskresume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(snru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, snru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{screeningnoderun.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	snru.mutation.done = true
	return n, nil
}

// ScreeningNodeRunUpdateOne is the builder for updating a single ScreeningNodeRun entity.
type ScreeningNodeRunUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ScreeningNodeRunMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (snruo *ScreeningNodeRunUpdateOne) SetDeletedAt(t time.Time) *ScreeningNodeRunUpdateOne {
	snruo.mutation.SetDeletedAt(t)
	return snruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (snruo *ScreeningNodeRunUpdateOne) SetNillableDeletedAt(t *time.Time) *ScreeningNodeRunUpdateOne {
	if t != nil {
		snruo.SetDeletedAt(*t)
	}
	return snruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (snruo *ScreeningNodeRunUpdateOne) ClearDeletedAt() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearDeletedAt()
	return snruo
}

// SetTaskID sets the "task_id" field.
func (snruo *ScreeningNodeRunUpdateOne) SetTaskID(u uuid.UUID) *ScreeningNodeRunUpdateOne {
	snruo.mutation.SetTaskID(u)
	return snruo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (snruo *ScreeningNodeRunUpdateOne) SetNillableTaskID(u *uuid.UUID) *ScreeningNodeRunUpdateOne {
	if u != nil {
		snruo.SetTaskID(*u)
	}
	return snruo
}

// SetTaskResumeID sets the "task_resume_id" field.
func (snruo *ScreeningNodeRunUpdateOne) SetTaskResumeID(u uuid.UUID) *ScreeningNodeRunUpdateOne {
	snruo.mutation.SetTaskResumeID(u)
	return snruo
}

// SetNillableTaskResumeID sets the "task_resume_id" field if the given value is not nil.
func (snruo *ScreeningNodeRunUpdateOne) SetNillableTaskResumeID(u *uuid.UUID) *ScreeningNodeRunUpdateOne {
	if u != nil {
		snruo.SetTaskResumeID(*u)
	}
	return snruo
}

// SetNodeKey sets the "node_key" field.
func (snruo *ScreeningNodeRunUpdateOne) SetNodeKey(s string) *ScreeningNodeRunUpdateOne {
	snruo.mutation.SetNodeKey(s)
	return snruo
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (snruo *ScreeningNodeRunUpdateOne) SetNillableNodeKey(s *string) *ScreeningNodeRunUpdateOne {
	if s != nil {
		snruo.SetNodeKey(*s)
	}
	return snruo
}

// ClearNodeKey clears the value of the "node_key" field.
func (snruo *ScreeningNodeRunUpdateOne) ClearNodeKey() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearNodeKey()
	return snruo
}

// SetStatus sets the "status" field.
func (snruo *ScreeningNodeRunUpdateOne) SetStatus(s string) *ScreeningNodeRunUpdateOne {
	snruo.mutation.SetStatus(s)
	return snruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (snruo *ScreeningNodeRunUpdateOne) SetNillableStatus(s *string) *ScreeningNodeRunUpdateOne {
	if s != nil {
		snruo.SetStatus(*s)
	}
	return snruo
}

// SetAttemptNo sets the "attempt_no" field.
func (snruo *ScreeningNodeRunUpdateOne) SetAttemptNo(i int) *ScreeningNodeRunUpdateOne {
	snruo.mutation.ResetAttemptNo()
	snruo.mutation.SetAttemptNo(i)
	return snruo
}

// SetNillableAttemptNo sets the "attempt_no" field if the given value is not nil.
func (snruo *ScreeningNodeRunUpdateOne) SetNillableAttemptNo(i *int) *ScreeningNodeRunUpdateOne {
	if i != nil {
		snruo.SetAttemptNo(*i)
	}
	return snruo
}

// AddAttemptNo adds i to the "attempt_no" field.
func (snruo *ScreeningNodeRunUpdateOne) AddAttemptNo(i int) *ScreeningNodeRunUpdateOne {
	snruo.mutation.AddAttemptNo(i)
	return snruo
}

// SetTraceID sets the "trace_id" field.
func (snruo *ScreeningNodeRunUpdateOne) SetTraceID(s string) *ScreeningNodeRunUpdateOne {
	snruo.mutation.SetTraceID(s)
	return snruo
}

// SetNillableTraceID sets the "trace_id" field if the given value is not nil.
func (snruo *ScreeningNodeRunUpdateOne) SetNillableTraceID(s *string) *ScreeningNodeRunUpdateOne {
	if s != nil {
		snruo.SetTraceID(*s)
	}
	return snruo
}

// ClearTraceID clears the value of the "trace_id" field.
func (snruo *ScreeningNodeRunUpdateOne) ClearTraceID() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearTraceID()
	return snruo
}

// SetAgentVersion sets the "agent_version" field.
func (snruo *ScreeningNodeRunUpdateOne) SetAgentVersion(s string) *ScreeningNodeRunUpdateOne {
	snruo.mutation.SetAgentVersion(s)
	return snruo
}

// SetNillableAgentVersion sets the "agent_version" field if the given value is not nil.
func (snruo *ScreeningNodeRunUpdateOne) SetNillableAgentVersion(s *string) *ScreeningNodeRunUpdateOne {
	if s != nil {
		snruo.SetAgentVersion(*s)
	}
	return snruo
}

// ClearAgentVersion clears the value of the "agent_version" field.
func (snruo *ScreeningNodeRunUpdateOne) ClearAgentVersion() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearAgentVersion()
	return snruo
}

// SetModelName sets the "model_name" field.
func (snruo *ScreeningNodeRunUpdateOne) SetModelName(s string) *ScreeningNodeRunUpdateOne {
	snruo.mutation.SetModelName(s)
	return snruo
}

// SetNillableModelName sets the "model_name" field if the given value is not nil.
func (snruo *ScreeningNodeRunUpdateOne) SetNillableModelName(s *string) *ScreeningNodeRunUpdateOne {
	if s != nil {
		snruo.SetModelName(*s)
	}
	return snruo
}

// ClearModelName clears the value of the "model_name" field.
func (snruo *ScreeningNodeRunUpdateOne) ClearModelName() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearModelName()
	return snruo
}

// SetModelProvider sets the "model_provider" field.
func (snruo *ScreeningNodeRunUpdateOne) SetModelProvider(s string) *ScreeningNodeRunUpdateOne {
	snruo.mutation.SetModelProvider(s)
	return snruo
}

// SetNillableModelProvider sets the "model_provider" field if the given value is not nil.
func (snruo *ScreeningNodeRunUpdateOne) SetNillableModelProvider(s *string) *ScreeningNodeRunUpdateOne {
	if s != nil {
		snruo.SetModelProvider(*s)
	}
	return snruo
}

// ClearModelProvider clears the value of the "model_provider" field.
func (snruo *ScreeningNodeRunUpdateOne) ClearModelProvider() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearModelProvider()
	return snruo
}

// SetLlmParams sets the "llm_params" field.
func (snruo *ScreeningNodeRunUpdateOne) SetLlmParams(m map[string]interface{}) *ScreeningNodeRunUpdateOne {
	snruo.mutation.SetLlmParams(m)
	return snruo
}

// ClearLlmParams clears the value of the "llm_params" field.
func (snruo *ScreeningNodeRunUpdateOne) ClearLlmParams() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearLlmParams()
	return snruo
}

// SetInputPayload sets the "input_payload" field.
func (snruo *ScreeningNodeRunUpdateOne) SetInputPayload(m map[string]interface{}) *ScreeningNodeRunUpdateOne {
	snruo.mutation.SetInputPayload(m)
	return snruo
}

// ClearInputPayload clears the value of the "input_payload" field.
func (snruo *ScreeningNodeRunUpdateOne) ClearInputPayload() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearInputPayload()
	return snruo
}

// SetOutputPayload sets the "output_payload" field.
func (snruo *ScreeningNodeRunUpdateOne) SetOutputPayload(m map[string]interface{}) *ScreeningNodeRunUpdateOne {
	snruo.mutation.SetOutputPayload(m)
	return snruo
}

// ClearOutputPayload clears the value of the "output_payload" field.
func (snruo *ScreeningNodeRunUpdateOne) ClearOutputPayload() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearOutputPayload()
	return snruo
}

// SetErrorMessage sets the "error_message" field.
func (snruo *ScreeningNodeRunUpdateOne) SetErrorMessage(s string) *ScreeningNodeRunUpdateOne {
	snruo.mutation.SetErrorMessage(s)
	return snruo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (snruo *ScreeningNodeRunUpdateOne) SetNillableErrorMessage(s *string) *ScreeningNodeRunUpdateOne {
	if s != nil {
		snruo.SetErrorMessage(*s)
	}
	return snruo
}

// ClearErrorMessage clears the value of the "error_message" field.
func (snruo *ScreeningNodeRunUpdateOne) ClearErrorMessage() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearErrorMessage()
	return snruo
}

// SetTokensInput sets the "tokens_input" field.
func (snruo *ScreeningNodeRunUpdateOne) SetTokensInput(i int64) *ScreeningNodeRunUpdateOne {
	snruo.mutation.ResetTokensInput()
	snruo.mutation.SetTokensInput(i)
	return snruo
}

// SetNillableTokensInput sets the "tokens_input" field if the given value is not nil.
func (snruo *ScreeningNodeRunUpdateOne) SetNillableTokensInput(i *int64) *ScreeningNodeRunUpdateOne {
	if i != nil {
		snruo.SetTokensInput(*i)
	}
	return snruo
}

// AddTokensInput adds i to the "tokens_input" field.
func (snruo *ScreeningNodeRunUpdateOne) AddTokensInput(i int64) *ScreeningNodeRunUpdateOne {
	snruo.mutation.AddTokensInput(i)
	return snruo
}

// ClearTokensInput clears the value of the "tokens_input" field.
func (snruo *ScreeningNodeRunUpdateOne) ClearTokensInput() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearTokensInput()
	return snruo
}

// SetTokensOutput sets the "tokens_output" field.
func (snruo *ScreeningNodeRunUpdateOne) SetTokensOutput(i int64) *ScreeningNodeRunUpdateOne {
	snruo.mutation.ResetTokensOutput()
	snruo.mutation.SetTokensOutput(i)
	return snruo
}

// SetNillableTokensOutput sets the "tokens_output" field if the given value is not nil.
func (snruo *ScreeningNodeRunUpdateOne) SetNillableTokensOutput(i *int64) *ScreeningNodeRunUpdateOne {
	if i != nil {
		snruo.SetTokensOutput(*i)
	}
	return snruo
}

// AddTokensOutput adds i to the "tokens_output" field.
func (snruo *ScreeningNodeRunUpdateOne) AddTokensOutput(i int64) *ScreeningNodeRunUpdateOne {
	snruo.mutation.AddTokensOutput(i)
	return snruo
}

// ClearTokensOutput clears the value of the "tokens_output" field.
func (snruo *ScreeningNodeRunUpdateOne) ClearTokensOutput() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearTokensOutput()
	return snruo
}

// SetTotalCost sets the "total_cost" field.
func (snruo *ScreeningNodeRunUpdateOne) SetTotalCost(f float64) *ScreeningNodeRunUpdateOne {
	snruo.mutation.ResetTotalCost()
	snruo.mutation.SetTotalCost(f)
	return snruo
}

// SetNillableTotalCost sets the "total_cost" field if the given value is not nil.
func (snruo *ScreeningNodeRunUpdateOne) SetNillableTotalCost(f *float64) *ScreeningNodeRunUpdateOne {
	if f != nil {
		snruo.SetTotalCost(*f)
	}
	return snruo
}

// AddTotalCost adds f to the "total_cost" field.
func (snruo *ScreeningNodeRunUpdateOne) AddTotalCost(f float64) *ScreeningNodeRunUpdateOne {
	snruo.mutation.AddTotalCost(f)
	return snruo
}

// ClearTotalCost clears the value of the "total_cost" field.
func (snruo *ScreeningNodeRunUpdateOne) ClearTotalCost() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearTotalCost()
	return snruo
}

// SetStartedAt sets the "started_at" field.
func (snruo *ScreeningNodeRunUpdateOne) SetStartedAt(t time.Time) *ScreeningNodeRunUpdateOne {
	snruo.mutation.SetStartedAt(t)
	return snruo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (snruo *ScreeningNodeRunUpdateOne) SetNillableStartedAt(t *time.Time) *ScreeningNodeRunUpdateOne {
	if t != nil {
		snruo.SetStartedAt(*t)
	}
	return snruo
}

// ClearStartedAt clears the value of the "started_at" field.
func (snruo *ScreeningNodeRunUpdateOne) ClearStartedAt() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearStartedAt()
	return snruo
}

// SetFinishedAt sets the "finished_at" field.
func (snruo *ScreeningNodeRunUpdateOne) SetFinishedAt(t time.Time) *ScreeningNodeRunUpdateOne {
	snruo.mutation.SetFinishedAt(t)
	return snruo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (snruo *ScreeningNodeRunUpdateOne) SetNillableFinishedAt(t *time.Time) *ScreeningNodeRunUpdateOne {
	if t != nil {
		snruo.SetFinishedAt(*t)
	}
	return snruo
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (snruo *ScreeningNodeRunUpdateOne) ClearFinishedAt() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearFinishedAt()
	return snruo
}

// SetDurationMs sets the "duration_ms" field.
func (snruo *ScreeningNodeRunUpdateOne) SetDurationMs(i int) *ScreeningNodeRunUpdateOne {
	snruo.mutation.ResetDurationMs()
	snruo.mutation.SetDurationMs(i)
	return snruo
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (snruo *ScreeningNodeRunUpdateOne) SetNillableDurationMs(i *int) *ScreeningNodeRunUpdateOne {
	if i != nil {
		snruo.SetDurationMs(*i)
	}
	return snruo
}

// AddDurationMs adds i to the "duration_ms" field.
func (snruo *ScreeningNodeRunUpdateOne) AddDurationMs(i int) *ScreeningNodeRunUpdateOne {
	snruo.mutation.AddDurationMs(i)
	return snruo
}

// ClearDurationMs clears the value of the "duration_ms" field.
func (snruo *ScreeningNodeRunUpdateOne) ClearDurationMs() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearDurationMs()
	return snruo
}

// SetUpdatedAt sets the "updated_at" field.
func (snruo *ScreeningNodeRunUpdateOne) SetUpdatedAt(t time.Time) *ScreeningNodeRunUpdateOne {
	snruo.mutation.SetUpdatedAt(t)
	return snruo
}

// SetTask sets the "task" edge to the ScreeningTask entity.
func (snruo *ScreeningNodeRunUpdateOne) SetTask(s *ScreeningTask) *ScreeningNodeRunUpdateOne {
	return snruo.SetTaskID(s.ID)
}

// SetTaskResume sets the "task_resume" edge to the ScreeningTaskResume entity.
func (snruo *ScreeningNodeRunUpdateOne) SetTaskResume(s *ScreeningTaskResume) *ScreeningNodeRunUpdateOne {
	return snruo.SetTaskResumeID(s.ID)
}

// Mutation returns the ScreeningNodeRunMutation object of the builder.
func (snruo *ScreeningNodeRunUpdateOne) Mutation() *ScreeningNodeRunMutation {
	return snruo.mutation
}

// ClearTask clears the "task" edge to the ScreeningTask entity.
func (snruo *ScreeningNodeRunUpdateOne) ClearTask() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearTask()
	return snruo
}

// ClearTaskResume clears the "task_resume" edge to the ScreeningTaskResume entity.
func (snruo *ScreeningNodeRunUpdateOne) ClearTaskResume() *ScreeningNodeRunUpdateOne {
	snruo.mutation.ClearTaskResume()
	return snruo
}

// Where appends a list predicates to the ScreeningNodeRunUpdate builder.
func (snruo *ScreeningNodeRunUpdateOne) Where(ps ...predicate.ScreeningNodeRun) *ScreeningNodeRunUpdateOne {
	snruo.mutation.Where(ps...)
	return snruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (snruo *ScreeningNodeRunUpdateOne) Select(field string, fields ...string) *ScreeningNodeRunUpdateOne {
	snruo.fields = append([]string{field}, fields...)
	return snruo
}

// Save executes the query and returns the updated ScreeningNodeRun entity.
func (snruo *ScreeningNodeRunUpdateOne) Save(ctx context.Context) (*ScreeningNodeRun, error) {
	if err := snruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, snruo.sqlSave, snruo.mutation, snruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snruo *ScreeningNodeRunUpdateOne) SaveX(ctx context.Context) *ScreeningNodeRun {
	node, err := snruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (snruo *ScreeningNodeRunUpdateOne) Exec(ctx context.Context) error {
	_, err := snruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snruo *ScreeningNodeRunUpdateOne) ExecX(ctx context.Context) {
	if err := snruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (snruo *ScreeningNodeRunUpdateOne) defaults() error {
	if _, ok := snruo.mutation.UpdatedAt(); !ok {
		if screeningnoderun.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningnoderun.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := screeningnoderun.UpdateDefaultUpdatedAt()
		snruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (snruo *ScreeningNodeRunUpdateOne) check() error {
	if v, ok := snruo.mutation.TraceID(); ok {
		if err := screeningnoderun.TraceIDValidator(v); err != nil {
			return &ValidationError{Name: "trace_id", err: fmt.Errorf(`db: validator failed for field "ScreeningNodeRun.trace_id": %w`, err)}
		}
	}
	if v, ok := snruo.mutation.AgentVersion(); ok {
		if err := screeningnoderun.AgentVersionValidator(v); err != nil {
			return &ValidationError{Name: "agent_version", err: fmt.Errorf(`db: validator failed for field "ScreeningNodeRun.agent_version": %w`, err)}
		}
	}
	if v, ok := snruo.mutation.ModelName(); ok {
		if err := screeningnoderun.ModelNameValidator(v); err != nil {
			return &ValidationError{Name: "model_name", err: fmt.Errorf(`db: validator failed for field "ScreeningNodeRun.model_name": %w`, err)}
		}
	}
	if v, ok := snruo.mutation.ModelProvider(); ok {
		if err := screeningnoderun.ModelProviderValidator(v); err != nil {
			return &ValidationError{Name: "model_provider", err: fmt.Errorf(`db: validator failed for field "ScreeningNodeRun.model_provider": %w`, err)}
		}
	}
	if snruo.mutation.TaskCleared() && len(snruo.mutation.TaskIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ScreeningNodeRun.task"`)
	}
	if snruo.mutation.TaskResumeCleared() && len(snruo.mutation.TaskResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ScreeningNodeRun.task_resume"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (snruo *ScreeningNodeRunUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScreeningNodeRunUpdateOne {
	snruo.modifiers = append(snruo.modifiers, modifiers...)
	return snruo
}

func (snruo *ScreeningNodeRunUpdateOne) sqlSave(ctx context.Context) (_node *ScreeningNodeRun, err error) {
	if err := snruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(screeningnoderun.Table, screeningnoderun.Columns, sqlgraph.NewFieldSpec(screeningnoderun.FieldID, field.TypeUUID))
	id, ok := snruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ScreeningNodeRun.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := snruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, screeningnoderun.FieldID)
		for _, f := range fields {
			if !screeningnoderun.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != screeningnoderun.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := snruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := snruo.mutation.DeletedAt(); ok {
		_spec.SetField(screeningnoderun.FieldDeletedAt, field.TypeTime, value)
	}
	if snruo.mutation.DeletedAtCleared() {
		_spec.ClearField(screeningnoderun.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := snruo.mutation.NodeKey(); ok {
		_spec.SetField(screeningnoderun.FieldNodeKey, field.TypeString, value)
	}
	if snruo.mutation.NodeKeyCleared() {
		_spec.ClearField(screeningnoderun.FieldNodeKey, field.TypeString)
	}
	if value, ok := snruo.mutation.Status(); ok {
		_spec.SetField(screeningnoderun.FieldStatus, field.TypeString, value)
	}
	if value, ok := snruo.mutation.AttemptNo(); ok {
		_spec.SetField(screeningnoderun.FieldAttemptNo, field.TypeInt, value)
	}
	if value, ok := snruo.mutation.AddedAttemptNo(); ok {
		_spec.AddField(screeningnoderun.FieldAttemptNo, field.TypeInt, value)
	}
	if value, ok := snruo.mutation.TraceID(); ok {
		_spec.SetField(screeningnoderun.FieldTraceID, field.TypeString, value)
	}
	if snruo.mutation.TraceIDCleared() {
		_spec.ClearField(screeningnoderun.FieldTraceID, field.TypeString)
	}
	if value, ok := snruo.mutation.AgentVersion(); ok {
		_spec.SetField(screeningnoderun.FieldAgentVersion, field.TypeString, value)
	}
	if snruo.mutation.AgentVersionCleared() {
		_spec.ClearField(screeningnoderun.FieldAgentVersion, field.TypeString)
	}
	if value, ok := snruo.mutation.ModelName(); ok {
		_spec.SetField(screeningnoderun.FieldModelName, field.TypeString, value)
	}
	if snruo.mutation.ModelNameCleared() {
		_spec.ClearField(screeningnoderun.FieldModelName, field.TypeString)
	}
	if value, ok := snruo.mutation.ModelProvider(); ok {
		_spec.SetField(screeningnoderun.FieldModelProvider, field.TypeString, value)
	}
	if snruo.mutation.ModelProviderCleared() {
		_spec.ClearField(screeningnoderun.FieldModelProvider, field.TypeString)
	}
	if value, ok := snruo.mutation.LlmParams(); ok {
		_spec.SetField(screeningnoderun.FieldLlmParams, field.TypeJSON, value)
	}
	if snruo.mutation.LlmParamsCleared() {
		_spec.ClearField(screeningnoderun.FieldLlmParams, field.TypeJSON)
	}
	if value, ok := snruo.mutation.InputPayload(); ok {
		_spec.SetField(screeningnoderun.FieldInputPayload, field.TypeJSON, value)
	}
	if snruo.mutation.InputPayloadCleared() {
		_spec.ClearField(screeningnoderun.FieldInputPayload, field.TypeJSON)
	}
	if value, ok := snruo.mutation.OutputPayload(); ok {
		_spec.SetField(screeningnoderun.FieldOutputPayload, field.TypeJSON, value)
	}
	if snruo.mutation.OutputPayloadCleared() {
		_spec.ClearField(screeningnoderun.FieldOutputPayload, field.TypeJSON)
	}
	if value, ok := snruo.mutation.ErrorMessage(); ok {
		_spec.SetField(screeningnoderun.FieldErrorMessage, field.TypeString, value)
	}
	if snruo.mutation.ErrorMessageCleared() {
		_spec.ClearField(screeningnoderun.FieldErrorMessage, field.TypeString)
	}
	if value, ok := snruo.mutation.TokensInput(); ok {
		_spec.SetField(screeningnoderun.FieldTokensInput, field.TypeInt64, value)
	}
	if value, ok := snruo.mutation.AddedTokensInput(); ok {
		_spec.AddField(screeningnoderun.FieldTokensInput, field.TypeInt64, value)
	}
	if snruo.mutation.TokensInputCleared() {
		_spec.ClearField(screeningnoderun.FieldTokensInput, field.TypeInt64)
	}
	if value, ok := snruo.mutation.TokensOutput(); ok {
		_spec.SetField(screeningnoderun.FieldTokensOutput, field.TypeInt64, value)
	}
	if value, ok := snruo.mutation.AddedTokensOutput(); ok {
		_spec.AddField(screeningnoderun.FieldTokensOutput, field.TypeInt64, value)
	}
	if snruo.mutation.TokensOutputCleared() {
		_spec.ClearField(screeningnoderun.FieldTokensOutput, field.TypeInt64)
	}
	if value, ok := snruo.mutation.TotalCost(); ok {
		_spec.SetField(screeningnoderun.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := snruo.mutation.AddedTotalCost(); ok {
		_spec.AddField(screeningnoderun.FieldTotalCost, field.TypeFloat64, value)
	}
	if snruo.mutation.TotalCostCleared() {
		_spec.ClearField(screeningnoderun.FieldTotalCost, field.TypeFloat64)
	}
	if value, ok := snruo.mutation.StartedAt(); ok {
		_spec.SetField(screeningnoderun.FieldStartedAt, field.TypeTime, value)
	}
	if snruo.mutation.StartedAtCleared() {
		_spec.ClearField(screeningnoderun.FieldStartedAt, field.TypeTime)
	}
	if value, ok := snruo.mutation.FinishedAt(); ok {
		_spec.SetField(screeningnoderun.FieldFinishedAt, field.TypeTime, value)
	}
	if snruo.mutation.FinishedAtCleared() {
		_spec.ClearField(screeningnoderun.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := snruo.mutation.DurationMs(); ok {
		_spec.SetField(screeningnoderun.FieldDurationMs, field.TypeInt, value)
	}
	if value, ok := snruo.mutation.AddedDurationMs(); ok {
		_spec.AddField(screeningnoderun.FieldDurationMs, field.TypeInt, value)
	}
	if snruo.mutation.DurationMsCleared() {
		_spec.ClearField(screeningnoderun.FieldDurationMs, field.TypeInt)
	}
	if value, ok := snruo.mutation.UpdatedAt(); ok {
		_spec.SetField(screeningnoderun.FieldUpdatedAt, field.TypeTime, value)
	}
	if snruo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningnoderun.TaskTable,
			Columns: []string{screeningnoderun.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snruo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningnoderun.TaskTable,
			Columns: []string{screeningnoderun.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snruo.mutation.TaskResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningnoderun.TaskResumeTable,
			Columns: []string{screeningnoderun.TaskResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtaskresume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snruo.mutation.TaskResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningnoderun.TaskResumeTable,
			Columns: []string{screeningnoderun.TaskResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtaskresume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(snruo.modifiers...)
	_node = &ScreeningNodeRun{config: snruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, snruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{screeningnoderun.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	snruo.mutation.done = true
	return _node, nil
}
