// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/screeningtask"
	"github.com/chaitin/WhaleHire/backend/db/screeningtaskresume"
	"github.com/google/uuid"
)

// ScreeningTaskResumeCreate is the builder for creating a ScreeningTaskResume entity.
type ScreeningTaskResumeCreate struct {
	config
	mutation *ScreeningTaskResumeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (strc *ScreeningTaskResumeCreate) SetDeletedAt(t time.Time) *ScreeningTaskResumeCreate {
	strc.mutation.SetDeletedAt(t)
	return strc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (strc *ScreeningTaskResumeCreate) SetNillableDeletedAt(t *time.Time) *ScreeningTaskResumeCreate {
	if t != nil {
		strc.SetDeletedAt(*t)
	}
	return strc
}

// SetTaskID sets the "task_id" field.
func (strc *ScreeningTaskResumeCreate) SetTaskID(u uuid.UUID) *ScreeningTaskResumeCreate {
	strc.mutation.SetTaskID(u)
	return strc
}

// SetResumeID sets the "resume_id" field.
func (strc *ScreeningTaskResumeCreate) SetResumeID(u uuid.UUID) *ScreeningTaskResumeCreate {
	strc.mutation.SetResumeID(u)
	return strc
}

// SetStatus sets the "status" field.
func (strc *ScreeningTaskResumeCreate) SetStatus(s string) *ScreeningTaskResumeCreate {
	strc.mutation.SetStatus(s)
	return strc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (strc *ScreeningTaskResumeCreate) SetNillableStatus(s *string) *ScreeningTaskResumeCreate {
	if s != nil {
		strc.SetStatus(*s)
	}
	return strc
}

// SetErrorMessage sets the "error_message" field.
func (strc *ScreeningTaskResumeCreate) SetErrorMessage(s string) *ScreeningTaskResumeCreate {
	strc.mutation.SetErrorMessage(s)
	return strc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (strc *ScreeningTaskResumeCreate) SetNillableErrorMessage(s *string) *ScreeningTaskResumeCreate {
	if s != nil {
		strc.SetErrorMessage(*s)
	}
	return strc
}

// SetRanking sets the "ranking" field.
func (strc *ScreeningTaskResumeCreate) SetRanking(i int) *ScreeningTaskResumeCreate {
	strc.mutation.SetRanking(i)
	return strc
}

// SetNillableRanking sets the "ranking" field if the given value is not nil.
func (strc *ScreeningTaskResumeCreate) SetNillableRanking(i *int) *ScreeningTaskResumeCreate {
	if i != nil {
		strc.SetRanking(*i)
	}
	return strc
}

// SetScore sets the "score" field.
func (strc *ScreeningTaskResumeCreate) SetScore(f float64) *ScreeningTaskResumeCreate {
	strc.mutation.SetScore(f)
	return strc
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (strc *ScreeningTaskResumeCreate) SetNillableScore(f *float64) *ScreeningTaskResumeCreate {
	if f != nil {
		strc.SetScore(*f)
	}
	return strc
}

// SetProcessedAt sets the "processed_at" field.
func (strc *ScreeningTaskResumeCreate) SetProcessedAt(t time.Time) *ScreeningTaskResumeCreate {
	strc.mutation.SetProcessedAt(t)
	return strc
}

// SetNillableProcessedAt sets the "processed_at" field if the given value is not nil.
func (strc *ScreeningTaskResumeCreate) SetNillableProcessedAt(t *time.Time) *ScreeningTaskResumeCreate {
	if t != nil {
		strc.SetProcessedAt(*t)
	}
	return strc
}

// SetCreatedAt sets the "created_at" field.
func (strc *ScreeningTaskResumeCreate) SetCreatedAt(t time.Time) *ScreeningTaskResumeCreate {
	strc.mutation.SetCreatedAt(t)
	return strc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (strc *ScreeningTaskResumeCreate) SetNillableCreatedAt(t *time.Time) *ScreeningTaskResumeCreate {
	if t != nil {
		strc.SetCreatedAt(*t)
	}
	return strc
}

// SetUpdatedAt sets the "updated_at" field.
func (strc *ScreeningTaskResumeCreate) SetUpdatedAt(t time.Time) *ScreeningTaskResumeCreate {
	strc.mutation.SetUpdatedAt(t)
	return strc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (strc *ScreeningTaskResumeCreate) SetNillableUpdatedAt(t *time.Time) *ScreeningTaskResumeCreate {
	if t != nil {
		strc.SetUpdatedAt(*t)
	}
	return strc
}

// SetID sets the "id" field.
func (strc *ScreeningTaskResumeCreate) SetID(u uuid.UUID) *ScreeningTaskResumeCreate {
	strc.mutation.SetID(u)
	return strc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (strc *ScreeningTaskResumeCreate) SetNillableID(u *uuid.UUID) *ScreeningTaskResumeCreate {
	if u != nil {
		strc.SetID(*u)
	}
	return strc
}

// SetTask sets the "task" edge to the ScreeningTask entity.
func (strc *ScreeningTaskResumeCreate) SetTask(s *ScreeningTask) *ScreeningTaskResumeCreate {
	return strc.SetTaskID(s.ID)
}

// SetResume sets the "resume" edge to the Resume entity.
func (strc *ScreeningTaskResumeCreate) SetResume(r *Resume) *ScreeningTaskResumeCreate {
	return strc.SetResumeID(r.ID)
}

// Mutation returns the ScreeningTaskResumeMutation object of the builder.
func (strc *ScreeningTaskResumeCreate) Mutation() *ScreeningTaskResumeMutation {
	return strc.mutation
}

// Save creates the ScreeningTaskResume in the database.
func (strc *ScreeningTaskResumeCreate) Save(ctx context.Context) (*ScreeningTaskResume, error) {
	if err := strc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, strc.sqlSave, strc.mutation, strc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (strc *ScreeningTaskResumeCreate) SaveX(ctx context.Context) *ScreeningTaskResume {
	v, err := strc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (strc *ScreeningTaskResumeCreate) Exec(ctx context.Context) error {
	_, err := strc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (strc *ScreeningTaskResumeCreate) ExecX(ctx context.Context) {
	if err := strc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (strc *ScreeningTaskResumeCreate) defaults() error {
	if _, ok := strc.mutation.Status(); !ok {
		v := screeningtaskresume.DefaultStatus
		strc.mutation.SetStatus(v)
	}
	if _, ok := strc.mutation.CreatedAt(); !ok {
		if screeningtaskresume.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningtaskresume.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := screeningtaskresume.DefaultCreatedAt()
		strc.mutation.SetCreatedAt(v)
	}
	if _, ok := strc.mutation.UpdatedAt(); !ok {
		if screeningtaskresume.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningtaskresume.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := screeningtaskresume.DefaultUpdatedAt()
		strc.mutation.SetUpdatedAt(v)
	}
	if _, ok := strc.mutation.ID(); !ok {
		if screeningtaskresume.DefaultID == nil {
			return fmt.Errorf("db: uninitialized screeningtaskresume.DefaultID (forgotten import db/runtime?)")
		}
		v := screeningtaskresume.DefaultID()
		strc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (strc *ScreeningTaskResumeCreate) check() error {
	if _, ok := strc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`db: missing required field "ScreeningTaskResume.task_id"`)}
	}
	if _, ok := strc.mutation.ResumeID(); !ok {
		return &ValidationError{Name: "resume_id", err: errors.New(`db: missing required field "ScreeningTaskResume.resume_id"`)}
	}
	if _, ok := strc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "ScreeningTaskResume.status"`)}
	}
	if _, ok := strc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ScreeningTaskResume.created_at"`)}
	}
	if _, ok := strc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "ScreeningTaskResume.updated_at"`)}
	}
	if len(strc.mutation.TaskIDs()) == 0 {
		return &ValidationError{Name: "task", err: errors.New(`db: missing required edge "ScreeningTaskResume.task"`)}
	}
	if len(strc.mutation.ResumeIDs()) == 0 {
		return &ValidationError{Name: "resume", err: errors.New(`db: missing required edge "ScreeningTaskResume.resume"`)}
	}
	return nil
}

func (strc *ScreeningTaskResumeCreate) sqlSave(ctx context.Context) (*ScreeningTaskResume, error) {
	if err := strc.check(); err != nil {
		return nil, err
	}
	_node, _spec := strc.createSpec()
	if err := sqlgraph.CreateNode(ctx, strc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	strc.mutation.id = &_node.ID
	strc.mutation.done = true
	return _node, nil
}

func (strc *ScreeningTaskResumeCreate) createSpec() (*ScreeningTaskResume, *sqlgraph.CreateSpec) {
	var (
		_node = &ScreeningTaskResume{config: strc.config}
		_spec = sqlgraph.NewCreateSpec(screeningtaskresume.Table, sqlgraph.NewFieldSpec(screeningtaskresume.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = strc.conflict
	if id, ok := strc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := strc.mutation.DeletedAt(); ok {
		_spec.SetField(screeningtaskresume.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := strc.mutation.Status(); ok {
		_spec.SetField(screeningtaskresume.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := strc.mutation.ErrorMessage(); ok {
		_spec.SetField(screeningtaskresume.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := strc.mutation.Ranking(); ok {
		_spec.SetField(screeningtaskresume.FieldRanking, field.TypeInt, value)
		_node.Ranking = value
	}
	if value, ok := strc.mutation.Score(); ok {
		_spec.SetField(screeningtaskresume.FieldScore, field.TypeFloat64, value)
		_node.Score = value
	}
	if value, ok := strc.mutation.ProcessedAt(); ok {
		_spec.SetField(screeningtaskresume.FieldProcessedAt, field.TypeTime, value)
		_node.ProcessedAt = value
	}
	if value, ok := strc.mutation.CreatedAt(); ok {
		_spec.SetField(screeningtaskresume.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := strc.mutation.UpdatedAt(); ok {
		_spec.SetField(screeningtaskresume.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := strc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningtaskresume.TaskTable,
			Columns: []string{screeningtaskresume.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := strc.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningtaskresume.ResumeTable,
			Columns: []string{screeningtaskresume.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResumeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScreeningTaskResume.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScreeningTaskResumeUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (strc *ScreeningTaskResumeCreate) OnConflict(opts ...sql.ConflictOption) *ScreeningTaskResumeUpsertOne {
	strc.conflict = opts
	return &ScreeningTaskResumeUpsertOne{
		create: strc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScreeningTaskResume.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (strc *ScreeningTaskResumeCreate) OnConflictColumns(columns ...string) *ScreeningTaskResumeUpsertOne {
	strc.conflict = append(strc.conflict, sql.ConflictColumns(columns...))
	return &ScreeningTaskResumeUpsertOne{
		create: strc,
	}
}

type (
	// ScreeningTaskResumeUpsertOne is the builder for "upsert"-ing
	//  one ScreeningTaskResume node.
	ScreeningTaskResumeUpsertOne struct {
		create *ScreeningTaskResumeCreate
	}

	// ScreeningTaskResumeUpsert is the "OnConflict" setter.
	ScreeningTaskResumeUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *ScreeningTaskResumeUpsert) SetDeletedAt(v time.Time) *ScreeningTaskResumeUpsert {
	u.Set(screeningtaskresume.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsert) UpdateDeletedAt() *ScreeningTaskResumeUpsert {
	u.SetExcluded(screeningtaskresume.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScreeningTaskResumeUpsert) ClearDeletedAt() *ScreeningTaskResumeUpsert {
	u.SetNull(screeningtaskresume.FieldDeletedAt)
	return u
}

// SetTaskID sets the "task_id" field.
func (u *ScreeningTaskResumeUpsert) SetTaskID(v uuid.UUID) *ScreeningTaskResumeUpsert {
	u.Set(screeningtaskresume.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsert) UpdateTaskID() *ScreeningTaskResumeUpsert {
	u.SetExcluded(screeningtaskresume.FieldTaskID)
	return u
}

// SetResumeID sets the "resume_id" field.
func (u *ScreeningTaskResumeUpsert) SetResumeID(v uuid.UUID) *ScreeningTaskResumeUpsert {
	u.Set(screeningtaskresume.FieldResumeID, v)
	return u
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsert) UpdateResumeID() *ScreeningTaskResumeUpsert {
	u.SetExcluded(screeningtaskresume.FieldResumeID)
	return u
}

// SetStatus sets the "status" field.
func (u *ScreeningTaskResumeUpsert) SetStatus(v string) *ScreeningTaskResumeUpsert {
	u.Set(screeningtaskresume.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsert) UpdateStatus() *ScreeningTaskResumeUpsert {
	u.SetExcluded(screeningtaskresume.FieldStatus)
	return u
}

// SetErrorMessage sets the "error_message" field.
func (u *ScreeningTaskResumeUpsert) SetErrorMessage(v string) *ScreeningTaskResumeUpsert {
	u.Set(screeningtaskresume.FieldErrorMessage, v)
	return u
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsert) UpdateErrorMessage() *ScreeningTaskResumeUpsert {
	u.SetExcluded(screeningtaskresume.FieldErrorMessage)
	return u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *ScreeningTaskResumeUpsert) ClearErrorMessage() *ScreeningTaskResumeUpsert {
	u.SetNull(screeningtaskresume.FieldErrorMessage)
	return u
}

// SetRanking sets the "ranking" field.
func (u *ScreeningTaskResumeUpsert) SetRanking(v int) *ScreeningTaskResumeUpsert {
	u.Set(screeningtaskresume.FieldRanking, v)
	return u
}

// UpdateRanking sets the "ranking" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsert) UpdateRanking() *ScreeningTaskResumeUpsert {
	u.SetExcluded(screeningtaskresume.FieldRanking)
	return u
}

// AddRanking adds v to the "ranking" field.
func (u *ScreeningTaskResumeUpsert) AddRanking(v int) *ScreeningTaskResumeUpsert {
	u.Add(screeningtaskresume.FieldRanking, v)
	return u
}

// ClearRanking clears the value of the "ranking" field.
func (u *ScreeningTaskResumeUpsert) ClearRanking() *ScreeningTaskResumeUpsert {
	u.SetNull(screeningtaskresume.FieldRanking)
	return u
}

// SetScore sets the "score" field.
func (u *ScreeningTaskResumeUpsert) SetScore(v float64) *ScreeningTaskResumeUpsert {
	u.Set(screeningtaskresume.FieldScore, v)
	return u
}

// UpdateScore sets the "score" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsert) UpdateScore() *ScreeningTaskResumeUpsert {
	u.SetExcluded(screeningtaskresume.FieldScore)
	return u
}

// AddScore adds v to the "score" field.
func (u *ScreeningTaskResumeUpsert) AddScore(v float64) *ScreeningTaskResumeUpsert {
	u.Add(screeningtaskresume.FieldScore, v)
	return u
}

// ClearScore clears the value of the "score" field.
func (u *ScreeningTaskResumeUpsert) ClearScore() *ScreeningTaskResumeUpsert {
	u.SetNull(screeningtaskresume.FieldScore)
	return u
}

// SetProcessedAt sets the "processed_at" field.
func (u *ScreeningTaskResumeUpsert) SetProcessedAt(v time.Time) *ScreeningTaskResumeUpsert {
	u.Set(screeningtaskresume.FieldProcessedAt, v)
	return u
}

// UpdateProcessedAt sets the "processed_at" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsert) UpdateProcessedAt() *ScreeningTaskResumeUpsert {
	u.SetExcluded(screeningtaskresume.FieldProcessedAt)
	return u
}

// ClearProcessedAt clears the value of the "processed_at" field.
func (u *ScreeningTaskResumeUpsert) ClearProcessedAt() *ScreeningTaskResumeUpsert {
	u.SetNull(screeningtaskresume.FieldProcessedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningTaskResumeUpsert) SetUpdatedAt(v time.Time) *ScreeningTaskResumeUpsert {
	u.Set(screeningtaskresume.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsert) UpdateUpdatedAt() *ScreeningTaskResumeUpsert {
	u.SetExcluded(screeningtaskresume.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ScreeningTaskResume.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(screeningtaskresume.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScreeningTaskResumeUpsertOne) UpdateNewValues() *ScreeningTaskResumeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(screeningtaskresume.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(screeningtaskresume.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScreeningTaskResume.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ScreeningTaskResumeUpsertOne) Ignore() *ScreeningTaskResumeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScreeningTaskResumeUpsertOne) DoNothing() *ScreeningTaskResumeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScreeningTaskResumeCreate.OnConflict
// documentation for more info.
func (u *ScreeningTaskResumeUpsertOne) Update(set func(*ScreeningTaskResumeUpsert)) *ScreeningTaskResumeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScreeningTaskResumeUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ScreeningTaskResumeUpsertOne) SetDeletedAt(v time.Time) *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertOne) UpdateDeletedAt() *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScreeningTaskResumeUpsertOne) ClearDeletedAt() *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTaskID sets the "task_id" field.
func (u *ScreeningTaskResumeUpsertOne) SetTaskID(v uuid.UUID) *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertOne) UpdateTaskID() *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateTaskID()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ScreeningTaskResumeUpsertOne) SetResumeID(v uuid.UUID) *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertOne) UpdateResumeID() *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateResumeID()
	})
}

// SetStatus sets the "status" field.
func (u *ScreeningTaskResumeUpsertOne) SetStatus(v string) *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertOne) UpdateStatus() *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateStatus()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *ScreeningTaskResumeUpsertOne) SetErrorMessage(v string) *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertOne) UpdateErrorMessage() *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *ScreeningTaskResumeUpsertOne) ClearErrorMessage() *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.ClearErrorMessage()
	})
}

// SetRanking sets the "ranking" field.
func (u *ScreeningTaskResumeUpsertOne) SetRanking(v int) *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetRanking(v)
	})
}

// AddRanking adds v to the "ranking" field.
func (u *ScreeningTaskResumeUpsertOne) AddRanking(v int) *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.AddRanking(v)
	})
}

// UpdateRanking sets the "ranking" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertOne) UpdateRanking() *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateRanking()
	})
}

// ClearRanking clears the value of the "ranking" field.
func (u *ScreeningTaskResumeUpsertOne) ClearRanking() *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.ClearRanking()
	})
}

// SetScore sets the "score" field.
func (u *ScreeningTaskResumeUpsertOne) SetScore(v float64) *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetScore(v)
	})
}

// AddScore adds v to the "score" field.
func (u *ScreeningTaskResumeUpsertOne) AddScore(v float64) *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.AddScore(v)
	})
}

// UpdateScore sets the "score" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertOne) UpdateScore() *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateScore()
	})
}

// ClearScore clears the value of the "score" field.
func (u *ScreeningTaskResumeUpsertOne) ClearScore() *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.ClearScore()
	})
}

// SetProcessedAt sets the "processed_at" field.
func (u *ScreeningTaskResumeUpsertOne) SetProcessedAt(v time.Time) *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetProcessedAt(v)
	})
}

// UpdateProcessedAt sets the "processed_at" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertOne) UpdateProcessedAt() *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateProcessedAt()
	})
}

// ClearProcessedAt clears the value of the "processed_at" field.
func (u *ScreeningTaskResumeUpsertOne) ClearProcessedAt() *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.ClearProcessedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningTaskResumeUpsertOne) SetUpdatedAt(v time.Time) *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertOne) UpdateUpdatedAt() *ScreeningTaskResumeUpsertOne {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ScreeningTaskResumeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ScreeningTaskResumeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScreeningTaskResumeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScreeningTaskResumeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ScreeningTaskResumeUpsertOne.ID is not supported by MySQL driver. Use ScreeningTaskResumeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScreeningTaskResumeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScreeningTaskResumeCreateBulk is the builder for creating many ScreeningTaskResume entities in bulk.
type ScreeningTaskResumeCreateBulk struct {
	config
	err      error
	builders []*ScreeningTaskResumeCreate
	conflict []sql.ConflictOption
}

// Save creates the ScreeningTaskResume entities in the database.
func (strcb *ScreeningTaskResumeCreateBulk) Save(ctx context.Context) ([]*ScreeningTaskResume, error) {
	if strcb.err != nil {
		return nil, strcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(strcb.builders))
	nodes := make([]*ScreeningTaskResume, len(strcb.builders))
	mutators := make([]Mutator, len(strcb.builders))
	for i := range strcb.builders {
		func(i int, root context.Context) {
			builder := strcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScreeningTaskResumeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, strcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = strcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, strcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, strcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (strcb *ScreeningTaskResumeCreateBulk) SaveX(ctx context.Context) []*ScreeningTaskResume {
	v, err := strcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (strcb *ScreeningTaskResumeCreateBulk) Exec(ctx context.Context) error {
	_, err := strcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (strcb *ScreeningTaskResumeCreateBulk) ExecX(ctx context.Context) {
	if err := strcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScreeningTaskResume.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScreeningTaskResumeUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (strcb *ScreeningTaskResumeCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScreeningTaskResumeUpsertBulk {
	strcb.conflict = opts
	return &ScreeningTaskResumeUpsertBulk{
		create: strcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScreeningTaskResume.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (strcb *ScreeningTaskResumeCreateBulk) OnConflictColumns(columns ...string) *ScreeningTaskResumeUpsertBulk {
	strcb.conflict = append(strcb.conflict, sql.ConflictColumns(columns...))
	return &ScreeningTaskResumeUpsertBulk{
		create: strcb,
	}
}

// ScreeningTaskResumeUpsertBulk is the builder for "upsert"-ing
// a bulk of ScreeningTaskResume nodes.
type ScreeningTaskResumeUpsertBulk struct {
	create *ScreeningTaskResumeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ScreeningTaskResume.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(screeningtaskresume.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScreeningTaskResumeUpsertBulk) UpdateNewValues() *ScreeningTaskResumeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(screeningtaskresume.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(screeningtaskresume.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScreeningTaskResume.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ScreeningTaskResumeUpsertBulk) Ignore() *ScreeningTaskResumeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScreeningTaskResumeUpsertBulk) DoNothing() *ScreeningTaskResumeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScreeningTaskResumeCreateBulk.OnConflict
// documentation for more info.
func (u *ScreeningTaskResumeUpsertBulk) Update(set func(*ScreeningTaskResumeUpsert)) *ScreeningTaskResumeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScreeningTaskResumeUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ScreeningTaskResumeUpsertBulk) SetDeletedAt(v time.Time) *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertBulk) UpdateDeletedAt() *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScreeningTaskResumeUpsertBulk) ClearDeletedAt() *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTaskID sets the "task_id" field.
func (u *ScreeningTaskResumeUpsertBulk) SetTaskID(v uuid.UUID) *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertBulk) UpdateTaskID() *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateTaskID()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ScreeningTaskResumeUpsertBulk) SetResumeID(v uuid.UUID) *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertBulk) UpdateResumeID() *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateResumeID()
	})
}

// SetStatus sets the "status" field.
func (u *ScreeningTaskResumeUpsertBulk) SetStatus(v string) *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertBulk) UpdateStatus() *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateStatus()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *ScreeningTaskResumeUpsertBulk) SetErrorMessage(v string) *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertBulk) UpdateErrorMessage() *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *ScreeningTaskResumeUpsertBulk) ClearErrorMessage() *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.ClearErrorMessage()
	})
}

// SetRanking sets the "ranking" field.
func (u *ScreeningTaskResumeUpsertBulk) SetRanking(v int) *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetRanking(v)
	})
}

// AddRanking adds v to the "ranking" field.
func (u *ScreeningTaskResumeUpsertBulk) AddRanking(v int) *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.AddRanking(v)
	})
}

// UpdateRanking sets the "ranking" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertBulk) UpdateRanking() *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateRanking()
	})
}

// ClearRanking clears the value of the "ranking" field.
func (u *ScreeningTaskResumeUpsertBulk) ClearRanking() *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.ClearRanking()
	})
}

// SetScore sets the "score" field.
func (u *ScreeningTaskResumeUpsertBulk) SetScore(v float64) *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetScore(v)
	})
}

// AddScore adds v to the "score" field.
func (u *ScreeningTaskResumeUpsertBulk) AddScore(v float64) *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.AddScore(v)
	})
}

// UpdateScore sets the "score" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertBulk) UpdateScore() *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateScore()
	})
}

// ClearScore clears the value of the "score" field.
func (u *ScreeningTaskResumeUpsertBulk) ClearScore() *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.ClearScore()
	})
}

// SetProcessedAt sets the "processed_at" field.
func (u *ScreeningTaskResumeUpsertBulk) SetProcessedAt(v time.Time) *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetProcessedAt(v)
	})
}

// UpdateProcessedAt sets the "processed_at" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertBulk) UpdateProcessedAt() *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateProcessedAt()
	})
}

// ClearProcessedAt clears the value of the "processed_at" field.
func (u *ScreeningTaskResumeUpsertBulk) ClearProcessedAt() *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.ClearProcessedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningTaskResumeUpsertBulk) SetUpdatedAt(v time.Time) *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningTaskResumeUpsertBulk) UpdateUpdatedAt() *ScreeningTaskResumeUpsertBulk {
	return u.Update(func(s *ScreeningTaskResumeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ScreeningTaskResumeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ScreeningTaskResumeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ScreeningTaskResumeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScreeningTaskResumeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
