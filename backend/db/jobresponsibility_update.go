// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/jobresponsibility"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// JobResponsibilityUpdate is the builder for updating JobResponsibility entities.
type JobResponsibilityUpdate struct {
	config
	hooks     []Hook
	mutation  *JobResponsibilityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the JobResponsibilityUpdate builder.
func (jru *JobResponsibilityUpdate) Where(ps ...predicate.JobResponsibility) *JobResponsibilityUpdate {
	jru.mutation.Where(ps...)
	return jru
}

// SetDeletedAt sets the "deleted_at" field.
func (jru *JobResponsibilityUpdate) SetDeletedAt(t time.Time) *JobResponsibilityUpdate {
	jru.mutation.SetDeletedAt(t)
	return jru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jru *JobResponsibilityUpdate) SetNillableDeletedAt(t *time.Time) *JobResponsibilityUpdate {
	if t != nil {
		jru.SetDeletedAt(*t)
	}
	return jru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jru *JobResponsibilityUpdate) ClearDeletedAt() *JobResponsibilityUpdate {
	jru.mutation.ClearDeletedAt()
	return jru
}

// SetJobID sets the "job_id" field.
func (jru *JobResponsibilityUpdate) SetJobID(u uuid.UUID) *JobResponsibilityUpdate {
	jru.mutation.SetJobID(u)
	return jru
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (jru *JobResponsibilityUpdate) SetNillableJobID(u *uuid.UUID) *JobResponsibilityUpdate {
	if u != nil {
		jru.SetJobID(*u)
	}
	return jru
}

// SetResponsibility sets the "responsibility" field.
func (jru *JobResponsibilityUpdate) SetResponsibility(s string) *JobResponsibilityUpdate {
	jru.mutation.SetResponsibility(s)
	return jru
}

// SetNillableResponsibility sets the "responsibility" field if the given value is not nil.
func (jru *JobResponsibilityUpdate) SetNillableResponsibility(s *string) *JobResponsibilityUpdate {
	if s != nil {
		jru.SetResponsibility(*s)
	}
	return jru
}

// SetUpdatedAt sets the "updated_at" field.
func (jru *JobResponsibilityUpdate) SetUpdatedAt(t time.Time) *JobResponsibilityUpdate {
	jru.mutation.SetUpdatedAt(t)
	return jru
}

// SetJob sets the "job" edge to the JobPosition entity.
func (jru *JobResponsibilityUpdate) SetJob(j *JobPosition) *JobResponsibilityUpdate {
	return jru.SetJobID(j.ID)
}

// Mutation returns the JobResponsibilityMutation object of the builder.
func (jru *JobResponsibilityUpdate) Mutation() *JobResponsibilityMutation {
	return jru.mutation
}

// ClearJob clears the "job" edge to the JobPosition entity.
func (jru *JobResponsibilityUpdate) ClearJob() *JobResponsibilityUpdate {
	jru.mutation.ClearJob()
	return jru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jru *JobResponsibilityUpdate) Save(ctx context.Context) (int, error) {
	if err := jru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, jru.sqlSave, jru.mutation, jru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jru *JobResponsibilityUpdate) SaveX(ctx context.Context) int {
	affected, err := jru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jru *JobResponsibilityUpdate) Exec(ctx context.Context) error {
	_, err := jru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jru *JobResponsibilityUpdate) ExecX(ctx context.Context) {
	if err := jru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jru *JobResponsibilityUpdate) defaults() error {
	if _, ok := jru.mutation.UpdatedAt(); !ok {
		if jobresponsibility.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized jobresponsibility.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := jobresponsibility.UpdateDefaultUpdatedAt()
		jru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jru *JobResponsibilityUpdate) check() error {
	if jru.mutation.JobCleared() && len(jru.mutation.JobIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "JobResponsibility.job"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jru *JobResponsibilityUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobResponsibilityUpdate {
	jru.modifiers = append(jru.modifiers, modifiers...)
	return jru
}

func (jru *JobResponsibilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobresponsibility.Table, jobresponsibility.Columns, sqlgraph.NewFieldSpec(jobresponsibility.FieldID, field.TypeUUID))
	if ps := jru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jru.mutation.DeletedAt(); ok {
		_spec.SetField(jobresponsibility.FieldDeletedAt, field.TypeTime, value)
	}
	if jru.mutation.DeletedAtCleared() {
		_spec.ClearField(jobresponsibility.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jru.mutation.Responsibility(); ok {
		_spec.SetField(jobresponsibility.FieldResponsibility, field.TypeString, value)
	}
	if value, ok := jru.mutation.UpdatedAt(); ok {
		_spec.SetField(jobresponsibility.FieldUpdatedAt, field.TypeTime, value)
	}
	if jru.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobresponsibility.JobTable,
			Columns: []string{jobresponsibility.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobresponsibility.JobTable,
			Columns: []string{jobresponsibility.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(jru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, jru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobresponsibility.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jru.mutation.done = true
	return n, nil
}

// JobResponsibilityUpdateOne is the builder for updating a single JobResponsibility entity.
type JobResponsibilityUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *JobResponsibilityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (jruo *JobResponsibilityUpdateOne) SetDeletedAt(t time.Time) *JobResponsibilityUpdateOne {
	jruo.mutation.SetDeletedAt(t)
	return jruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jruo *JobResponsibilityUpdateOne) SetNillableDeletedAt(t *time.Time) *JobResponsibilityUpdateOne {
	if t != nil {
		jruo.SetDeletedAt(*t)
	}
	return jruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jruo *JobResponsibilityUpdateOne) ClearDeletedAt() *JobResponsibilityUpdateOne {
	jruo.mutation.ClearDeletedAt()
	return jruo
}

// SetJobID sets the "job_id" field.
func (jruo *JobResponsibilityUpdateOne) SetJobID(u uuid.UUID) *JobResponsibilityUpdateOne {
	jruo.mutation.SetJobID(u)
	return jruo
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (jruo *JobResponsibilityUpdateOne) SetNillableJobID(u *uuid.UUID) *JobResponsibilityUpdateOne {
	if u != nil {
		jruo.SetJobID(*u)
	}
	return jruo
}

// SetResponsibility sets the "responsibility" field.
func (jruo *JobResponsibilityUpdateOne) SetResponsibility(s string) *JobResponsibilityUpdateOne {
	jruo.mutation.SetResponsibility(s)
	return jruo
}

// SetNillableResponsibility sets the "responsibility" field if the given value is not nil.
func (jruo *JobResponsibilityUpdateOne) SetNillableResponsibility(s *string) *JobResponsibilityUpdateOne {
	if s != nil {
		jruo.SetResponsibility(*s)
	}
	return jruo
}

// SetUpdatedAt sets the "updated_at" field.
func (jruo *JobResponsibilityUpdateOne) SetUpdatedAt(t time.Time) *JobResponsibilityUpdateOne {
	jruo.mutation.SetUpdatedAt(t)
	return jruo
}

// SetJob sets the "job" edge to the JobPosition entity.
func (jruo *JobResponsibilityUpdateOne) SetJob(j *JobPosition) *JobResponsibilityUpdateOne {
	return jruo.SetJobID(j.ID)
}

// Mutation returns the JobResponsibilityMutation object of the builder.
func (jruo *JobResponsibilityUpdateOne) Mutation() *JobResponsibilityMutation {
	return jruo.mutation
}

// ClearJob clears the "job" edge to the JobPosition entity.
func (jruo *JobResponsibilityUpdateOne) ClearJob() *JobResponsibilityUpdateOne {
	jruo.mutation.ClearJob()
	return jruo
}

// Where appends a list predicates to the JobResponsibilityUpdate builder.
func (jruo *JobResponsibilityUpdateOne) Where(ps ...predicate.JobResponsibility) *JobResponsibilityUpdateOne {
	jruo.mutation.Where(ps...)
	return jruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jruo *JobResponsibilityUpdateOne) Select(field string, fields ...string) *JobResponsibilityUpdateOne {
	jruo.fields = append([]string{field}, fields...)
	return jruo
}

// Save executes the query and returns the updated JobResponsibility entity.
func (jruo *JobResponsibilityUpdateOne) Save(ctx context.Context) (*JobResponsibility, error) {
	if err := jruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jruo.sqlSave, jruo.mutation, jruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jruo *JobResponsibilityUpdateOne) SaveX(ctx context.Context) *JobResponsibility {
	node, err := jruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jruo *JobResponsibilityUpdateOne) Exec(ctx context.Context) error {
	_, err := jruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jruo *JobResponsibilityUpdateOne) ExecX(ctx context.Context) {
	if err := jruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jruo *JobResponsibilityUpdateOne) defaults() error {
	if _, ok := jruo.mutation.UpdatedAt(); !ok {
		if jobresponsibility.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized jobresponsibility.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := jobresponsibility.UpdateDefaultUpdatedAt()
		jruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jruo *JobResponsibilityUpdateOne) check() error {
	if jruo.mutation.JobCleared() && len(jruo.mutation.JobIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "JobResponsibility.job"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jruo *JobResponsibilityUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobResponsibilityUpdateOne {
	jruo.modifiers = append(jruo.modifiers, modifiers...)
	return jruo
}

func (jruo *JobResponsibilityUpdateOne) sqlSave(ctx context.Context) (_node *JobResponsibility, err error) {
	if err := jruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobresponsibility.Table, jobresponsibility.Columns, sqlgraph.NewFieldSpec(jobresponsibility.FieldID, field.TypeUUID))
	id, ok := jruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "JobResponsibility.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobresponsibility.FieldID)
		for _, f := range fields {
			if !jobresponsibility.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != jobresponsibility.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jruo.mutation.DeletedAt(); ok {
		_spec.SetField(jobresponsibility.FieldDeletedAt, field.TypeTime, value)
	}
	if jruo.mutation.DeletedAtCleared() {
		_spec.ClearField(jobresponsibility.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jruo.mutation.Responsibility(); ok {
		_spec.SetField(jobresponsibility.FieldResponsibility, field.TypeString, value)
	}
	if value, ok := jruo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobresponsibility.FieldUpdatedAt, field.TypeTime, value)
	}
	if jruo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobresponsibility.JobTable,
			Columns: []string{jobresponsibility.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobresponsibility.JobTable,
			Columns: []string{jobresponsibility.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(jruo.modifiers...)
	_node = &JobResponsibility{config: jruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobresponsibility.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jruo.mutation.done = true
	return _node, nil
}
