// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumelog"
	"github.com/google/uuid"
)

// ResumeLog is the model entity for the ResumeLog schema.
type ResumeLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// ResumeID holds the value of the "resume_id" field.
	ResumeID uuid.UUID `json:"resume_id,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResumeLogQuery when eager-loading is set.
	Edges        ResumeLogEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ResumeLogEdges holds the relations/edges for other nodes in the graph.
type ResumeLogEdges struct {
	// Resume holds the value of the resume edge.
	Resume *Resume `json:"resume,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ResumeOrErr returns the Resume value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResumeLogEdges) ResumeOrErr() (*Resume, error) {
	if e.Resume != nil {
		return e.Resume, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: resume.Label}
	}
	return nil, &NotLoadedError{edge: "resume"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResumeLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resumelog.FieldAction, resumelog.FieldMessage:
			values[i] = new(sql.NullString)
		case resumelog.FieldDeletedAt, resumelog.FieldCreatedAt, resumelog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case resumelog.FieldID, resumelog.FieldResumeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResumeLog fields.
func (rl *ResumeLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resumelog.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rl.ID = *value
			}
		case resumelog.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rl.DeletedAt = value.Time
			}
		case resumelog.FieldResumeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field resume_id", values[i])
			} else if value != nil {
				rl.ResumeID = *value
			}
		case resumelog.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				rl.Action = value.String
			}
		case resumelog.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				rl.Message = value.String
			}
		case resumelog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rl.CreatedAt = value.Time
			}
		case resumelog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rl.UpdatedAt = value.Time
			}
		default:
			rl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ResumeLog.
// This includes values selected through modifiers, order, etc.
func (rl *ResumeLog) Value(name string) (ent.Value, error) {
	return rl.selectValues.Get(name)
}

// QueryResume queries the "resume" edge of the ResumeLog entity.
func (rl *ResumeLog) QueryResume() *ResumeQuery {
	return NewResumeLogClient(rl.config).QueryResume(rl)
}

// Update returns a builder for updating this ResumeLog.
// Note that you need to call ResumeLog.Unwrap() before calling this method if this ResumeLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (rl *ResumeLog) Update() *ResumeLogUpdateOne {
	return NewResumeLogClient(rl.config).UpdateOne(rl)
}

// Unwrap unwraps the ResumeLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rl *ResumeLog) Unwrap() *ResumeLog {
	_tx, ok := rl.config.driver.(*txDriver)
	if !ok {
		panic("db: ResumeLog is not a transactional entity")
	}
	rl.config.driver = _tx.drv
	return rl
}

// String implements the fmt.Stringer.
func (rl *ResumeLog) String() string {
	var builder strings.Builder
	builder.WriteString("ResumeLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rl.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(rl.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("resume_id=")
	builder.WriteString(fmt.Sprintf("%v", rl.ResumeID))
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(rl.Action)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(rl.Message)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rl.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ResumeLogs is a parsable slice of ResumeLog.
type ResumeLogs []*ResumeLog
