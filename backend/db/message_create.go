// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/attachment"
	"github.com/chaitin/WhaleHire/backend/db/conversation"
	"github.com/chaitin/WhaleHire/backend/db/message"
	"github.com/google/uuid"
)

// MessageCreate is the builder for creating a Message entity.
type MessageCreate struct {
	config
	mutation *MessageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *MessageCreate) SetDeletedAt(t time.Time) *MessageCreate {
	mc.mutation.SetDeletedAt(t)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *MessageCreate) SetNillableDeletedAt(t *time.Time) *MessageCreate {
	if t != nil {
		mc.SetDeletedAt(*t)
	}
	return mc
}

// SetConversationID sets the "conversation_id" field.
func (mc *MessageCreate) SetConversationID(u uuid.UUID) *MessageCreate {
	mc.mutation.SetConversationID(u)
	return mc
}

// SetRole sets the "role" field.
func (mc *MessageCreate) SetRole(s string) *MessageCreate {
	mc.mutation.SetRole(s)
	return mc
}

// SetAgentName sets the "agent_name" field.
func (mc *MessageCreate) SetAgentName(s string) *MessageCreate {
	mc.mutation.SetAgentName(s)
	return mc
}

// SetNillableAgentName sets the "agent_name" field if the given value is not nil.
func (mc *MessageCreate) SetNillableAgentName(s *string) *MessageCreate {
	if s != nil {
		mc.SetAgentName(*s)
	}
	return mc
}

// SetType sets the "type" field.
func (mc *MessageCreate) SetType(s string) *MessageCreate {
	mc.mutation.SetType(s)
	return mc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mc *MessageCreate) SetNillableType(s *string) *MessageCreate {
	if s != nil {
		mc.SetType(*s)
	}
	return mc
}

// SetContent sets the "content" field.
func (mc *MessageCreate) SetContent(s string) *MessageCreate {
	mc.mutation.SetContent(s)
	return mc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (mc *MessageCreate) SetNillableContent(s *string) *MessageCreate {
	if s != nil {
		mc.SetContent(*s)
	}
	return mc
}

// SetMediaURL sets the "media_url" field.
func (mc *MessageCreate) SetMediaURL(s string) *MessageCreate {
	mc.mutation.SetMediaURL(s)
	return mc
}

// SetNillableMediaURL sets the "media_url" field if the given value is not nil.
func (mc *MessageCreate) SetNillableMediaURL(s *string) *MessageCreate {
	if s != nil {
		mc.SetMediaURL(*s)
	}
	return mc
}

// SetSequence sets the "sequence" field.
func (mc *MessageCreate) SetSequence(i int) *MessageCreate {
	mc.mutation.SetSequence(i)
	return mc
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (mc *MessageCreate) SetNillableSequence(i *int) *MessageCreate {
	if i != nil {
		mc.SetSequence(*i)
	}
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MessageCreate) SetCreatedAt(t time.Time) *MessageCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MessageCreate) SetNillableCreatedAt(t *time.Time) *MessageCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MessageCreate) SetUpdatedAt(t time.Time) *MessageCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MessageCreate) SetNillableUpdatedAt(t *time.Time) *MessageCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MessageCreate) SetID(u uuid.UUID) *MessageCreate {
	mc.mutation.SetID(u)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MessageCreate) SetNillableID(u *uuid.UUID) *MessageCreate {
	if u != nil {
		mc.SetID(*u)
	}
	return mc
}

// SetConversation sets the "conversation" edge to the Conversation entity.
func (mc *MessageCreate) SetConversation(c *Conversation) *MessageCreate {
	return mc.SetConversationID(c.ID)
}

// AddAttachmentIDs adds the "attachments" edge to the Attachment entity by IDs.
func (mc *MessageCreate) AddAttachmentIDs(ids ...uuid.UUID) *MessageCreate {
	mc.mutation.AddAttachmentIDs(ids...)
	return mc
}

// AddAttachments adds the "attachments" edges to the Attachment entity.
func (mc *MessageCreate) AddAttachments(a ...*Attachment) *MessageCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mc.AddAttachmentIDs(ids...)
}

// Mutation returns the MessageMutation object of the builder.
func (mc *MessageCreate) Mutation() *MessageMutation {
	return mc.mutation
}

// Save creates the Message in the database.
func (mc *MessageCreate) Save(ctx context.Context) (*Message, error) {
	if err := mc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MessageCreate) SaveX(ctx context.Context) *Message {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MessageCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MessageCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MessageCreate) defaults() error {
	if _, ok := mc.mutation.GetType(); !ok {
		v := message.DefaultType
		mc.mutation.SetType(v)
	}
	if _, ok := mc.mutation.Sequence(); !ok {
		v := message.DefaultSequence
		mc.mutation.SetSequence(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		if message.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized message.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := message.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		if message.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized message.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := message.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		if message.DefaultID == nil {
			return fmt.Errorf("db: uninitialized message.DefaultID (forgotten import db/runtime?)")
		}
		v := message.DefaultID()
		mc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mc *MessageCreate) check() error {
	if _, ok := mc.mutation.ConversationID(); !ok {
		return &ValidationError{Name: "conversation_id", err: errors.New(`db: missing required field "Message.conversation_id"`)}
	}
	if _, ok := mc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`db: missing required field "Message.role"`)}
	}
	if v, ok := mc.mutation.Role(); ok {
		if err := message.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`db: validator failed for field "Message.role": %w`, err)}
		}
	}
	if _, ok := mc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "Message.type"`)}
	}
	if _, ok := mc.mutation.Sequence(); !ok {
		return &ValidationError{Name: "sequence", err: errors.New(`db: missing required field "Message.sequence"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Message.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Message.updated_at"`)}
	}
	if len(mc.mutation.ConversationIDs()) == 0 {
		return &ValidationError{Name: "conversation", err: errors.New(`db: missing required edge "Message.conversation"`)}
	}
	return nil
}

func (mc *MessageCreate) sqlSave(ctx context.Context) (*Message, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MessageCreate) createSpec() (*Message, *sqlgraph.CreateSpec) {
	var (
		_node = &Message{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(message.Table, sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.SetField(message.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mc.mutation.Role(); ok {
		_spec.SetField(message.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	if value, ok := mc.mutation.AgentName(); ok {
		_spec.SetField(message.FieldAgentName, field.TypeString, value)
		_node.AgentName = value
	}
	if value, ok := mc.mutation.GetType(); ok {
		_spec.SetField(message.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := mc.mutation.Content(); ok {
		_spec.SetField(message.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := mc.mutation.MediaURL(); ok {
		_spec.SetField(message.FieldMediaURL, field.TypeString, value)
		_node.MediaURL = value
	}
	if value, ok := mc.mutation.Sequence(); ok {
		_spec.SetField(message.FieldSequence, field.TypeInt, value)
		_node.Sequence = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(message.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(message.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := mc.mutation.ConversationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.ConversationTable,
			Columns: []string{message.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ConversationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.AttachmentsTable,
			Columns: []string{message.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Message.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MessageUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (mc *MessageCreate) OnConflict(opts ...sql.ConflictOption) *MessageUpsertOne {
	mc.conflict = opts
	return &MessageUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Message.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MessageCreate) OnConflictColumns(columns ...string) *MessageUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MessageUpsertOne{
		create: mc,
	}
}

type (
	// MessageUpsertOne is the builder for "upsert"-ing
	//  one Message node.
	MessageUpsertOne struct {
		create *MessageCreate
	}

	// MessageUpsert is the "OnConflict" setter.
	MessageUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *MessageUpsert) SetDeletedAt(v time.Time) *MessageUpsert {
	u.Set(message.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MessageUpsert) UpdateDeletedAt() *MessageUpsert {
	u.SetExcluded(message.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *MessageUpsert) ClearDeletedAt() *MessageUpsert {
	u.SetNull(message.FieldDeletedAt)
	return u
}

// SetConversationID sets the "conversation_id" field.
func (u *MessageUpsert) SetConversationID(v uuid.UUID) *MessageUpsert {
	u.Set(message.FieldConversationID, v)
	return u
}

// UpdateConversationID sets the "conversation_id" field to the value that was provided on create.
func (u *MessageUpsert) UpdateConversationID() *MessageUpsert {
	u.SetExcluded(message.FieldConversationID)
	return u
}

// SetRole sets the "role" field.
func (u *MessageUpsert) SetRole(v string) *MessageUpsert {
	u.Set(message.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *MessageUpsert) UpdateRole() *MessageUpsert {
	u.SetExcluded(message.FieldRole)
	return u
}

// SetAgentName sets the "agent_name" field.
func (u *MessageUpsert) SetAgentName(v string) *MessageUpsert {
	u.Set(message.FieldAgentName, v)
	return u
}

// UpdateAgentName sets the "agent_name" field to the value that was provided on create.
func (u *MessageUpsert) UpdateAgentName() *MessageUpsert {
	u.SetExcluded(message.FieldAgentName)
	return u
}

// ClearAgentName clears the value of the "agent_name" field.
func (u *MessageUpsert) ClearAgentName() *MessageUpsert {
	u.SetNull(message.FieldAgentName)
	return u
}

// SetType sets the "type" field.
func (u *MessageUpsert) SetType(v string) *MessageUpsert {
	u.Set(message.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MessageUpsert) UpdateType() *MessageUpsert {
	u.SetExcluded(message.FieldType)
	return u
}

// SetContent sets the "content" field.
func (u *MessageUpsert) SetContent(v string) *MessageUpsert {
	u.Set(message.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *MessageUpsert) UpdateContent() *MessageUpsert {
	u.SetExcluded(message.FieldContent)
	return u
}

// ClearContent clears the value of the "content" field.
func (u *MessageUpsert) ClearContent() *MessageUpsert {
	u.SetNull(message.FieldContent)
	return u
}

// SetMediaURL sets the "media_url" field.
func (u *MessageUpsert) SetMediaURL(v string) *MessageUpsert {
	u.Set(message.FieldMediaURL, v)
	return u
}

// UpdateMediaURL sets the "media_url" field to the value that was provided on create.
func (u *MessageUpsert) UpdateMediaURL() *MessageUpsert {
	u.SetExcluded(message.FieldMediaURL)
	return u
}

// ClearMediaURL clears the value of the "media_url" field.
func (u *MessageUpsert) ClearMediaURL() *MessageUpsert {
	u.SetNull(message.FieldMediaURL)
	return u
}

// SetSequence sets the "sequence" field.
func (u *MessageUpsert) SetSequence(v int) *MessageUpsert {
	u.Set(message.FieldSequence, v)
	return u
}

// UpdateSequence sets the "sequence" field to the value that was provided on create.
func (u *MessageUpsert) UpdateSequence() *MessageUpsert {
	u.SetExcluded(message.FieldSequence)
	return u
}

// AddSequence adds v to the "sequence" field.
func (u *MessageUpsert) AddSequence(v int) *MessageUpsert {
	u.Add(message.FieldSequence, v)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MessageUpsert) SetCreatedAt(v time.Time) *MessageUpsert {
	u.Set(message.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MessageUpsert) UpdateCreatedAt() *MessageUpsert {
	u.SetExcluded(message.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MessageUpsert) SetUpdatedAt(v time.Time) *MessageUpsert {
	u.Set(message.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MessageUpsert) UpdateUpdatedAt() *MessageUpsert {
	u.SetExcluded(message.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Message.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(message.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MessageUpsertOne) UpdateNewValues() *MessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(message.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Message.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MessageUpsertOne) Ignore() *MessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MessageUpsertOne) DoNothing() *MessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MessageCreate.OnConflict
// documentation for more info.
func (u *MessageUpsertOne) Update(set func(*MessageUpsert)) *MessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MessageUpsertOne) SetDeletedAt(v time.Time) *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MessageUpsertOne) UpdateDeletedAt() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *MessageUpsertOne) ClearDeletedAt() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.ClearDeletedAt()
	})
}

// SetConversationID sets the "conversation_id" field.
func (u *MessageUpsertOne) SetConversationID(v uuid.UUID) *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.SetConversationID(v)
	})
}

// UpdateConversationID sets the "conversation_id" field to the value that was provided on create.
func (u *MessageUpsertOne) UpdateConversationID() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateConversationID()
	})
}

// SetRole sets the "role" field.
func (u *MessageUpsertOne) SetRole(v string) *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *MessageUpsertOne) UpdateRole() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateRole()
	})
}

// SetAgentName sets the "agent_name" field.
func (u *MessageUpsertOne) SetAgentName(v string) *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.SetAgentName(v)
	})
}

// UpdateAgentName sets the "agent_name" field to the value that was provided on create.
func (u *MessageUpsertOne) UpdateAgentName() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateAgentName()
	})
}

// ClearAgentName clears the value of the "agent_name" field.
func (u *MessageUpsertOne) ClearAgentName() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.ClearAgentName()
	})
}

// SetType sets the "type" field.
func (u *MessageUpsertOne) SetType(v string) *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MessageUpsertOne) UpdateType() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateType()
	})
}

// SetContent sets the "content" field.
func (u *MessageUpsertOne) SetContent(v string) *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *MessageUpsertOne) UpdateContent() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *MessageUpsertOne) ClearContent() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.ClearContent()
	})
}

// SetMediaURL sets the "media_url" field.
func (u *MessageUpsertOne) SetMediaURL(v string) *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.SetMediaURL(v)
	})
}

// UpdateMediaURL sets the "media_url" field to the value that was provided on create.
func (u *MessageUpsertOne) UpdateMediaURL() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateMediaURL()
	})
}

// ClearMediaURL clears the value of the "media_url" field.
func (u *MessageUpsertOne) ClearMediaURL() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.ClearMediaURL()
	})
}

// SetSequence sets the "sequence" field.
func (u *MessageUpsertOne) SetSequence(v int) *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.SetSequence(v)
	})
}

// AddSequence adds v to the "sequence" field.
func (u *MessageUpsertOne) AddSequence(v int) *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.AddSequence(v)
	})
}

// UpdateSequence sets the "sequence" field to the value that was provided on create.
func (u *MessageUpsertOne) UpdateSequence() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateSequence()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *MessageUpsertOne) SetCreatedAt(v time.Time) *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MessageUpsertOne) UpdateCreatedAt() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MessageUpsertOne) SetUpdatedAt(v time.Time) *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MessageUpsertOne) UpdateUpdatedAt() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *MessageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for MessageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MessageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MessageUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: MessageUpsertOne.ID is not supported by MySQL driver. Use MessageUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MessageUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MessageCreateBulk is the builder for creating many Message entities in bulk.
type MessageCreateBulk struct {
	config
	err      error
	builders []*MessageCreate
	conflict []sql.ConflictOption
}

// Save creates the Message entities in the database.
func (mcb *MessageCreateBulk) Save(ctx context.Context) ([]*Message, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Message, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MessageCreateBulk) SaveX(ctx context.Context) []*Message {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MessageCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MessageCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Message.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MessageUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (mcb *MessageCreateBulk) OnConflict(opts ...sql.ConflictOption) *MessageUpsertBulk {
	mcb.conflict = opts
	return &MessageUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Message.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MessageCreateBulk) OnConflictColumns(columns ...string) *MessageUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MessageUpsertBulk{
		create: mcb,
	}
}

// MessageUpsertBulk is the builder for "upsert"-ing
// a bulk of Message nodes.
type MessageUpsertBulk struct {
	create *MessageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Message.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(message.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MessageUpsertBulk) UpdateNewValues() *MessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(message.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Message.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MessageUpsertBulk) Ignore() *MessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MessageUpsertBulk) DoNothing() *MessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MessageCreateBulk.OnConflict
// documentation for more info.
func (u *MessageUpsertBulk) Update(set func(*MessageUpsert)) *MessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MessageUpsertBulk) SetDeletedAt(v time.Time) *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MessageUpsertBulk) UpdateDeletedAt() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *MessageUpsertBulk) ClearDeletedAt() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.ClearDeletedAt()
	})
}

// SetConversationID sets the "conversation_id" field.
func (u *MessageUpsertBulk) SetConversationID(v uuid.UUID) *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.SetConversationID(v)
	})
}

// UpdateConversationID sets the "conversation_id" field to the value that was provided on create.
func (u *MessageUpsertBulk) UpdateConversationID() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateConversationID()
	})
}

// SetRole sets the "role" field.
func (u *MessageUpsertBulk) SetRole(v string) *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *MessageUpsertBulk) UpdateRole() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateRole()
	})
}

// SetAgentName sets the "agent_name" field.
func (u *MessageUpsertBulk) SetAgentName(v string) *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.SetAgentName(v)
	})
}

// UpdateAgentName sets the "agent_name" field to the value that was provided on create.
func (u *MessageUpsertBulk) UpdateAgentName() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateAgentName()
	})
}

// ClearAgentName clears the value of the "agent_name" field.
func (u *MessageUpsertBulk) ClearAgentName() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.ClearAgentName()
	})
}

// SetType sets the "type" field.
func (u *MessageUpsertBulk) SetType(v string) *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MessageUpsertBulk) UpdateType() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateType()
	})
}

// SetContent sets the "content" field.
func (u *MessageUpsertBulk) SetContent(v string) *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *MessageUpsertBulk) UpdateContent() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *MessageUpsertBulk) ClearContent() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.ClearContent()
	})
}

// SetMediaURL sets the "media_url" field.
func (u *MessageUpsertBulk) SetMediaURL(v string) *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.SetMediaURL(v)
	})
}

// UpdateMediaURL sets the "media_url" field to the value that was provided on create.
func (u *MessageUpsertBulk) UpdateMediaURL() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateMediaURL()
	})
}

// ClearMediaURL clears the value of the "media_url" field.
func (u *MessageUpsertBulk) ClearMediaURL() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.ClearMediaURL()
	})
}

// SetSequence sets the "sequence" field.
func (u *MessageUpsertBulk) SetSequence(v int) *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.SetSequence(v)
	})
}

// AddSequence adds v to the "sequence" field.
func (u *MessageUpsertBulk) AddSequence(v int) *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.AddSequence(v)
	})
}

// UpdateSequence sets the "sequence" field to the value that was provided on create.
func (u *MessageUpsertBulk) UpdateSequence() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateSequence()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *MessageUpsertBulk) SetCreatedAt(v time.Time) *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MessageUpsertBulk) UpdateCreatedAt() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MessageUpsertBulk) SetUpdatedAt(v time.Time) *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MessageUpsertBulk) UpdateUpdatedAt() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *MessageUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the MessageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for MessageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MessageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
