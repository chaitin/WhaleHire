// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resumeskill"
)

// ResumeSkillDelete is the builder for deleting a ResumeSkill entity.
type ResumeSkillDelete struct {
	config
	hooks    []Hook
	mutation *ResumeSkillMutation
}

// Where appends a list predicates to the ResumeSkillDelete builder.
func (rsd *ResumeSkillDelete) Where(ps ...predicate.ResumeSkill) *ResumeSkillDelete {
	rsd.mutation.Where(ps...)
	return rsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rsd *ResumeSkillDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rsd.sqlExec, rsd.mutation, rsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rsd *ResumeSkillDelete) ExecX(ctx context.Context) int {
	n, err := rsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rsd *ResumeSkillDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(resumeskill.Table, sqlgraph.NewFieldSpec(resumeskill.FieldID, field.TypeUUID))
	if ps := rsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rsd.mutation.done = true
	return affected, err
}

// ResumeSkillDeleteOne is the builder for deleting a single ResumeSkill entity.
type ResumeSkillDeleteOne struct {
	rsd *ResumeSkillDelete
}

// Where appends a list predicates to the ResumeSkillDelete builder.
func (rsdo *ResumeSkillDeleteOne) Where(ps ...predicate.ResumeSkill) *ResumeSkillDeleteOne {
	rsdo.rsd.mutation.Where(ps...)
	return rsdo
}

// Exec executes the deletion query.
func (rsdo *ResumeSkillDeleteOne) Exec(ctx context.Context) error {
	n, err := rsdo.rsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{resumeskill.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rsdo *ResumeSkillDeleteOne) ExecX(ctx context.Context) {
	if err := rsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
