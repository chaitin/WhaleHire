// Code generated by ent, DO NOT EDIT.

package screeningrunmetric

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the screeningrunmetric type in the database.
	Label = "screening_run_metric"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldAvgScore holds the string denoting the avg_score field in the database.
	FieldAvgScore = "avg_score"
	// FieldHistogram holds the string denoting the histogram field in the database.
	FieldHistogram = "histogram"
	// FieldTokensInput holds the string denoting the tokens_input field in the database.
	FieldTokensInput = "tokens_input"
	// FieldTokensOutput holds the string denoting the tokens_output field in the database.
	FieldTokensOutput = "tokens_output"
	// FieldTotalCost holds the string denoting the total_cost field in the database.
	FieldTotalCost = "total_cost"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// Table holds the table name of the screeningrunmetric in the database.
	Table = "screening_run_metrics"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "screening_run_metrics"
	// TaskInverseTable is the table name for the ScreeningTask entity.
	// It exists in this package in order to avoid circular dependency with the "screeningtask" package.
	TaskInverseTable = "screening_tasks"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_id"
)

// Columns holds all SQL columns for screeningrunmetric fields.
var Columns = []string{
	FieldID,
	FieldDeletedAt,
	FieldTaskID,
	FieldAvgScore,
	FieldHistogram,
	FieldTokensInput,
	FieldTokensOutput,
	FieldTotalCost,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/chaitin/WhaleHire/backend/db/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ScreeningRunMetric queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByAvgScore orders the results by the avg_score field.
func ByAvgScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvgScore, opts...).ToFunc()
}

// ByTokensInput orders the results by the tokens_input field.
func ByTokensInput(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokensInput, opts...).ToFunc()
}

// ByTokensOutput orders the results by the tokens_output field.
func ByTokensOutput(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokensOutput, opts...).ToFunc()
}

// ByTotalCost orders the results by the total_cost field.
func ByTotalCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalCost, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
	)
}
