// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobexperiencerequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/google/uuid"
)

// JobExperienceRequirementCreate is the builder for creating a JobExperienceRequirement entity.
type JobExperienceRequirementCreate struct {
	config
	mutation *JobExperienceRequirementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (jerc *JobExperienceRequirementCreate) SetDeletedAt(t time.Time) *JobExperienceRequirementCreate {
	jerc.mutation.SetDeletedAt(t)
	return jerc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jerc *JobExperienceRequirementCreate) SetNillableDeletedAt(t *time.Time) *JobExperienceRequirementCreate {
	if t != nil {
		jerc.SetDeletedAt(*t)
	}
	return jerc
}

// SetJobID sets the "job_id" field.
func (jerc *JobExperienceRequirementCreate) SetJobID(u uuid.UUID) *JobExperienceRequirementCreate {
	jerc.mutation.SetJobID(u)
	return jerc
}

// SetExperienceType sets the "experience_type" field.
func (jerc *JobExperienceRequirementCreate) SetExperienceType(s string) *JobExperienceRequirementCreate {
	jerc.mutation.SetExperienceType(s)
	return jerc
}

// SetNillableExperienceType sets the "experience_type" field if the given value is not nil.
func (jerc *JobExperienceRequirementCreate) SetNillableExperienceType(s *string) *JobExperienceRequirementCreate {
	if s != nil {
		jerc.SetExperienceType(*s)
	}
	return jerc
}

// SetMinYears sets the "min_years" field.
func (jerc *JobExperienceRequirementCreate) SetMinYears(i int) *JobExperienceRequirementCreate {
	jerc.mutation.SetMinYears(i)
	return jerc
}

// SetNillableMinYears sets the "min_years" field if the given value is not nil.
func (jerc *JobExperienceRequirementCreate) SetNillableMinYears(i *int) *JobExperienceRequirementCreate {
	if i != nil {
		jerc.SetMinYears(*i)
	}
	return jerc
}

// SetIdealYears sets the "ideal_years" field.
func (jerc *JobExperienceRequirementCreate) SetIdealYears(i int) *JobExperienceRequirementCreate {
	jerc.mutation.SetIdealYears(i)
	return jerc
}

// SetNillableIdealYears sets the "ideal_years" field if the given value is not nil.
func (jerc *JobExperienceRequirementCreate) SetNillableIdealYears(i *int) *JobExperienceRequirementCreate {
	if i != nil {
		jerc.SetIdealYears(*i)
	}
	return jerc
}

// SetWeight sets the "weight" field.
func (jerc *JobExperienceRequirementCreate) SetWeight(i int) *JobExperienceRequirementCreate {
	jerc.mutation.SetWeight(i)
	return jerc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (jerc *JobExperienceRequirementCreate) SetNillableWeight(i *int) *JobExperienceRequirementCreate {
	if i != nil {
		jerc.SetWeight(*i)
	}
	return jerc
}

// SetCreatedAt sets the "created_at" field.
func (jerc *JobExperienceRequirementCreate) SetCreatedAt(t time.Time) *JobExperienceRequirementCreate {
	jerc.mutation.SetCreatedAt(t)
	return jerc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jerc *JobExperienceRequirementCreate) SetNillableCreatedAt(t *time.Time) *JobExperienceRequirementCreate {
	if t != nil {
		jerc.SetCreatedAt(*t)
	}
	return jerc
}

// SetUpdatedAt sets the "updated_at" field.
func (jerc *JobExperienceRequirementCreate) SetUpdatedAt(t time.Time) *JobExperienceRequirementCreate {
	jerc.mutation.SetUpdatedAt(t)
	return jerc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jerc *JobExperienceRequirementCreate) SetNillableUpdatedAt(t *time.Time) *JobExperienceRequirementCreate {
	if t != nil {
		jerc.SetUpdatedAt(*t)
	}
	return jerc
}

// SetID sets the "id" field.
func (jerc *JobExperienceRequirementCreate) SetID(u uuid.UUID) *JobExperienceRequirementCreate {
	jerc.mutation.SetID(u)
	return jerc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jerc *JobExperienceRequirementCreate) SetNillableID(u *uuid.UUID) *JobExperienceRequirementCreate {
	if u != nil {
		jerc.SetID(*u)
	}
	return jerc
}

// SetJob sets the "job" edge to the JobPosition entity.
func (jerc *JobExperienceRequirementCreate) SetJob(j *JobPosition) *JobExperienceRequirementCreate {
	return jerc.SetJobID(j.ID)
}

// Mutation returns the JobExperienceRequirementMutation object of the builder.
func (jerc *JobExperienceRequirementCreate) Mutation() *JobExperienceRequirementMutation {
	return jerc.mutation
}

// Save creates the JobExperienceRequirement in the database.
func (jerc *JobExperienceRequirementCreate) Save(ctx context.Context) (*JobExperienceRequirement, error) {
	if err := jerc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jerc.sqlSave, jerc.mutation, jerc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jerc *JobExperienceRequirementCreate) SaveX(ctx context.Context) *JobExperienceRequirement {
	v, err := jerc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jerc *JobExperienceRequirementCreate) Exec(ctx context.Context) error {
	_, err := jerc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jerc *JobExperienceRequirementCreate) ExecX(ctx context.Context) {
	if err := jerc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jerc *JobExperienceRequirementCreate) defaults() error {
	if _, ok := jerc.mutation.MinYears(); !ok {
		v := jobexperiencerequirement.DefaultMinYears
		jerc.mutation.SetMinYears(v)
	}
	if _, ok := jerc.mutation.IdealYears(); !ok {
		v := jobexperiencerequirement.DefaultIdealYears
		jerc.mutation.SetIdealYears(v)
	}
	if _, ok := jerc.mutation.CreatedAt(); !ok {
		if jobexperiencerequirement.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized jobexperiencerequirement.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := jobexperiencerequirement.DefaultCreatedAt()
		jerc.mutation.SetCreatedAt(v)
	}
	if _, ok := jerc.mutation.UpdatedAt(); !ok {
		if jobexperiencerequirement.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized jobexperiencerequirement.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := jobexperiencerequirement.DefaultUpdatedAt()
		jerc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jerc.mutation.ID(); !ok {
		if jobexperiencerequirement.DefaultID == nil {
			return fmt.Errorf("db: uninitialized jobexperiencerequirement.DefaultID (forgotten import db/runtime?)")
		}
		v := jobexperiencerequirement.DefaultID()
		jerc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jerc *JobExperienceRequirementCreate) check() error {
	if _, ok := jerc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job_id", err: errors.New(`db: missing required field "JobExperienceRequirement.job_id"`)}
	}
	if v, ok := jerc.mutation.MinYears(); ok {
		if err := jobexperiencerequirement.MinYearsValidator(v); err != nil {
			return &ValidationError{Name: "min_years", err: fmt.Errorf(`db: validator failed for field "JobExperienceRequirement.min_years": %w`, err)}
		}
	}
	if v, ok := jerc.mutation.IdealYears(); ok {
		if err := jobexperiencerequirement.IdealYearsValidator(v); err != nil {
			return &ValidationError{Name: "ideal_years", err: fmt.Errorf(`db: validator failed for field "JobExperienceRequirement.ideal_years": %w`, err)}
		}
	}
	if v, ok := jerc.mutation.Weight(); ok {
		if err := jobexperiencerequirement.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`db: validator failed for field "JobExperienceRequirement.weight": %w`, err)}
		}
	}
	if _, ok := jerc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "JobExperienceRequirement.created_at"`)}
	}
	if _, ok := jerc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "JobExperienceRequirement.updated_at"`)}
	}
	if len(jerc.mutation.JobIDs()) == 0 {
		return &ValidationError{Name: "job", err: errors.New(`db: missing required edge "JobExperienceRequirement.job"`)}
	}
	return nil
}

func (jerc *JobExperienceRequirementCreate) sqlSave(ctx context.Context) (*JobExperienceRequirement, error) {
	if err := jerc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jerc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jerc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	jerc.mutation.id = &_node.ID
	jerc.mutation.done = true
	return _node, nil
}

func (jerc *JobExperienceRequirementCreate) createSpec() (*JobExperienceRequirement, *sqlgraph.CreateSpec) {
	var (
		_node = &JobExperienceRequirement{config: jerc.config}
		_spec = sqlgraph.NewCreateSpec(jobexperiencerequirement.Table, sqlgraph.NewFieldSpec(jobexperiencerequirement.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = jerc.conflict
	if id, ok := jerc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := jerc.mutation.DeletedAt(); ok {
		_spec.SetField(jobexperiencerequirement.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := jerc.mutation.ExperienceType(); ok {
		_spec.SetField(jobexperiencerequirement.FieldExperienceType, field.TypeString, value)
		_node.ExperienceType = value
	}
	if value, ok := jerc.mutation.MinYears(); ok {
		_spec.SetField(jobexperiencerequirement.FieldMinYears, field.TypeInt, value)
		_node.MinYears = value
	}
	if value, ok := jerc.mutation.IdealYears(); ok {
		_spec.SetField(jobexperiencerequirement.FieldIdealYears, field.TypeInt, value)
		_node.IdealYears = value
	}
	if value, ok := jerc.mutation.Weight(); ok {
		_spec.SetField(jobexperiencerequirement.FieldWeight, field.TypeInt, value)
		_node.Weight = value
	}
	if value, ok := jerc.mutation.CreatedAt(); ok {
		_spec.SetField(jobexperiencerequirement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jerc.mutation.UpdatedAt(); ok {
		_spec.SetField(jobexperiencerequirement.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := jerc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobexperiencerequirement.JobTable,
			Columns: []string{jobexperiencerequirement.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.JobID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobExperienceRequirement.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobExperienceRequirementUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (jerc *JobExperienceRequirementCreate) OnConflict(opts ...sql.ConflictOption) *JobExperienceRequirementUpsertOne {
	jerc.conflict = opts
	return &JobExperienceRequirementUpsertOne{
		create: jerc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobExperienceRequirement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jerc *JobExperienceRequirementCreate) OnConflictColumns(columns ...string) *JobExperienceRequirementUpsertOne {
	jerc.conflict = append(jerc.conflict, sql.ConflictColumns(columns...))
	return &JobExperienceRequirementUpsertOne{
		create: jerc,
	}
}

type (
	// JobExperienceRequirementUpsertOne is the builder for "upsert"-ing
	//  one JobExperienceRequirement node.
	JobExperienceRequirementUpsertOne struct {
		create *JobExperienceRequirementCreate
	}

	// JobExperienceRequirementUpsert is the "OnConflict" setter.
	JobExperienceRequirementUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *JobExperienceRequirementUpsert) SetDeletedAt(v time.Time) *JobExperienceRequirementUpsert {
	u.Set(jobexperiencerequirement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsert) UpdateDeletedAt() *JobExperienceRequirementUpsert {
	u.SetExcluded(jobexperiencerequirement.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobExperienceRequirementUpsert) ClearDeletedAt() *JobExperienceRequirementUpsert {
	u.SetNull(jobexperiencerequirement.FieldDeletedAt)
	return u
}

// SetJobID sets the "job_id" field.
func (u *JobExperienceRequirementUpsert) SetJobID(v uuid.UUID) *JobExperienceRequirementUpsert {
	u.Set(jobexperiencerequirement.FieldJobID, v)
	return u
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsert) UpdateJobID() *JobExperienceRequirementUpsert {
	u.SetExcluded(jobexperiencerequirement.FieldJobID)
	return u
}

// SetExperienceType sets the "experience_type" field.
func (u *JobExperienceRequirementUpsert) SetExperienceType(v string) *JobExperienceRequirementUpsert {
	u.Set(jobexperiencerequirement.FieldExperienceType, v)
	return u
}

// UpdateExperienceType sets the "experience_type" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsert) UpdateExperienceType() *JobExperienceRequirementUpsert {
	u.SetExcluded(jobexperiencerequirement.FieldExperienceType)
	return u
}

// ClearExperienceType clears the value of the "experience_type" field.
func (u *JobExperienceRequirementUpsert) ClearExperienceType() *JobExperienceRequirementUpsert {
	u.SetNull(jobexperiencerequirement.FieldExperienceType)
	return u
}

// SetMinYears sets the "min_years" field.
func (u *JobExperienceRequirementUpsert) SetMinYears(v int) *JobExperienceRequirementUpsert {
	u.Set(jobexperiencerequirement.FieldMinYears, v)
	return u
}

// UpdateMinYears sets the "min_years" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsert) UpdateMinYears() *JobExperienceRequirementUpsert {
	u.SetExcluded(jobexperiencerequirement.FieldMinYears)
	return u
}

// AddMinYears adds v to the "min_years" field.
func (u *JobExperienceRequirementUpsert) AddMinYears(v int) *JobExperienceRequirementUpsert {
	u.Add(jobexperiencerequirement.FieldMinYears, v)
	return u
}

// ClearMinYears clears the value of the "min_years" field.
func (u *JobExperienceRequirementUpsert) ClearMinYears() *JobExperienceRequirementUpsert {
	u.SetNull(jobexperiencerequirement.FieldMinYears)
	return u
}

// SetIdealYears sets the "ideal_years" field.
func (u *JobExperienceRequirementUpsert) SetIdealYears(v int) *JobExperienceRequirementUpsert {
	u.Set(jobexperiencerequirement.FieldIdealYears, v)
	return u
}

// UpdateIdealYears sets the "ideal_years" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsert) UpdateIdealYears() *JobExperienceRequirementUpsert {
	u.SetExcluded(jobexperiencerequirement.FieldIdealYears)
	return u
}

// AddIdealYears adds v to the "ideal_years" field.
func (u *JobExperienceRequirementUpsert) AddIdealYears(v int) *JobExperienceRequirementUpsert {
	u.Add(jobexperiencerequirement.FieldIdealYears, v)
	return u
}

// ClearIdealYears clears the value of the "ideal_years" field.
func (u *JobExperienceRequirementUpsert) ClearIdealYears() *JobExperienceRequirementUpsert {
	u.SetNull(jobexperiencerequirement.FieldIdealYears)
	return u
}

// SetWeight sets the "weight" field.
func (u *JobExperienceRequirementUpsert) SetWeight(v int) *JobExperienceRequirementUpsert {
	u.Set(jobexperiencerequirement.FieldWeight, v)
	return u
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsert) UpdateWeight() *JobExperienceRequirementUpsert {
	u.SetExcluded(jobexperiencerequirement.FieldWeight)
	return u
}

// AddWeight adds v to the "weight" field.
func (u *JobExperienceRequirementUpsert) AddWeight(v int) *JobExperienceRequirementUpsert {
	u.Add(jobexperiencerequirement.FieldWeight, v)
	return u
}

// ClearWeight clears the value of the "weight" field.
func (u *JobExperienceRequirementUpsert) ClearWeight() *JobExperienceRequirementUpsert {
	u.SetNull(jobexperiencerequirement.FieldWeight)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobExperienceRequirementUpsert) SetUpdatedAt(v time.Time) *JobExperienceRequirementUpsert {
	u.Set(jobexperiencerequirement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsert) UpdateUpdatedAt() *JobExperienceRequirementUpsert {
	u.SetExcluded(jobexperiencerequirement.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.JobExperienceRequirement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobexperiencerequirement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobExperienceRequirementUpsertOne) UpdateNewValues() *JobExperienceRequirementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(jobexperiencerequirement.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(jobexperiencerequirement.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobExperienceRequirement.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *JobExperienceRequirementUpsertOne) Ignore() *JobExperienceRequirementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobExperienceRequirementUpsertOne) DoNothing() *JobExperienceRequirementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobExperienceRequirementCreate.OnConflict
// documentation for more info.
func (u *JobExperienceRequirementUpsertOne) Update(set func(*JobExperienceRequirementUpsert)) *JobExperienceRequirementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobExperienceRequirementUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *JobExperienceRequirementUpsertOne) SetDeletedAt(v time.Time) *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsertOne) UpdateDeletedAt() *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobExperienceRequirementUpsertOne) ClearDeletedAt() *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.ClearDeletedAt()
	})
}

// SetJobID sets the "job_id" field.
func (u *JobExperienceRequirementUpsertOne) SetJobID(v uuid.UUID) *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.SetJobID(v)
	})
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsertOne) UpdateJobID() *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.UpdateJobID()
	})
}

// SetExperienceType sets the "experience_type" field.
func (u *JobExperienceRequirementUpsertOne) SetExperienceType(v string) *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.SetExperienceType(v)
	})
}

// UpdateExperienceType sets the "experience_type" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsertOne) UpdateExperienceType() *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.UpdateExperienceType()
	})
}

// ClearExperienceType clears the value of the "experience_type" field.
func (u *JobExperienceRequirementUpsertOne) ClearExperienceType() *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.ClearExperienceType()
	})
}

// SetMinYears sets the "min_years" field.
func (u *JobExperienceRequirementUpsertOne) SetMinYears(v int) *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.SetMinYears(v)
	})
}

// AddMinYears adds v to the "min_years" field.
func (u *JobExperienceRequirementUpsertOne) AddMinYears(v int) *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.AddMinYears(v)
	})
}

// UpdateMinYears sets the "min_years" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsertOne) UpdateMinYears() *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.UpdateMinYears()
	})
}

// ClearMinYears clears the value of the "min_years" field.
func (u *JobExperienceRequirementUpsertOne) ClearMinYears() *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.ClearMinYears()
	})
}

// SetIdealYears sets the "ideal_years" field.
func (u *JobExperienceRequirementUpsertOne) SetIdealYears(v int) *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.SetIdealYears(v)
	})
}

// AddIdealYears adds v to the "ideal_years" field.
func (u *JobExperienceRequirementUpsertOne) AddIdealYears(v int) *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.AddIdealYears(v)
	})
}

// UpdateIdealYears sets the "ideal_years" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsertOne) UpdateIdealYears() *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.UpdateIdealYears()
	})
}

// ClearIdealYears clears the value of the "ideal_years" field.
func (u *JobExperienceRequirementUpsertOne) ClearIdealYears() *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.ClearIdealYears()
	})
}

// SetWeight sets the "weight" field.
func (u *JobExperienceRequirementUpsertOne) SetWeight(v int) *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *JobExperienceRequirementUpsertOne) AddWeight(v int) *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsertOne) UpdateWeight() *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.UpdateWeight()
	})
}

// ClearWeight clears the value of the "weight" field.
func (u *JobExperienceRequirementUpsertOne) ClearWeight() *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.ClearWeight()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobExperienceRequirementUpsertOne) SetUpdatedAt(v time.Time) *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsertOne) UpdateUpdatedAt() *JobExperienceRequirementUpsertOne {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *JobExperienceRequirementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for JobExperienceRequirementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobExperienceRequirementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *JobExperienceRequirementUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: JobExperienceRequirementUpsertOne.ID is not supported by MySQL driver. Use JobExperienceRequirementUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *JobExperienceRequirementUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// JobExperienceRequirementCreateBulk is the builder for creating many JobExperienceRequirement entities in bulk.
type JobExperienceRequirementCreateBulk struct {
	config
	err      error
	builders []*JobExperienceRequirementCreate
	conflict []sql.ConflictOption
}

// Save creates the JobExperienceRequirement entities in the database.
func (jercb *JobExperienceRequirementCreateBulk) Save(ctx context.Context) ([]*JobExperienceRequirement, error) {
	if jercb.err != nil {
		return nil, jercb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jercb.builders))
	nodes := make([]*JobExperienceRequirement, len(jercb.builders))
	mutators := make([]Mutator, len(jercb.builders))
	for i := range jercb.builders {
		func(i int, root context.Context) {
			builder := jercb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobExperienceRequirementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jercb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = jercb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jercb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jercb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jercb *JobExperienceRequirementCreateBulk) SaveX(ctx context.Context) []*JobExperienceRequirement {
	v, err := jercb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jercb *JobExperienceRequirementCreateBulk) Exec(ctx context.Context) error {
	_, err := jercb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jercb *JobExperienceRequirementCreateBulk) ExecX(ctx context.Context) {
	if err := jercb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobExperienceRequirement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobExperienceRequirementUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (jercb *JobExperienceRequirementCreateBulk) OnConflict(opts ...sql.ConflictOption) *JobExperienceRequirementUpsertBulk {
	jercb.conflict = opts
	return &JobExperienceRequirementUpsertBulk{
		create: jercb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobExperienceRequirement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jercb *JobExperienceRequirementCreateBulk) OnConflictColumns(columns ...string) *JobExperienceRequirementUpsertBulk {
	jercb.conflict = append(jercb.conflict, sql.ConflictColumns(columns...))
	return &JobExperienceRequirementUpsertBulk{
		create: jercb,
	}
}

// JobExperienceRequirementUpsertBulk is the builder for "upsert"-ing
// a bulk of JobExperienceRequirement nodes.
type JobExperienceRequirementUpsertBulk struct {
	create *JobExperienceRequirementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.JobExperienceRequirement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobexperiencerequirement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobExperienceRequirementUpsertBulk) UpdateNewValues() *JobExperienceRequirementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(jobexperiencerequirement.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(jobexperiencerequirement.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobExperienceRequirement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *JobExperienceRequirementUpsertBulk) Ignore() *JobExperienceRequirementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobExperienceRequirementUpsertBulk) DoNothing() *JobExperienceRequirementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobExperienceRequirementCreateBulk.OnConflict
// documentation for more info.
func (u *JobExperienceRequirementUpsertBulk) Update(set func(*JobExperienceRequirementUpsert)) *JobExperienceRequirementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobExperienceRequirementUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *JobExperienceRequirementUpsertBulk) SetDeletedAt(v time.Time) *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsertBulk) UpdateDeletedAt() *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobExperienceRequirementUpsertBulk) ClearDeletedAt() *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.ClearDeletedAt()
	})
}

// SetJobID sets the "job_id" field.
func (u *JobExperienceRequirementUpsertBulk) SetJobID(v uuid.UUID) *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.SetJobID(v)
	})
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsertBulk) UpdateJobID() *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.UpdateJobID()
	})
}

// SetExperienceType sets the "experience_type" field.
func (u *JobExperienceRequirementUpsertBulk) SetExperienceType(v string) *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.SetExperienceType(v)
	})
}

// UpdateExperienceType sets the "experience_type" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsertBulk) UpdateExperienceType() *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.UpdateExperienceType()
	})
}

// ClearExperienceType clears the value of the "experience_type" field.
func (u *JobExperienceRequirementUpsertBulk) ClearExperienceType() *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.ClearExperienceType()
	})
}

// SetMinYears sets the "min_years" field.
func (u *JobExperienceRequirementUpsertBulk) SetMinYears(v int) *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.SetMinYears(v)
	})
}

// AddMinYears adds v to the "min_years" field.
func (u *JobExperienceRequirementUpsertBulk) AddMinYears(v int) *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.AddMinYears(v)
	})
}

// UpdateMinYears sets the "min_years" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsertBulk) UpdateMinYears() *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.UpdateMinYears()
	})
}

// ClearMinYears clears the value of the "min_years" field.
func (u *JobExperienceRequirementUpsertBulk) ClearMinYears() *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.ClearMinYears()
	})
}

// SetIdealYears sets the "ideal_years" field.
func (u *JobExperienceRequirementUpsertBulk) SetIdealYears(v int) *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.SetIdealYears(v)
	})
}

// AddIdealYears adds v to the "ideal_years" field.
func (u *JobExperienceRequirementUpsertBulk) AddIdealYears(v int) *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.AddIdealYears(v)
	})
}

// UpdateIdealYears sets the "ideal_years" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsertBulk) UpdateIdealYears() *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.UpdateIdealYears()
	})
}

// ClearIdealYears clears the value of the "ideal_years" field.
func (u *JobExperienceRequirementUpsertBulk) ClearIdealYears() *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.ClearIdealYears()
	})
}

// SetWeight sets the "weight" field.
func (u *JobExperienceRequirementUpsertBulk) SetWeight(v int) *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *JobExperienceRequirementUpsertBulk) AddWeight(v int) *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsertBulk) UpdateWeight() *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.UpdateWeight()
	})
}

// ClearWeight clears the value of the "weight" field.
func (u *JobExperienceRequirementUpsertBulk) ClearWeight() *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.ClearWeight()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobExperienceRequirementUpsertBulk) SetUpdatedAt(v time.Time) *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobExperienceRequirementUpsertBulk) UpdateUpdatedAt() *JobExperienceRequirementUpsertBulk {
	return u.Update(func(s *JobExperienceRequirementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *JobExperienceRequirementUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the JobExperienceRequirementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for JobExperienceRequirementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobExperienceRequirementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
