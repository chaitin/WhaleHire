// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumedocumentparse"
	"github.com/chaitin/WhaleHire/backend/db/resumeeducation"
	"github.com/chaitin/WhaleHire/backend/db/resumeexperience"
	"github.com/chaitin/WhaleHire/backend/db/resumelog"
	"github.com/chaitin/WhaleHire/backend/db/resumeskill"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/google/uuid"
)

// ResumeCreate is the builder for creating a Resume entity.
type ResumeCreate struct {
	config
	mutation *ResumeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *ResumeCreate) SetDeletedAt(t time.Time) *ResumeCreate {
	rc.mutation.SetDeletedAt(t)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableDeletedAt(t *time.Time) *ResumeCreate {
	if t != nil {
		rc.SetDeletedAt(*t)
	}
	return rc
}

// SetUserID sets the "user_id" field.
func (rc *ResumeCreate) SetUserID(u uuid.UUID) *ResumeCreate {
	rc.mutation.SetUserID(u)
	return rc
}

// SetName sets the "name" field.
func (rc *ResumeCreate) SetName(s string) *ResumeCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableName(s *string) *ResumeCreate {
	if s != nil {
		rc.SetName(*s)
	}
	return rc
}

// SetGender sets the "gender" field.
func (rc *ResumeCreate) SetGender(s string) *ResumeCreate {
	rc.mutation.SetGender(s)
	return rc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableGender(s *string) *ResumeCreate {
	if s != nil {
		rc.SetGender(*s)
	}
	return rc
}

// SetBirthday sets the "birthday" field.
func (rc *ResumeCreate) SetBirthday(t time.Time) *ResumeCreate {
	rc.mutation.SetBirthday(t)
	return rc
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableBirthday(t *time.Time) *ResumeCreate {
	if t != nil {
		rc.SetBirthday(*t)
	}
	return rc
}

// SetEmail sets the "email" field.
func (rc *ResumeCreate) SetEmail(s string) *ResumeCreate {
	rc.mutation.SetEmail(s)
	return rc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableEmail(s *string) *ResumeCreate {
	if s != nil {
		rc.SetEmail(*s)
	}
	return rc
}

// SetPhone sets the "phone" field.
func (rc *ResumeCreate) SetPhone(s string) *ResumeCreate {
	rc.mutation.SetPhone(s)
	return rc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (rc *ResumeCreate) SetNillablePhone(s *string) *ResumeCreate {
	if s != nil {
		rc.SetPhone(*s)
	}
	return rc
}

// SetCurrentCity sets the "current_city" field.
func (rc *ResumeCreate) SetCurrentCity(s string) *ResumeCreate {
	rc.mutation.SetCurrentCity(s)
	return rc
}

// SetNillableCurrentCity sets the "current_city" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableCurrentCity(s *string) *ResumeCreate {
	if s != nil {
		rc.SetCurrentCity(*s)
	}
	return rc
}

// SetHighestEducation sets the "highest_education" field.
func (rc *ResumeCreate) SetHighestEducation(s string) *ResumeCreate {
	rc.mutation.SetHighestEducation(s)
	return rc
}

// SetNillableHighestEducation sets the "highest_education" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableHighestEducation(s *string) *ResumeCreate {
	if s != nil {
		rc.SetHighestEducation(*s)
	}
	return rc
}

// SetYearsExperience sets the "years_experience" field.
func (rc *ResumeCreate) SetYearsExperience(f float64) *ResumeCreate {
	rc.mutation.SetYearsExperience(f)
	return rc
}

// SetNillableYearsExperience sets the "years_experience" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableYearsExperience(f *float64) *ResumeCreate {
	if f != nil {
		rc.SetYearsExperience(*f)
	}
	return rc
}

// SetResumeFileURL sets the "resume_file_url" field.
func (rc *ResumeCreate) SetResumeFileURL(s string) *ResumeCreate {
	rc.mutation.SetResumeFileURL(s)
	return rc
}

// SetNillableResumeFileURL sets the "resume_file_url" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableResumeFileURL(s *string) *ResumeCreate {
	if s != nil {
		rc.SetResumeFileURL(*s)
	}
	return rc
}

// SetStatus sets the "status" field.
func (rc *ResumeCreate) SetStatus(s string) *ResumeCreate {
	rc.mutation.SetStatus(s)
	return rc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableStatus(s *string) *ResumeCreate {
	if s != nil {
		rc.SetStatus(*s)
	}
	return rc
}

// SetErrorMessage sets the "error_message" field.
func (rc *ResumeCreate) SetErrorMessage(s string) *ResumeCreate {
	rc.mutation.SetErrorMessage(s)
	return rc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableErrorMessage(s *string) *ResumeCreate {
	if s != nil {
		rc.SetErrorMessage(*s)
	}
	return rc
}

// SetParsedAt sets the "parsed_at" field.
func (rc *ResumeCreate) SetParsedAt(t time.Time) *ResumeCreate {
	rc.mutation.SetParsedAt(t)
	return rc
}

// SetNillableParsedAt sets the "parsed_at" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableParsedAt(t *time.Time) *ResumeCreate {
	if t != nil {
		rc.SetParsedAt(*t)
	}
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *ResumeCreate) SetCreatedAt(t time.Time) *ResumeCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableCreatedAt(t *time.Time) *ResumeCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *ResumeCreate) SetUpdatedAt(t time.Time) *ResumeCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableUpdatedAt(t *time.Time) *ResumeCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *ResumeCreate) SetID(u uuid.UUID) *ResumeCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableID(u *uuid.UUID) *ResumeCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// SetUser sets the "user" edge to the User entity.
func (rc *ResumeCreate) SetUser(u *User) *ResumeCreate {
	return rc.SetUserID(u.ID)
}

// AddEducationIDs adds the "educations" edge to the ResumeEducation entity by IDs.
func (rc *ResumeCreate) AddEducationIDs(ids ...uuid.UUID) *ResumeCreate {
	rc.mutation.AddEducationIDs(ids...)
	return rc
}

// AddEducations adds the "educations" edges to the ResumeEducation entity.
func (rc *ResumeCreate) AddEducations(r ...*ResumeEducation) *ResumeCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddEducationIDs(ids...)
}

// AddExperienceIDs adds the "experiences" edge to the ResumeExperience entity by IDs.
func (rc *ResumeCreate) AddExperienceIDs(ids ...uuid.UUID) *ResumeCreate {
	rc.mutation.AddExperienceIDs(ids...)
	return rc
}

// AddExperiences adds the "experiences" edges to the ResumeExperience entity.
func (rc *ResumeCreate) AddExperiences(r ...*ResumeExperience) *ResumeCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddExperienceIDs(ids...)
}

// AddSkillIDs adds the "skills" edge to the ResumeSkill entity by IDs.
func (rc *ResumeCreate) AddSkillIDs(ids ...uuid.UUID) *ResumeCreate {
	rc.mutation.AddSkillIDs(ids...)
	return rc
}

// AddSkills adds the "skills" edges to the ResumeSkill entity.
func (rc *ResumeCreate) AddSkills(r ...*ResumeSkill) *ResumeCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddSkillIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the ResumeLog entity by IDs.
func (rc *ResumeCreate) AddLogIDs(ids ...uuid.UUID) *ResumeCreate {
	rc.mutation.AddLogIDs(ids...)
	return rc
}

// AddLogs adds the "logs" edges to the ResumeLog entity.
func (rc *ResumeCreate) AddLogs(r ...*ResumeLog) *ResumeCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddLogIDs(ids...)
}

// AddDocumentParseIDs adds the "document_parse" edge to the ResumeDocumentParse entity by IDs.
func (rc *ResumeCreate) AddDocumentParseIDs(ids ...uuid.UUID) *ResumeCreate {
	rc.mutation.AddDocumentParseIDs(ids...)
	return rc
}

// AddDocumentParse adds the "document_parse" edges to the ResumeDocumentParse entity.
func (rc *ResumeCreate) AddDocumentParse(r ...*ResumeDocumentParse) *ResumeCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddDocumentParseIDs(ids...)
}

// Mutation returns the ResumeMutation object of the builder.
func (rc *ResumeCreate) Mutation() *ResumeMutation {
	return rc.mutation
}

// Save creates the Resume in the database.
func (rc *ResumeCreate) Save(ctx context.Context) (*Resume, error) {
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ResumeCreate) SaveX(ctx context.Context) *Resume {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ResumeCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ResumeCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ResumeCreate) defaults() error {
	if _, ok := rc.mutation.Status(); !ok {
		v := resume.DefaultStatus
		rc.mutation.SetStatus(v)
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if resume.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized resume.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := resume.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if resume.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resume.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resume.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		if resume.DefaultID == nil {
			return fmt.Errorf("db: uninitialized resume.DefaultID (forgotten import db/runtime?)")
		}
		v := resume.DefaultID()
		rc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *ResumeCreate) check() error {
	if _, ok := rc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`db: missing required field "Resume.user_id"`)}
	}
	if v, ok := rc.mutation.HighestEducation(); ok {
		if err := resume.HighestEducationValidator(v); err != nil {
			return &ValidationError{Name: "highest_education", err: fmt.Errorf(`db: validator failed for field "Resume.highest_education": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "Resume.status"`)}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Resume.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Resume.updated_at"`)}
	}
	if len(rc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`db: missing required edge "Resume.user"`)}
	}
	return nil
}

func (rc *ResumeCreate) sqlSave(ctx context.Context) (*Resume, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ResumeCreate) createSpec() (*Resume, *sqlgraph.CreateSpec) {
	var (
		_node = &Resume{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(resume.Table, sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(resume.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(resume.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.Gender(); ok {
		_spec.SetField(resume.FieldGender, field.TypeString, value)
		_node.Gender = value
	}
	if value, ok := rc.mutation.Birthday(); ok {
		_spec.SetField(resume.FieldBirthday, field.TypeTime, value)
		_node.Birthday = value
	}
	if value, ok := rc.mutation.Email(); ok {
		_spec.SetField(resume.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := rc.mutation.Phone(); ok {
		_spec.SetField(resume.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := rc.mutation.CurrentCity(); ok {
		_spec.SetField(resume.FieldCurrentCity, field.TypeString, value)
		_node.CurrentCity = value
	}
	if value, ok := rc.mutation.HighestEducation(); ok {
		_spec.SetField(resume.FieldHighestEducation, field.TypeString, value)
		_node.HighestEducation = value
	}
	if value, ok := rc.mutation.YearsExperience(); ok {
		_spec.SetField(resume.FieldYearsExperience, field.TypeFloat64, value)
		_node.YearsExperience = value
	}
	if value, ok := rc.mutation.ResumeFileURL(); ok {
		_spec.SetField(resume.FieldResumeFileURL, field.TypeString, value)
		_node.ResumeFileURL = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(resume.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := rc.mutation.ErrorMessage(); ok {
		_spec.SetField(resume.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := rc.mutation.ParsedAt(); ok {
		_spec.SetField(resume.FieldParsedAt, field.TypeTime, value)
		_node.ParsedAt = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(resume.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(resume.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.UserTable,
			Columns: []string{resume.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.EducationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.EducationsTable,
			Columns: []string{resume.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeeducation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ExperiencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.ExperiencesTable,
			Columns: []string{resume.ExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeexperience.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.SkillsTable,
			Columns: []string{resume.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.LogsTable,
			Columns: []string{resume.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.DocumentParseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.DocumentParseTable,
			Columns: []string{resume.DocumentParseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumedocumentparse.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Resume.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rc *ResumeCreate) OnConflict(opts ...sql.ConflictOption) *ResumeUpsertOne {
	rc.conflict = opts
	return &ResumeUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Resume.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *ResumeCreate) OnConflictColumns(columns ...string) *ResumeUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &ResumeUpsertOne{
		create: rc,
	}
}

type (
	// ResumeUpsertOne is the builder for "upsert"-ing
	//  one Resume node.
	ResumeUpsertOne struct {
		create *ResumeCreate
	}

	// ResumeUpsert is the "OnConflict" setter.
	ResumeUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeUpsert) SetDeletedAt(v time.Time) *ResumeUpsert {
	u.Set(resume.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeUpsert) UpdateDeletedAt() *ResumeUpsert {
	u.SetExcluded(resume.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeUpsert) ClearDeletedAt() *ResumeUpsert {
	u.SetNull(resume.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ResumeUpsert) SetUserID(v uuid.UUID) *ResumeUpsert {
	u.Set(resume.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ResumeUpsert) UpdateUserID() *ResumeUpsert {
	u.SetExcluded(resume.FieldUserID)
	return u
}

// SetName sets the "name" field.
func (u *ResumeUpsert) SetName(v string) *ResumeUpsert {
	u.Set(resume.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ResumeUpsert) UpdateName() *ResumeUpsert {
	u.SetExcluded(resume.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *ResumeUpsert) ClearName() *ResumeUpsert {
	u.SetNull(resume.FieldName)
	return u
}

// SetGender sets the "gender" field.
func (u *ResumeUpsert) SetGender(v string) *ResumeUpsert {
	u.Set(resume.FieldGender, v)
	return u
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *ResumeUpsert) UpdateGender() *ResumeUpsert {
	u.SetExcluded(resume.FieldGender)
	return u
}

// ClearGender clears the value of the "gender" field.
func (u *ResumeUpsert) ClearGender() *ResumeUpsert {
	u.SetNull(resume.FieldGender)
	return u
}

// SetBirthday sets the "birthday" field.
func (u *ResumeUpsert) SetBirthday(v time.Time) *ResumeUpsert {
	u.Set(resume.FieldBirthday, v)
	return u
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *ResumeUpsert) UpdateBirthday() *ResumeUpsert {
	u.SetExcluded(resume.FieldBirthday)
	return u
}

// ClearBirthday clears the value of the "birthday" field.
func (u *ResumeUpsert) ClearBirthday() *ResumeUpsert {
	u.SetNull(resume.FieldBirthday)
	return u
}

// SetEmail sets the "email" field.
func (u *ResumeUpsert) SetEmail(v string) *ResumeUpsert {
	u.Set(resume.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *ResumeUpsert) UpdateEmail() *ResumeUpsert {
	u.SetExcluded(resume.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *ResumeUpsert) ClearEmail() *ResumeUpsert {
	u.SetNull(resume.FieldEmail)
	return u
}

// SetPhone sets the "phone" field.
func (u *ResumeUpsert) SetPhone(v string) *ResumeUpsert {
	u.Set(resume.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *ResumeUpsert) UpdatePhone() *ResumeUpsert {
	u.SetExcluded(resume.FieldPhone)
	return u
}

// ClearPhone clears the value of the "phone" field.
func (u *ResumeUpsert) ClearPhone() *ResumeUpsert {
	u.SetNull(resume.FieldPhone)
	return u
}

// SetCurrentCity sets the "current_city" field.
func (u *ResumeUpsert) SetCurrentCity(v string) *ResumeUpsert {
	u.Set(resume.FieldCurrentCity, v)
	return u
}

// UpdateCurrentCity sets the "current_city" field to the value that was provided on create.
func (u *ResumeUpsert) UpdateCurrentCity() *ResumeUpsert {
	u.SetExcluded(resume.FieldCurrentCity)
	return u
}

// ClearCurrentCity clears the value of the "current_city" field.
func (u *ResumeUpsert) ClearCurrentCity() *ResumeUpsert {
	u.SetNull(resume.FieldCurrentCity)
	return u
}

// SetHighestEducation sets the "highest_education" field.
func (u *ResumeUpsert) SetHighestEducation(v string) *ResumeUpsert {
	u.Set(resume.FieldHighestEducation, v)
	return u
}

// UpdateHighestEducation sets the "highest_education" field to the value that was provided on create.
func (u *ResumeUpsert) UpdateHighestEducation() *ResumeUpsert {
	u.SetExcluded(resume.FieldHighestEducation)
	return u
}

// ClearHighestEducation clears the value of the "highest_education" field.
func (u *ResumeUpsert) ClearHighestEducation() *ResumeUpsert {
	u.SetNull(resume.FieldHighestEducation)
	return u
}

// SetYearsExperience sets the "years_experience" field.
func (u *ResumeUpsert) SetYearsExperience(v float64) *ResumeUpsert {
	u.Set(resume.FieldYearsExperience, v)
	return u
}

// UpdateYearsExperience sets the "years_experience" field to the value that was provided on create.
func (u *ResumeUpsert) UpdateYearsExperience() *ResumeUpsert {
	u.SetExcluded(resume.FieldYearsExperience)
	return u
}

// AddYearsExperience adds v to the "years_experience" field.
func (u *ResumeUpsert) AddYearsExperience(v float64) *ResumeUpsert {
	u.Add(resume.FieldYearsExperience, v)
	return u
}

// ClearYearsExperience clears the value of the "years_experience" field.
func (u *ResumeUpsert) ClearYearsExperience() *ResumeUpsert {
	u.SetNull(resume.FieldYearsExperience)
	return u
}

// SetResumeFileURL sets the "resume_file_url" field.
func (u *ResumeUpsert) SetResumeFileURL(v string) *ResumeUpsert {
	u.Set(resume.FieldResumeFileURL, v)
	return u
}

// UpdateResumeFileURL sets the "resume_file_url" field to the value that was provided on create.
func (u *ResumeUpsert) UpdateResumeFileURL() *ResumeUpsert {
	u.SetExcluded(resume.FieldResumeFileURL)
	return u
}

// ClearResumeFileURL clears the value of the "resume_file_url" field.
func (u *ResumeUpsert) ClearResumeFileURL() *ResumeUpsert {
	u.SetNull(resume.FieldResumeFileURL)
	return u
}

// SetStatus sets the "status" field.
func (u *ResumeUpsert) SetStatus(v string) *ResumeUpsert {
	u.Set(resume.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResumeUpsert) UpdateStatus() *ResumeUpsert {
	u.SetExcluded(resume.FieldStatus)
	return u
}

// SetErrorMessage sets the "error_message" field.
func (u *ResumeUpsert) SetErrorMessage(v string) *ResumeUpsert {
	u.Set(resume.FieldErrorMessage, v)
	return u
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *ResumeUpsert) UpdateErrorMessage() *ResumeUpsert {
	u.SetExcluded(resume.FieldErrorMessage)
	return u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *ResumeUpsert) ClearErrorMessage() *ResumeUpsert {
	u.SetNull(resume.FieldErrorMessage)
	return u
}

// SetParsedAt sets the "parsed_at" field.
func (u *ResumeUpsert) SetParsedAt(v time.Time) *ResumeUpsert {
	u.Set(resume.FieldParsedAt, v)
	return u
}

// UpdateParsedAt sets the "parsed_at" field to the value that was provided on create.
func (u *ResumeUpsert) UpdateParsedAt() *ResumeUpsert {
	u.SetExcluded(resume.FieldParsedAt)
	return u
}

// ClearParsedAt clears the value of the "parsed_at" field.
func (u *ResumeUpsert) ClearParsedAt() *ResumeUpsert {
	u.SetNull(resume.FieldParsedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeUpsert) SetCreatedAt(v time.Time) *ResumeUpsert {
	u.Set(resume.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeUpsert) UpdateCreatedAt() *ResumeUpsert {
	u.SetExcluded(resume.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeUpsert) SetUpdatedAt(v time.Time) *ResumeUpsert {
	u.Set(resume.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeUpsert) UpdateUpdatedAt() *ResumeUpsert {
	u.SetExcluded(resume.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Resume.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resume.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeUpsertOne) UpdateNewValues() *ResumeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resume.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Resume.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResumeUpsertOne) Ignore() *ResumeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeUpsertOne) DoNothing() *ResumeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeCreate.OnConflict
// documentation for more info.
func (u *ResumeUpsertOne) Update(set func(*ResumeUpsert)) *ResumeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeUpsertOne) SetDeletedAt(v time.Time) *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeUpsertOne) UpdateDeletedAt() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeUpsertOne) ClearDeletedAt() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *ResumeUpsertOne) SetUserID(v uuid.UUID) *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ResumeUpsertOne) UpdateUserID() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateUserID()
	})
}

// SetName sets the "name" field.
func (u *ResumeUpsertOne) SetName(v string) *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ResumeUpsertOne) UpdateName() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *ResumeUpsertOne) ClearName() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearName()
	})
}

// SetGender sets the "gender" field.
func (u *ResumeUpsertOne) SetGender(v string) *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *ResumeUpsertOne) UpdateGender() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateGender()
	})
}

// ClearGender clears the value of the "gender" field.
func (u *ResumeUpsertOne) ClearGender() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearGender()
	})
}

// SetBirthday sets the "birthday" field.
func (u *ResumeUpsertOne) SetBirthday(v time.Time) *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.SetBirthday(v)
	})
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *ResumeUpsertOne) UpdateBirthday() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateBirthday()
	})
}

// ClearBirthday clears the value of the "birthday" field.
func (u *ResumeUpsertOne) ClearBirthday() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearBirthday()
	})
}

// SetEmail sets the "email" field.
func (u *ResumeUpsertOne) SetEmail(v string) *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *ResumeUpsertOne) UpdateEmail() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *ResumeUpsertOne) ClearEmail() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearEmail()
	})
}

// SetPhone sets the "phone" field.
func (u *ResumeUpsertOne) SetPhone(v string) *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *ResumeUpsertOne) UpdatePhone() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *ResumeUpsertOne) ClearPhone() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearPhone()
	})
}

// SetCurrentCity sets the "current_city" field.
func (u *ResumeUpsertOne) SetCurrentCity(v string) *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.SetCurrentCity(v)
	})
}

// UpdateCurrentCity sets the "current_city" field to the value that was provided on create.
func (u *ResumeUpsertOne) UpdateCurrentCity() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateCurrentCity()
	})
}

// ClearCurrentCity clears the value of the "current_city" field.
func (u *ResumeUpsertOne) ClearCurrentCity() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearCurrentCity()
	})
}

// SetHighestEducation sets the "highest_education" field.
func (u *ResumeUpsertOne) SetHighestEducation(v string) *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.SetHighestEducation(v)
	})
}

// UpdateHighestEducation sets the "highest_education" field to the value that was provided on create.
func (u *ResumeUpsertOne) UpdateHighestEducation() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateHighestEducation()
	})
}

// ClearHighestEducation clears the value of the "highest_education" field.
func (u *ResumeUpsertOne) ClearHighestEducation() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearHighestEducation()
	})
}

// SetYearsExperience sets the "years_experience" field.
func (u *ResumeUpsertOne) SetYearsExperience(v float64) *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.SetYearsExperience(v)
	})
}

// AddYearsExperience adds v to the "years_experience" field.
func (u *ResumeUpsertOne) AddYearsExperience(v float64) *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.AddYearsExperience(v)
	})
}

// UpdateYearsExperience sets the "years_experience" field to the value that was provided on create.
func (u *ResumeUpsertOne) UpdateYearsExperience() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateYearsExperience()
	})
}

// ClearYearsExperience clears the value of the "years_experience" field.
func (u *ResumeUpsertOne) ClearYearsExperience() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearYearsExperience()
	})
}

// SetResumeFileURL sets the "resume_file_url" field.
func (u *ResumeUpsertOne) SetResumeFileURL(v string) *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.SetResumeFileURL(v)
	})
}

// UpdateResumeFileURL sets the "resume_file_url" field to the value that was provided on create.
func (u *ResumeUpsertOne) UpdateResumeFileURL() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateResumeFileURL()
	})
}

// ClearResumeFileURL clears the value of the "resume_file_url" field.
func (u *ResumeUpsertOne) ClearResumeFileURL() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearResumeFileURL()
	})
}

// SetStatus sets the "status" field.
func (u *ResumeUpsertOne) SetStatus(v string) *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResumeUpsertOne) UpdateStatus() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateStatus()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *ResumeUpsertOne) SetErrorMessage(v string) *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *ResumeUpsertOne) UpdateErrorMessage() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *ResumeUpsertOne) ClearErrorMessage() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearErrorMessage()
	})
}

// SetParsedAt sets the "parsed_at" field.
func (u *ResumeUpsertOne) SetParsedAt(v time.Time) *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.SetParsedAt(v)
	})
}

// UpdateParsedAt sets the "parsed_at" field to the value that was provided on create.
func (u *ResumeUpsertOne) UpdateParsedAt() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateParsedAt()
	})
}

// ClearParsedAt clears the value of the "parsed_at" field.
func (u *ResumeUpsertOne) ClearParsedAt() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearParsedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeUpsertOne) SetCreatedAt(v time.Time) *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeUpsertOne) UpdateCreatedAt() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeUpsertOne) SetUpdatedAt(v time.Time) *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeUpsertOne) UpdateUpdatedAt() *ResumeUpsertOne {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResumeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ResumeUpsertOne.ID is not supported by MySQL driver. Use ResumeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResumeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResumeCreateBulk is the builder for creating many Resume entities in bulk.
type ResumeCreateBulk struct {
	config
	err      error
	builders []*ResumeCreate
	conflict []sql.ConflictOption
}

// Save creates the Resume entities in the database.
func (rcb *ResumeCreateBulk) Save(ctx context.Context) ([]*Resume, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Resume, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResumeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ResumeCreateBulk) SaveX(ctx context.Context) []*Resume {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ResumeCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ResumeCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Resume.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rcb *ResumeCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResumeUpsertBulk {
	rcb.conflict = opts
	return &ResumeUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Resume.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *ResumeCreateBulk) OnConflictColumns(columns ...string) *ResumeUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &ResumeUpsertBulk{
		create: rcb,
	}
}

// ResumeUpsertBulk is the builder for "upsert"-ing
// a bulk of Resume nodes.
type ResumeUpsertBulk struct {
	create *ResumeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Resume.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resume.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeUpsertBulk) UpdateNewValues() *ResumeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resume.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Resume.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResumeUpsertBulk) Ignore() *ResumeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeUpsertBulk) DoNothing() *ResumeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeCreateBulk.OnConflict
// documentation for more info.
func (u *ResumeUpsertBulk) Update(set func(*ResumeUpsert)) *ResumeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeUpsertBulk) SetDeletedAt(v time.Time) *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeUpsertBulk) UpdateDeletedAt() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeUpsertBulk) ClearDeletedAt() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *ResumeUpsertBulk) SetUserID(v uuid.UUID) *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ResumeUpsertBulk) UpdateUserID() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateUserID()
	})
}

// SetName sets the "name" field.
func (u *ResumeUpsertBulk) SetName(v string) *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ResumeUpsertBulk) UpdateName() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *ResumeUpsertBulk) ClearName() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearName()
	})
}

// SetGender sets the "gender" field.
func (u *ResumeUpsertBulk) SetGender(v string) *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *ResumeUpsertBulk) UpdateGender() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateGender()
	})
}

// ClearGender clears the value of the "gender" field.
func (u *ResumeUpsertBulk) ClearGender() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearGender()
	})
}

// SetBirthday sets the "birthday" field.
func (u *ResumeUpsertBulk) SetBirthday(v time.Time) *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.SetBirthday(v)
	})
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *ResumeUpsertBulk) UpdateBirthday() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateBirthday()
	})
}

// ClearBirthday clears the value of the "birthday" field.
func (u *ResumeUpsertBulk) ClearBirthday() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearBirthday()
	})
}

// SetEmail sets the "email" field.
func (u *ResumeUpsertBulk) SetEmail(v string) *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *ResumeUpsertBulk) UpdateEmail() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *ResumeUpsertBulk) ClearEmail() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearEmail()
	})
}

// SetPhone sets the "phone" field.
func (u *ResumeUpsertBulk) SetPhone(v string) *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *ResumeUpsertBulk) UpdatePhone() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *ResumeUpsertBulk) ClearPhone() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearPhone()
	})
}

// SetCurrentCity sets the "current_city" field.
func (u *ResumeUpsertBulk) SetCurrentCity(v string) *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.SetCurrentCity(v)
	})
}

// UpdateCurrentCity sets the "current_city" field to the value that was provided on create.
func (u *ResumeUpsertBulk) UpdateCurrentCity() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateCurrentCity()
	})
}

// ClearCurrentCity clears the value of the "current_city" field.
func (u *ResumeUpsertBulk) ClearCurrentCity() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearCurrentCity()
	})
}

// SetHighestEducation sets the "highest_education" field.
func (u *ResumeUpsertBulk) SetHighestEducation(v string) *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.SetHighestEducation(v)
	})
}

// UpdateHighestEducation sets the "highest_education" field to the value that was provided on create.
func (u *ResumeUpsertBulk) UpdateHighestEducation() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateHighestEducation()
	})
}

// ClearHighestEducation clears the value of the "highest_education" field.
func (u *ResumeUpsertBulk) ClearHighestEducation() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearHighestEducation()
	})
}

// SetYearsExperience sets the "years_experience" field.
func (u *ResumeUpsertBulk) SetYearsExperience(v float64) *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.SetYearsExperience(v)
	})
}

// AddYearsExperience adds v to the "years_experience" field.
func (u *ResumeUpsertBulk) AddYearsExperience(v float64) *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.AddYearsExperience(v)
	})
}

// UpdateYearsExperience sets the "years_experience" field to the value that was provided on create.
func (u *ResumeUpsertBulk) UpdateYearsExperience() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateYearsExperience()
	})
}

// ClearYearsExperience clears the value of the "years_experience" field.
func (u *ResumeUpsertBulk) ClearYearsExperience() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearYearsExperience()
	})
}

// SetResumeFileURL sets the "resume_file_url" field.
func (u *ResumeUpsertBulk) SetResumeFileURL(v string) *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.SetResumeFileURL(v)
	})
}

// UpdateResumeFileURL sets the "resume_file_url" field to the value that was provided on create.
func (u *ResumeUpsertBulk) UpdateResumeFileURL() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateResumeFileURL()
	})
}

// ClearResumeFileURL clears the value of the "resume_file_url" field.
func (u *ResumeUpsertBulk) ClearResumeFileURL() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearResumeFileURL()
	})
}

// SetStatus sets the "status" field.
func (u *ResumeUpsertBulk) SetStatus(v string) *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResumeUpsertBulk) UpdateStatus() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateStatus()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *ResumeUpsertBulk) SetErrorMessage(v string) *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *ResumeUpsertBulk) UpdateErrorMessage() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *ResumeUpsertBulk) ClearErrorMessage() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearErrorMessage()
	})
}

// SetParsedAt sets the "parsed_at" field.
func (u *ResumeUpsertBulk) SetParsedAt(v time.Time) *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.SetParsedAt(v)
	})
}

// UpdateParsedAt sets the "parsed_at" field to the value that was provided on create.
func (u *ResumeUpsertBulk) UpdateParsedAt() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateParsedAt()
	})
}

// ClearParsedAt clears the value of the "parsed_at" field.
func (u *ResumeUpsertBulk) ClearParsedAt() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.ClearParsedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeUpsertBulk) SetCreatedAt(v time.Time) *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeUpsertBulk) UpdateCreatedAt() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeUpsertBulk) SetUpdatedAt(v time.Time) *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeUpsertBulk) UpdateUpdatedAt() *ResumeUpsertBulk {
	return u.Update(func(s *ResumeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ResumeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
