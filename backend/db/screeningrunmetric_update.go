// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/screeningrunmetric"
	"github.com/chaitin/WhaleHire/backend/db/screeningtask"
	"github.com/google/uuid"
)

// ScreeningRunMetricUpdate is the builder for updating ScreeningRunMetric entities.
type ScreeningRunMetricUpdate struct {
	config
	hooks     []Hook
	mutation  *ScreeningRunMetricMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ScreeningRunMetricUpdate builder.
func (srmu *ScreeningRunMetricUpdate) Where(ps ...predicate.ScreeningRunMetric) *ScreeningRunMetricUpdate {
	srmu.mutation.Where(ps...)
	return srmu
}

// SetDeletedAt sets the "deleted_at" field.
func (srmu *ScreeningRunMetricUpdate) SetDeletedAt(t time.Time) *ScreeningRunMetricUpdate {
	srmu.mutation.SetDeletedAt(t)
	return srmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (srmu *ScreeningRunMetricUpdate) SetNillableDeletedAt(t *time.Time) *ScreeningRunMetricUpdate {
	if t != nil {
		srmu.SetDeletedAt(*t)
	}
	return srmu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (srmu *ScreeningRunMetricUpdate) ClearDeletedAt() *ScreeningRunMetricUpdate {
	srmu.mutation.ClearDeletedAt()
	return srmu
}

// SetTaskID sets the "task_id" field.
func (srmu *ScreeningRunMetricUpdate) SetTaskID(u uuid.UUID) *ScreeningRunMetricUpdate {
	srmu.mutation.SetTaskID(u)
	return srmu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (srmu *ScreeningRunMetricUpdate) SetNillableTaskID(u *uuid.UUID) *ScreeningRunMetricUpdate {
	if u != nil {
		srmu.SetTaskID(*u)
	}
	return srmu
}

// SetAvgScore sets the "avg_score" field.
func (srmu *ScreeningRunMetricUpdate) SetAvgScore(f float64) *ScreeningRunMetricUpdate {
	srmu.mutation.ResetAvgScore()
	srmu.mutation.SetAvgScore(f)
	return srmu
}

// SetNillableAvgScore sets the "avg_score" field if the given value is not nil.
func (srmu *ScreeningRunMetricUpdate) SetNillableAvgScore(f *float64) *ScreeningRunMetricUpdate {
	if f != nil {
		srmu.SetAvgScore(*f)
	}
	return srmu
}

// AddAvgScore adds f to the "avg_score" field.
func (srmu *ScreeningRunMetricUpdate) AddAvgScore(f float64) *ScreeningRunMetricUpdate {
	srmu.mutation.AddAvgScore(f)
	return srmu
}

// ClearAvgScore clears the value of the "avg_score" field.
func (srmu *ScreeningRunMetricUpdate) ClearAvgScore() *ScreeningRunMetricUpdate {
	srmu.mutation.ClearAvgScore()
	return srmu
}

// SetHistogram sets the "histogram" field.
func (srmu *ScreeningRunMetricUpdate) SetHistogram(m map[string]interface{}) *ScreeningRunMetricUpdate {
	srmu.mutation.SetHistogram(m)
	return srmu
}

// ClearHistogram clears the value of the "histogram" field.
func (srmu *ScreeningRunMetricUpdate) ClearHistogram() *ScreeningRunMetricUpdate {
	srmu.mutation.ClearHistogram()
	return srmu
}

// SetTokensInput sets the "tokens_input" field.
func (srmu *ScreeningRunMetricUpdate) SetTokensInput(i int64) *ScreeningRunMetricUpdate {
	srmu.mutation.ResetTokensInput()
	srmu.mutation.SetTokensInput(i)
	return srmu
}

// SetNillableTokensInput sets the "tokens_input" field if the given value is not nil.
func (srmu *ScreeningRunMetricUpdate) SetNillableTokensInput(i *int64) *ScreeningRunMetricUpdate {
	if i != nil {
		srmu.SetTokensInput(*i)
	}
	return srmu
}

// AddTokensInput adds i to the "tokens_input" field.
func (srmu *ScreeningRunMetricUpdate) AddTokensInput(i int64) *ScreeningRunMetricUpdate {
	srmu.mutation.AddTokensInput(i)
	return srmu
}

// ClearTokensInput clears the value of the "tokens_input" field.
func (srmu *ScreeningRunMetricUpdate) ClearTokensInput() *ScreeningRunMetricUpdate {
	srmu.mutation.ClearTokensInput()
	return srmu
}

// SetTokensOutput sets the "tokens_output" field.
func (srmu *ScreeningRunMetricUpdate) SetTokensOutput(i int64) *ScreeningRunMetricUpdate {
	srmu.mutation.ResetTokensOutput()
	srmu.mutation.SetTokensOutput(i)
	return srmu
}

// SetNillableTokensOutput sets the "tokens_output" field if the given value is not nil.
func (srmu *ScreeningRunMetricUpdate) SetNillableTokensOutput(i *int64) *ScreeningRunMetricUpdate {
	if i != nil {
		srmu.SetTokensOutput(*i)
	}
	return srmu
}

// AddTokensOutput adds i to the "tokens_output" field.
func (srmu *ScreeningRunMetricUpdate) AddTokensOutput(i int64) *ScreeningRunMetricUpdate {
	srmu.mutation.AddTokensOutput(i)
	return srmu
}

// ClearTokensOutput clears the value of the "tokens_output" field.
func (srmu *ScreeningRunMetricUpdate) ClearTokensOutput() *ScreeningRunMetricUpdate {
	srmu.mutation.ClearTokensOutput()
	return srmu
}

// SetTotalCost sets the "total_cost" field.
func (srmu *ScreeningRunMetricUpdate) SetTotalCost(f float64) *ScreeningRunMetricUpdate {
	srmu.mutation.ResetTotalCost()
	srmu.mutation.SetTotalCost(f)
	return srmu
}

// SetNillableTotalCost sets the "total_cost" field if the given value is not nil.
func (srmu *ScreeningRunMetricUpdate) SetNillableTotalCost(f *float64) *ScreeningRunMetricUpdate {
	if f != nil {
		srmu.SetTotalCost(*f)
	}
	return srmu
}

// AddTotalCost adds f to the "total_cost" field.
func (srmu *ScreeningRunMetricUpdate) AddTotalCost(f float64) *ScreeningRunMetricUpdate {
	srmu.mutation.AddTotalCost(f)
	return srmu
}

// ClearTotalCost clears the value of the "total_cost" field.
func (srmu *ScreeningRunMetricUpdate) ClearTotalCost() *ScreeningRunMetricUpdate {
	srmu.mutation.ClearTotalCost()
	return srmu
}

// SetUpdatedAt sets the "updated_at" field.
func (srmu *ScreeningRunMetricUpdate) SetUpdatedAt(t time.Time) *ScreeningRunMetricUpdate {
	srmu.mutation.SetUpdatedAt(t)
	return srmu
}

// SetTask sets the "task" edge to the ScreeningTask entity.
func (srmu *ScreeningRunMetricUpdate) SetTask(s *ScreeningTask) *ScreeningRunMetricUpdate {
	return srmu.SetTaskID(s.ID)
}

// Mutation returns the ScreeningRunMetricMutation object of the builder.
func (srmu *ScreeningRunMetricUpdate) Mutation() *ScreeningRunMetricMutation {
	return srmu.mutation
}

// ClearTask clears the "task" edge to the ScreeningTask entity.
func (srmu *ScreeningRunMetricUpdate) ClearTask() *ScreeningRunMetricUpdate {
	srmu.mutation.ClearTask()
	return srmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (srmu *ScreeningRunMetricUpdate) Save(ctx context.Context) (int, error) {
	if err := srmu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, srmu.sqlSave, srmu.mutation, srmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (srmu *ScreeningRunMetricUpdate) SaveX(ctx context.Context) int {
	affected, err := srmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (srmu *ScreeningRunMetricUpdate) Exec(ctx context.Context) error {
	_, err := srmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srmu *ScreeningRunMetricUpdate) ExecX(ctx context.Context) {
	if err := srmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (srmu *ScreeningRunMetricUpdate) defaults() error {
	if _, ok := srmu.mutation.UpdatedAt(); !ok {
		if screeningrunmetric.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningrunmetric.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := screeningrunmetric.UpdateDefaultUpdatedAt()
		srmu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (srmu *ScreeningRunMetricUpdate) check() error {
	if srmu.mutation.TaskCleared() && len(srmu.mutation.TaskIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ScreeningRunMetric.task"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (srmu *ScreeningRunMetricUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScreeningRunMetricUpdate {
	srmu.modifiers = append(srmu.modifiers, modifiers...)
	return srmu
}

func (srmu *ScreeningRunMetricUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := srmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(screeningrunmetric.Table, screeningrunmetric.Columns, sqlgraph.NewFieldSpec(screeningrunmetric.FieldID, field.TypeUUID))
	if ps := srmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := srmu.mutation.DeletedAt(); ok {
		_spec.SetField(screeningrunmetric.FieldDeletedAt, field.TypeTime, value)
	}
	if srmu.mutation.DeletedAtCleared() {
		_spec.ClearField(screeningrunmetric.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := srmu.mutation.AvgScore(); ok {
		_spec.SetField(screeningrunmetric.FieldAvgScore, field.TypeFloat64, value)
	}
	if value, ok := srmu.mutation.AddedAvgScore(); ok {
		_spec.AddField(screeningrunmetric.FieldAvgScore, field.TypeFloat64, value)
	}
	if srmu.mutation.AvgScoreCleared() {
		_spec.ClearField(screeningrunmetric.FieldAvgScore, field.TypeFloat64)
	}
	if value, ok := srmu.mutation.Histogram(); ok {
		_spec.SetField(screeningrunmetric.FieldHistogram, field.TypeJSON, value)
	}
	if srmu.mutation.HistogramCleared() {
		_spec.ClearField(screeningrunmetric.FieldHistogram, field.TypeJSON)
	}
	if value, ok := srmu.mutation.TokensInput(); ok {
		_spec.SetField(screeningrunmetric.FieldTokensInput, field.TypeInt64, value)
	}
	if value, ok := srmu.mutation.AddedTokensInput(); ok {
		_spec.AddField(screeningrunmetric.FieldTokensInput, field.TypeInt64, value)
	}
	if srmu.mutation.TokensInputCleared() {
		_spec.ClearField(screeningrunmetric.FieldTokensInput, field.TypeInt64)
	}
	if value, ok := srmu.mutation.TokensOutput(); ok {
		_spec.SetField(screeningrunmetric.FieldTokensOutput, field.TypeInt64, value)
	}
	if value, ok := srmu.mutation.AddedTokensOutput(); ok {
		_spec.AddField(screeningrunmetric.FieldTokensOutput, field.TypeInt64, value)
	}
	if srmu.mutation.TokensOutputCleared() {
		_spec.ClearField(screeningrunmetric.FieldTokensOutput, field.TypeInt64)
	}
	if value, ok := srmu.mutation.TotalCost(); ok {
		_spec.SetField(screeningrunmetric.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := srmu.mutation.AddedTotalCost(); ok {
		_spec.AddField(screeningrunmetric.FieldTotalCost, field.TypeFloat64, value)
	}
	if srmu.mutation.TotalCostCleared() {
		_spec.ClearField(screeningrunmetric.FieldTotalCost, field.TypeFloat64)
	}
	if value, ok := srmu.mutation.UpdatedAt(); ok {
		_spec.SetField(screeningrunmetric.FieldUpdatedAt, field.TypeTime, value)
	}
	if srmu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningrunmetric.TaskTable,
			Columns: []string{screeningrunmetric.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := srmu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningrunmetric.TaskTable,
			Columns: []string{screeningrunmetric.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(srmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, srmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{screeningrunmetric.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	srmu.mutation.done = true
	return n, nil
}

// ScreeningRunMetricUpdateOne is the builder for updating a single ScreeningRunMetric entity.
type ScreeningRunMetricUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ScreeningRunMetricMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (srmuo *ScreeningRunMetricUpdateOne) SetDeletedAt(t time.Time) *ScreeningRunMetricUpdateOne {
	srmuo.mutation.SetDeletedAt(t)
	return srmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (srmuo *ScreeningRunMetricUpdateOne) SetNillableDeletedAt(t *time.Time) *ScreeningRunMetricUpdateOne {
	if t != nil {
		srmuo.SetDeletedAt(*t)
	}
	return srmuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (srmuo *ScreeningRunMetricUpdateOne) ClearDeletedAt() *ScreeningRunMetricUpdateOne {
	srmuo.mutation.ClearDeletedAt()
	return srmuo
}

// SetTaskID sets the "task_id" field.
func (srmuo *ScreeningRunMetricUpdateOne) SetTaskID(u uuid.UUID) *ScreeningRunMetricUpdateOne {
	srmuo.mutation.SetTaskID(u)
	return srmuo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (srmuo *ScreeningRunMetricUpdateOne) SetNillableTaskID(u *uuid.UUID) *ScreeningRunMetricUpdateOne {
	if u != nil {
		srmuo.SetTaskID(*u)
	}
	return srmuo
}

// SetAvgScore sets the "avg_score" field.
func (srmuo *ScreeningRunMetricUpdateOne) SetAvgScore(f float64) *ScreeningRunMetricUpdateOne {
	srmuo.mutation.ResetAvgScore()
	srmuo.mutation.SetAvgScore(f)
	return srmuo
}

// SetNillableAvgScore sets the "avg_score" field if the given value is not nil.
func (srmuo *ScreeningRunMetricUpdateOne) SetNillableAvgScore(f *float64) *ScreeningRunMetricUpdateOne {
	if f != nil {
		srmuo.SetAvgScore(*f)
	}
	return srmuo
}

// AddAvgScore adds f to the "avg_score" field.
func (srmuo *ScreeningRunMetricUpdateOne) AddAvgScore(f float64) *ScreeningRunMetricUpdateOne {
	srmuo.mutation.AddAvgScore(f)
	return srmuo
}

// ClearAvgScore clears the value of the "avg_score" field.
func (srmuo *ScreeningRunMetricUpdateOne) ClearAvgScore() *ScreeningRunMetricUpdateOne {
	srmuo.mutation.ClearAvgScore()
	return srmuo
}

// SetHistogram sets the "histogram" field.
func (srmuo *ScreeningRunMetricUpdateOne) SetHistogram(m map[string]interface{}) *ScreeningRunMetricUpdateOne {
	srmuo.mutation.SetHistogram(m)
	return srmuo
}

// ClearHistogram clears the value of the "histogram" field.
func (srmuo *ScreeningRunMetricUpdateOne) ClearHistogram() *ScreeningRunMetricUpdateOne {
	srmuo.mutation.ClearHistogram()
	return srmuo
}

// SetTokensInput sets the "tokens_input" field.
func (srmuo *ScreeningRunMetricUpdateOne) SetTokensInput(i int64) *ScreeningRunMetricUpdateOne {
	srmuo.mutation.ResetTokensInput()
	srmuo.mutation.SetTokensInput(i)
	return srmuo
}

// SetNillableTokensInput sets the "tokens_input" field if the given value is not nil.
func (srmuo *ScreeningRunMetricUpdateOne) SetNillableTokensInput(i *int64) *ScreeningRunMetricUpdateOne {
	if i != nil {
		srmuo.SetTokensInput(*i)
	}
	return srmuo
}

// AddTokensInput adds i to the "tokens_input" field.
func (srmuo *ScreeningRunMetricUpdateOne) AddTokensInput(i int64) *ScreeningRunMetricUpdateOne {
	srmuo.mutation.AddTokensInput(i)
	return srmuo
}

// ClearTokensInput clears the value of the "tokens_input" field.
func (srmuo *ScreeningRunMetricUpdateOne) ClearTokensInput() *ScreeningRunMetricUpdateOne {
	srmuo.mutation.ClearTokensInput()
	return srmuo
}

// SetTokensOutput sets the "tokens_output" field.
func (srmuo *ScreeningRunMetricUpdateOne) SetTokensOutput(i int64) *ScreeningRunMetricUpdateOne {
	srmuo.mutation.ResetTokensOutput()
	srmuo.mutation.SetTokensOutput(i)
	return srmuo
}

// SetNillableTokensOutput sets the "tokens_output" field if the given value is not nil.
func (srmuo *ScreeningRunMetricUpdateOne) SetNillableTokensOutput(i *int64) *ScreeningRunMetricUpdateOne {
	if i != nil {
		srmuo.SetTokensOutput(*i)
	}
	return srmuo
}

// AddTokensOutput adds i to the "tokens_output" field.
func (srmuo *ScreeningRunMetricUpdateOne) AddTokensOutput(i int64) *ScreeningRunMetricUpdateOne {
	srmuo.mutation.AddTokensOutput(i)
	return srmuo
}

// ClearTokensOutput clears the value of the "tokens_output" field.
func (srmuo *ScreeningRunMetricUpdateOne) ClearTokensOutput() *ScreeningRunMetricUpdateOne {
	srmuo.mutation.ClearTokensOutput()
	return srmuo
}

// SetTotalCost sets the "total_cost" field.
func (srmuo *ScreeningRunMetricUpdateOne) SetTotalCost(f float64) *ScreeningRunMetricUpdateOne {
	srmuo.mutation.ResetTotalCost()
	srmuo.mutation.SetTotalCost(f)
	return srmuo
}

// SetNillableTotalCost sets the "total_cost" field if the given value is not nil.
func (srmuo *ScreeningRunMetricUpdateOne) SetNillableTotalCost(f *float64) *ScreeningRunMetricUpdateOne {
	if f != nil {
		srmuo.SetTotalCost(*f)
	}
	return srmuo
}

// AddTotalCost adds f to the "total_cost" field.
func (srmuo *ScreeningRunMetricUpdateOne) AddTotalCost(f float64) *ScreeningRunMetricUpdateOne {
	srmuo.mutation.AddTotalCost(f)
	return srmuo
}

// ClearTotalCost clears the value of the "total_cost" field.
func (srmuo *ScreeningRunMetricUpdateOne) ClearTotalCost() *ScreeningRunMetricUpdateOne {
	srmuo.mutation.ClearTotalCost()
	return srmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (srmuo *ScreeningRunMetricUpdateOne) SetUpdatedAt(t time.Time) *ScreeningRunMetricUpdateOne {
	srmuo.mutation.SetUpdatedAt(t)
	return srmuo
}

// SetTask sets the "task" edge to the ScreeningTask entity.
func (srmuo *ScreeningRunMetricUpdateOne) SetTask(s *ScreeningTask) *ScreeningRunMetricUpdateOne {
	return srmuo.SetTaskID(s.ID)
}

// Mutation returns the ScreeningRunMetricMutation object of the builder.
func (srmuo *ScreeningRunMetricUpdateOne) Mutation() *ScreeningRunMetricMutation {
	return srmuo.mutation
}

// ClearTask clears the "task" edge to the ScreeningTask entity.
func (srmuo *ScreeningRunMetricUpdateOne) ClearTask() *ScreeningRunMetricUpdateOne {
	srmuo.mutation.ClearTask()
	return srmuo
}

// Where appends a list predicates to the ScreeningRunMetricUpdate builder.
func (srmuo *ScreeningRunMetricUpdateOne) Where(ps ...predicate.ScreeningRunMetric) *ScreeningRunMetricUpdateOne {
	srmuo.mutation.Where(ps...)
	return srmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (srmuo *ScreeningRunMetricUpdateOne) Select(field string, fields ...string) *ScreeningRunMetricUpdateOne {
	srmuo.fields = append([]string{field}, fields...)
	return srmuo
}

// Save executes the query and returns the updated ScreeningRunMetric entity.
func (srmuo *ScreeningRunMetricUpdateOne) Save(ctx context.Context) (*ScreeningRunMetric, error) {
	if err := srmuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, srmuo.sqlSave, srmuo.mutation, srmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (srmuo *ScreeningRunMetricUpdateOne) SaveX(ctx context.Context) *ScreeningRunMetric {
	node, err := srmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (srmuo *ScreeningRunMetricUpdateOne) Exec(ctx context.Context) error {
	_, err := srmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srmuo *ScreeningRunMetricUpdateOne) ExecX(ctx context.Context) {
	if err := srmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (srmuo *ScreeningRunMetricUpdateOne) defaults() error {
	if _, ok := srmuo.mutation.UpdatedAt(); !ok {
		if screeningrunmetric.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningrunmetric.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := screeningrunmetric.UpdateDefaultUpdatedAt()
		srmuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (srmuo *ScreeningRunMetricUpdateOne) check() error {
	if srmuo.mutation.TaskCleared() && len(srmuo.mutation.TaskIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ScreeningRunMetric.task"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (srmuo *ScreeningRunMetricUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScreeningRunMetricUpdateOne {
	srmuo.modifiers = append(srmuo.modifiers, modifiers...)
	return srmuo
}

func (srmuo *ScreeningRunMetricUpdateOne) sqlSave(ctx context.Context) (_node *ScreeningRunMetric, err error) {
	if err := srmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(screeningrunmetric.Table, screeningrunmetric.Columns, sqlgraph.NewFieldSpec(screeningrunmetric.FieldID, field.TypeUUID))
	id, ok := srmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ScreeningRunMetric.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := srmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, screeningrunmetric.FieldID)
		for _, f := range fields {
			if !screeningrunmetric.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != screeningrunmetric.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := srmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := srmuo.mutation.DeletedAt(); ok {
		_spec.SetField(screeningrunmetric.FieldDeletedAt, field.TypeTime, value)
	}
	if srmuo.mutation.DeletedAtCleared() {
		_spec.ClearField(screeningrunmetric.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := srmuo.mutation.AvgScore(); ok {
		_spec.SetField(screeningrunmetric.FieldAvgScore, field.TypeFloat64, value)
	}
	if value, ok := srmuo.mutation.AddedAvgScore(); ok {
		_spec.AddField(screeningrunmetric.FieldAvgScore, field.TypeFloat64, value)
	}
	if srmuo.mutation.AvgScoreCleared() {
		_spec.ClearField(screeningrunmetric.FieldAvgScore, field.TypeFloat64)
	}
	if value, ok := srmuo.mutation.Histogram(); ok {
		_spec.SetField(screeningrunmetric.FieldHistogram, field.TypeJSON, value)
	}
	if srmuo.mutation.HistogramCleared() {
		_spec.ClearField(screeningrunmetric.FieldHistogram, field.TypeJSON)
	}
	if value, ok := srmuo.mutation.TokensInput(); ok {
		_spec.SetField(screeningrunmetric.FieldTokensInput, field.TypeInt64, value)
	}
	if value, ok := srmuo.mutation.AddedTokensInput(); ok {
		_spec.AddField(screeningrunmetric.FieldTokensInput, field.TypeInt64, value)
	}
	if srmuo.mutation.TokensInputCleared() {
		_spec.ClearField(screeningrunmetric.FieldTokensInput, field.TypeInt64)
	}
	if value, ok := srmuo.mutation.TokensOutput(); ok {
		_spec.SetField(screeningrunmetric.FieldTokensOutput, field.TypeInt64, value)
	}
	if value, ok := srmuo.mutation.AddedTokensOutput(); ok {
		_spec.AddField(screeningrunmetric.FieldTokensOutput, field.TypeInt64, value)
	}
	if srmuo.mutation.TokensOutputCleared() {
		_spec.ClearField(screeningrunmetric.FieldTokensOutput, field.TypeInt64)
	}
	if value, ok := srmuo.mutation.TotalCost(); ok {
		_spec.SetField(screeningrunmetric.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := srmuo.mutation.AddedTotalCost(); ok {
		_spec.AddField(screeningrunmetric.FieldTotalCost, field.TypeFloat64, value)
	}
	if srmuo.mutation.TotalCostCleared() {
		_spec.ClearField(screeningrunmetric.FieldTotalCost, field.TypeFloat64)
	}
	if value, ok := srmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(screeningrunmetric.FieldUpdatedAt, field.TypeTime, value)
	}
	if srmuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningrunmetric.TaskTable,
			Columns: []string{screeningrunmetric.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := srmuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningrunmetric.TaskTable,
			Columns: []string{screeningrunmetric.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(srmuo.modifiers...)
	_node = &ScreeningRunMetric{config: srmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, srmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{screeningrunmetric.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	srmuo.mutation.done = true
	return _node, nil
}
