// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobindustryrequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// JobIndustryRequirementUpdate is the builder for updating JobIndustryRequirement entities.
type JobIndustryRequirementUpdate struct {
	config
	hooks     []Hook
	mutation  *JobIndustryRequirementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the JobIndustryRequirementUpdate builder.
func (jiru *JobIndustryRequirementUpdate) Where(ps ...predicate.JobIndustryRequirement) *JobIndustryRequirementUpdate {
	jiru.mutation.Where(ps...)
	return jiru
}

// SetDeletedAt sets the "deleted_at" field.
func (jiru *JobIndustryRequirementUpdate) SetDeletedAt(t time.Time) *JobIndustryRequirementUpdate {
	jiru.mutation.SetDeletedAt(t)
	return jiru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jiru *JobIndustryRequirementUpdate) SetNillableDeletedAt(t *time.Time) *JobIndustryRequirementUpdate {
	if t != nil {
		jiru.SetDeletedAt(*t)
	}
	return jiru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jiru *JobIndustryRequirementUpdate) ClearDeletedAt() *JobIndustryRequirementUpdate {
	jiru.mutation.ClearDeletedAt()
	return jiru
}

// SetJobID sets the "job_id" field.
func (jiru *JobIndustryRequirementUpdate) SetJobID(u uuid.UUID) *JobIndustryRequirementUpdate {
	jiru.mutation.SetJobID(u)
	return jiru
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (jiru *JobIndustryRequirementUpdate) SetNillableJobID(u *uuid.UUID) *JobIndustryRequirementUpdate {
	if u != nil {
		jiru.SetJobID(*u)
	}
	return jiru
}

// SetIndustry sets the "industry" field.
func (jiru *JobIndustryRequirementUpdate) SetIndustry(s string) *JobIndustryRequirementUpdate {
	jiru.mutation.SetIndustry(s)
	return jiru
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (jiru *JobIndustryRequirementUpdate) SetNillableIndustry(s *string) *JobIndustryRequirementUpdate {
	if s != nil {
		jiru.SetIndustry(*s)
	}
	return jiru
}

// ClearIndustry clears the value of the "industry" field.
func (jiru *JobIndustryRequirementUpdate) ClearIndustry() *JobIndustryRequirementUpdate {
	jiru.mutation.ClearIndustry()
	return jiru
}

// SetCompanyName sets the "company_name" field.
func (jiru *JobIndustryRequirementUpdate) SetCompanyName(s string) *JobIndustryRequirementUpdate {
	jiru.mutation.SetCompanyName(s)
	return jiru
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (jiru *JobIndustryRequirementUpdate) SetNillableCompanyName(s *string) *JobIndustryRequirementUpdate {
	if s != nil {
		jiru.SetCompanyName(*s)
	}
	return jiru
}

// ClearCompanyName clears the value of the "company_name" field.
func (jiru *JobIndustryRequirementUpdate) ClearCompanyName() *JobIndustryRequirementUpdate {
	jiru.mutation.ClearCompanyName()
	return jiru
}

// SetUpdatedAt sets the "updated_at" field.
func (jiru *JobIndustryRequirementUpdate) SetUpdatedAt(t time.Time) *JobIndustryRequirementUpdate {
	jiru.mutation.SetUpdatedAt(t)
	return jiru
}

// SetJob sets the "job" edge to the JobPosition entity.
func (jiru *JobIndustryRequirementUpdate) SetJob(j *JobPosition) *JobIndustryRequirementUpdate {
	return jiru.SetJobID(j.ID)
}

// Mutation returns the JobIndustryRequirementMutation object of the builder.
func (jiru *JobIndustryRequirementUpdate) Mutation() *JobIndustryRequirementMutation {
	return jiru.mutation
}

// ClearJob clears the "job" edge to the JobPosition entity.
func (jiru *JobIndustryRequirementUpdate) ClearJob() *JobIndustryRequirementUpdate {
	jiru.mutation.ClearJob()
	return jiru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jiru *JobIndustryRequirementUpdate) Save(ctx context.Context) (int, error) {
	if err := jiru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, jiru.sqlSave, jiru.mutation, jiru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jiru *JobIndustryRequirementUpdate) SaveX(ctx context.Context) int {
	affected, err := jiru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jiru *JobIndustryRequirementUpdate) Exec(ctx context.Context) error {
	_, err := jiru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jiru *JobIndustryRequirementUpdate) ExecX(ctx context.Context) {
	if err := jiru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jiru *JobIndustryRequirementUpdate) defaults() error {
	if _, ok := jiru.mutation.UpdatedAt(); !ok {
		if jobindustryrequirement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized jobindustryrequirement.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := jobindustryrequirement.UpdateDefaultUpdatedAt()
		jiru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jiru *JobIndustryRequirementUpdate) check() error {
	if v, ok := jiru.mutation.Industry(); ok {
		if err := jobindustryrequirement.IndustryValidator(v); err != nil {
			return &ValidationError{Name: "industry", err: fmt.Errorf(`db: validator failed for field "JobIndustryRequirement.industry": %w`, err)}
		}
	}
	if v, ok := jiru.mutation.CompanyName(); ok {
		if err := jobindustryrequirement.CompanyNameValidator(v); err != nil {
			return &ValidationError{Name: "company_name", err: fmt.Errorf(`db: validator failed for field "JobIndustryRequirement.company_name": %w`, err)}
		}
	}
	if jiru.mutation.JobCleared() && len(jiru.mutation.JobIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "JobIndustryRequirement.job"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jiru *JobIndustryRequirementUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobIndustryRequirementUpdate {
	jiru.modifiers = append(jiru.modifiers, modifiers...)
	return jiru
}

func (jiru *JobIndustryRequirementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jiru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobindustryrequirement.Table, jobindustryrequirement.Columns, sqlgraph.NewFieldSpec(jobindustryrequirement.FieldID, field.TypeUUID))
	if ps := jiru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jiru.mutation.DeletedAt(); ok {
		_spec.SetField(jobindustryrequirement.FieldDeletedAt, field.TypeTime, value)
	}
	if jiru.mutation.DeletedAtCleared() {
		_spec.ClearField(jobindustryrequirement.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jiru.mutation.Industry(); ok {
		_spec.SetField(jobindustryrequirement.FieldIndustry, field.TypeString, value)
	}
	if jiru.mutation.IndustryCleared() {
		_spec.ClearField(jobindustryrequirement.FieldIndustry, field.TypeString)
	}
	if value, ok := jiru.mutation.CompanyName(); ok {
		_spec.SetField(jobindustryrequirement.FieldCompanyName, field.TypeString, value)
	}
	if jiru.mutation.CompanyNameCleared() {
		_spec.ClearField(jobindustryrequirement.FieldCompanyName, field.TypeString)
	}
	if value, ok := jiru.mutation.UpdatedAt(); ok {
		_spec.SetField(jobindustryrequirement.FieldUpdatedAt, field.TypeTime, value)
	}
	if jiru.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobindustryrequirement.JobTable,
			Columns: []string{jobindustryrequirement.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jiru.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobindustryrequirement.JobTable,
			Columns: []string{jobindustryrequirement.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(jiru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, jiru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobindustryrequirement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jiru.mutation.done = true
	return n, nil
}

// JobIndustryRequirementUpdateOne is the builder for updating a single JobIndustryRequirement entity.
type JobIndustryRequirementUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *JobIndustryRequirementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (jiruo *JobIndustryRequirementUpdateOne) SetDeletedAt(t time.Time) *JobIndustryRequirementUpdateOne {
	jiruo.mutation.SetDeletedAt(t)
	return jiruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jiruo *JobIndustryRequirementUpdateOne) SetNillableDeletedAt(t *time.Time) *JobIndustryRequirementUpdateOne {
	if t != nil {
		jiruo.SetDeletedAt(*t)
	}
	return jiruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jiruo *JobIndustryRequirementUpdateOne) ClearDeletedAt() *JobIndustryRequirementUpdateOne {
	jiruo.mutation.ClearDeletedAt()
	return jiruo
}

// SetJobID sets the "job_id" field.
func (jiruo *JobIndustryRequirementUpdateOne) SetJobID(u uuid.UUID) *JobIndustryRequirementUpdateOne {
	jiruo.mutation.SetJobID(u)
	return jiruo
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (jiruo *JobIndustryRequirementUpdateOne) SetNillableJobID(u *uuid.UUID) *JobIndustryRequirementUpdateOne {
	if u != nil {
		jiruo.SetJobID(*u)
	}
	return jiruo
}

// SetIndustry sets the "industry" field.
func (jiruo *JobIndustryRequirementUpdateOne) SetIndustry(s string) *JobIndustryRequirementUpdateOne {
	jiruo.mutation.SetIndustry(s)
	return jiruo
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (jiruo *JobIndustryRequirementUpdateOne) SetNillableIndustry(s *string) *JobIndustryRequirementUpdateOne {
	if s != nil {
		jiruo.SetIndustry(*s)
	}
	return jiruo
}

// ClearIndustry clears the value of the "industry" field.
func (jiruo *JobIndustryRequirementUpdateOne) ClearIndustry() *JobIndustryRequirementUpdateOne {
	jiruo.mutation.ClearIndustry()
	return jiruo
}

// SetCompanyName sets the "company_name" field.
func (jiruo *JobIndustryRequirementUpdateOne) SetCompanyName(s string) *JobIndustryRequirementUpdateOne {
	jiruo.mutation.SetCompanyName(s)
	return jiruo
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (jiruo *JobIndustryRequirementUpdateOne) SetNillableCompanyName(s *string) *JobIndustryRequirementUpdateOne {
	if s != nil {
		jiruo.SetCompanyName(*s)
	}
	return jiruo
}

// ClearCompanyName clears the value of the "company_name" field.
func (jiruo *JobIndustryRequirementUpdateOne) ClearCompanyName() *JobIndustryRequirementUpdateOne {
	jiruo.mutation.ClearCompanyName()
	return jiruo
}

// SetUpdatedAt sets the "updated_at" field.
func (jiruo *JobIndustryRequirementUpdateOne) SetUpdatedAt(t time.Time) *JobIndustryRequirementUpdateOne {
	jiruo.mutation.SetUpdatedAt(t)
	return jiruo
}

// SetJob sets the "job" edge to the JobPosition entity.
func (jiruo *JobIndustryRequirementUpdateOne) SetJob(j *JobPosition) *JobIndustryRequirementUpdateOne {
	return jiruo.SetJobID(j.ID)
}

// Mutation returns the JobIndustryRequirementMutation object of the builder.
func (jiruo *JobIndustryRequirementUpdateOne) Mutation() *JobIndustryRequirementMutation {
	return jiruo.mutation
}

// ClearJob clears the "job" edge to the JobPosition entity.
func (jiruo *JobIndustryRequirementUpdateOne) ClearJob() *JobIndustryRequirementUpdateOne {
	jiruo.mutation.ClearJob()
	return jiruo
}

// Where appends a list predicates to the JobIndustryRequirementUpdate builder.
func (jiruo *JobIndustryRequirementUpdateOne) Where(ps ...predicate.JobIndustryRequirement) *JobIndustryRequirementUpdateOne {
	jiruo.mutation.Where(ps...)
	return jiruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jiruo *JobIndustryRequirementUpdateOne) Select(field string, fields ...string) *JobIndustryRequirementUpdateOne {
	jiruo.fields = append([]string{field}, fields...)
	return jiruo
}

// Save executes the query and returns the updated JobIndustryRequirement entity.
func (jiruo *JobIndustryRequirementUpdateOne) Save(ctx context.Context) (*JobIndustryRequirement, error) {
	if err := jiruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jiruo.sqlSave, jiruo.mutation, jiruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jiruo *JobIndustryRequirementUpdateOne) SaveX(ctx context.Context) *JobIndustryRequirement {
	node, err := jiruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jiruo *JobIndustryRequirementUpdateOne) Exec(ctx context.Context) error {
	_, err := jiruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jiruo *JobIndustryRequirementUpdateOne) ExecX(ctx context.Context) {
	if err := jiruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jiruo *JobIndustryRequirementUpdateOne) defaults() error {
	if _, ok := jiruo.mutation.UpdatedAt(); !ok {
		if jobindustryrequirement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized jobindustryrequirement.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := jobindustryrequirement.UpdateDefaultUpdatedAt()
		jiruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jiruo *JobIndustryRequirementUpdateOne) check() error {
	if v, ok := jiruo.mutation.Industry(); ok {
		if err := jobindustryrequirement.IndustryValidator(v); err != nil {
			return &ValidationError{Name: "industry", err: fmt.Errorf(`db: validator failed for field "JobIndustryRequirement.industry": %w`, err)}
		}
	}
	if v, ok := jiruo.mutation.CompanyName(); ok {
		if err := jobindustryrequirement.CompanyNameValidator(v); err != nil {
			return &ValidationError{Name: "company_name", err: fmt.Errorf(`db: validator failed for field "JobIndustryRequirement.company_name": %w`, err)}
		}
	}
	if jiruo.mutation.JobCleared() && len(jiruo.mutation.JobIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "JobIndustryRequirement.job"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jiruo *JobIndustryRequirementUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobIndustryRequirementUpdateOne {
	jiruo.modifiers = append(jiruo.modifiers, modifiers...)
	return jiruo
}

func (jiruo *JobIndustryRequirementUpdateOne) sqlSave(ctx context.Context) (_node *JobIndustryRequirement, err error) {
	if err := jiruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobindustryrequirement.Table, jobindustryrequirement.Columns, sqlgraph.NewFieldSpec(jobindustryrequirement.FieldID, field.TypeUUID))
	id, ok := jiruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "JobIndustryRequirement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jiruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobindustryrequirement.FieldID)
		for _, f := range fields {
			if !jobindustryrequirement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != jobindustryrequirement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jiruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jiruo.mutation.DeletedAt(); ok {
		_spec.SetField(jobindustryrequirement.FieldDeletedAt, field.TypeTime, value)
	}
	if jiruo.mutation.DeletedAtCleared() {
		_spec.ClearField(jobindustryrequirement.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jiruo.mutation.Industry(); ok {
		_spec.SetField(jobindustryrequirement.FieldIndustry, field.TypeString, value)
	}
	if jiruo.mutation.IndustryCleared() {
		_spec.ClearField(jobindustryrequirement.FieldIndustry, field.TypeString)
	}
	if value, ok := jiruo.mutation.CompanyName(); ok {
		_spec.SetField(jobindustryrequirement.FieldCompanyName, field.TypeString, value)
	}
	if jiruo.mutation.CompanyNameCleared() {
		_spec.ClearField(jobindustryrequirement.FieldCompanyName, field.TypeString)
	}
	if value, ok := jiruo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobindustryrequirement.FieldUpdatedAt, field.TypeTime, value)
	}
	if jiruo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobindustryrequirement.JobTable,
			Columns: []string{jobindustryrequirement.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jiruo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobindustryrequirement.JobTable,
			Columns: []string{jobindustryrequirement.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(jiruo.modifiers...)
	_node = &JobIndustryRequirement{config: jiruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jiruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobindustryrequirement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jiruo.mutation.done = true
	return _node, nil
}
