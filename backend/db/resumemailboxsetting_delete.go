// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxsetting"
)

// ResumeMailboxSettingDelete is the builder for deleting a ResumeMailboxSetting entity.
type ResumeMailboxSettingDelete struct {
	config
	hooks    []Hook
	mutation *ResumeMailboxSettingMutation
}

// Where appends a list predicates to the ResumeMailboxSettingDelete builder.
func (rmsd *ResumeMailboxSettingDelete) Where(ps ...predicate.ResumeMailboxSetting) *ResumeMailboxSettingDelete {
	rmsd.mutation.Where(ps...)
	return rmsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rmsd *ResumeMailboxSettingDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rmsd.sqlExec, rmsd.mutation, rmsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rmsd *ResumeMailboxSettingDelete) ExecX(ctx context.Context) int {
	n, err := rmsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rmsd *ResumeMailboxSettingDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(resumemailboxsetting.Table, sqlgraph.NewFieldSpec(resumemailboxsetting.FieldID, field.TypeUUID))
	if ps := rmsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rmsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rmsd.mutation.done = true
	return affected, err
}

// ResumeMailboxSettingDeleteOne is the builder for deleting a single ResumeMailboxSetting entity.
type ResumeMailboxSettingDeleteOne struct {
	rmsd *ResumeMailboxSettingDelete
}

// Where appends a list predicates to the ResumeMailboxSettingDelete builder.
func (rmsdo *ResumeMailboxSettingDeleteOne) Where(ps ...predicate.ResumeMailboxSetting) *ResumeMailboxSettingDeleteOne {
	rmsdo.rmsd.mutation.Where(ps...)
	return rmsdo
}

// Exec executes the deletion query.
func (rmsdo *ResumeMailboxSettingDeleteOne) Exec(ctx context.Context) error {
	n, err := rmsdo.rmsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{resumemailboxsetting.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rmsdo *ResumeMailboxSettingDeleteOne) ExecX(ctx context.Context) {
	if err := rmsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
