// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxsetting"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxstatistic"
	"github.com/google/uuid"
)

// ResumeMailboxStatisticUpdate is the builder for updating ResumeMailboxStatistic entities.
type ResumeMailboxStatisticUpdate struct {
	config
	hooks     []Hook
	mutation  *ResumeMailboxStatisticMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ResumeMailboxStatisticUpdate builder.
func (rmsu *ResumeMailboxStatisticUpdate) Where(ps ...predicate.ResumeMailboxStatistic) *ResumeMailboxStatisticUpdate {
	rmsu.mutation.Where(ps...)
	return rmsu
}

// SetDeletedAt sets the "deleted_at" field.
func (rmsu *ResumeMailboxStatisticUpdate) SetDeletedAt(t time.Time) *ResumeMailboxStatisticUpdate {
	rmsu.mutation.SetDeletedAt(t)
	return rmsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rmsu *ResumeMailboxStatisticUpdate) SetNillableDeletedAt(t *time.Time) *ResumeMailboxStatisticUpdate {
	if t != nil {
		rmsu.SetDeletedAt(*t)
	}
	return rmsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rmsu *ResumeMailboxStatisticUpdate) ClearDeletedAt() *ResumeMailboxStatisticUpdate {
	rmsu.mutation.ClearDeletedAt()
	return rmsu
}

// SetMailboxID sets the "mailbox_id" field.
func (rmsu *ResumeMailboxStatisticUpdate) SetMailboxID(u uuid.UUID) *ResumeMailboxStatisticUpdate {
	rmsu.mutation.SetMailboxID(u)
	return rmsu
}

// SetNillableMailboxID sets the "mailbox_id" field if the given value is not nil.
func (rmsu *ResumeMailboxStatisticUpdate) SetNillableMailboxID(u *uuid.UUID) *ResumeMailboxStatisticUpdate {
	if u != nil {
		rmsu.SetMailboxID(*u)
	}
	return rmsu
}

// SetDate sets the "date" field.
func (rmsu *ResumeMailboxStatisticUpdate) SetDate(t time.Time) *ResumeMailboxStatisticUpdate {
	rmsu.mutation.SetDate(t)
	return rmsu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (rmsu *ResumeMailboxStatisticUpdate) SetNillableDate(t *time.Time) *ResumeMailboxStatisticUpdate {
	if t != nil {
		rmsu.SetDate(*t)
	}
	return rmsu
}

// SetSyncedEmails sets the "synced_emails" field.
func (rmsu *ResumeMailboxStatisticUpdate) SetSyncedEmails(i int) *ResumeMailboxStatisticUpdate {
	rmsu.mutation.ResetSyncedEmails()
	rmsu.mutation.SetSyncedEmails(i)
	return rmsu
}

// SetNillableSyncedEmails sets the "synced_emails" field if the given value is not nil.
func (rmsu *ResumeMailboxStatisticUpdate) SetNillableSyncedEmails(i *int) *ResumeMailboxStatisticUpdate {
	if i != nil {
		rmsu.SetSyncedEmails(*i)
	}
	return rmsu
}

// AddSyncedEmails adds i to the "synced_emails" field.
func (rmsu *ResumeMailboxStatisticUpdate) AddSyncedEmails(i int) *ResumeMailboxStatisticUpdate {
	rmsu.mutation.AddSyncedEmails(i)
	return rmsu
}

// SetParsedResumes sets the "parsed_resumes" field.
func (rmsu *ResumeMailboxStatisticUpdate) SetParsedResumes(i int) *ResumeMailboxStatisticUpdate {
	rmsu.mutation.ResetParsedResumes()
	rmsu.mutation.SetParsedResumes(i)
	return rmsu
}

// SetNillableParsedResumes sets the "parsed_resumes" field if the given value is not nil.
func (rmsu *ResumeMailboxStatisticUpdate) SetNillableParsedResumes(i *int) *ResumeMailboxStatisticUpdate {
	if i != nil {
		rmsu.SetParsedResumes(*i)
	}
	return rmsu
}

// AddParsedResumes adds i to the "parsed_resumes" field.
func (rmsu *ResumeMailboxStatisticUpdate) AddParsedResumes(i int) *ResumeMailboxStatisticUpdate {
	rmsu.mutation.AddParsedResumes(i)
	return rmsu
}

// SetFailedResumes sets the "failed_resumes" field.
func (rmsu *ResumeMailboxStatisticUpdate) SetFailedResumes(i int) *ResumeMailboxStatisticUpdate {
	rmsu.mutation.ResetFailedResumes()
	rmsu.mutation.SetFailedResumes(i)
	return rmsu
}

// SetNillableFailedResumes sets the "failed_resumes" field if the given value is not nil.
func (rmsu *ResumeMailboxStatisticUpdate) SetNillableFailedResumes(i *int) *ResumeMailboxStatisticUpdate {
	if i != nil {
		rmsu.SetFailedResumes(*i)
	}
	return rmsu
}

// AddFailedResumes adds i to the "failed_resumes" field.
func (rmsu *ResumeMailboxStatisticUpdate) AddFailedResumes(i int) *ResumeMailboxStatisticUpdate {
	rmsu.mutation.AddFailedResumes(i)
	return rmsu
}

// SetSkippedAttachments sets the "skipped_attachments" field.
func (rmsu *ResumeMailboxStatisticUpdate) SetSkippedAttachments(i int) *ResumeMailboxStatisticUpdate {
	rmsu.mutation.ResetSkippedAttachments()
	rmsu.mutation.SetSkippedAttachments(i)
	return rmsu
}

// SetNillableSkippedAttachments sets the "skipped_attachments" field if the given value is not nil.
func (rmsu *ResumeMailboxStatisticUpdate) SetNillableSkippedAttachments(i *int) *ResumeMailboxStatisticUpdate {
	if i != nil {
		rmsu.SetSkippedAttachments(*i)
	}
	return rmsu
}

// AddSkippedAttachments adds i to the "skipped_attachments" field.
func (rmsu *ResumeMailboxStatisticUpdate) AddSkippedAttachments(i int) *ResumeMailboxStatisticUpdate {
	rmsu.mutation.AddSkippedAttachments(i)
	return rmsu
}

// SetLastSyncDurationMs sets the "last_sync_duration_ms" field.
func (rmsu *ResumeMailboxStatisticUpdate) SetLastSyncDurationMs(i int) *ResumeMailboxStatisticUpdate {
	rmsu.mutation.ResetLastSyncDurationMs()
	rmsu.mutation.SetLastSyncDurationMs(i)
	return rmsu
}

// SetNillableLastSyncDurationMs sets the "last_sync_duration_ms" field if the given value is not nil.
func (rmsu *ResumeMailboxStatisticUpdate) SetNillableLastSyncDurationMs(i *int) *ResumeMailboxStatisticUpdate {
	if i != nil {
		rmsu.SetLastSyncDurationMs(*i)
	}
	return rmsu
}

// AddLastSyncDurationMs adds i to the "last_sync_duration_ms" field.
func (rmsu *ResumeMailboxStatisticUpdate) AddLastSyncDurationMs(i int) *ResumeMailboxStatisticUpdate {
	rmsu.mutation.AddLastSyncDurationMs(i)
	return rmsu
}

// SetUpdatedAt sets the "updated_at" field.
func (rmsu *ResumeMailboxStatisticUpdate) SetUpdatedAt(t time.Time) *ResumeMailboxStatisticUpdate {
	rmsu.mutation.SetUpdatedAt(t)
	return rmsu
}

// SetMailbox sets the "mailbox" edge to the ResumeMailboxSetting entity.
func (rmsu *ResumeMailboxStatisticUpdate) SetMailbox(r *ResumeMailboxSetting) *ResumeMailboxStatisticUpdate {
	return rmsu.SetMailboxID(r.ID)
}

// Mutation returns the ResumeMailboxStatisticMutation object of the builder.
func (rmsu *ResumeMailboxStatisticUpdate) Mutation() *ResumeMailboxStatisticMutation {
	return rmsu.mutation
}

// ClearMailbox clears the "mailbox" edge to the ResumeMailboxSetting entity.
func (rmsu *ResumeMailboxStatisticUpdate) ClearMailbox() *ResumeMailboxStatisticUpdate {
	rmsu.mutation.ClearMailbox()
	return rmsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rmsu *ResumeMailboxStatisticUpdate) Save(ctx context.Context) (int, error) {
	if err := rmsu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, rmsu.sqlSave, rmsu.mutation, rmsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmsu *ResumeMailboxStatisticUpdate) SaveX(ctx context.Context) int {
	affected, err := rmsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rmsu *ResumeMailboxStatisticUpdate) Exec(ctx context.Context) error {
	_, err := rmsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmsu *ResumeMailboxStatisticUpdate) ExecX(ctx context.Context) {
	if err := rmsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmsu *ResumeMailboxStatisticUpdate) defaults() error {
	if _, ok := rmsu.mutation.UpdatedAt(); !ok {
		if resumemailboxstatistic.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumemailboxstatistic.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumemailboxstatistic.UpdateDefaultUpdatedAt()
		rmsu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rmsu *ResumeMailboxStatisticUpdate) check() error {
	if rmsu.mutation.MailboxCleared() && len(rmsu.mutation.MailboxIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeMailboxStatistic.mailbox"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rmsu *ResumeMailboxStatisticUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeMailboxStatisticUpdate {
	rmsu.modifiers = append(rmsu.modifiers, modifiers...)
	return rmsu
}

func (rmsu *ResumeMailboxStatisticUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rmsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumemailboxstatistic.Table, resumemailboxstatistic.Columns, sqlgraph.NewFieldSpec(resumemailboxstatistic.FieldID, field.TypeUUID))
	if ps := rmsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmsu.mutation.DeletedAt(); ok {
		_spec.SetField(resumemailboxstatistic.FieldDeletedAt, field.TypeTime, value)
	}
	if rmsu.mutation.DeletedAtCleared() {
		_spec.ClearField(resumemailboxstatistic.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rmsu.mutation.Date(); ok {
		_spec.SetField(resumemailboxstatistic.FieldDate, field.TypeTime, value)
	}
	if value, ok := rmsu.mutation.SyncedEmails(); ok {
		_spec.SetField(resumemailboxstatistic.FieldSyncedEmails, field.TypeInt, value)
	}
	if value, ok := rmsu.mutation.AddedSyncedEmails(); ok {
		_spec.AddField(resumemailboxstatistic.FieldSyncedEmails, field.TypeInt, value)
	}
	if value, ok := rmsu.mutation.ParsedResumes(); ok {
		_spec.SetField(resumemailboxstatistic.FieldParsedResumes, field.TypeInt, value)
	}
	if value, ok := rmsu.mutation.AddedParsedResumes(); ok {
		_spec.AddField(resumemailboxstatistic.FieldParsedResumes, field.TypeInt, value)
	}
	if value, ok := rmsu.mutation.FailedResumes(); ok {
		_spec.SetField(resumemailboxstatistic.FieldFailedResumes, field.TypeInt, value)
	}
	if value, ok := rmsu.mutation.AddedFailedResumes(); ok {
		_spec.AddField(resumemailboxstatistic.FieldFailedResumes, field.TypeInt, value)
	}
	if value, ok := rmsu.mutation.SkippedAttachments(); ok {
		_spec.SetField(resumemailboxstatistic.FieldSkippedAttachments, field.TypeInt, value)
	}
	if value, ok := rmsu.mutation.AddedSkippedAttachments(); ok {
		_spec.AddField(resumemailboxstatistic.FieldSkippedAttachments, field.TypeInt, value)
	}
	if value, ok := rmsu.mutation.LastSyncDurationMs(); ok {
		_spec.SetField(resumemailboxstatistic.FieldLastSyncDurationMs, field.TypeInt, value)
	}
	if value, ok := rmsu.mutation.AddedLastSyncDurationMs(); ok {
		_spec.AddField(resumemailboxstatistic.FieldLastSyncDurationMs, field.TypeInt, value)
	}
	if value, ok := rmsu.mutation.UpdatedAt(); ok {
		_spec.SetField(resumemailboxstatistic.FieldUpdatedAt, field.TypeTime, value)
	}
	if rmsu.mutation.MailboxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumemailboxstatistic.MailboxTable,
			Columns: []string{resumemailboxstatistic.MailboxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxsetting.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmsu.mutation.MailboxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumemailboxstatistic.MailboxTable,
			Columns: []string{resumemailboxstatistic.MailboxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxsetting.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rmsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rmsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumemailboxstatistic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rmsu.mutation.done = true
	return n, nil
}

// ResumeMailboxStatisticUpdateOne is the builder for updating a single ResumeMailboxStatistic entity.
type ResumeMailboxStatisticUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ResumeMailboxStatisticMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetDeletedAt(t time.Time) *ResumeMailboxStatisticUpdateOne {
	rmsuo.mutation.SetDeletedAt(t)
	return rmsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetNillableDeletedAt(t *time.Time) *ResumeMailboxStatisticUpdateOne {
	if t != nil {
		rmsuo.SetDeletedAt(*t)
	}
	return rmsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rmsuo *ResumeMailboxStatisticUpdateOne) ClearDeletedAt() *ResumeMailboxStatisticUpdateOne {
	rmsuo.mutation.ClearDeletedAt()
	return rmsuo
}

// SetMailboxID sets the "mailbox_id" field.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetMailboxID(u uuid.UUID) *ResumeMailboxStatisticUpdateOne {
	rmsuo.mutation.SetMailboxID(u)
	return rmsuo
}

// SetNillableMailboxID sets the "mailbox_id" field if the given value is not nil.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetNillableMailboxID(u *uuid.UUID) *ResumeMailboxStatisticUpdateOne {
	if u != nil {
		rmsuo.SetMailboxID(*u)
	}
	return rmsuo
}

// SetDate sets the "date" field.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetDate(t time.Time) *ResumeMailboxStatisticUpdateOne {
	rmsuo.mutation.SetDate(t)
	return rmsuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetNillableDate(t *time.Time) *ResumeMailboxStatisticUpdateOne {
	if t != nil {
		rmsuo.SetDate(*t)
	}
	return rmsuo
}

// SetSyncedEmails sets the "synced_emails" field.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetSyncedEmails(i int) *ResumeMailboxStatisticUpdateOne {
	rmsuo.mutation.ResetSyncedEmails()
	rmsuo.mutation.SetSyncedEmails(i)
	return rmsuo
}

// SetNillableSyncedEmails sets the "synced_emails" field if the given value is not nil.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetNillableSyncedEmails(i *int) *ResumeMailboxStatisticUpdateOne {
	if i != nil {
		rmsuo.SetSyncedEmails(*i)
	}
	return rmsuo
}

// AddSyncedEmails adds i to the "synced_emails" field.
func (rmsuo *ResumeMailboxStatisticUpdateOne) AddSyncedEmails(i int) *ResumeMailboxStatisticUpdateOne {
	rmsuo.mutation.AddSyncedEmails(i)
	return rmsuo
}

// SetParsedResumes sets the "parsed_resumes" field.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetParsedResumes(i int) *ResumeMailboxStatisticUpdateOne {
	rmsuo.mutation.ResetParsedResumes()
	rmsuo.mutation.SetParsedResumes(i)
	return rmsuo
}

// SetNillableParsedResumes sets the "parsed_resumes" field if the given value is not nil.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetNillableParsedResumes(i *int) *ResumeMailboxStatisticUpdateOne {
	if i != nil {
		rmsuo.SetParsedResumes(*i)
	}
	return rmsuo
}

// AddParsedResumes adds i to the "parsed_resumes" field.
func (rmsuo *ResumeMailboxStatisticUpdateOne) AddParsedResumes(i int) *ResumeMailboxStatisticUpdateOne {
	rmsuo.mutation.AddParsedResumes(i)
	return rmsuo
}

// SetFailedResumes sets the "failed_resumes" field.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetFailedResumes(i int) *ResumeMailboxStatisticUpdateOne {
	rmsuo.mutation.ResetFailedResumes()
	rmsuo.mutation.SetFailedResumes(i)
	return rmsuo
}

// SetNillableFailedResumes sets the "failed_resumes" field if the given value is not nil.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetNillableFailedResumes(i *int) *ResumeMailboxStatisticUpdateOne {
	if i != nil {
		rmsuo.SetFailedResumes(*i)
	}
	return rmsuo
}

// AddFailedResumes adds i to the "failed_resumes" field.
func (rmsuo *ResumeMailboxStatisticUpdateOne) AddFailedResumes(i int) *ResumeMailboxStatisticUpdateOne {
	rmsuo.mutation.AddFailedResumes(i)
	return rmsuo
}

// SetSkippedAttachments sets the "skipped_attachments" field.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetSkippedAttachments(i int) *ResumeMailboxStatisticUpdateOne {
	rmsuo.mutation.ResetSkippedAttachments()
	rmsuo.mutation.SetSkippedAttachments(i)
	return rmsuo
}

// SetNillableSkippedAttachments sets the "skipped_attachments" field if the given value is not nil.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetNillableSkippedAttachments(i *int) *ResumeMailboxStatisticUpdateOne {
	if i != nil {
		rmsuo.SetSkippedAttachments(*i)
	}
	return rmsuo
}

// AddSkippedAttachments adds i to the "skipped_attachments" field.
func (rmsuo *ResumeMailboxStatisticUpdateOne) AddSkippedAttachments(i int) *ResumeMailboxStatisticUpdateOne {
	rmsuo.mutation.AddSkippedAttachments(i)
	return rmsuo
}

// SetLastSyncDurationMs sets the "last_sync_duration_ms" field.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetLastSyncDurationMs(i int) *ResumeMailboxStatisticUpdateOne {
	rmsuo.mutation.ResetLastSyncDurationMs()
	rmsuo.mutation.SetLastSyncDurationMs(i)
	return rmsuo
}

// SetNillableLastSyncDurationMs sets the "last_sync_duration_ms" field if the given value is not nil.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetNillableLastSyncDurationMs(i *int) *ResumeMailboxStatisticUpdateOne {
	if i != nil {
		rmsuo.SetLastSyncDurationMs(*i)
	}
	return rmsuo
}

// AddLastSyncDurationMs adds i to the "last_sync_duration_ms" field.
func (rmsuo *ResumeMailboxStatisticUpdateOne) AddLastSyncDurationMs(i int) *ResumeMailboxStatisticUpdateOne {
	rmsuo.mutation.AddLastSyncDurationMs(i)
	return rmsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetUpdatedAt(t time.Time) *ResumeMailboxStatisticUpdateOne {
	rmsuo.mutation.SetUpdatedAt(t)
	return rmsuo
}

// SetMailbox sets the "mailbox" edge to the ResumeMailboxSetting entity.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SetMailbox(r *ResumeMailboxSetting) *ResumeMailboxStatisticUpdateOne {
	return rmsuo.SetMailboxID(r.ID)
}

// Mutation returns the ResumeMailboxStatisticMutation object of the builder.
func (rmsuo *ResumeMailboxStatisticUpdateOne) Mutation() *ResumeMailboxStatisticMutation {
	return rmsuo.mutation
}

// ClearMailbox clears the "mailbox" edge to the ResumeMailboxSetting entity.
func (rmsuo *ResumeMailboxStatisticUpdateOne) ClearMailbox() *ResumeMailboxStatisticUpdateOne {
	rmsuo.mutation.ClearMailbox()
	return rmsuo
}

// Where appends a list predicates to the ResumeMailboxStatisticUpdate builder.
func (rmsuo *ResumeMailboxStatisticUpdateOne) Where(ps ...predicate.ResumeMailboxStatistic) *ResumeMailboxStatisticUpdateOne {
	rmsuo.mutation.Where(ps...)
	return rmsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rmsuo *ResumeMailboxStatisticUpdateOne) Select(field string, fields ...string) *ResumeMailboxStatisticUpdateOne {
	rmsuo.fields = append([]string{field}, fields...)
	return rmsuo
}

// Save executes the query and returns the updated ResumeMailboxStatistic entity.
func (rmsuo *ResumeMailboxStatisticUpdateOne) Save(ctx context.Context) (*ResumeMailboxStatistic, error) {
	if err := rmsuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rmsuo.sqlSave, rmsuo.mutation, rmsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmsuo *ResumeMailboxStatisticUpdateOne) SaveX(ctx context.Context) *ResumeMailboxStatistic {
	node, err := rmsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rmsuo *ResumeMailboxStatisticUpdateOne) Exec(ctx context.Context) error {
	_, err := rmsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmsuo *ResumeMailboxStatisticUpdateOne) ExecX(ctx context.Context) {
	if err := rmsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmsuo *ResumeMailboxStatisticUpdateOne) defaults() error {
	if _, ok := rmsuo.mutation.UpdatedAt(); !ok {
		if resumemailboxstatistic.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumemailboxstatistic.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumemailboxstatistic.UpdateDefaultUpdatedAt()
		rmsuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rmsuo *ResumeMailboxStatisticUpdateOne) check() error {
	if rmsuo.mutation.MailboxCleared() && len(rmsuo.mutation.MailboxIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeMailboxStatistic.mailbox"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rmsuo *ResumeMailboxStatisticUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeMailboxStatisticUpdateOne {
	rmsuo.modifiers = append(rmsuo.modifiers, modifiers...)
	return rmsuo
}

func (rmsuo *ResumeMailboxStatisticUpdateOne) sqlSave(ctx context.Context) (_node *ResumeMailboxStatistic, err error) {
	if err := rmsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumemailboxstatistic.Table, resumemailboxstatistic.Columns, sqlgraph.NewFieldSpec(resumemailboxstatistic.FieldID, field.TypeUUID))
	id, ok := rmsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ResumeMailboxStatistic.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rmsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resumemailboxstatistic.FieldID)
		for _, f := range fields {
			if !resumemailboxstatistic.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != resumemailboxstatistic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rmsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmsuo.mutation.DeletedAt(); ok {
		_spec.SetField(resumemailboxstatistic.FieldDeletedAt, field.TypeTime, value)
	}
	if rmsuo.mutation.DeletedAtCleared() {
		_spec.ClearField(resumemailboxstatistic.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rmsuo.mutation.Date(); ok {
		_spec.SetField(resumemailboxstatistic.FieldDate, field.TypeTime, value)
	}
	if value, ok := rmsuo.mutation.SyncedEmails(); ok {
		_spec.SetField(resumemailboxstatistic.FieldSyncedEmails, field.TypeInt, value)
	}
	if value, ok := rmsuo.mutation.AddedSyncedEmails(); ok {
		_spec.AddField(resumemailboxstatistic.FieldSyncedEmails, field.TypeInt, value)
	}
	if value, ok := rmsuo.mutation.ParsedResumes(); ok {
		_spec.SetField(resumemailboxstatistic.FieldParsedResumes, field.TypeInt, value)
	}
	if value, ok := rmsuo.mutation.AddedParsedResumes(); ok {
		_spec.AddField(resumemailboxstatistic.FieldParsedResumes, field.TypeInt, value)
	}
	if value, ok := rmsuo.mutation.FailedResumes(); ok {
		_spec.SetField(resumemailboxstatistic.FieldFailedResumes, field.TypeInt, value)
	}
	if value, ok := rmsuo.mutation.AddedFailedResumes(); ok {
		_spec.AddField(resumemailboxstatistic.FieldFailedResumes, field.TypeInt, value)
	}
	if value, ok := rmsuo.mutation.SkippedAttachments(); ok {
		_spec.SetField(resumemailboxstatistic.FieldSkippedAttachments, field.TypeInt, value)
	}
	if value, ok := rmsuo.mutation.AddedSkippedAttachments(); ok {
		_spec.AddField(resumemailboxstatistic.FieldSkippedAttachments, field.TypeInt, value)
	}
	if value, ok := rmsuo.mutation.LastSyncDurationMs(); ok {
		_spec.SetField(resumemailboxstatistic.FieldLastSyncDurationMs, field.TypeInt, value)
	}
	if value, ok := rmsuo.mutation.AddedLastSyncDurationMs(); ok {
		_spec.AddField(resumemailboxstatistic.FieldLastSyncDurationMs, field.TypeInt, value)
	}
	if value, ok := rmsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(resumemailboxstatistic.FieldUpdatedAt, field.TypeTime, value)
	}
	if rmsuo.mutation.MailboxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumemailboxstatistic.MailboxTable,
			Columns: []string{resumemailboxstatistic.MailboxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxsetting.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmsuo.mutation.MailboxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumemailboxstatistic.MailboxTable,
			Columns: []string{resumemailboxstatistic.MailboxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxsetting.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rmsuo.modifiers...)
	_node = &ResumeMailboxStatistic{config: rmsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rmsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumemailboxstatistic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rmsuo.mutation.done = true
	return _node, nil
}
