// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/notificationevent"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
)

// NotificationEventUpdate is the builder for updating NotificationEvent entities.
type NotificationEventUpdate struct {
	config
	hooks     []Hook
	mutation  *NotificationEventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NotificationEventUpdate builder.
func (neu *NotificationEventUpdate) Where(ps ...predicate.NotificationEvent) *NotificationEventUpdate {
	neu.mutation.Where(ps...)
	return neu
}

// SetDeletedAt sets the "deleted_at" field.
func (neu *NotificationEventUpdate) SetDeletedAt(t time.Time) *NotificationEventUpdate {
	neu.mutation.SetDeletedAt(t)
	return neu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (neu *NotificationEventUpdate) SetNillableDeletedAt(t *time.Time) *NotificationEventUpdate {
	if t != nil {
		neu.SetDeletedAt(*t)
	}
	return neu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (neu *NotificationEventUpdate) ClearDeletedAt() *NotificationEventUpdate {
	neu.mutation.ClearDeletedAt()
	return neu
}

// SetEventType sets the "event_type" field.
func (neu *NotificationEventUpdate) SetEventType(cet consts.NotificationEventType) *NotificationEventUpdate {
	neu.mutation.SetEventType(cet)
	return neu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (neu *NotificationEventUpdate) SetNillableEventType(cet *consts.NotificationEventType) *NotificationEventUpdate {
	if cet != nil {
		neu.SetEventType(*cet)
	}
	return neu
}

// SetChannel sets the "channel" field.
func (neu *NotificationEventUpdate) SetChannel(cc consts.NotificationChannel) *NotificationEventUpdate {
	neu.mutation.SetChannel(cc)
	return neu
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (neu *NotificationEventUpdate) SetNillableChannel(cc *consts.NotificationChannel) *NotificationEventUpdate {
	if cc != nil {
		neu.SetChannel(*cc)
	}
	return neu
}

// SetStatus sets the "status" field.
func (neu *NotificationEventUpdate) SetStatus(cs consts.NotificationStatus) *NotificationEventUpdate {
	neu.mutation.SetStatus(cs)
	return neu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (neu *NotificationEventUpdate) SetNillableStatus(cs *consts.NotificationStatus) *NotificationEventUpdate {
	if cs != nil {
		neu.SetStatus(*cs)
	}
	return neu
}

// SetPayload sets the "payload" field.
func (neu *NotificationEventUpdate) SetPayload(m map[string]interface{}) *NotificationEventUpdate {
	neu.mutation.SetPayload(m)
	return neu
}

// SetTemplateID sets the "template_id" field.
func (neu *NotificationEventUpdate) SetTemplateID(s string) *NotificationEventUpdate {
	neu.mutation.SetTemplateID(s)
	return neu
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (neu *NotificationEventUpdate) SetNillableTemplateID(s *string) *NotificationEventUpdate {
	if s != nil {
		neu.SetTemplateID(*s)
	}
	return neu
}

// SetTarget sets the "target" field.
func (neu *NotificationEventUpdate) SetTarget(s string) *NotificationEventUpdate {
	neu.mutation.SetTarget(s)
	return neu
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (neu *NotificationEventUpdate) SetNillableTarget(s *string) *NotificationEventUpdate {
	if s != nil {
		neu.SetTarget(*s)
	}
	return neu
}

// SetRetryCount sets the "retry_count" field.
func (neu *NotificationEventUpdate) SetRetryCount(i int) *NotificationEventUpdate {
	neu.mutation.ResetRetryCount()
	neu.mutation.SetRetryCount(i)
	return neu
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (neu *NotificationEventUpdate) SetNillableRetryCount(i *int) *NotificationEventUpdate {
	if i != nil {
		neu.SetRetryCount(*i)
	}
	return neu
}

// AddRetryCount adds i to the "retry_count" field.
func (neu *NotificationEventUpdate) AddRetryCount(i int) *NotificationEventUpdate {
	neu.mutation.AddRetryCount(i)
	return neu
}

// SetMaxRetry sets the "max_retry" field.
func (neu *NotificationEventUpdate) SetMaxRetry(i int) *NotificationEventUpdate {
	neu.mutation.ResetMaxRetry()
	neu.mutation.SetMaxRetry(i)
	return neu
}

// SetNillableMaxRetry sets the "max_retry" field if the given value is not nil.
func (neu *NotificationEventUpdate) SetNillableMaxRetry(i *int) *NotificationEventUpdate {
	if i != nil {
		neu.SetMaxRetry(*i)
	}
	return neu
}

// AddMaxRetry adds i to the "max_retry" field.
func (neu *NotificationEventUpdate) AddMaxRetry(i int) *NotificationEventUpdate {
	neu.mutation.AddMaxRetry(i)
	return neu
}

// SetTimeout sets the "timeout" field.
func (neu *NotificationEventUpdate) SetTimeout(i int) *NotificationEventUpdate {
	neu.mutation.ResetTimeout()
	neu.mutation.SetTimeout(i)
	return neu
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (neu *NotificationEventUpdate) SetNillableTimeout(i *int) *NotificationEventUpdate {
	if i != nil {
		neu.SetTimeout(*i)
	}
	return neu
}

// AddTimeout adds i to the "timeout" field.
func (neu *NotificationEventUpdate) AddTimeout(i int) *NotificationEventUpdate {
	neu.mutation.AddTimeout(i)
	return neu
}

// SetLastError sets the "last_error" field.
func (neu *NotificationEventUpdate) SetLastError(s string) *NotificationEventUpdate {
	neu.mutation.SetLastError(s)
	return neu
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (neu *NotificationEventUpdate) SetNillableLastError(s *string) *NotificationEventUpdate {
	if s != nil {
		neu.SetLastError(*s)
	}
	return neu
}

// ClearLastError clears the value of the "last_error" field.
func (neu *NotificationEventUpdate) ClearLastError() *NotificationEventUpdate {
	neu.mutation.ClearLastError()
	return neu
}

// SetTraceID sets the "trace_id" field.
func (neu *NotificationEventUpdate) SetTraceID(s string) *NotificationEventUpdate {
	neu.mutation.SetTraceID(s)
	return neu
}

// SetNillableTraceID sets the "trace_id" field if the given value is not nil.
func (neu *NotificationEventUpdate) SetNillableTraceID(s *string) *NotificationEventUpdate {
	if s != nil {
		neu.SetTraceID(*s)
	}
	return neu
}

// ClearTraceID clears the value of the "trace_id" field.
func (neu *NotificationEventUpdate) ClearTraceID() *NotificationEventUpdate {
	neu.mutation.ClearTraceID()
	return neu
}

// SetScheduledAt sets the "scheduled_at" field.
func (neu *NotificationEventUpdate) SetScheduledAt(t time.Time) *NotificationEventUpdate {
	neu.mutation.SetScheduledAt(t)
	return neu
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (neu *NotificationEventUpdate) SetNillableScheduledAt(t *time.Time) *NotificationEventUpdate {
	if t != nil {
		neu.SetScheduledAt(*t)
	}
	return neu
}

// ClearScheduledAt clears the value of the "scheduled_at" field.
func (neu *NotificationEventUpdate) ClearScheduledAt() *NotificationEventUpdate {
	neu.mutation.ClearScheduledAt()
	return neu
}

// SetDeliveredAt sets the "delivered_at" field.
func (neu *NotificationEventUpdate) SetDeliveredAt(t time.Time) *NotificationEventUpdate {
	neu.mutation.SetDeliveredAt(t)
	return neu
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (neu *NotificationEventUpdate) SetNillableDeliveredAt(t *time.Time) *NotificationEventUpdate {
	if t != nil {
		neu.SetDeliveredAt(*t)
	}
	return neu
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (neu *NotificationEventUpdate) ClearDeliveredAt() *NotificationEventUpdate {
	neu.mutation.ClearDeliveredAt()
	return neu
}

// SetUpdatedAt sets the "updated_at" field.
func (neu *NotificationEventUpdate) SetUpdatedAt(t time.Time) *NotificationEventUpdate {
	neu.mutation.SetUpdatedAt(t)
	return neu
}

// Mutation returns the NotificationEventMutation object of the builder.
func (neu *NotificationEventUpdate) Mutation() *NotificationEventMutation {
	return neu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (neu *NotificationEventUpdate) Save(ctx context.Context) (int, error) {
	if err := neu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, neu.sqlSave, neu.mutation, neu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (neu *NotificationEventUpdate) SaveX(ctx context.Context) int {
	affected, err := neu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (neu *NotificationEventUpdate) Exec(ctx context.Context) error {
	_, err := neu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (neu *NotificationEventUpdate) ExecX(ctx context.Context) {
	if err := neu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (neu *NotificationEventUpdate) defaults() error {
	if _, ok := neu.mutation.UpdatedAt(); !ok {
		if notificationevent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized notificationevent.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := notificationevent.UpdateDefaultUpdatedAt()
		neu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (neu *NotificationEventUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationEventUpdate {
	neu.modifiers = append(neu.modifiers, modifiers...)
	return neu
}

func (neu *NotificationEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(notificationevent.Table, notificationevent.Columns, sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeUUID))
	if ps := neu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := neu.mutation.DeletedAt(); ok {
		_spec.SetField(notificationevent.FieldDeletedAt, field.TypeTime, value)
	}
	if neu.mutation.DeletedAtCleared() {
		_spec.ClearField(notificationevent.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := neu.mutation.EventType(); ok {
		_spec.SetField(notificationevent.FieldEventType, field.TypeString, value)
	}
	if value, ok := neu.mutation.Channel(); ok {
		_spec.SetField(notificationevent.FieldChannel, field.TypeString, value)
	}
	if value, ok := neu.mutation.Status(); ok {
		_spec.SetField(notificationevent.FieldStatus, field.TypeString, value)
	}
	if value, ok := neu.mutation.Payload(); ok {
		_spec.SetField(notificationevent.FieldPayload, field.TypeJSON, value)
	}
	if value, ok := neu.mutation.TemplateID(); ok {
		_spec.SetField(notificationevent.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := neu.mutation.Target(); ok {
		_spec.SetField(notificationevent.FieldTarget, field.TypeString, value)
	}
	if value, ok := neu.mutation.RetryCount(); ok {
		_spec.SetField(notificationevent.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := neu.mutation.AddedRetryCount(); ok {
		_spec.AddField(notificationevent.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := neu.mutation.MaxRetry(); ok {
		_spec.SetField(notificationevent.FieldMaxRetry, field.TypeInt, value)
	}
	if value, ok := neu.mutation.AddedMaxRetry(); ok {
		_spec.AddField(notificationevent.FieldMaxRetry, field.TypeInt, value)
	}
	if value, ok := neu.mutation.Timeout(); ok {
		_spec.SetField(notificationevent.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := neu.mutation.AddedTimeout(); ok {
		_spec.AddField(notificationevent.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := neu.mutation.LastError(); ok {
		_spec.SetField(notificationevent.FieldLastError, field.TypeString, value)
	}
	if neu.mutation.LastErrorCleared() {
		_spec.ClearField(notificationevent.FieldLastError, field.TypeString)
	}
	if value, ok := neu.mutation.TraceID(); ok {
		_spec.SetField(notificationevent.FieldTraceID, field.TypeString, value)
	}
	if neu.mutation.TraceIDCleared() {
		_spec.ClearField(notificationevent.FieldTraceID, field.TypeString)
	}
	if value, ok := neu.mutation.ScheduledAt(); ok {
		_spec.SetField(notificationevent.FieldScheduledAt, field.TypeTime, value)
	}
	if neu.mutation.ScheduledAtCleared() {
		_spec.ClearField(notificationevent.FieldScheduledAt, field.TypeTime)
	}
	if value, ok := neu.mutation.DeliveredAt(); ok {
		_spec.SetField(notificationevent.FieldDeliveredAt, field.TypeTime, value)
	}
	if neu.mutation.DeliveredAtCleared() {
		_spec.ClearField(notificationevent.FieldDeliveredAt, field.TypeTime)
	}
	if value, ok := neu.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationevent.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(neu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, neu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	neu.mutation.done = true
	return n, nil
}

// NotificationEventUpdateOne is the builder for updating a single NotificationEvent entity.
type NotificationEventUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NotificationEventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (neuo *NotificationEventUpdateOne) SetDeletedAt(t time.Time) *NotificationEventUpdateOne {
	neuo.mutation.SetDeletedAt(t)
	return neuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (neuo *NotificationEventUpdateOne) SetNillableDeletedAt(t *time.Time) *NotificationEventUpdateOne {
	if t != nil {
		neuo.SetDeletedAt(*t)
	}
	return neuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (neuo *NotificationEventUpdateOne) ClearDeletedAt() *NotificationEventUpdateOne {
	neuo.mutation.ClearDeletedAt()
	return neuo
}

// SetEventType sets the "event_type" field.
func (neuo *NotificationEventUpdateOne) SetEventType(cet consts.NotificationEventType) *NotificationEventUpdateOne {
	neuo.mutation.SetEventType(cet)
	return neuo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (neuo *NotificationEventUpdateOne) SetNillableEventType(cet *consts.NotificationEventType) *NotificationEventUpdateOne {
	if cet != nil {
		neuo.SetEventType(*cet)
	}
	return neuo
}

// SetChannel sets the "channel" field.
func (neuo *NotificationEventUpdateOne) SetChannel(cc consts.NotificationChannel) *NotificationEventUpdateOne {
	neuo.mutation.SetChannel(cc)
	return neuo
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (neuo *NotificationEventUpdateOne) SetNillableChannel(cc *consts.NotificationChannel) *NotificationEventUpdateOne {
	if cc != nil {
		neuo.SetChannel(*cc)
	}
	return neuo
}

// SetStatus sets the "status" field.
func (neuo *NotificationEventUpdateOne) SetStatus(cs consts.NotificationStatus) *NotificationEventUpdateOne {
	neuo.mutation.SetStatus(cs)
	return neuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (neuo *NotificationEventUpdateOne) SetNillableStatus(cs *consts.NotificationStatus) *NotificationEventUpdateOne {
	if cs != nil {
		neuo.SetStatus(*cs)
	}
	return neuo
}

// SetPayload sets the "payload" field.
func (neuo *NotificationEventUpdateOne) SetPayload(m map[string]interface{}) *NotificationEventUpdateOne {
	neuo.mutation.SetPayload(m)
	return neuo
}

// SetTemplateID sets the "template_id" field.
func (neuo *NotificationEventUpdateOne) SetTemplateID(s string) *NotificationEventUpdateOne {
	neuo.mutation.SetTemplateID(s)
	return neuo
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (neuo *NotificationEventUpdateOne) SetNillableTemplateID(s *string) *NotificationEventUpdateOne {
	if s != nil {
		neuo.SetTemplateID(*s)
	}
	return neuo
}

// SetTarget sets the "target" field.
func (neuo *NotificationEventUpdateOne) SetTarget(s string) *NotificationEventUpdateOne {
	neuo.mutation.SetTarget(s)
	return neuo
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (neuo *NotificationEventUpdateOne) SetNillableTarget(s *string) *NotificationEventUpdateOne {
	if s != nil {
		neuo.SetTarget(*s)
	}
	return neuo
}

// SetRetryCount sets the "retry_count" field.
func (neuo *NotificationEventUpdateOne) SetRetryCount(i int) *NotificationEventUpdateOne {
	neuo.mutation.ResetRetryCount()
	neuo.mutation.SetRetryCount(i)
	return neuo
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (neuo *NotificationEventUpdateOne) SetNillableRetryCount(i *int) *NotificationEventUpdateOne {
	if i != nil {
		neuo.SetRetryCount(*i)
	}
	return neuo
}

// AddRetryCount adds i to the "retry_count" field.
func (neuo *NotificationEventUpdateOne) AddRetryCount(i int) *NotificationEventUpdateOne {
	neuo.mutation.AddRetryCount(i)
	return neuo
}

// SetMaxRetry sets the "max_retry" field.
func (neuo *NotificationEventUpdateOne) SetMaxRetry(i int) *NotificationEventUpdateOne {
	neuo.mutation.ResetMaxRetry()
	neuo.mutation.SetMaxRetry(i)
	return neuo
}

// SetNillableMaxRetry sets the "max_retry" field if the given value is not nil.
func (neuo *NotificationEventUpdateOne) SetNillableMaxRetry(i *int) *NotificationEventUpdateOne {
	if i != nil {
		neuo.SetMaxRetry(*i)
	}
	return neuo
}

// AddMaxRetry adds i to the "max_retry" field.
func (neuo *NotificationEventUpdateOne) AddMaxRetry(i int) *NotificationEventUpdateOne {
	neuo.mutation.AddMaxRetry(i)
	return neuo
}

// SetTimeout sets the "timeout" field.
func (neuo *NotificationEventUpdateOne) SetTimeout(i int) *NotificationEventUpdateOne {
	neuo.mutation.ResetTimeout()
	neuo.mutation.SetTimeout(i)
	return neuo
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (neuo *NotificationEventUpdateOne) SetNillableTimeout(i *int) *NotificationEventUpdateOne {
	if i != nil {
		neuo.SetTimeout(*i)
	}
	return neuo
}

// AddTimeout adds i to the "timeout" field.
func (neuo *NotificationEventUpdateOne) AddTimeout(i int) *NotificationEventUpdateOne {
	neuo.mutation.AddTimeout(i)
	return neuo
}

// SetLastError sets the "last_error" field.
func (neuo *NotificationEventUpdateOne) SetLastError(s string) *NotificationEventUpdateOne {
	neuo.mutation.SetLastError(s)
	return neuo
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (neuo *NotificationEventUpdateOne) SetNillableLastError(s *string) *NotificationEventUpdateOne {
	if s != nil {
		neuo.SetLastError(*s)
	}
	return neuo
}

// ClearLastError clears the value of the "last_error" field.
func (neuo *NotificationEventUpdateOne) ClearLastError() *NotificationEventUpdateOne {
	neuo.mutation.ClearLastError()
	return neuo
}

// SetTraceID sets the "trace_id" field.
func (neuo *NotificationEventUpdateOne) SetTraceID(s string) *NotificationEventUpdateOne {
	neuo.mutation.SetTraceID(s)
	return neuo
}

// SetNillableTraceID sets the "trace_id" field if the given value is not nil.
func (neuo *NotificationEventUpdateOne) SetNillableTraceID(s *string) *NotificationEventUpdateOne {
	if s != nil {
		neuo.SetTraceID(*s)
	}
	return neuo
}

// ClearTraceID clears the value of the "trace_id" field.
func (neuo *NotificationEventUpdateOne) ClearTraceID() *NotificationEventUpdateOne {
	neuo.mutation.ClearTraceID()
	return neuo
}

// SetScheduledAt sets the "scheduled_at" field.
func (neuo *NotificationEventUpdateOne) SetScheduledAt(t time.Time) *NotificationEventUpdateOne {
	neuo.mutation.SetScheduledAt(t)
	return neuo
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (neuo *NotificationEventUpdateOne) SetNillableScheduledAt(t *time.Time) *NotificationEventUpdateOne {
	if t != nil {
		neuo.SetScheduledAt(*t)
	}
	return neuo
}

// ClearScheduledAt clears the value of the "scheduled_at" field.
func (neuo *NotificationEventUpdateOne) ClearScheduledAt() *NotificationEventUpdateOne {
	neuo.mutation.ClearScheduledAt()
	return neuo
}

// SetDeliveredAt sets the "delivered_at" field.
func (neuo *NotificationEventUpdateOne) SetDeliveredAt(t time.Time) *NotificationEventUpdateOne {
	neuo.mutation.SetDeliveredAt(t)
	return neuo
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (neuo *NotificationEventUpdateOne) SetNillableDeliveredAt(t *time.Time) *NotificationEventUpdateOne {
	if t != nil {
		neuo.SetDeliveredAt(*t)
	}
	return neuo
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (neuo *NotificationEventUpdateOne) ClearDeliveredAt() *NotificationEventUpdateOne {
	neuo.mutation.ClearDeliveredAt()
	return neuo
}

// SetUpdatedAt sets the "updated_at" field.
func (neuo *NotificationEventUpdateOne) SetUpdatedAt(t time.Time) *NotificationEventUpdateOne {
	neuo.mutation.SetUpdatedAt(t)
	return neuo
}

// Mutation returns the NotificationEventMutation object of the builder.
func (neuo *NotificationEventUpdateOne) Mutation() *NotificationEventMutation {
	return neuo.mutation
}

// Where appends a list predicates to the NotificationEventUpdate builder.
func (neuo *NotificationEventUpdateOne) Where(ps ...predicate.NotificationEvent) *NotificationEventUpdateOne {
	neuo.mutation.Where(ps...)
	return neuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (neuo *NotificationEventUpdateOne) Select(field string, fields ...string) *NotificationEventUpdateOne {
	neuo.fields = append([]string{field}, fields...)
	return neuo
}

// Save executes the query and returns the updated NotificationEvent entity.
func (neuo *NotificationEventUpdateOne) Save(ctx context.Context) (*NotificationEvent, error) {
	if err := neuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, neuo.sqlSave, neuo.mutation, neuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (neuo *NotificationEventUpdateOne) SaveX(ctx context.Context) *NotificationEvent {
	node, err := neuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (neuo *NotificationEventUpdateOne) Exec(ctx context.Context) error {
	_, err := neuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (neuo *NotificationEventUpdateOne) ExecX(ctx context.Context) {
	if err := neuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (neuo *NotificationEventUpdateOne) defaults() error {
	if _, ok := neuo.mutation.UpdatedAt(); !ok {
		if notificationevent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized notificationevent.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := notificationevent.UpdateDefaultUpdatedAt()
		neuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (neuo *NotificationEventUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationEventUpdateOne {
	neuo.modifiers = append(neuo.modifiers, modifiers...)
	return neuo
}

func (neuo *NotificationEventUpdateOne) sqlSave(ctx context.Context) (_node *NotificationEvent, err error) {
	_spec := sqlgraph.NewUpdateSpec(notificationevent.Table, notificationevent.Columns, sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeUUID))
	id, ok := neuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "NotificationEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := neuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationevent.FieldID)
		for _, f := range fields {
			if !notificationevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != notificationevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := neuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := neuo.mutation.DeletedAt(); ok {
		_spec.SetField(notificationevent.FieldDeletedAt, field.TypeTime, value)
	}
	if neuo.mutation.DeletedAtCleared() {
		_spec.ClearField(notificationevent.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := neuo.mutation.EventType(); ok {
		_spec.SetField(notificationevent.FieldEventType, field.TypeString, value)
	}
	if value, ok := neuo.mutation.Channel(); ok {
		_spec.SetField(notificationevent.FieldChannel, field.TypeString, value)
	}
	if value, ok := neuo.mutation.Status(); ok {
		_spec.SetField(notificationevent.FieldStatus, field.TypeString, value)
	}
	if value, ok := neuo.mutation.Payload(); ok {
		_spec.SetField(notificationevent.FieldPayload, field.TypeJSON, value)
	}
	if value, ok := neuo.mutation.TemplateID(); ok {
		_spec.SetField(notificationevent.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := neuo.mutation.Target(); ok {
		_spec.SetField(notificationevent.FieldTarget, field.TypeString, value)
	}
	if value, ok := neuo.mutation.RetryCount(); ok {
		_spec.SetField(notificationevent.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := neuo.mutation.AddedRetryCount(); ok {
		_spec.AddField(notificationevent.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := neuo.mutation.MaxRetry(); ok {
		_spec.SetField(notificationevent.FieldMaxRetry, field.TypeInt, value)
	}
	if value, ok := neuo.mutation.AddedMaxRetry(); ok {
		_spec.AddField(notificationevent.FieldMaxRetry, field.TypeInt, value)
	}
	if value, ok := neuo.mutation.Timeout(); ok {
		_spec.SetField(notificationevent.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := neuo.mutation.AddedTimeout(); ok {
		_spec.AddField(notificationevent.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := neuo.mutation.LastError(); ok {
		_spec.SetField(notificationevent.FieldLastError, field.TypeString, value)
	}
	if neuo.mutation.LastErrorCleared() {
		_spec.ClearField(notificationevent.FieldLastError, field.TypeString)
	}
	if value, ok := neuo.mutation.TraceID(); ok {
		_spec.SetField(notificationevent.FieldTraceID, field.TypeString, value)
	}
	if neuo.mutation.TraceIDCleared() {
		_spec.ClearField(notificationevent.FieldTraceID, field.TypeString)
	}
	if value, ok := neuo.mutation.ScheduledAt(); ok {
		_spec.SetField(notificationevent.FieldScheduledAt, field.TypeTime, value)
	}
	if neuo.mutation.ScheduledAtCleared() {
		_spec.ClearField(notificationevent.FieldScheduledAt, field.TypeTime)
	}
	if value, ok := neuo.mutation.DeliveredAt(); ok {
		_spec.SetField(notificationevent.FieldDeliveredAt, field.TypeTime, value)
	}
	if neuo.mutation.DeliveredAtCleared() {
		_spec.ClearField(notificationevent.FieldDeliveredAt, field.TypeTime)
	}
	if value, ok := neuo.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationevent.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(neuo.modifiers...)
	_node = &NotificationEvent{config: neuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, neuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	neuo.mutation.done = true
	return _node, nil
}
