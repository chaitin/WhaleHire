// Code generated by ent, DO NOT EDIT.

package jobexperiencerequirement

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldEQ(FieldDeletedAt, v))
}

// JobID applies equality check predicate on the "job_id" field. It's identical to JobIDEQ.
func JobID(v uuid.UUID) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldEQ(FieldJobID, v))
}

// ExperienceType applies equality check predicate on the "experience_type" field. It's identical to ExperienceTypeEQ.
func ExperienceType(v string) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldEQ(FieldExperienceType, v))
}

// MinYears applies equality check predicate on the "min_years" field. It's identical to MinYearsEQ.
func MinYears(v int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldEQ(FieldMinYears, v))
}

// IdealYears applies equality check predicate on the "ideal_years" field. It's identical to IdealYearsEQ.
func IdealYears(v int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldEQ(FieldIdealYears, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNotNull(FieldDeletedAt))
}

// JobIDEQ applies the EQ predicate on the "job_id" field.
func JobIDEQ(v uuid.UUID) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldEQ(FieldJobID, v))
}

// JobIDNEQ applies the NEQ predicate on the "job_id" field.
func JobIDNEQ(v uuid.UUID) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNEQ(FieldJobID, v))
}

// JobIDIn applies the In predicate on the "job_id" field.
func JobIDIn(vs ...uuid.UUID) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldIn(FieldJobID, vs...))
}

// JobIDNotIn applies the NotIn predicate on the "job_id" field.
func JobIDNotIn(vs ...uuid.UUID) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNotIn(FieldJobID, vs...))
}

// ExperienceTypeEQ applies the EQ predicate on the "experience_type" field.
func ExperienceTypeEQ(v string) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldEQ(FieldExperienceType, v))
}

// ExperienceTypeNEQ applies the NEQ predicate on the "experience_type" field.
func ExperienceTypeNEQ(v string) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNEQ(FieldExperienceType, v))
}

// ExperienceTypeIn applies the In predicate on the "experience_type" field.
func ExperienceTypeIn(vs ...string) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldIn(FieldExperienceType, vs...))
}

// ExperienceTypeNotIn applies the NotIn predicate on the "experience_type" field.
func ExperienceTypeNotIn(vs ...string) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNotIn(FieldExperienceType, vs...))
}

// ExperienceTypeGT applies the GT predicate on the "experience_type" field.
func ExperienceTypeGT(v string) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldGT(FieldExperienceType, v))
}

// ExperienceTypeGTE applies the GTE predicate on the "experience_type" field.
func ExperienceTypeGTE(v string) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldGTE(FieldExperienceType, v))
}

// ExperienceTypeLT applies the LT predicate on the "experience_type" field.
func ExperienceTypeLT(v string) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldLT(FieldExperienceType, v))
}

// ExperienceTypeLTE applies the LTE predicate on the "experience_type" field.
func ExperienceTypeLTE(v string) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldLTE(FieldExperienceType, v))
}

// ExperienceTypeContains applies the Contains predicate on the "experience_type" field.
func ExperienceTypeContains(v string) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldContains(FieldExperienceType, v))
}

// ExperienceTypeHasPrefix applies the HasPrefix predicate on the "experience_type" field.
func ExperienceTypeHasPrefix(v string) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldHasPrefix(FieldExperienceType, v))
}

// ExperienceTypeHasSuffix applies the HasSuffix predicate on the "experience_type" field.
func ExperienceTypeHasSuffix(v string) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldHasSuffix(FieldExperienceType, v))
}

// ExperienceTypeIsNil applies the IsNil predicate on the "experience_type" field.
func ExperienceTypeIsNil() predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldIsNull(FieldExperienceType))
}

// ExperienceTypeNotNil applies the NotNil predicate on the "experience_type" field.
func ExperienceTypeNotNil() predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNotNull(FieldExperienceType))
}

// ExperienceTypeEqualFold applies the EqualFold predicate on the "experience_type" field.
func ExperienceTypeEqualFold(v string) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldEqualFold(FieldExperienceType, v))
}

// ExperienceTypeContainsFold applies the ContainsFold predicate on the "experience_type" field.
func ExperienceTypeContainsFold(v string) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldContainsFold(FieldExperienceType, v))
}

// MinYearsEQ applies the EQ predicate on the "min_years" field.
func MinYearsEQ(v int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldEQ(FieldMinYears, v))
}

// MinYearsNEQ applies the NEQ predicate on the "min_years" field.
func MinYearsNEQ(v int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNEQ(FieldMinYears, v))
}

// MinYearsIn applies the In predicate on the "min_years" field.
func MinYearsIn(vs ...int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldIn(FieldMinYears, vs...))
}

// MinYearsNotIn applies the NotIn predicate on the "min_years" field.
func MinYearsNotIn(vs ...int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNotIn(FieldMinYears, vs...))
}

// MinYearsGT applies the GT predicate on the "min_years" field.
func MinYearsGT(v int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldGT(FieldMinYears, v))
}

// MinYearsGTE applies the GTE predicate on the "min_years" field.
func MinYearsGTE(v int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldGTE(FieldMinYears, v))
}

// MinYearsLT applies the LT predicate on the "min_years" field.
func MinYearsLT(v int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldLT(FieldMinYears, v))
}

// MinYearsLTE applies the LTE predicate on the "min_years" field.
func MinYearsLTE(v int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldLTE(FieldMinYears, v))
}

// MinYearsIsNil applies the IsNil predicate on the "min_years" field.
func MinYearsIsNil() predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldIsNull(FieldMinYears))
}

// MinYearsNotNil applies the NotNil predicate on the "min_years" field.
func MinYearsNotNil() predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNotNull(FieldMinYears))
}

// IdealYearsEQ applies the EQ predicate on the "ideal_years" field.
func IdealYearsEQ(v int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldEQ(FieldIdealYears, v))
}

// IdealYearsNEQ applies the NEQ predicate on the "ideal_years" field.
func IdealYearsNEQ(v int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNEQ(FieldIdealYears, v))
}

// IdealYearsIn applies the In predicate on the "ideal_years" field.
func IdealYearsIn(vs ...int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldIn(FieldIdealYears, vs...))
}

// IdealYearsNotIn applies the NotIn predicate on the "ideal_years" field.
func IdealYearsNotIn(vs ...int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNotIn(FieldIdealYears, vs...))
}

// IdealYearsGT applies the GT predicate on the "ideal_years" field.
func IdealYearsGT(v int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldGT(FieldIdealYears, v))
}

// IdealYearsGTE applies the GTE predicate on the "ideal_years" field.
func IdealYearsGTE(v int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldGTE(FieldIdealYears, v))
}

// IdealYearsLT applies the LT predicate on the "ideal_years" field.
func IdealYearsLT(v int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldLT(FieldIdealYears, v))
}

// IdealYearsLTE applies the LTE predicate on the "ideal_years" field.
func IdealYearsLTE(v int) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldLTE(FieldIdealYears, v))
}

// IdealYearsIsNil applies the IsNil predicate on the "ideal_years" field.
func IdealYearsIsNil() predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldIsNull(FieldIdealYears))
}

// IdealYearsNotNil applies the NotNil predicate on the "ideal_years" field.
func IdealYearsNotNil() predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNotNull(FieldIdealYears))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasJob applies the HasEdge predicate on the "job" edge.
func HasJob() predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobWith applies the HasEdge predicate on the "job" edge with a given conditions (other predicates).
func HasJobWith(preds ...predicate.JobPosition) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(func(s *sql.Selector) {
		step := newJobStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JobExperienceRequirement) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JobExperienceRequirement) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JobExperienceRequirement) predicate.JobExperienceRequirement {
	return predicate.JobExperienceRequirement(sql.NotPredicates(p))
}
