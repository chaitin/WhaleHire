// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/notificationsetting"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
)

// NotificationSettingUpdate is the builder for updating NotificationSetting entities.
type NotificationSettingUpdate struct {
	config
	hooks     []Hook
	mutation  *NotificationSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NotificationSettingUpdate builder.
func (nsu *NotificationSettingUpdate) Where(ps ...predicate.NotificationSetting) *NotificationSettingUpdate {
	nsu.mutation.Where(ps...)
	return nsu
}

// SetDeletedAt sets the "deleted_at" field.
func (nsu *NotificationSettingUpdate) SetDeletedAt(t time.Time) *NotificationSettingUpdate {
	nsu.mutation.SetDeletedAt(t)
	return nsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nsu *NotificationSettingUpdate) SetNillableDeletedAt(t *time.Time) *NotificationSettingUpdate {
	if t != nil {
		nsu.SetDeletedAt(*t)
	}
	return nsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (nsu *NotificationSettingUpdate) ClearDeletedAt() *NotificationSettingUpdate {
	nsu.mutation.ClearDeletedAt()
	return nsu
}

// SetName sets the "name" field.
func (nsu *NotificationSettingUpdate) SetName(s string) *NotificationSettingUpdate {
	nsu.mutation.SetName(s)
	return nsu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nsu *NotificationSettingUpdate) SetNillableName(s *string) *NotificationSettingUpdate {
	if s != nil {
		nsu.SetName(*s)
	}
	return nsu
}

// SetChannel sets the "channel" field.
func (nsu *NotificationSettingUpdate) SetChannel(cc consts.NotificationChannel) *NotificationSettingUpdate {
	nsu.mutation.SetChannel(cc)
	return nsu
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (nsu *NotificationSettingUpdate) SetNillableChannel(cc *consts.NotificationChannel) *NotificationSettingUpdate {
	if cc != nil {
		nsu.SetChannel(*cc)
	}
	return nsu
}

// SetEnabled sets the "enabled" field.
func (nsu *NotificationSettingUpdate) SetEnabled(b bool) *NotificationSettingUpdate {
	nsu.mutation.SetEnabled(b)
	return nsu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (nsu *NotificationSettingUpdate) SetNillableEnabled(b *bool) *NotificationSettingUpdate {
	if b != nil {
		nsu.SetEnabled(*b)
	}
	return nsu
}

// SetDingtalkConfig sets the "dingtalk_config" field.
func (nsu *NotificationSettingUpdate) SetDingtalkConfig(m map[string]interface{}) *NotificationSettingUpdate {
	nsu.mutation.SetDingtalkConfig(m)
	return nsu
}

// ClearDingtalkConfig clears the value of the "dingtalk_config" field.
func (nsu *NotificationSettingUpdate) ClearDingtalkConfig() *NotificationSettingUpdate {
	nsu.mutation.ClearDingtalkConfig()
	return nsu
}

// SetMaxRetry sets the "max_retry" field.
func (nsu *NotificationSettingUpdate) SetMaxRetry(i int) *NotificationSettingUpdate {
	nsu.mutation.ResetMaxRetry()
	nsu.mutation.SetMaxRetry(i)
	return nsu
}

// SetNillableMaxRetry sets the "max_retry" field if the given value is not nil.
func (nsu *NotificationSettingUpdate) SetNillableMaxRetry(i *int) *NotificationSettingUpdate {
	if i != nil {
		nsu.SetMaxRetry(*i)
	}
	return nsu
}

// AddMaxRetry adds i to the "max_retry" field.
func (nsu *NotificationSettingUpdate) AddMaxRetry(i int) *NotificationSettingUpdate {
	nsu.mutation.AddMaxRetry(i)
	return nsu
}

// SetTimeout sets the "timeout" field.
func (nsu *NotificationSettingUpdate) SetTimeout(i int) *NotificationSettingUpdate {
	nsu.mutation.ResetTimeout()
	nsu.mutation.SetTimeout(i)
	return nsu
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (nsu *NotificationSettingUpdate) SetNillableTimeout(i *int) *NotificationSettingUpdate {
	if i != nil {
		nsu.SetTimeout(*i)
	}
	return nsu
}

// AddTimeout adds i to the "timeout" field.
func (nsu *NotificationSettingUpdate) AddTimeout(i int) *NotificationSettingUpdate {
	nsu.mutation.AddTimeout(i)
	return nsu
}

// SetDescription sets the "description" field.
func (nsu *NotificationSettingUpdate) SetDescription(s string) *NotificationSettingUpdate {
	nsu.mutation.SetDescription(s)
	return nsu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nsu *NotificationSettingUpdate) SetNillableDescription(s *string) *NotificationSettingUpdate {
	if s != nil {
		nsu.SetDescription(*s)
	}
	return nsu
}

// ClearDescription clears the value of the "description" field.
func (nsu *NotificationSettingUpdate) ClearDescription() *NotificationSettingUpdate {
	nsu.mutation.ClearDescription()
	return nsu
}

// SetCreatedAt sets the "created_at" field.
func (nsu *NotificationSettingUpdate) SetCreatedAt(t time.Time) *NotificationSettingUpdate {
	nsu.mutation.SetCreatedAt(t)
	return nsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nsu *NotificationSettingUpdate) SetNillableCreatedAt(t *time.Time) *NotificationSettingUpdate {
	if t != nil {
		nsu.SetCreatedAt(*t)
	}
	return nsu
}

// SetUpdatedAt sets the "updated_at" field.
func (nsu *NotificationSettingUpdate) SetUpdatedAt(t time.Time) *NotificationSettingUpdate {
	nsu.mutation.SetUpdatedAt(t)
	return nsu
}

// Mutation returns the NotificationSettingMutation object of the builder.
func (nsu *NotificationSettingUpdate) Mutation() *NotificationSettingMutation {
	return nsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nsu *NotificationSettingUpdate) Save(ctx context.Context) (int, error) {
	if err := nsu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, nsu.sqlSave, nsu.mutation, nsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nsu *NotificationSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := nsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nsu *NotificationSettingUpdate) Exec(ctx context.Context) error {
	_, err := nsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsu *NotificationSettingUpdate) ExecX(ctx context.Context) {
	if err := nsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nsu *NotificationSettingUpdate) defaults() error {
	if _, ok := nsu.mutation.UpdatedAt(); !ok {
		if notificationsetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized notificationsetting.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := notificationsetting.UpdateDefaultUpdatedAt()
		nsu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (nsu *NotificationSettingUpdate) check() error {
	if v, ok := nsu.mutation.Name(); ok {
		if err := notificationsetting.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "NotificationSetting.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nsu *NotificationSettingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationSettingUpdate {
	nsu.modifiers = append(nsu.modifiers, modifiers...)
	return nsu
}

func (nsu *NotificationSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationsetting.Table, notificationsetting.Columns, sqlgraph.NewFieldSpec(notificationsetting.FieldID, field.TypeUUID))
	if ps := nsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nsu.mutation.DeletedAt(); ok {
		_spec.SetField(notificationsetting.FieldDeletedAt, field.TypeTime, value)
	}
	if nsu.mutation.DeletedAtCleared() {
		_spec.ClearField(notificationsetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := nsu.mutation.Name(); ok {
		_spec.SetField(notificationsetting.FieldName, field.TypeString, value)
	}
	if value, ok := nsu.mutation.Channel(); ok {
		_spec.SetField(notificationsetting.FieldChannel, field.TypeString, value)
	}
	if value, ok := nsu.mutation.Enabled(); ok {
		_spec.SetField(notificationsetting.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := nsu.mutation.DingtalkConfig(); ok {
		_spec.SetField(notificationsetting.FieldDingtalkConfig, field.TypeJSON, value)
	}
	if nsu.mutation.DingtalkConfigCleared() {
		_spec.ClearField(notificationsetting.FieldDingtalkConfig, field.TypeJSON)
	}
	if value, ok := nsu.mutation.MaxRetry(); ok {
		_spec.SetField(notificationsetting.FieldMaxRetry, field.TypeInt, value)
	}
	if value, ok := nsu.mutation.AddedMaxRetry(); ok {
		_spec.AddField(notificationsetting.FieldMaxRetry, field.TypeInt, value)
	}
	if value, ok := nsu.mutation.Timeout(); ok {
		_spec.SetField(notificationsetting.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := nsu.mutation.AddedTimeout(); ok {
		_spec.AddField(notificationsetting.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := nsu.mutation.Description(); ok {
		_spec.SetField(notificationsetting.FieldDescription, field.TypeString, value)
	}
	if nsu.mutation.DescriptionCleared() {
		_spec.ClearField(notificationsetting.FieldDescription, field.TypeString)
	}
	if value, ok := nsu.mutation.CreatedAt(); ok {
		_spec.SetField(notificationsetting.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nsu.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(nsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, nsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nsu.mutation.done = true
	return n, nil
}

// NotificationSettingUpdateOne is the builder for updating a single NotificationSetting entity.
type NotificationSettingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NotificationSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (nsuo *NotificationSettingUpdateOne) SetDeletedAt(t time.Time) *NotificationSettingUpdateOne {
	nsuo.mutation.SetDeletedAt(t)
	return nsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nsuo *NotificationSettingUpdateOne) SetNillableDeletedAt(t *time.Time) *NotificationSettingUpdateOne {
	if t != nil {
		nsuo.SetDeletedAt(*t)
	}
	return nsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (nsuo *NotificationSettingUpdateOne) ClearDeletedAt() *NotificationSettingUpdateOne {
	nsuo.mutation.ClearDeletedAt()
	return nsuo
}

// SetName sets the "name" field.
func (nsuo *NotificationSettingUpdateOne) SetName(s string) *NotificationSettingUpdateOne {
	nsuo.mutation.SetName(s)
	return nsuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nsuo *NotificationSettingUpdateOne) SetNillableName(s *string) *NotificationSettingUpdateOne {
	if s != nil {
		nsuo.SetName(*s)
	}
	return nsuo
}

// SetChannel sets the "channel" field.
func (nsuo *NotificationSettingUpdateOne) SetChannel(cc consts.NotificationChannel) *NotificationSettingUpdateOne {
	nsuo.mutation.SetChannel(cc)
	return nsuo
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (nsuo *NotificationSettingUpdateOne) SetNillableChannel(cc *consts.NotificationChannel) *NotificationSettingUpdateOne {
	if cc != nil {
		nsuo.SetChannel(*cc)
	}
	return nsuo
}

// SetEnabled sets the "enabled" field.
func (nsuo *NotificationSettingUpdateOne) SetEnabled(b bool) *NotificationSettingUpdateOne {
	nsuo.mutation.SetEnabled(b)
	return nsuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (nsuo *NotificationSettingUpdateOne) SetNillableEnabled(b *bool) *NotificationSettingUpdateOne {
	if b != nil {
		nsuo.SetEnabled(*b)
	}
	return nsuo
}

// SetDingtalkConfig sets the "dingtalk_config" field.
func (nsuo *NotificationSettingUpdateOne) SetDingtalkConfig(m map[string]interface{}) *NotificationSettingUpdateOne {
	nsuo.mutation.SetDingtalkConfig(m)
	return nsuo
}

// ClearDingtalkConfig clears the value of the "dingtalk_config" field.
func (nsuo *NotificationSettingUpdateOne) ClearDingtalkConfig() *NotificationSettingUpdateOne {
	nsuo.mutation.ClearDingtalkConfig()
	return nsuo
}

// SetMaxRetry sets the "max_retry" field.
func (nsuo *NotificationSettingUpdateOne) SetMaxRetry(i int) *NotificationSettingUpdateOne {
	nsuo.mutation.ResetMaxRetry()
	nsuo.mutation.SetMaxRetry(i)
	return nsuo
}

// SetNillableMaxRetry sets the "max_retry" field if the given value is not nil.
func (nsuo *NotificationSettingUpdateOne) SetNillableMaxRetry(i *int) *NotificationSettingUpdateOne {
	if i != nil {
		nsuo.SetMaxRetry(*i)
	}
	return nsuo
}

// AddMaxRetry adds i to the "max_retry" field.
func (nsuo *NotificationSettingUpdateOne) AddMaxRetry(i int) *NotificationSettingUpdateOne {
	nsuo.mutation.AddMaxRetry(i)
	return nsuo
}

// SetTimeout sets the "timeout" field.
func (nsuo *NotificationSettingUpdateOne) SetTimeout(i int) *NotificationSettingUpdateOne {
	nsuo.mutation.ResetTimeout()
	nsuo.mutation.SetTimeout(i)
	return nsuo
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (nsuo *NotificationSettingUpdateOne) SetNillableTimeout(i *int) *NotificationSettingUpdateOne {
	if i != nil {
		nsuo.SetTimeout(*i)
	}
	return nsuo
}

// AddTimeout adds i to the "timeout" field.
func (nsuo *NotificationSettingUpdateOne) AddTimeout(i int) *NotificationSettingUpdateOne {
	nsuo.mutation.AddTimeout(i)
	return nsuo
}

// SetDescription sets the "description" field.
func (nsuo *NotificationSettingUpdateOne) SetDescription(s string) *NotificationSettingUpdateOne {
	nsuo.mutation.SetDescription(s)
	return nsuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nsuo *NotificationSettingUpdateOne) SetNillableDescription(s *string) *NotificationSettingUpdateOne {
	if s != nil {
		nsuo.SetDescription(*s)
	}
	return nsuo
}

// ClearDescription clears the value of the "description" field.
func (nsuo *NotificationSettingUpdateOne) ClearDescription() *NotificationSettingUpdateOne {
	nsuo.mutation.ClearDescription()
	return nsuo
}

// SetCreatedAt sets the "created_at" field.
func (nsuo *NotificationSettingUpdateOne) SetCreatedAt(t time.Time) *NotificationSettingUpdateOne {
	nsuo.mutation.SetCreatedAt(t)
	return nsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nsuo *NotificationSettingUpdateOne) SetNillableCreatedAt(t *time.Time) *NotificationSettingUpdateOne {
	if t != nil {
		nsuo.SetCreatedAt(*t)
	}
	return nsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nsuo *NotificationSettingUpdateOne) SetUpdatedAt(t time.Time) *NotificationSettingUpdateOne {
	nsuo.mutation.SetUpdatedAt(t)
	return nsuo
}

// Mutation returns the NotificationSettingMutation object of the builder.
func (nsuo *NotificationSettingUpdateOne) Mutation() *NotificationSettingMutation {
	return nsuo.mutation
}

// Where appends a list predicates to the NotificationSettingUpdate builder.
func (nsuo *NotificationSettingUpdateOne) Where(ps ...predicate.NotificationSetting) *NotificationSettingUpdateOne {
	nsuo.mutation.Where(ps...)
	return nsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nsuo *NotificationSettingUpdateOne) Select(field string, fields ...string) *NotificationSettingUpdateOne {
	nsuo.fields = append([]string{field}, fields...)
	return nsuo
}

// Save executes the query and returns the updated NotificationSetting entity.
func (nsuo *NotificationSettingUpdateOne) Save(ctx context.Context) (*NotificationSetting, error) {
	if err := nsuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, nsuo.sqlSave, nsuo.mutation, nsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nsuo *NotificationSettingUpdateOne) SaveX(ctx context.Context) *NotificationSetting {
	node, err := nsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nsuo *NotificationSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := nsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsuo *NotificationSettingUpdateOne) ExecX(ctx context.Context) {
	if err := nsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nsuo *NotificationSettingUpdateOne) defaults() error {
	if _, ok := nsuo.mutation.UpdatedAt(); !ok {
		if notificationsetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized notificationsetting.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := notificationsetting.UpdateDefaultUpdatedAt()
		nsuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (nsuo *NotificationSettingUpdateOne) check() error {
	if v, ok := nsuo.mutation.Name(); ok {
		if err := notificationsetting.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "NotificationSetting.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nsuo *NotificationSettingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationSettingUpdateOne {
	nsuo.modifiers = append(nsuo.modifiers, modifiers...)
	return nsuo
}

func (nsuo *NotificationSettingUpdateOne) sqlSave(ctx context.Context) (_node *NotificationSetting, err error) {
	if err := nsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationsetting.Table, notificationsetting.Columns, sqlgraph.NewFieldSpec(notificationsetting.FieldID, field.TypeUUID))
	id, ok := nsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "NotificationSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationsetting.FieldID)
		for _, f := range fields {
			if !notificationsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != notificationsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nsuo.mutation.DeletedAt(); ok {
		_spec.SetField(notificationsetting.FieldDeletedAt, field.TypeTime, value)
	}
	if nsuo.mutation.DeletedAtCleared() {
		_spec.ClearField(notificationsetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := nsuo.mutation.Name(); ok {
		_spec.SetField(notificationsetting.FieldName, field.TypeString, value)
	}
	if value, ok := nsuo.mutation.Channel(); ok {
		_spec.SetField(notificationsetting.FieldChannel, field.TypeString, value)
	}
	if value, ok := nsuo.mutation.Enabled(); ok {
		_spec.SetField(notificationsetting.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := nsuo.mutation.DingtalkConfig(); ok {
		_spec.SetField(notificationsetting.FieldDingtalkConfig, field.TypeJSON, value)
	}
	if nsuo.mutation.DingtalkConfigCleared() {
		_spec.ClearField(notificationsetting.FieldDingtalkConfig, field.TypeJSON)
	}
	if value, ok := nsuo.mutation.MaxRetry(); ok {
		_spec.SetField(notificationsetting.FieldMaxRetry, field.TypeInt, value)
	}
	if value, ok := nsuo.mutation.AddedMaxRetry(); ok {
		_spec.AddField(notificationsetting.FieldMaxRetry, field.TypeInt, value)
	}
	if value, ok := nsuo.mutation.Timeout(); ok {
		_spec.SetField(notificationsetting.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := nsuo.mutation.AddedTimeout(); ok {
		_spec.AddField(notificationsetting.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := nsuo.mutation.Description(); ok {
		_spec.SetField(notificationsetting.FieldDescription, field.TypeString, value)
	}
	if nsuo.mutation.DescriptionCleared() {
		_spec.ClearField(notificationsetting.FieldDescription, field.TypeString)
	}
	if value, ok := nsuo.mutation.CreatedAt(); ok {
		_spec.SetField(notificationsetting.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(nsuo.modifiers...)
	_node = &NotificationSetting{config: nsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nsuo.mutation.done = true
	return _node, nil
}
