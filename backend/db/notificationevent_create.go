// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/notificationevent"
	"github.com/google/uuid"
)

// NotificationEventCreate is the builder for creating a NotificationEvent entity.
type NotificationEventCreate struct {
	config
	mutation *NotificationEventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (nec *NotificationEventCreate) SetDeletedAt(t time.Time) *NotificationEventCreate {
	nec.mutation.SetDeletedAt(t)
	return nec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nec *NotificationEventCreate) SetNillableDeletedAt(t *time.Time) *NotificationEventCreate {
	if t != nil {
		nec.SetDeletedAt(*t)
	}
	return nec
}

// SetEventType sets the "event_type" field.
func (nec *NotificationEventCreate) SetEventType(cet consts.NotificationEventType) *NotificationEventCreate {
	nec.mutation.SetEventType(cet)
	return nec
}

// SetChannel sets the "channel" field.
func (nec *NotificationEventCreate) SetChannel(cc consts.NotificationChannel) *NotificationEventCreate {
	nec.mutation.SetChannel(cc)
	return nec
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (nec *NotificationEventCreate) SetNillableChannel(cc *consts.NotificationChannel) *NotificationEventCreate {
	if cc != nil {
		nec.SetChannel(*cc)
	}
	return nec
}

// SetStatus sets the "status" field.
func (nec *NotificationEventCreate) SetStatus(cs consts.NotificationStatus) *NotificationEventCreate {
	nec.mutation.SetStatus(cs)
	return nec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nec *NotificationEventCreate) SetNillableStatus(cs *consts.NotificationStatus) *NotificationEventCreate {
	if cs != nil {
		nec.SetStatus(*cs)
	}
	return nec
}

// SetPayload sets the "payload" field.
func (nec *NotificationEventCreate) SetPayload(m map[string]interface{}) *NotificationEventCreate {
	nec.mutation.SetPayload(m)
	return nec
}

// SetTemplateID sets the "template_id" field.
func (nec *NotificationEventCreate) SetTemplateID(s string) *NotificationEventCreate {
	nec.mutation.SetTemplateID(s)
	return nec
}

// SetTarget sets the "target" field.
func (nec *NotificationEventCreate) SetTarget(s string) *NotificationEventCreate {
	nec.mutation.SetTarget(s)
	return nec
}

// SetRetryCount sets the "retry_count" field.
func (nec *NotificationEventCreate) SetRetryCount(i int) *NotificationEventCreate {
	nec.mutation.SetRetryCount(i)
	return nec
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (nec *NotificationEventCreate) SetNillableRetryCount(i *int) *NotificationEventCreate {
	if i != nil {
		nec.SetRetryCount(*i)
	}
	return nec
}

// SetMaxRetry sets the "max_retry" field.
func (nec *NotificationEventCreate) SetMaxRetry(i int) *NotificationEventCreate {
	nec.mutation.SetMaxRetry(i)
	return nec
}

// SetNillableMaxRetry sets the "max_retry" field if the given value is not nil.
func (nec *NotificationEventCreate) SetNillableMaxRetry(i *int) *NotificationEventCreate {
	if i != nil {
		nec.SetMaxRetry(*i)
	}
	return nec
}

// SetTimeout sets the "timeout" field.
func (nec *NotificationEventCreate) SetTimeout(i int) *NotificationEventCreate {
	nec.mutation.SetTimeout(i)
	return nec
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (nec *NotificationEventCreate) SetNillableTimeout(i *int) *NotificationEventCreate {
	if i != nil {
		nec.SetTimeout(*i)
	}
	return nec
}

// SetLastError sets the "last_error" field.
func (nec *NotificationEventCreate) SetLastError(s string) *NotificationEventCreate {
	nec.mutation.SetLastError(s)
	return nec
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (nec *NotificationEventCreate) SetNillableLastError(s *string) *NotificationEventCreate {
	if s != nil {
		nec.SetLastError(*s)
	}
	return nec
}

// SetTraceID sets the "trace_id" field.
func (nec *NotificationEventCreate) SetTraceID(s string) *NotificationEventCreate {
	nec.mutation.SetTraceID(s)
	return nec
}

// SetNillableTraceID sets the "trace_id" field if the given value is not nil.
func (nec *NotificationEventCreate) SetNillableTraceID(s *string) *NotificationEventCreate {
	if s != nil {
		nec.SetTraceID(*s)
	}
	return nec
}

// SetScheduledAt sets the "scheduled_at" field.
func (nec *NotificationEventCreate) SetScheduledAt(t time.Time) *NotificationEventCreate {
	nec.mutation.SetScheduledAt(t)
	return nec
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (nec *NotificationEventCreate) SetNillableScheduledAt(t *time.Time) *NotificationEventCreate {
	if t != nil {
		nec.SetScheduledAt(*t)
	}
	return nec
}

// SetDeliveredAt sets the "delivered_at" field.
func (nec *NotificationEventCreate) SetDeliveredAt(t time.Time) *NotificationEventCreate {
	nec.mutation.SetDeliveredAt(t)
	return nec
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (nec *NotificationEventCreate) SetNillableDeliveredAt(t *time.Time) *NotificationEventCreate {
	if t != nil {
		nec.SetDeliveredAt(*t)
	}
	return nec
}

// SetCreatedAt sets the "created_at" field.
func (nec *NotificationEventCreate) SetCreatedAt(t time.Time) *NotificationEventCreate {
	nec.mutation.SetCreatedAt(t)
	return nec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nec *NotificationEventCreate) SetNillableCreatedAt(t *time.Time) *NotificationEventCreate {
	if t != nil {
		nec.SetCreatedAt(*t)
	}
	return nec
}

// SetUpdatedAt sets the "updated_at" field.
func (nec *NotificationEventCreate) SetUpdatedAt(t time.Time) *NotificationEventCreate {
	nec.mutation.SetUpdatedAt(t)
	return nec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nec *NotificationEventCreate) SetNillableUpdatedAt(t *time.Time) *NotificationEventCreate {
	if t != nil {
		nec.SetUpdatedAt(*t)
	}
	return nec
}

// SetID sets the "id" field.
func (nec *NotificationEventCreate) SetID(u uuid.UUID) *NotificationEventCreate {
	nec.mutation.SetID(u)
	return nec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (nec *NotificationEventCreate) SetNillableID(u *uuid.UUID) *NotificationEventCreate {
	if u != nil {
		nec.SetID(*u)
	}
	return nec
}

// Mutation returns the NotificationEventMutation object of the builder.
func (nec *NotificationEventCreate) Mutation() *NotificationEventMutation {
	return nec.mutation
}

// Save creates the NotificationEvent in the database.
func (nec *NotificationEventCreate) Save(ctx context.Context) (*NotificationEvent, error) {
	if err := nec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, nec.sqlSave, nec.mutation, nec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nec *NotificationEventCreate) SaveX(ctx context.Context) *NotificationEvent {
	v, err := nec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nec *NotificationEventCreate) Exec(ctx context.Context) error {
	_, err := nec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nec *NotificationEventCreate) ExecX(ctx context.Context) {
	if err := nec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nec *NotificationEventCreate) defaults() error {
	if _, ok := nec.mutation.Channel(); !ok {
		v := notificationevent.DefaultChannel
		nec.mutation.SetChannel(v)
	}
	if _, ok := nec.mutation.Status(); !ok {
		v := notificationevent.DefaultStatus
		nec.mutation.SetStatus(v)
	}
	if _, ok := nec.mutation.RetryCount(); !ok {
		v := notificationevent.DefaultRetryCount
		nec.mutation.SetRetryCount(v)
	}
	if _, ok := nec.mutation.MaxRetry(); !ok {
		v := notificationevent.DefaultMaxRetry
		nec.mutation.SetMaxRetry(v)
	}
	if _, ok := nec.mutation.Timeout(); !ok {
		v := notificationevent.DefaultTimeout
		nec.mutation.SetTimeout(v)
	}
	if _, ok := nec.mutation.CreatedAt(); !ok {
		if notificationevent.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized notificationevent.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := notificationevent.DefaultCreatedAt()
		nec.mutation.SetCreatedAt(v)
	}
	if _, ok := nec.mutation.UpdatedAt(); !ok {
		if notificationevent.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized notificationevent.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := notificationevent.DefaultUpdatedAt()
		nec.mutation.SetUpdatedAt(v)
	}
	if _, ok := nec.mutation.ID(); !ok {
		if notificationevent.DefaultID == nil {
			return fmt.Errorf("db: uninitialized notificationevent.DefaultID (forgotten import db/runtime?)")
		}
		v := notificationevent.DefaultID()
		nec.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (nec *NotificationEventCreate) check() error {
	if _, ok := nec.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`db: missing required field "NotificationEvent.event_type"`)}
	}
	if _, ok := nec.mutation.Channel(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`db: missing required field "NotificationEvent.channel"`)}
	}
	if _, ok := nec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "NotificationEvent.status"`)}
	}
	if _, ok := nec.mutation.Payload(); !ok {
		return &ValidationError{Name: "payload", err: errors.New(`db: missing required field "NotificationEvent.payload"`)}
	}
	if _, ok := nec.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template_id", err: errors.New(`db: missing required field "NotificationEvent.template_id"`)}
	}
	if _, ok := nec.mutation.Target(); !ok {
		return &ValidationError{Name: "target", err: errors.New(`db: missing required field "NotificationEvent.target"`)}
	}
	if _, ok := nec.mutation.RetryCount(); !ok {
		return &ValidationError{Name: "retry_count", err: errors.New(`db: missing required field "NotificationEvent.retry_count"`)}
	}
	if _, ok := nec.mutation.MaxRetry(); !ok {
		return &ValidationError{Name: "max_retry", err: errors.New(`db: missing required field "NotificationEvent.max_retry"`)}
	}
	if _, ok := nec.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New(`db: missing required field "NotificationEvent.timeout"`)}
	}
	if _, ok := nec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "NotificationEvent.created_at"`)}
	}
	if _, ok := nec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "NotificationEvent.updated_at"`)}
	}
	return nil
}

func (nec *NotificationEventCreate) sqlSave(ctx context.Context) (*NotificationEvent, error) {
	if err := nec.check(); err != nil {
		return nil, err
	}
	_node, _spec := nec.createSpec()
	if err := sqlgraph.CreateNode(ctx, nec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	nec.mutation.id = &_node.ID
	nec.mutation.done = true
	return _node, nil
}

func (nec *NotificationEventCreate) createSpec() (*NotificationEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &NotificationEvent{config: nec.config}
		_spec = sqlgraph.NewCreateSpec(notificationevent.Table, sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = nec.conflict
	if id, ok := nec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := nec.mutation.DeletedAt(); ok {
		_spec.SetField(notificationevent.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := nec.mutation.EventType(); ok {
		_spec.SetField(notificationevent.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := nec.mutation.Channel(); ok {
		_spec.SetField(notificationevent.FieldChannel, field.TypeString, value)
		_node.Channel = value
	}
	if value, ok := nec.mutation.Status(); ok {
		_spec.SetField(notificationevent.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := nec.mutation.Payload(); ok {
		_spec.SetField(notificationevent.FieldPayload, field.TypeJSON, value)
		_node.Payload = value
	}
	if value, ok := nec.mutation.TemplateID(); ok {
		_spec.SetField(notificationevent.FieldTemplateID, field.TypeString, value)
		_node.TemplateID = value
	}
	if value, ok := nec.mutation.Target(); ok {
		_spec.SetField(notificationevent.FieldTarget, field.TypeString, value)
		_node.Target = value
	}
	if value, ok := nec.mutation.RetryCount(); ok {
		_spec.SetField(notificationevent.FieldRetryCount, field.TypeInt, value)
		_node.RetryCount = value
	}
	if value, ok := nec.mutation.MaxRetry(); ok {
		_spec.SetField(notificationevent.FieldMaxRetry, field.TypeInt, value)
		_node.MaxRetry = value
	}
	if value, ok := nec.mutation.Timeout(); ok {
		_spec.SetField(notificationevent.FieldTimeout, field.TypeInt, value)
		_node.Timeout = value
	}
	if value, ok := nec.mutation.LastError(); ok {
		_spec.SetField(notificationevent.FieldLastError, field.TypeString, value)
		_node.LastError = value
	}
	if value, ok := nec.mutation.TraceID(); ok {
		_spec.SetField(notificationevent.FieldTraceID, field.TypeString, value)
		_node.TraceID = value
	}
	if value, ok := nec.mutation.ScheduledAt(); ok {
		_spec.SetField(notificationevent.FieldScheduledAt, field.TypeTime, value)
		_node.ScheduledAt = value
	}
	if value, ok := nec.mutation.DeliveredAt(); ok {
		_spec.SetField(notificationevent.FieldDeliveredAt, field.TypeTime, value)
		_node.DeliveredAt = value
	}
	if value, ok := nec.mutation.CreatedAt(); ok {
		_spec.SetField(notificationevent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nec.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationevent.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationEvent.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationEventUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (nec *NotificationEventCreate) OnConflict(opts ...sql.ConflictOption) *NotificationEventUpsertOne {
	nec.conflict = opts
	return &NotificationEventUpsertOne{
		create: nec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nec *NotificationEventCreate) OnConflictColumns(columns ...string) *NotificationEventUpsertOne {
	nec.conflict = append(nec.conflict, sql.ConflictColumns(columns...))
	return &NotificationEventUpsertOne{
		create: nec,
	}
}

type (
	// NotificationEventUpsertOne is the builder for "upsert"-ing
	//  one NotificationEvent node.
	NotificationEventUpsertOne struct {
		create *NotificationEventCreate
	}

	// NotificationEventUpsert is the "OnConflict" setter.
	NotificationEventUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationEventUpsert) SetDeletedAt(v time.Time) *NotificationEventUpsert {
	u.Set(notificationevent.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationEventUpsert) UpdateDeletedAt() *NotificationEventUpsert {
	u.SetExcluded(notificationevent.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationEventUpsert) ClearDeletedAt() *NotificationEventUpsert {
	u.SetNull(notificationevent.FieldDeletedAt)
	return u
}

// SetEventType sets the "event_type" field.
func (u *NotificationEventUpsert) SetEventType(v consts.NotificationEventType) *NotificationEventUpsert {
	u.Set(notificationevent.FieldEventType, v)
	return u
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *NotificationEventUpsert) UpdateEventType() *NotificationEventUpsert {
	u.SetExcluded(notificationevent.FieldEventType)
	return u
}

// SetChannel sets the "channel" field.
func (u *NotificationEventUpsert) SetChannel(v consts.NotificationChannel) *NotificationEventUpsert {
	u.Set(notificationevent.FieldChannel, v)
	return u
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *NotificationEventUpsert) UpdateChannel() *NotificationEventUpsert {
	u.SetExcluded(notificationevent.FieldChannel)
	return u
}

// SetStatus sets the "status" field.
func (u *NotificationEventUpsert) SetStatus(v consts.NotificationStatus) *NotificationEventUpsert {
	u.Set(notificationevent.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *NotificationEventUpsert) UpdateStatus() *NotificationEventUpsert {
	u.SetExcluded(notificationevent.FieldStatus)
	return u
}

// SetPayload sets the "payload" field.
func (u *NotificationEventUpsert) SetPayload(v map[string]interface{}) *NotificationEventUpsert {
	u.Set(notificationevent.FieldPayload, v)
	return u
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *NotificationEventUpsert) UpdatePayload() *NotificationEventUpsert {
	u.SetExcluded(notificationevent.FieldPayload)
	return u
}

// SetTemplateID sets the "template_id" field.
func (u *NotificationEventUpsert) SetTemplateID(v string) *NotificationEventUpsert {
	u.Set(notificationevent.FieldTemplateID, v)
	return u
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *NotificationEventUpsert) UpdateTemplateID() *NotificationEventUpsert {
	u.SetExcluded(notificationevent.FieldTemplateID)
	return u
}

// SetTarget sets the "target" field.
func (u *NotificationEventUpsert) SetTarget(v string) *NotificationEventUpsert {
	u.Set(notificationevent.FieldTarget, v)
	return u
}

// UpdateTarget sets the "target" field to the value that was provided on create.
func (u *NotificationEventUpsert) UpdateTarget() *NotificationEventUpsert {
	u.SetExcluded(notificationevent.FieldTarget)
	return u
}

// SetRetryCount sets the "retry_count" field.
func (u *NotificationEventUpsert) SetRetryCount(v int) *NotificationEventUpsert {
	u.Set(notificationevent.FieldRetryCount, v)
	return u
}

// UpdateRetryCount sets the "retry_count" field to the value that was provided on create.
func (u *NotificationEventUpsert) UpdateRetryCount() *NotificationEventUpsert {
	u.SetExcluded(notificationevent.FieldRetryCount)
	return u
}

// AddRetryCount adds v to the "retry_count" field.
func (u *NotificationEventUpsert) AddRetryCount(v int) *NotificationEventUpsert {
	u.Add(notificationevent.FieldRetryCount, v)
	return u
}

// SetMaxRetry sets the "max_retry" field.
func (u *NotificationEventUpsert) SetMaxRetry(v int) *NotificationEventUpsert {
	u.Set(notificationevent.FieldMaxRetry, v)
	return u
}

// UpdateMaxRetry sets the "max_retry" field to the value that was provided on create.
func (u *NotificationEventUpsert) UpdateMaxRetry() *NotificationEventUpsert {
	u.SetExcluded(notificationevent.FieldMaxRetry)
	return u
}

// AddMaxRetry adds v to the "max_retry" field.
func (u *NotificationEventUpsert) AddMaxRetry(v int) *NotificationEventUpsert {
	u.Add(notificationevent.FieldMaxRetry, v)
	return u
}

// SetTimeout sets the "timeout" field.
func (u *NotificationEventUpsert) SetTimeout(v int) *NotificationEventUpsert {
	u.Set(notificationevent.FieldTimeout, v)
	return u
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *NotificationEventUpsert) UpdateTimeout() *NotificationEventUpsert {
	u.SetExcluded(notificationevent.FieldTimeout)
	return u
}

// AddTimeout adds v to the "timeout" field.
func (u *NotificationEventUpsert) AddTimeout(v int) *NotificationEventUpsert {
	u.Add(notificationevent.FieldTimeout, v)
	return u
}

// SetLastError sets the "last_error" field.
func (u *NotificationEventUpsert) SetLastError(v string) *NotificationEventUpsert {
	u.Set(notificationevent.FieldLastError, v)
	return u
}

// UpdateLastError sets the "last_error" field to the value that was provided on create.
func (u *NotificationEventUpsert) UpdateLastError() *NotificationEventUpsert {
	u.SetExcluded(notificationevent.FieldLastError)
	return u
}

// ClearLastError clears the value of the "last_error" field.
func (u *NotificationEventUpsert) ClearLastError() *NotificationEventUpsert {
	u.SetNull(notificationevent.FieldLastError)
	return u
}

// SetTraceID sets the "trace_id" field.
func (u *NotificationEventUpsert) SetTraceID(v string) *NotificationEventUpsert {
	u.Set(notificationevent.FieldTraceID, v)
	return u
}

// UpdateTraceID sets the "trace_id" field to the value that was provided on create.
func (u *NotificationEventUpsert) UpdateTraceID() *NotificationEventUpsert {
	u.SetExcluded(notificationevent.FieldTraceID)
	return u
}

// ClearTraceID clears the value of the "trace_id" field.
func (u *NotificationEventUpsert) ClearTraceID() *NotificationEventUpsert {
	u.SetNull(notificationevent.FieldTraceID)
	return u
}

// SetScheduledAt sets the "scheduled_at" field.
func (u *NotificationEventUpsert) SetScheduledAt(v time.Time) *NotificationEventUpsert {
	u.Set(notificationevent.FieldScheduledAt, v)
	return u
}

// UpdateScheduledAt sets the "scheduled_at" field to the value that was provided on create.
func (u *NotificationEventUpsert) UpdateScheduledAt() *NotificationEventUpsert {
	u.SetExcluded(notificationevent.FieldScheduledAt)
	return u
}

// ClearScheduledAt clears the value of the "scheduled_at" field.
func (u *NotificationEventUpsert) ClearScheduledAt() *NotificationEventUpsert {
	u.SetNull(notificationevent.FieldScheduledAt)
	return u
}

// SetDeliveredAt sets the "delivered_at" field.
func (u *NotificationEventUpsert) SetDeliveredAt(v time.Time) *NotificationEventUpsert {
	u.Set(notificationevent.FieldDeliveredAt, v)
	return u
}

// UpdateDeliveredAt sets the "delivered_at" field to the value that was provided on create.
func (u *NotificationEventUpsert) UpdateDeliveredAt() *NotificationEventUpsert {
	u.SetExcluded(notificationevent.FieldDeliveredAt)
	return u
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (u *NotificationEventUpsert) ClearDeliveredAt() *NotificationEventUpsert {
	u.SetNull(notificationevent.FieldDeliveredAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationEventUpsert) SetUpdatedAt(v time.Time) *NotificationEventUpsert {
	u.Set(notificationevent.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationEventUpsert) UpdateUpdatedAt() *NotificationEventUpsert {
	u.SetExcluded(notificationevent.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NotificationEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationevent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationEventUpsertOne) UpdateNewValues() *NotificationEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(notificationevent.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(notificationevent.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationEvent.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NotificationEventUpsertOne) Ignore() *NotificationEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationEventUpsertOne) DoNothing() *NotificationEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationEventCreate.OnConflict
// documentation for more info.
func (u *NotificationEventUpsertOne) Update(set func(*NotificationEventUpsert)) *NotificationEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationEventUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationEventUpsertOne) SetDeletedAt(v time.Time) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationEventUpsertOne) UpdateDeletedAt() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationEventUpsertOne) ClearDeletedAt() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.ClearDeletedAt()
	})
}

// SetEventType sets the "event_type" field.
func (u *NotificationEventUpsertOne) SetEventType(v consts.NotificationEventType) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *NotificationEventUpsertOne) UpdateEventType() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateEventType()
	})
}

// SetChannel sets the "channel" field.
func (u *NotificationEventUpsertOne) SetChannel(v consts.NotificationChannel) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *NotificationEventUpsertOne) UpdateChannel() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateChannel()
	})
}

// SetStatus sets the "status" field.
func (u *NotificationEventUpsertOne) SetStatus(v consts.NotificationStatus) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *NotificationEventUpsertOne) UpdateStatus() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateStatus()
	})
}

// SetPayload sets the "payload" field.
func (u *NotificationEventUpsertOne) SetPayload(v map[string]interface{}) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetPayload(v)
	})
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *NotificationEventUpsertOne) UpdatePayload() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdatePayload()
	})
}

// SetTemplateID sets the "template_id" field.
func (u *NotificationEventUpsertOne) SetTemplateID(v string) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetTemplateID(v)
	})
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *NotificationEventUpsertOne) UpdateTemplateID() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateTemplateID()
	})
}

// SetTarget sets the "target" field.
func (u *NotificationEventUpsertOne) SetTarget(v string) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetTarget(v)
	})
}

// UpdateTarget sets the "target" field to the value that was provided on create.
func (u *NotificationEventUpsertOne) UpdateTarget() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateTarget()
	})
}

// SetRetryCount sets the "retry_count" field.
func (u *NotificationEventUpsertOne) SetRetryCount(v int) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetRetryCount(v)
	})
}

// AddRetryCount adds v to the "retry_count" field.
func (u *NotificationEventUpsertOne) AddRetryCount(v int) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.AddRetryCount(v)
	})
}

// UpdateRetryCount sets the "retry_count" field to the value that was provided on create.
func (u *NotificationEventUpsertOne) UpdateRetryCount() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateRetryCount()
	})
}

// SetMaxRetry sets the "max_retry" field.
func (u *NotificationEventUpsertOne) SetMaxRetry(v int) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetMaxRetry(v)
	})
}

// AddMaxRetry adds v to the "max_retry" field.
func (u *NotificationEventUpsertOne) AddMaxRetry(v int) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.AddMaxRetry(v)
	})
}

// UpdateMaxRetry sets the "max_retry" field to the value that was provided on create.
func (u *NotificationEventUpsertOne) UpdateMaxRetry() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateMaxRetry()
	})
}

// SetTimeout sets the "timeout" field.
func (u *NotificationEventUpsertOne) SetTimeout(v int) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetTimeout(v)
	})
}

// AddTimeout adds v to the "timeout" field.
func (u *NotificationEventUpsertOne) AddTimeout(v int) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.AddTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *NotificationEventUpsertOne) UpdateTimeout() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateTimeout()
	})
}

// SetLastError sets the "last_error" field.
func (u *NotificationEventUpsertOne) SetLastError(v string) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetLastError(v)
	})
}

// UpdateLastError sets the "last_error" field to the value that was provided on create.
func (u *NotificationEventUpsertOne) UpdateLastError() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateLastError()
	})
}

// ClearLastError clears the value of the "last_error" field.
func (u *NotificationEventUpsertOne) ClearLastError() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.ClearLastError()
	})
}

// SetTraceID sets the "trace_id" field.
func (u *NotificationEventUpsertOne) SetTraceID(v string) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetTraceID(v)
	})
}

// UpdateTraceID sets the "trace_id" field to the value that was provided on create.
func (u *NotificationEventUpsertOne) UpdateTraceID() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateTraceID()
	})
}

// ClearTraceID clears the value of the "trace_id" field.
func (u *NotificationEventUpsertOne) ClearTraceID() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.ClearTraceID()
	})
}

// SetScheduledAt sets the "scheduled_at" field.
func (u *NotificationEventUpsertOne) SetScheduledAt(v time.Time) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetScheduledAt(v)
	})
}

// UpdateScheduledAt sets the "scheduled_at" field to the value that was provided on create.
func (u *NotificationEventUpsertOne) UpdateScheduledAt() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateScheduledAt()
	})
}

// ClearScheduledAt clears the value of the "scheduled_at" field.
func (u *NotificationEventUpsertOne) ClearScheduledAt() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.ClearScheduledAt()
	})
}

// SetDeliveredAt sets the "delivered_at" field.
func (u *NotificationEventUpsertOne) SetDeliveredAt(v time.Time) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetDeliveredAt(v)
	})
}

// UpdateDeliveredAt sets the "delivered_at" field to the value that was provided on create.
func (u *NotificationEventUpsertOne) UpdateDeliveredAt() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateDeliveredAt()
	})
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (u *NotificationEventUpsertOne) ClearDeliveredAt() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.ClearDeliveredAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationEventUpsertOne) SetUpdatedAt(v time.Time) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationEventUpsertOne) UpdateUpdatedAt() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *NotificationEventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for NotificationEventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationEventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NotificationEventUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: NotificationEventUpsertOne.ID is not supported by MySQL driver. Use NotificationEventUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NotificationEventUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NotificationEventCreateBulk is the builder for creating many NotificationEvent entities in bulk.
type NotificationEventCreateBulk struct {
	config
	err      error
	builders []*NotificationEventCreate
	conflict []sql.ConflictOption
}

// Save creates the NotificationEvent entities in the database.
func (necb *NotificationEventCreateBulk) Save(ctx context.Context) ([]*NotificationEvent, error) {
	if necb.err != nil {
		return nil, necb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(necb.builders))
	nodes := make([]*NotificationEvent, len(necb.builders))
	mutators := make([]Mutator, len(necb.builders))
	for i := range necb.builders {
		func(i int, root context.Context) {
			builder := necb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, necb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = necb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, necb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, necb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (necb *NotificationEventCreateBulk) SaveX(ctx context.Context) []*NotificationEvent {
	v, err := necb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (necb *NotificationEventCreateBulk) Exec(ctx context.Context) error {
	_, err := necb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (necb *NotificationEventCreateBulk) ExecX(ctx context.Context) {
	if err := necb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationEvent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationEventUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (necb *NotificationEventCreateBulk) OnConflict(opts ...sql.ConflictOption) *NotificationEventUpsertBulk {
	necb.conflict = opts
	return &NotificationEventUpsertBulk{
		create: necb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (necb *NotificationEventCreateBulk) OnConflictColumns(columns ...string) *NotificationEventUpsertBulk {
	necb.conflict = append(necb.conflict, sql.ConflictColumns(columns...))
	return &NotificationEventUpsertBulk{
		create: necb,
	}
}

// NotificationEventUpsertBulk is the builder for "upsert"-ing
// a bulk of NotificationEvent nodes.
type NotificationEventUpsertBulk struct {
	create *NotificationEventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NotificationEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationevent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationEventUpsertBulk) UpdateNewValues() *NotificationEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(notificationevent.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(notificationevent.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationEvent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NotificationEventUpsertBulk) Ignore() *NotificationEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationEventUpsertBulk) DoNothing() *NotificationEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationEventCreateBulk.OnConflict
// documentation for more info.
func (u *NotificationEventUpsertBulk) Update(set func(*NotificationEventUpsert)) *NotificationEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationEventUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationEventUpsertBulk) SetDeletedAt(v time.Time) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationEventUpsertBulk) UpdateDeletedAt() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationEventUpsertBulk) ClearDeletedAt() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.ClearDeletedAt()
	})
}

// SetEventType sets the "event_type" field.
func (u *NotificationEventUpsertBulk) SetEventType(v consts.NotificationEventType) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *NotificationEventUpsertBulk) UpdateEventType() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateEventType()
	})
}

// SetChannel sets the "channel" field.
func (u *NotificationEventUpsertBulk) SetChannel(v consts.NotificationChannel) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *NotificationEventUpsertBulk) UpdateChannel() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateChannel()
	})
}

// SetStatus sets the "status" field.
func (u *NotificationEventUpsertBulk) SetStatus(v consts.NotificationStatus) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *NotificationEventUpsertBulk) UpdateStatus() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateStatus()
	})
}

// SetPayload sets the "payload" field.
func (u *NotificationEventUpsertBulk) SetPayload(v map[string]interface{}) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetPayload(v)
	})
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *NotificationEventUpsertBulk) UpdatePayload() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdatePayload()
	})
}

// SetTemplateID sets the "template_id" field.
func (u *NotificationEventUpsertBulk) SetTemplateID(v string) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetTemplateID(v)
	})
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *NotificationEventUpsertBulk) UpdateTemplateID() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateTemplateID()
	})
}

// SetTarget sets the "target" field.
func (u *NotificationEventUpsertBulk) SetTarget(v string) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetTarget(v)
	})
}

// UpdateTarget sets the "target" field to the value that was provided on create.
func (u *NotificationEventUpsertBulk) UpdateTarget() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateTarget()
	})
}

// SetRetryCount sets the "retry_count" field.
func (u *NotificationEventUpsertBulk) SetRetryCount(v int) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetRetryCount(v)
	})
}

// AddRetryCount adds v to the "retry_count" field.
func (u *NotificationEventUpsertBulk) AddRetryCount(v int) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.AddRetryCount(v)
	})
}

// UpdateRetryCount sets the "retry_count" field to the value that was provided on create.
func (u *NotificationEventUpsertBulk) UpdateRetryCount() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateRetryCount()
	})
}

// SetMaxRetry sets the "max_retry" field.
func (u *NotificationEventUpsertBulk) SetMaxRetry(v int) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetMaxRetry(v)
	})
}

// AddMaxRetry adds v to the "max_retry" field.
func (u *NotificationEventUpsertBulk) AddMaxRetry(v int) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.AddMaxRetry(v)
	})
}

// UpdateMaxRetry sets the "max_retry" field to the value that was provided on create.
func (u *NotificationEventUpsertBulk) UpdateMaxRetry() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateMaxRetry()
	})
}

// SetTimeout sets the "timeout" field.
func (u *NotificationEventUpsertBulk) SetTimeout(v int) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetTimeout(v)
	})
}

// AddTimeout adds v to the "timeout" field.
func (u *NotificationEventUpsertBulk) AddTimeout(v int) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.AddTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *NotificationEventUpsertBulk) UpdateTimeout() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateTimeout()
	})
}

// SetLastError sets the "last_error" field.
func (u *NotificationEventUpsertBulk) SetLastError(v string) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetLastError(v)
	})
}

// UpdateLastError sets the "last_error" field to the value that was provided on create.
func (u *NotificationEventUpsertBulk) UpdateLastError() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateLastError()
	})
}

// ClearLastError clears the value of the "last_error" field.
func (u *NotificationEventUpsertBulk) ClearLastError() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.ClearLastError()
	})
}

// SetTraceID sets the "trace_id" field.
func (u *NotificationEventUpsertBulk) SetTraceID(v string) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetTraceID(v)
	})
}

// UpdateTraceID sets the "trace_id" field to the value that was provided on create.
func (u *NotificationEventUpsertBulk) UpdateTraceID() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateTraceID()
	})
}

// ClearTraceID clears the value of the "trace_id" field.
func (u *NotificationEventUpsertBulk) ClearTraceID() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.ClearTraceID()
	})
}

// SetScheduledAt sets the "scheduled_at" field.
func (u *NotificationEventUpsertBulk) SetScheduledAt(v time.Time) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetScheduledAt(v)
	})
}

// UpdateScheduledAt sets the "scheduled_at" field to the value that was provided on create.
func (u *NotificationEventUpsertBulk) UpdateScheduledAt() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateScheduledAt()
	})
}

// ClearScheduledAt clears the value of the "scheduled_at" field.
func (u *NotificationEventUpsertBulk) ClearScheduledAt() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.ClearScheduledAt()
	})
}

// SetDeliveredAt sets the "delivered_at" field.
func (u *NotificationEventUpsertBulk) SetDeliveredAt(v time.Time) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetDeliveredAt(v)
	})
}

// UpdateDeliveredAt sets the "delivered_at" field to the value that was provided on create.
func (u *NotificationEventUpsertBulk) UpdateDeliveredAt() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateDeliveredAt()
	})
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (u *NotificationEventUpsertBulk) ClearDeliveredAt() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.ClearDeliveredAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationEventUpsertBulk) SetUpdatedAt(v time.Time) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationEventUpsertBulk) UpdateUpdatedAt() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *NotificationEventUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the NotificationEventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for NotificationEventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationEventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
