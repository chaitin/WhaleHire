// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumeskill"
	"github.com/google/uuid"
)

// ResumeSkillCreate is the builder for creating a ResumeSkill entity.
type ResumeSkillCreate struct {
	config
	mutation *ResumeSkillMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (rsc *ResumeSkillCreate) SetDeletedAt(t time.Time) *ResumeSkillCreate {
	rsc.mutation.SetDeletedAt(t)
	return rsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rsc *ResumeSkillCreate) SetNillableDeletedAt(t *time.Time) *ResumeSkillCreate {
	if t != nil {
		rsc.SetDeletedAt(*t)
	}
	return rsc
}

// SetResumeID sets the "resume_id" field.
func (rsc *ResumeSkillCreate) SetResumeID(u uuid.UUID) *ResumeSkillCreate {
	rsc.mutation.SetResumeID(u)
	return rsc
}

// SetSkillName sets the "skill_name" field.
func (rsc *ResumeSkillCreate) SetSkillName(s string) *ResumeSkillCreate {
	rsc.mutation.SetSkillName(s)
	return rsc
}

// SetNillableSkillName sets the "skill_name" field if the given value is not nil.
func (rsc *ResumeSkillCreate) SetNillableSkillName(s *string) *ResumeSkillCreate {
	if s != nil {
		rsc.SetSkillName(*s)
	}
	return rsc
}

// SetLevel sets the "level" field.
func (rsc *ResumeSkillCreate) SetLevel(s string) *ResumeSkillCreate {
	rsc.mutation.SetLevel(s)
	return rsc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (rsc *ResumeSkillCreate) SetNillableLevel(s *string) *ResumeSkillCreate {
	if s != nil {
		rsc.SetLevel(*s)
	}
	return rsc
}

// SetDescription sets the "description" field.
func (rsc *ResumeSkillCreate) SetDescription(s string) *ResumeSkillCreate {
	rsc.mutation.SetDescription(s)
	return rsc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rsc *ResumeSkillCreate) SetNillableDescription(s *string) *ResumeSkillCreate {
	if s != nil {
		rsc.SetDescription(*s)
	}
	return rsc
}

// SetCreatedAt sets the "created_at" field.
func (rsc *ResumeSkillCreate) SetCreatedAt(t time.Time) *ResumeSkillCreate {
	rsc.mutation.SetCreatedAt(t)
	return rsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rsc *ResumeSkillCreate) SetNillableCreatedAt(t *time.Time) *ResumeSkillCreate {
	if t != nil {
		rsc.SetCreatedAt(*t)
	}
	return rsc
}

// SetUpdatedAt sets the "updated_at" field.
func (rsc *ResumeSkillCreate) SetUpdatedAt(t time.Time) *ResumeSkillCreate {
	rsc.mutation.SetUpdatedAt(t)
	return rsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rsc *ResumeSkillCreate) SetNillableUpdatedAt(t *time.Time) *ResumeSkillCreate {
	if t != nil {
		rsc.SetUpdatedAt(*t)
	}
	return rsc
}

// SetID sets the "id" field.
func (rsc *ResumeSkillCreate) SetID(u uuid.UUID) *ResumeSkillCreate {
	rsc.mutation.SetID(u)
	return rsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rsc *ResumeSkillCreate) SetNillableID(u *uuid.UUID) *ResumeSkillCreate {
	if u != nil {
		rsc.SetID(*u)
	}
	return rsc
}

// SetResume sets the "resume" edge to the Resume entity.
func (rsc *ResumeSkillCreate) SetResume(r *Resume) *ResumeSkillCreate {
	return rsc.SetResumeID(r.ID)
}

// Mutation returns the ResumeSkillMutation object of the builder.
func (rsc *ResumeSkillCreate) Mutation() *ResumeSkillMutation {
	return rsc.mutation
}

// Save creates the ResumeSkill in the database.
func (rsc *ResumeSkillCreate) Save(ctx context.Context) (*ResumeSkill, error) {
	if err := rsc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rsc.sqlSave, rsc.mutation, rsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rsc *ResumeSkillCreate) SaveX(ctx context.Context) *ResumeSkill {
	v, err := rsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rsc *ResumeSkillCreate) Exec(ctx context.Context) error {
	_, err := rsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsc *ResumeSkillCreate) ExecX(ctx context.Context) {
	if err := rsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsc *ResumeSkillCreate) defaults() error {
	if _, ok := rsc.mutation.CreatedAt(); !ok {
		if resumeskill.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized resumeskill.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := resumeskill.DefaultCreatedAt()
		rsc.mutation.SetCreatedAt(v)
	}
	if _, ok := rsc.mutation.UpdatedAt(); !ok {
		if resumeskill.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumeskill.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumeskill.DefaultUpdatedAt()
		rsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rsc.mutation.ID(); !ok {
		if resumeskill.DefaultID == nil {
			return fmt.Errorf("db: uninitialized resumeskill.DefaultID (forgotten import db/runtime?)")
		}
		v := resumeskill.DefaultID()
		rsc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rsc *ResumeSkillCreate) check() error {
	if _, ok := rsc.mutation.ResumeID(); !ok {
		return &ValidationError{Name: "resume_id", err: errors.New(`db: missing required field "ResumeSkill.resume_id"`)}
	}
	if _, ok := rsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ResumeSkill.created_at"`)}
	}
	if _, ok := rsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "ResumeSkill.updated_at"`)}
	}
	if len(rsc.mutation.ResumeIDs()) == 0 {
		return &ValidationError{Name: "resume", err: errors.New(`db: missing required edge "ResumeSkill.resume"`)}
	}
	return nil
}

func (rsc *ResumeSkillCreate) sqlSave(ctx context.Context) (*ResumeSkill, error) {
	if err := rsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rsc.mutation.id = &_node.ID
	rsc.mutation.done = true
	return _node, nil
}

func (rsc *ResumeSkillCreate) createSpec() (*ResumeSkill, *sqlgraph.CreateSpec) {
	var (
		_node = &ResumeSkill{config: rsc.config}
		_spec = sqlgraph.NewCreateSpec(resumeskill.Table, sqlgraph.NewFieldSpec(resumeskill.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rsc.conflict
	if id, ok := rsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rsc.mutation.DeletedAt(); ok {
		_spec.SetField(resumeskill.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rsc.mutation.SkillName(); ok {
		_spec.SetField(resumeskill.FieldSkillName, field.TypeString, value)
		_node.SkillName = value
	}
	if value, ok := rsc.mutation.Level(); ok {
		_spec.SetField(resumeskill.FieldLevel, field.TypeString, value)
		_node.Level = value
	}
	if value, ok := rsc.mutation.Description(); ok {
		_spec.SetField(resumeskill.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rsc.mutation.CreatedAt(); ok {
		_spec.SetField(resumeskill.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rsc.mutation.UpdatedAt(); ok {
		_spec.SetField(resumeskill.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rsc.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeskill.ResumeTable,
			Columns: []string{resumeskill.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResumeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeSkill.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeSkillUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rsc *ResumeSkillCreate) OnConflict(opts ...sql.ConflictOption) *ResumeSkillUpsertOne {
	rsc.conflict = opts
	return &ResumeSkillUpsertOne{
		create: rsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeSkill.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rsc *ResumeSkillCreate) OnConflictColumns(columns ...string) *ResumeSkillUpsertOne {
	rsc.conflict = append(rsc.conflict, sql.ConflictColumns(columns...))
	return &ResumeSkillUpsertOne{
		create: rsc,
	}
}

type (
	// ResumeSkillUpsertOne is the builder for "upsert"-ing
	//  one ResumeSkill node.
	ResumeSkillUpsertOne struct {
		create *ResumeSkillCreate
	}

	// ResumeSkillUpsert is the "OnConflict" setter.
	ResumeSkillUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeSkillUpsert) SetDeletedAt(v time.Time) *ResumeSkillUpsert {
	u.Set(resumeskill.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeSkillUpsert) UpdateDeletedAt() *ResumeSkillUpsert {
	u.SetExcluded(resumeskill.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeSkillUpsert) ClearDeletedAt() *ResumeSkillUpsert {
	u.SetNull(resumeskill.FieldDeletedAt)
	return u
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeSkillUpsert) SetResumeID(v uuid.UUID) *ResumeSkillUpsert {
	u.Set(resumeskill.FieldResumeID, v)
	return u
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeSkillUpsert) UpdateResumeID() *ResumeSkillUpsert {
	u.SetExcluded(resumeskill.FieldResumeID)
	return u
}

// SetSkillName sets the "skill_name" field.
func (u *ResumeSkillUpsert) SetSkillName(v string) *ResumeSkillUpsert {
	u.Set(resumeskill.FieldSkillName, v)
	return u
}

// UpdateSkillName sets the "skill_name" field to the value that was provided on create.
func (u *ResumeSkillUpsert) UpdateSkillName() *ResumeSkillUpsert {
	u.SetExcluded(resumeskill.FieldSkillName)
	return u
}

// ClearSkillName clears the value of the "skill_name" field.
func (u *ResumeSkillUpsert) ClearSkillName() *ResumeSkillUpsert {
	u.SetNull(resumeskill.FieldSkillName)
	return u
}

// SetLevel sets the "level" field.
func (u *ResumeSkillUpsert) SetLevel(v string) *ResumeSkillUpsert {
	u.Set(resumeskill.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *ResumeSkillUpsert) UpdateLevel() *ResumeSkillUpsert {
	u.SetExcluded(resumeskill.FieldLevel)
	return u
}

// ClearLevel clears the value of the "level" field.
func (u *ResumeSkillUpsert) ClearLevel() *ResumeSkillUpsert {
	u.SetNull(resumeskill.FieldLevel)
	return u
}

// SetDescription sets the "description" field.
func (u *ResumeSkillUpsert) SetDescription(v string) *ResumeSkillUpsert {
	u.Set(resumeskill.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResumeSkillUpsert) UpdateDescription() *ResumeSkillUpsert {
	u.SetExcluded(resumeskill.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ResumeSkillUpsert) ClearDescription() *ResumeSkillUpsert {
	u.SetNull(resumeskill.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeSkillUpsert) SetCreatedAt(v time.Time) *ResumeSkillUpsert {
	u.Set(resumeskill.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeSkillUpsert) UpdateCreatedAt() *ResumeSkillUpsert {
	u.SetExcluded(resumeskill.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeSkillUpsert) SetUpdatedAt(v time.Time) *ResumeSkillUpsert {
	u.Set(resumeskill.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeSkillUpsert) UpdateUpdatedAt() *ResumeSkillUpsert {
	u.SetExcluded(resumeskill.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ResumeSkill.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumeskill.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeSkillUpsertOne) UpdateNewValues() *ResumeSkillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resumeskill.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeSkill.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResumeSkillUpsertOne) Ignore() *ResumeSkillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeSkillUpsertOne) DoNothing() *ResumeSkillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeSkillCreate.OnConflict
// documentation for more info.
func (u *ResumeSkillUpsertOne) Update(set func(*ResumeSkillUpsert)) *ResumeSkillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeSkillUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeSkillUpsertOne) SetDeletedAt(v time.Time) *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeSkillUpsertOne) UpdateDeletedAt() *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeSkillUpsertOne) ClearDeletedAt() *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.ClearDeletedAt()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeSkillUpsertOne) SetResumeID(v uuid.UUID) *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeSkillUpsertOne) UpdateResumeID() *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.UpdateResumeID()
	})
}

// SetSkillName sets the "skill_name" field.
func (u *ResumeSkillUpsertOne) SetSkillName(v string) *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.SetSkillName(v)
	})
}

// UpdateSkillName sets the "skill_name" field to the value that was provided on create.
func (u *ResumeSkillUpsertOne) UpdateSkillName() *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.UpdateSkillName()
	})
}

// ClearSkillName clears the value of the "skill_name" field.
func (u *ResumeSkillUpsertOne) ClearSkillName() *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.ClearSkillName()
	})
}

// SetLevel sets the "level" field.
func (u *ResumeSkillUpsertOne) SetLevel(v string) *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *ResumeSkillUpsertOne) UpdateLevel() *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.UpdateLevel()
	})
}

// ClearLevel clears the value of the "level" field.
func (u *ResumeSkillUpsertOne) ClearLevel() *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.ClearLevel()
	})
}

// SetDescription sets the "description" field.
func (u *ResumeSkillUpsertOne) SetDescription(v string) *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResumeSkillUpsertOne) UpdateDescription() *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ResumeSkillUpsertOne) ClearDescription() *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeSkillUpsertOne) SetCreatedAt(v time.Time) *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeSkillUpsertOne) UpdateCreatedAt() *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeSkillUpsertOne) SetUpdatedAt(v time.Time) *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeSkillUpsertOne) UpdateUpdatedAt() *ResumeSkillUpsertOne {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeSkillUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeSkillCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeSkillUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResumeSkillUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ResumeSkillUpsertOne.ID is not supported by MySQL driver. Use ResumeSkillUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResumeSkillUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResumeSkillCreateBulk is the builder for creating many ResumeSkill entities in bulk.
type ResumeSkillCreateBulk struct {
	config
	err      error
	builders []*ResumeSkillCreate
	conflict []sql.ConflictOption
}

// Save creates the ResumeSkill entities in the database.
func (rscb *ResumeSkillCreateBulk) Save(ctx context.Context) ([]*ResumeSkill, error) {
	if rscb.err != nil {
		return nil, rscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rscb.builders))
	nodes := make([]*ResumeSkill, len(rscb.builders))
	mutators := make([]Mutator, len(rscb.builders))
	for i := range rscb.builders {
		func(i int, root context.Context) {
			builder := rscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResumeSkillMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rscb *ResumeSkillCreateBulk) SaveX(ctx context.Context) []*ResumeSkill {
	v, err := rscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rscb *ResumeSkillCreateBulk) Exec(ctx context.Context) error {
	_, err := rscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rscb *ResumeSkillCreateBulk) ExecX(ctx context.Context) {
	if err := rscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeSkill.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeSkillUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rscb *ResumeSkillCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResumeSkillUpsertBulk {
	rscb.conflict = opts
	return &ResumeSkillUpsertBulk{
		create: rscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeSkill.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rscb *ResumeSkillCreateBulk) OnConflictColumns(columns ...string) *ResumeSkillUpsertBulk {
	rscb.conflict = append(rscb.conflict, sql.ConflictColumns(columns...))
	return &ResumeSkillUpsertBulk{
		create: rscb,
	}
}

// ResumeSkillUpsertBulk is the builder for "upsert"-ing
// a bulk of ResumeSkill nodes.
type ResumeSkillUpsertBulk struct {
	create *ResumeSkillCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ResumeSkill.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumeskill.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeSkillUpsertBulk) UpdateNewValues() *ResumeSkillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resumeskill.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeSkill.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResumeSkillUpsertBulk) Ignore() *ResumeSkillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeSkillUpsertBulk) DoNothing() *ResumeSkillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeSkillCreateBulk.OnConflict
// documentation for more info.
func (u *ResumeSkillUpsertBulk) Update(set func(*ResumeSkillUpsert)) *ResumeSkillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeSkillUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeSkillUpsertBulk) SetDeletedAt(v time.Time) *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeSkillUpsertBulk) UpdateDeletedAt() *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeSkillUpsertBulk) ClearDeletedAt() *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.ClearDeletedAt()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeSkillUpsertBulk) SetResumeID(v uuid.UUID) *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeSkillUpsertBulk) UpdateResumeID() *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.UpdateResumeID()
	})
}

// SetSkillName sets the "skill_name" field.
func (u *ResumeSkillUpsertBulk) SetSkillName(v string) *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.SetSkillName(v)
	})
}

// UpdateSkillName sets the "skill_name" field to the value that was provided on create.
func (u *ResumeSkillUpsertBulk) UpdateSkillName() *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.UpdateSkillName()
	})
}

// ClearSkillName clears the value of the "skill_name" field.
func (u *ResumeSkillUpsertBulk) ClearSkillName() *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.ClearSkillName()
	})
}

// SetLevel sets the "level" field.
func (u *ResumeSkillUpsertBulk) SetLevel(v string) *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *ResumeSkillUpsertBulk) UpdateLevel() *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.UpdateLevel()
	})
}

// ClearLevel clears the value of the "level" field.
func (u *ResumeSkillUpsertBulk) ClearLevel() *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.ClearLevel()
	})
}

// SetDescription sets the "description" field.
func (u *ResumeSkillUpsertBulk) SetDescription(v string) *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResumeSkillUpsertBulk) UpdateDescription() *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ResumeSkillUpsertBulk) ClearDescription() *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeSkillUpsertBulk) SetCreatedAt(v time.Time) *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeSkillUpsertBulk) UpdateCreatedAt() *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeSkillUpsertBulk) SetUpdatedAt(v time.Time) *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeSkillUpsertBulk) UpdateUpdatedAt() *ResumeSkillUpsertBulk {
	return u.Update(func(s *ResumeSkillUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeSkillUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ResumeSkillCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeSkillCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeSkillUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
