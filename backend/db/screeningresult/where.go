// Code generated by ent, DO NOT EDIT.

package screeningresult

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldDeletedAt, v))
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldTaskID, v))
}

// JobPositionID applies equality check predicate on the "job_position_id" field. It's identical to JobPositionIDEQ.
func JobPositionID(v uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldJobPositionID, v))
}

// ResumeID applies equality check predicate on the "resume_id" field. It's identical to ResumeIDEQ.
func ResumeID(v uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldResumeID, v))
}

// OverallScore applies equality check predicate on the "overall_score" field. It's identical to OverallScoreEQ.
func OverallScore(v float64) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldOverallScore, v))
}

// TraceID applies equality check predicate on the "trace_id" field. It's identical to TraceIDEQ.
func TraceID(v string) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldTraceID, v))
}

// MatchedAt applies equality check predicate on the "matched_at" field. It's identical to MatchedAtEQ.
func MatchedAt(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldMatchedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotNull(FieldDeletedAt))
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotIn(FieldTaskID, vs...))
}

// JobPositionIDEQ applies the EQ predicate on the "job_position_id" field.
func JobPositionIDEQ(v uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldJobPositionID, v))
}

// JobPositionIDNEQ applies the NEQ predicate on the "job_position_id" field.
func JobPositionIDNEQ(v uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNEQ(FieldJobPositionID, v))
}

// JobPositionIDIn applies the In predicate on the "job_position_id" field.
func JobPositionIDIn(vs ...uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIn(FieldJobPositionID, vs...))
}

// JobPositionIDNotIn applies the NotIn predicate on the "job_position_id" field.
func JobPositionIDNotIn(vs ...uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotIn(FieldJobPositionID, vs...))
}

// ResumeIDEQ applies the EQ predicate on the "resume_id" field.
func ResumeIDEQ(v uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldResumeID, v))
}

// ResumeIDNEQ applies the NEQ predicate on the "resume_id" field.
func ResumeIDNEQ(v uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNEQ(FieldResumeID, v))
}

// ResumeIDIn applies the In predicate on the "resume_id" field.
func ResumeIDIn(vs ...uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIn(FieldResumeID, vs...))
}

// ResumeIDNotIn applies the NotIn predicate on the "resume_id" field.
func ResumeIDNotIn(vs ...uuid.UUID) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotIn(FieldResumeID, vs...))
}

// OverallScoreEQ applies the EQ predicate on the "overall_score" field.
func OverallScoreEQ(v float64) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldOverallScore, v))
}

// OverallScoreNEQ applies the NEQ predicate on the "overall_score" field.
func OverallScoreNEQ(v float64) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNEQ(FieldOverallScore, v))
}

// OverallScoreIn applies the In predicate on the "overall_score" field.
func OverallScoreIn(vs ...float64) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIn(FieldOverallScore, vs...))
}

// OverallScoreNotIn applies the NotIn predicate on the "overall_score" field.
func OverallScoreNotIn(vs ...float64) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotIn(FieldOverallScore, vs...))
}

// OverallScoreGT applies the GT predicate on the "overall_score" field.
func OverallScoreGT(v float64) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldGT(FieldOverallScore, v))
}

// OverallScoreGTE applies the GTE predicate on the "overall_score" field.
func OverallScoreGTE(v float64) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldGTE(FieldOverallScore, v))
}

// OverallScoreLT applies the LT predicate on the "overall_score" field.
func OverallScoreLT(v float64) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldLT(FieldOverallScore, v))
}

// OverallScoreLTE applies the LTE predicate on the "overall_score" field.
func OverallScoreLTE(v float64) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldLTE(FieldOverallScore, v))
}

// MatchLevelEQ applies the EQ predicate on the "match_level" field.
func MatchLevelEQ(v MatchLevel) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldMatchLevel, v))
}

// MatchLevelNEQ applies the NEQ predicate on the "match_level" field.
func MatchLevelNEQ(v MatchLevel) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNEQ(FieldMatchLevel, v))
}

// MatchLevelIn applies the In predicate on the "match_level" field.
func MatchLevelIn(vs ...MatchLevel) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIn(FieldMatchLevel, vs...))
}

// MatchLevelNotIn applies the NotIn predicate on the "match_level" field.
func MatchLevelNotIn(vs ...MatchLevel) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotIn(FieldMatchLevel, vs...))
}

// MatchLevelIsNil applies the IsNil predicate on the "match_level" field.
func MatchLevelIsNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIsNull(FieldMatchLevel))
}

// MatchLevelNotNil applies the NotNil predicate on the "match_level" field.
func MatchLevelNotNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotNull(FieldMatchLevel))
}

// DimensionScoresIsNil applies the IsNil predicate on the "dimension_scores" field.
func DimensionScoresIsNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIsNull(FieldDimensionScores))
}

// DimensionScoresNotNil applies the NotNil predicate on the "dimension_scores" field.
func DimensionScoresNotNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotNull(FieldDimensionScores))
}

// SkillDetailIsNil applies the IsNil predicate on the "skill_detail" field.
func SkillDetailIsNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIsNull(FieldSkillDetail))
}

// SkillDetailNotNil applies the NotNil predicate on the "skill_detail" field.
func SkillDetailNotNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotNull(FieldSkillDetail))
}

// ResponsibilityDetailIsNil applies the IsNil predicate on the "responsibility_detail" field.
func ResponsibilityDetailIsNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIsNull(FieldResponsibilityDetail))
}

// ResponsibilityDetailNotNil applies the NotNil predicate on the "responsibility_detail" field.
func ResponsibilityDetailNotNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotNull(FieldResponsibilityDetail))
}

// ExperienceDetailIsNil applies the IsNil predicate on the "experience_detail" field.
func ExperienceDetailIsNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIsNull(FieldExperienceDetail))
}

// ExperienceDetailNotNil applies the NotNil predicate on the "experience_detail" field.
func ExperienceDetailNotNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotNull(FieldExperienceDetail))
}

// EducationDetailIsNil applies the IsNil predicate on the "education_detail" field.
func EducationDetailIsNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIsNull(FieldEducationDetail))
}

// EducationDetailNotNil applies the NotNil predicate on the "education_detail" field.
func EducationDetailNotNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotNull(FieldEducationDetail))
}

// IndustryDetailIsNil applies the IsNil predicate on the "industry_detail" field.
func IndustryDetailIsNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIsNull(FieldIndustryDetail))
}

// IndustryDetailNotNil applies the NotNil predicate on the "industry_detail" field.
func IndustryDetailNotNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotNull(FieldIndustryDetail))
}

// BasicDetailIsNil applies the IsNil predicate on the "basic_detail" field.
func BasicDetailIsNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIsNull(FieldBasicDetail))
}

// BasicDetailNotNil applies the NotNil predicate on the "basic_detail" field.
func BasicDetailNotNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotNull(FieldBasicDetail))
}

// RecommendationsIsNil applies the IsNil predicate on the "recommendations" field.
func RecommendationsIsNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIsNull(FieldRecommendations))
}

// RecommendationsNotNil applies the NotNil predicate on the "recommendations" field.
func RecommendationsNotNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotNull(FieldRecommendations))
}

// TraceIDEQ applies the EQ predicate on the "trace_id" field.
func TraceIDEQ(v string) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldTraceID, v))
}

// TraceIDNEQ applies the NEQ predicate on the "trace_id" field.
func TraceIDNEQ(v string) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNEQ(FieldTraceID, v))
}

// TraceIDIn applies the In predicate on the "trace_id" field.
func TraceIDIn(vs ...string) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIn(FieldTraceID, vs...))
}

// TraceIDNotIn applies the NotIn predicate on the "trace_id" field.
func TraceIDNotIn(vs ...string) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotIn(FieldTraceID, vs...))
}

// TraceIDGT applies the GT predicate on the "trace_id" field.
func TraceIDGT(v string) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldGT(FieldTraceID, v))
}

// TraceIDGTE applies the GTE predicate on the "trace_id" field.
func TraceIDGTE(v string) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldGTE(FieldTraceID, v))
}

// TraceIDLT applies the LT predicate on the "trace_id" field.
func TraceIDLT(v string) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldLT(FieldTraceID, v))
}

// TraceIDLTE applies the LTE predicate on the "trace_id" field.
func TraceIDLTE(v string) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldLTE(FieldTraceID, v))
}

// TraceIDContains applies the Contains predicate on the "trace_id" field.
func TraceIDContains(v string) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldContains(FieldTraceID, v))
}

// TraceIDHasPrefix applies the HasPrefix predicate on the "trace_id" field.
func TraceIDHasPrefix(v string) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldHasPrefix(FieldTraceID, v))
}

// TraceIDHasSuffix applies the HasSuffix predicate on the "trace_id" field.
func TraceIDHasSuffix(v string) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldHasSuffix(FieldTraceID, v))
}

// TraceIDIsNil applies the IsNil predicate on the "trace_id" field.
func TraceIDIsNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIsNull(FieldTraceID))
}

// TraceIDNotNil applies the NotNil predicate on the "trace_id" field.
func TraceIDNotNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotNull(FieldTraceID))
}

// TraceIDEqualFold applies the EqualFold predicate on the "trace_id" field.
func TraceIDEqualFold(v string) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEqualFold(FieldTraceID, v))
}

// TraceIDContainsFold applies the ContainsFold predicate on the "trace_id" field.
func TraceIDContainsFold(v string) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldContainsFold(FieldTraceID, v))
}

// RuntimeMetadataIsNil applies the IsNil predicate on the "runtime_metadata" field.
func RuntimeMetadataIsNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIsNull(FieldRuntimeMetadata))
}

// RuntimeMetadataNotNil applies the NotNil predicate on the "runtime_metadata" field.
func RuntimeMetadataNotNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotNull(FieldRuntimeMetadata))
}

// SubAgentVersionsIsNil applies the IsNil predicate on the "sub_agent_versions" field.
func SubAgentVersionsIsNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIsNull(FieldSubAgentVersions))
}

// SubAgentVersionsNotNil applies the NotNil predicate on the "sub_agent_versions" field.
func SubAgentVersionsNotNil() predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotNull(FieldSubAgentVersions))
}

// MatchedAtEQ applies the EQ predicate on the "matched_at" field.
func MatchedAtEQ(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldMatchedAt, v))
}

// MatchedAtNEQ applies the NEQ predicate on the "matched_at" field.
func MatchedAtNEQ(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNEQ(FieldMatchedAt, v))
}

// MatchedAtIn applies the In predicate on the "matched_at" field.
func MatchedAtIn(vs ...time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIn(FieldMatchedAt, vs...))
}

// MatchedAtNotIn applies the NotIn predicate on the "matched_at" field.
func MatchedAtNotIn(vs ...time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotIn(FieldMatchedAt, vs...))
}

// MatchedAtGT applies the GT predicate on the "matched_at" field.
func MatchedAtGT(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldGT(FieldMatchedAt, v))
}

// MatchedAtGTE applies the GTE predicate on the "matched_at" field.
func MatchedAtGTE(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldGTE(FieldMatchedAt, v))
}

// MatchedAtLT applies the LT predicate on the "matched_at" field.
func MatchedAtLT(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldLT(FieldMatchedAt, v))
}

// MatchedAtLTE applies the LTE predicate on the "matched_at" field.
func MatchedAtLTE(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldLTE(FieldMatchedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.ScreeningResult {
	return predicate.ScreeningResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.ScreeningTask) predicate.ScreeningResult {
	return predicate.ScreeningResult(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobPosition applies the HasEdge predicate on the "job_position" edge.
func HasJobPosition() predicate.ScreeningResult {
	return predicate.ScreeningResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobPositionTable, JobPositionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobPositionWith applies the HasEdge predicate on the "job_position" edge with a given conditions (other predicates).
func HasJobPositionWith(preds ...predicate.JobPosition) predicate.ScreeningResult {
	return predicate.ScreeningResult(func(s *sql.Selector) {
		step := newJobPositionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasResume applies the HasEdge predicate on the "resume" edge.
func HasResume() predicate.ScreeningResult {
	return predicate.ScreeningResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ResumeTable, ResumeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResumeWith applies the HasEdge predicate on the "resume" edge with a given conditions (other predicates).
func HasResumeWith(preds ...predicate.Resume) predicate.ScreeningResult {
	return predicate.ScreeningResult(func(s *sql.Selector) {
		step := newResumeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScreeningResult) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScreeningResult) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScreeningResult) predicate.ScreeningResult {
	return predicate.ScreeningResult(sql.NotPredicates(p))
}
