// Code generated by ent, DO NOT EDIT.

package screeningresult

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the screeningresult type in the database.
	Label = "screening_result"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldJobPositionID holds the string denoting the job_position_id field in the database.
	FieldJobPositionID = "job_position_id"
	// FieldResumeID holds the string denoting the resume_id field in the database.
	FieldResumeID = "resume_id"
	// FieldOverallScore holds the string denoting the overall_score field in the database.
	FieldOverallScore = "overall_score"
	// FieldMatchLevel holds the string denoting the match_level field in the database.
	FieldMatchLevel = "match_level"
	// FieldDimensionScores holds the string denoting the dimension_scores field in the database.
	FieldDimensionScores = "dimension_scores"
	// FieldSkillDetail holds the string denoting the skill_detail field in the database.
	FieldSkillDetail = "skill_detail"
	// FieldResponsibilityDetail holds the string denoting the responsibility_detail field in the database.
	FieldResponsibilityDetail = "responsibility_detail"
	// FieldExperienceDetail holds the string denoting the experience_detail field in the database.
	FieldExperienceDetail = "experience_detail"
	// FieldEducationDetail holds the string denoting the education_detail field in the database.
	FieldEducationDetail = "education_detail"
	// FieldIndustryDetail holds the string denoting the industry_detail field in the database.
	FieldIndustryDetail = "industry_detail"
	// FieldBasicDetail holds the string denoting the basic_detail field in the database.
	FieldBasicDetail = "basic_detail"
	// FieldRecommendations holds the string denoting the recommendations field in the database.
	FieldRecommendations = "recommendations"
	// FieldTraceID holds the string denoting the trace_id field in the database.
	FieldTraceID = "trace_id"
	// FieldRuntimeMetadata holds the string denoting the runtime_metadata field in the database.
	FieldRuntimeMetadata = "runtime_metadata"
	// FieldSubAgentVersions holds the string denoting the sub_agent_versions field in the database.
	FieldSubAgentVersions = "sub_agent_versions"
	// FieldMatchedAt holds the string denoting the matched_at field in the database.
	FieldMatchedAt = "matched_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// EdgeJobPosition holds the string denoting the job_position edge name in mutations.
	EdgeJobPosition = "job_position"
	// EdgeResume holds the string denoting the resume edge name in mutations.
	EdgeResume = "resume"
	// Table holds the table name of the screeningresult in the database.
	Table = "screening_results"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "screening_results"
	// TaskInverseTable is the table name for the ScreeningTask entity.
	// It exists in this package in order to avoid circular dependency with the "screeningtask" package.
	TaskInverseTable = "screening_tasks"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_id"
	// JobPositionTable is the table that holds the job_position relation/edge.
	JobPositionTable = "screening_results"
	// JobPositionInverseTable is the table name for the JobPosition entity.
	// It exists in this package in order to avoid circular dependency with the "jobposition" package.
	JobPositionInverseTable = "job_position"
	// JobPositionColumn is the table column denoting the job_position relation/edge.
	JobPositionColumn = "job_position_id"
	// ResumeTable is the table that holds the resume relation/edge.
	ResumeTable = "screening_results"
	// ResumeInverseTable is the table name for the Resume entity.
	// It exists in this package in order to avoid circular dependency with the "resume" package.
	ResumeInverseTable = "resumes"
	// ResumeColumn is the table column denoting the resume relation/edge.
	ResumeColumn = "resume_id"
)

// Columns holds all SQL columns for screeningresult fields.
var Columns = []string{
	FieldID,
	FieldDeletedAt,
	FieldTaskID,
	FieldJobPositionID,
	FieldResumeID,
	FieldOverallScore,
	FieldMatchLevel,
	FieldDimensionScores,
	FieldSkillDetail,
	FieldResponsibilityDetail,
	FieldExperienceDetail,
	FieldEducationDetail,
	FieldIndustryDetail,
	FieldBasicDetail,
	FieldRecommendations,
	FieldTraceID,
	FieldRuntimeMetadata,
	FieldSubAgentVersions,
	FieldMatchedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/chaitin/WhaleHire/backend/db/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// TraceIDValidator is a validator for the "trace_id" field. It is called by the builders before save.
	TraceIDValidator func(string) error
	// DefaultMatchedAt holds the default value on creation for the "matched_at" field.
	DefaultMatchedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// MatchLevel defines the type for the "match_level" enum field.
type MatchLevel string

// MatchLevel values.
const (
	MatchLevelExcellent MatchLevel = "excellent"
	MatchLevelGood      MatchLevel = "good"
	MatchLevelFair      MatchLevel = "fair"
	MatchLevelPoor      MatchLevel = "poor"
	MatchLevelNoMatch   MatchLevel = "no_match"
)

func (ml MatchLevel) String() string {
	return string(ml)
}

// MatchLevelValidator is a validator for the "match_level" field enum values. It is called by the builders before save.
func MatchLevelValidator(ml MatchLevel) error {
	switch ml {
	case MatchLevelExcellent, MatchLevelGood, MatchLevelFair, MatchLevelPoor, MatchLevelNoMatch:
		return nil
	default:
		return fmt.Errorf("screeningresult: invalid enum value for match_level field: %q", ml)
	}
}

// OrderOption defines the ordering options for the ScreeningResult queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByJobPositionID orders the results by the job_position_id field.
func ByJobPositionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobPositionID, opts...).ToFunc()
}

// ByResumeID orders the results by the resume_id field.
func ByResumeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResumeID, opts...).ToFunc()
}

// ByOverallScore orders the results by the overall_score field.
func ByOverallScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverallScore, opts...).ToFunc()
}

// ByMatchLevel orders the results by the match_level field.
func ByMatchLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMatchLevel, opts...).ToFunc()
}

// ByTraceID orders the results by the trace_id field.
func ByTraceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTraceID, opts...).ToFunc()
}

// ByMatchedAt orders the results by the matched_at field.
func ByMatchedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMatchedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}

// ByJobPositionField orders the results by job_position field.
func ByJobPositionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobPositionStep(), sql.OrderByField(field, opts...))
	}
}

// ByResumeField orders the results by resume field.
func ByResumeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResumeStep(), sql.OrderByField(field, opts...))
	}
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
	)
}
func newJobPositionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobPositionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, JobPositionTable, JobPositionColumn),
	)
}
func newResumeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResumeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ResumeTable, ResumeColumn),
	)
}
