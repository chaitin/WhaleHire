// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/screeningnoderun"
	"github.com/chaitin/WhaleHire/backend/db/screeningtask"
	"github.com/chaitin/WhaleHire/backend/db/screeningtaskresume"
	"github.com/google/uuid"
)

// ScreeningNodeRunCreate is the builder for creating a ScreeningNodeRun entity.
type ScreeningNodeRunCreate struct {
	config
	mutation *ScreeningNodeRunMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (snrc *ScreeningNodeRunCreate) SetDeletedAt(t time.Time) *ScreeningNodeRunCreate {
	snrc.mutation.SetDeletedAt(t)
	return snrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableDeletedAt(t *time.Time) *ScreeningNodeRunCreate {
	if t != nil {
		snrc.SetDeletedAt(*t)
	}
	return snrc
}

// SetTaskID sets the "task_id" field.
func (snrc *ScreeningNodeRunCreate) SetTaskID(u uuid.UUID) *ScreeningNodeRunCreate {
	snrc.mutation.SetTaskID(u)
	return snrc
}

// SetTaskResumeID sets the "task_resume_id" field.
func (snrc *ScreeningNodeRunCreate) SetTaskResumeID(u uuid.UUID) *ScreeningNodeRunCreate {
	snrc.mutation.SetTaskResumeID(u)
	return snrc
}

// SetNodeKey sets the "node_key" field.
func (snrc *ScreeningNodeRunCreate) SetNodeKey(s string) *ScreeningNodeRunCreate {
	snrc.mutation.SetNodeKey(s)
	return snrc
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableNodeKey(s *string) *ScreeningNodeRunCreate {
	if s != nil {
		snrc.SetNodeKey(*s)
	}
	return snrc
}

// SetStatus sets the "status" field.
func (snrc *ScreeningNodeRunCreate) SetStatus(s string) *ScreeningNodeRunCreate {
	snrc.mutation.SetStatus(s)
	return snrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableStatus(s *string) *ScreeningNodeRunCreate {
	if s != nil {
		snrc.SetStatus(*s)
	}
	return snrc
}

// SetAttemptNo sets the "attempt_no" field.
func (snrc *ScreeningNodeRunCreate) SetAttemptNo(i int) *ScreeningNodeRunCreate {
	snrc.mutation.SetAttemptNo(i)
	return snrc
}

// SetNillableAttemptNo sets the "attempt_no" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableAttemptNo(i *int) *ScreeningNodeRunCreate {
	if i != nil {
		snrc.SetAttemptNo(*i)
	}
	return snrc
}

// SetTraceID sets the "trace_id" field.
func (snrc *ScreeningNodeRunCreate) SetTraceID(s string) *ScreeningNodeRunCreate {
	snrc.mutation.SetTraceID(s)
	return snrc
}

// SetNillableTraceID sets the "trace_id" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableTraceID(s *string) *ScreeningNodeRunCreate {
	if s != nil {
		snrc.SetTraceID(*s)
	}
	return snrc
}

// SetAgentVersion sets the "agent_version" field.
func (snrc *ScreeningNodeRunCreate) SetAgentVersion(s string) *ScreeningNodeRunCreate {
	snrc.mutation.SetAgentVersion(s)
	return snrc
}

// SetNillableAgentVersion sets the "agent_version" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableAgentVersion(s *string) *ScreeningNodeRunCreate {
	if s != nil {
		snrc.SetAgentVersion(*s)
	}
	return snrc
}

// SetModelName sets the "model_name" field.
func (snrc *ScreeningNodeRunCreate) SetModelName(s string) *ScreeningNodeRunCreate {
	snrc.mutation.SetModelName(s)
	return snrc
}

// SetNillableModelName sets the "model_name" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableModelName(s *string) *ScreeningNodeRunCreate {
	if s != nil {
		snrc.SetModelName(*s)
	}
	return snrc
}

// SetModelProvider sets the "model_provider" field.
func (snrc *ScreeningNodeRunCreate) SetModelProvider(s string) *ScreeningNodeRunCreate {
	snrc.mutation.SetModelProvider(s)
	return snrc
}

// SetNillableModelProvider sets the "model_provider" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableModelProvider(s *string) *ScreeningNodeRunCreate {
	if s != nil {
		snrc.SetModelProvider(*s)
	}
	return snrc
}

// SetLlmParams sets the "llm_params" field.
func (snrc *ScreeningNodeRunCreate) SetLlmParams(m map[string]interface{}) *ScreeningNodeRunCreate {
	snrc.mutation.SetLlmParams(m)
	return snrc
}

// SetInputPayload sets the "input_payload" field.
func (snrc *ScreeningNodeRunCreate) SetInputPayload(m map[string]interface{}) *ScreeningNodeRunCreate {
	snrc.mutation.SetInputPayload(m)
	return snrc
}

// SetOutputPayload sets the "output_payload" field.
func (snrc *ScreeningNodeRunCreate) SetOutputPayload(m map[string]interface{}) *ScreeningNodeRunCreate {
	snrc.mutation.SetOutputPayload(m)
	return snrc
}

// SetErrorMessage sets the "error_message" field.
func (snrc *ScreeningNodeRunCreate) SetErrorMessage(s string) *ScreeningNodeRunCreate {
	snrc.mutation.SetErrorMessage(s)
	return snrc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableErrorMessage(s *string) *ScreeningNodeRunCreate {
	if s != nil {
		snrc.SetErrorMessage(*s)
	}
	return snrc
}

// SetTokensInput sets the "tokens_input" field.
func (snrc *ScreeningNodeRunCreate) SetTokensInput(i int64) *ScreeningNodeRunCreate {
	snrc.mutation.SetTokensInput(i)
	return snrc
}

// SetNillableTokensInput sets the "tokens_input" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableTokensInput(i *int64) *ScreeningNodeRunCreate {
	if i != nil {
		snrc.SetTokensInput(*i)
	}
	return snrc
}

// SetTokensOutput sets the "tokens_output" field.
func (snrc *ScreeningNodeRunCreate) SetTokensOutput(i int64) *ScreeningNodeRunCreate {
	snrc.mutation.SetTokensOutput(i)
	return snrc
}

// SetNillableTokensOutput sets the "tokens_output" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableTokensOutput(i *int64) *ScreeningNodeRunCreate {
	if i != nil {
		snrc.SetTokensOutput(*i)
	}
	return snrc
}

// SetTotalCost sets the "total_cost" field.
func (snrc *ScreeningNodeRunCreate) SetTotalCost(f float64) *ScreeningNodeRunCreate {
	snrc.mutation.SetTotalCost(f)
	return snrc
}

// SetNillableTotalCost sets the "total_cost" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableTotalCost(f *float64) *ScreeningNodeRunCreate {
	if f != nil {
		snrc.SetTotalCost(*f)
	}
	return snrc
}

// SetStartedAt sets the "started_at" field.
func (snrc *ScreeningNodeRunCreate) SetStartedAt(t time.Time) *ScreeningNodeRunCreate {
	snrc.mutation.SetStartedAt(t)
	return snrc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableStartedAt(t *time.Time) *ScreeningNodeRunCreate {
	if t != nil {
		snrc.SetStartedAt(*t)
	}
	return snrc
}

// SetFinishedAt sets the "finished_at" field.
func (snrc *ScreeningNodeRunCreate) SetFinishedAt(t time.Time) *ScreeningNodeRunCreate {
	snrc.mutation.SetFinishedAt(t)
	return snrc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableFinishedAt(t *time.Time) *ScreeningNodeRunCreate {
	if t != nil {
		snrc.SetFinishedAt(*t)
	}
	return snrc
}

// SetDurationMs sets the "duration_ms" field.
func (snrc *ScreeningNodeRunCreate) SetDurationMs(i int) *ScreeningNodeRunCreate {
	snrc.mutation.SetDurationMs(i)
	return snrc
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableDurationMs(i *int) *ScreeningNodeRunCreate {
	if i != nil {
		snrc.SetDurationMs(*i)
	}
	return snrc
}

// SetCreatedAt sets the "created_at" field.
func (snrc *ScreeningNodeRunCreate) SetCreatedAt(t time.Time) *ScreeningNodeRunCreate {
	snrc.mutation.SetCreatedAt(t)
	return snrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableCreatedAt(t *time.Time) *ScreeningNodeRunCreate {
	if t != nil {
		snrc.SetCreatedAt(*t)
	}
	return snrc
}

// SetUpdatedAt sets the "updated_at" field.
func (snrc *ScreeningNodeRunCreate) SetUpdatedAt(t time.Time) *ScreeningNodeRunCreate {
	snrc.mutation.SetUpdatedAt(t)
	return snrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableUpdatedAt(t *time.Time) *ScreeningNodeRunCreate {
	if t != nil {
		snrc.SetUpdatedAt(*t)
	}
	return snrc
}

// SetID sets the "id" field.
func (snrc *ScreeningNodeRunCreate) SetID(u uuid.UUID) *ScreeningNodeRunCreate {
	snrc.mutation.SetID(u)
	return snrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (snrc *ScreeningNodeRunCreate) SetNillableID(u *uuid.UUID) *ScreeningNodeRunCreate {
	if u != nil {
		snrc.SetID(*u)
	}
	return snrc
}

// SetTask sets the "task" edge to the ScreeningTask entity.
func (snrc *ScreeningNodeRunCreate) SetTask(s *ScreeningTask) *ScreeningNodeRunCreate {
	return snrc.SetTaskID(s.ID)
}

// SetTaskResume sets the "task_resume" edge to the ScreeningTaskResume entity.
func (snrc *ScreeningNodeRunCreate) SetTaskResume(s *ScreeningTaskResume) *ScreeningNodeRunCreate {
	return snrc.SetTaskResumeID(s.ID)
}

// Mutation returns the ScreeningNodeRunMutation object of the builder.
func (snrc *ScreeningNodeRunCreate) Mutation() *ScreeningNodeRunMutation {
	return snrc.mutation
}

// Save creates the ScreeningNodeRun in the database.
func (snrc *ScreeningNodeRunCreate) Save(ctx context.Context) (*ScreeningNodeRun, error) {
	if err := snrc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, snrc.sqlSave, snrc.mutation, snrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (snrc *ScreeningNodeRunCreate) SaveX(ctx context.Context) *ScreeningNodeRun {
	v, err := snrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (snrc *ScreeningNodeRunCreate) Exec(ctx context.Context) error {
	_, err := snrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snrc *ScreeningNodeRunCreate) ExecX(ctx context.Context) {
	if err := snrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (snrc *ScreeningNodeRunCreate) defaults() error {
	if _, ok := snrc.mutation.Status(); !ok {
		v := screeningnoderun.DefaultStatus
		snrc.mutation.SetStatus(v)
	}
	if _, ok := snrc.mutation.AttemptNo(); !ok {
		v := screeningnoderun.DefaultAttemptNo
		snrc.mutation.SetAttemptNo(v)
	}
	if _, ok := snrc.mutation.CreatedAt(); !ok {
		if screeningnoderun.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningnoderun.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := screeningnoderun.DefaultCreatedAt()
		snrc.mutation.SetCreatedAt(v)
	}
	if _, ok := snrc.mutation.UpdatedAt(); !ok {
		if screeningnoderun.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningnoderun.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := screeningnoderun.DefaultUpdatedAt()
		snrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := snrc.mutation.ID(); !ok {
		if screeningnoderun.DefaultID == nil {
			return fmt.Errorf("db: uninitialized screeningnoderun.DefaultID (forgotten import db/runtime?)")
		}
		v := screeningnoderun.DefaultID()
		snrc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (snrc *ScreeningNodeRunCreate) check() error {
	if _, ok := snrc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`db: missing required field "ScreeningNodeRun.task_id"`)}
	}
	if _, ok := snrc.mutation.TaskResumeID(); !ok {
		return &ValidationError{Name: "task_resume_id", err: errors.New(`db: missing required field "ScreeningNodeRun.task_resume_id"`)}
	}
	if _, ok := snrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "ScreeningNodeRun.status"`)}
	}
	if _, ok := snrc.mutation.AttemptNo(); !ok {
		return &ValidationError{Name: "attempt_no", err: errors.New(`db: missing required field "ScreeningNodeRun.attempt_no"`)}
	}
	if v, ok := snrc.mutation.TraceID(); ok {
		if err := screeningnoderun.TraceIDValidator(v); err != nil {
			return &ValidationError{Name: "trace_id", err: fmt.Errorf(`db: validator failed for field "ScreeningNodeRun.trace_id": %w`, err)}
		}
	}
	if v, ok := snrc.mutation.AgentVersion(); ok {
		if err := screeningnoderun.AgentVersionValidator(v); err != nil {
			return &ValidationError{Name: "agent_version", err: fmt.Errorf(`db: validator failed for field "ScreeningNodeRun.agent_version": %w`, err)}
		}
	}
	if v, ok := snrc.mutation.ModelName(); ok {
		if err := screeningnoderun.ModelNameValidator(v); err != nil {
			return &ValidationError{Name: "model_name", err: fmt.Errorf(`db: validator failed for field "ScreeningNodeRun.model_name": %w`, err)}
		}
	}
	if v, ok := snrc.mutation.ModelProvider(); ok {
		if err := screeningnoderun.ModelProviderValidator(v); err != nil {
			return &ValidationError{Name: "model_provider", err: fmt.Errorf(`db: validator failed for field "ScreeningNodeRun.model_provider": %w`, err)}
		}
	}
	if _, ok := snrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ScreeningNodeRun.created_at"`)}
	}
	if _, ok := snrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "ScreeningNodeRun.updated_at"`)}
	}
	if len(snrc.mutation.TaskIDs()) == 0 {
		return &ValidationError{Name: "task", err: errors.New(`db: missing required edge "ScreeningNodeRun.task"`)}
	}
	if len(snrc.mutation.TaskResumeIDs()) == 0 {
		return &ValidationError{Name: "task_resume", err: errors.New(`db: missing required edge "ScreeningNodeRun.task_resume"`)}
	}
	return nil
}

func (snrc *ScreeningNodeRunCreate) sqlSave(ctx context.Context) (*ScreeningNodeRun, error) {
	if err := snrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := snrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, snrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	snrc.mutation.id = &_node.ID
	snrc.mutation.done = true
	return _node, nil
}

func (snrc *ScreeningNodeRunCreate) createSpec() (*ScreeningNodeRun, *sqlgraph.CreateSpec) {
	var (
		_node = &ScreeningNodeRun{config: snrc.config}
		_spec = sqlgraph.NewCreateSpec(screeningnoderun.Table, sqlgraph.NewFieldSpec(screeningnoderun.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = snrc.conflict
	if id, ok := snrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := snrc.mutation.DeletedAt(); ok {
		_spec.SetField(screeningnoderun.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := snrc.mutation.NodeKey(); ok {
		_spec.SetField(screeningnoderun.FieldNodeKey, field.TypeString, value)
		_node.NodeKey = value
	}
	if value, ok := snrc.mutation.Status(); ok {
		_spec.SetField(screeningnoderun.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := snrc.mutation.AttemptNo(); ok {
		_spec.SetField(screeningnoderun.FieldAttemptNo, field.TypeInt, value)
		_node.AttemptNo = value
	}
	if value, ok := snrc.mutation.TraceID(); ok {
		_spec.SetField(screeningnoderun.FieldTraceID, field.TypeString, value)
		_node.TraceID = value
	}
	if value, ok := snrc.mutation.AgentVersion(); ok {
		_spec.SetField(screeningnoderun.FieldAgentVersion, field.TypeString, value)
		_node.AgentVersion = value
	}
	if value, ok := snrc.mutation.ModelName(); ok {
		_spec.SetField(screeningnoderun.FieldModelName, field.TypeString, value)
		_node.ModelName = value
	}
	if value, ok := snrc.mutation.ModelProvider(); ok {
		_spec.SetField(screeningnoderun.FieldModelProvider, field.TypeString, value)
		_node.ModelProvider = value
	}
	if value, ok := snrc.mutation.LlmParams(); ok {
		_spec.SetField(screeningnoderun.FieldLlmParams, field.TypeJSON, value)
		_node.LlmParams = value
	}
	if value, ok := snrc.mutation.InputPayload(); ok {
		_spec.SetField(screeningnoderun.FieldInputPayload, field.TypeJSON, value)
		_node.InputPayload = value
	}
	if value, ok := snrc.mutation.OutputPayload(); ok {
		_spec.SetField(screeningnoderun.FieldOutputPayload, field.TypeJSON, value)
		_node.OutputPayload = value
	}
	if value, ok := snrc.mutation.ErrorMessage(); ok {
		_spec.SetField(screeningnoderun.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := snrc.mutation.TokensInput(); ok {
		_spec.SetField(screeningnoderun.FieldTokensInput, field.TypeInt64, value)
		_node.TokensInput = value
	}
	if value, ok := snrc.mutation.TokensOutput(); ok {
		_spec.SetField(screeningnoderun.FieldTokensOutput, field.TypeInt64, value)
		_node.TokensOutput = value
	}
	if value, ok := snrc.mutation.TotalCost(); ok {
		_spec.SetField(screeningnoderun.FieldTotalCost, field.TypeFloat64, value)
		_node.TotalCost = value
	}
	if value, ok := snrc.mutation.StartedAt(); ok {
		_spec.SetField(screeningnoderun.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := snrc.mutation.FinishedAt(); ok {
		_spec.SetField(screeningnoderun.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = value
	}
	if value, ok := snrc.mutation.DurationMs(); ok {
		_spec.SetField(screeningnoderun.FieldDurationMs, field.TypeInt, value)
		_node.DurationMs = value
	}
	if value, ok := snrc.mutation.CreatedAt(); ok {
		_spec.SetField(screeningnoderun.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := snrc.mutation.UpdatedAt(); ok {
		_spec.SetField(screeningnoderun.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := snrc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningnoderun.TaskTable,
			Columns: []string{screeningnoderun.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := snrc.mutation.TaskResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningnoderun.TaskResumeTable,
			Columns: []string{screeningnoderun.TaskResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtaskresume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskResumeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScreeningNodeRun.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScreeningNodeRunUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (snrc *ScreeningNodeRunCreate) OnConflict(opts ...sql.ConflictOption) *ScreeningNodeRunUpsertOne {
	snrc.conflict = opts
	return &ScreeningNodeRunUpsertOne{
		create: snrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScreeningNodeRun.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (snrc *ScreeningNodeRunCreate) OnConflictColumns(columns ...string) *ScreeningNodeRunUpsertOne {
	snrc.conflict = append(snrc.conflict, sql.ConflictColumns(columns...))
	return &ScreeningNodeRunUpsertOne{
		create: snrc,
	}
}

type (
	// ScreeningNodeRunUpsertOne is the builder for "upsert"-ing
	//  one ScreeningNodeRun node.
	ScreeningNodeRunUpsertOne struct {
		create *ScreeningNodeRunCreate
	}

	// ScreeningNodeRunUpsert is the "OnConflict" setter.
	ScreeningNodeRunUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *ScreeningNodeRunUpsert) SetDeletedAt(v time.Time) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateDeletedAt() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScreeningNodeRunUpsert) ClearDeletedAt() *ScreeningNodeRunUpsert {
	u.SetNull(screeningnoderun.FieldDeletedAt)
	return u
}

// SetTaskID sets the "task_id" field.
func (u *ScreeningNodeRunUpsert) SetTaskID(v uuid.UUID) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateTaskID() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldTaskID)
	return u
}

// SetTaskResumeID sets the "task_resume_id" field.
func (u *ScreeningNodeRunUpsert) SetTaskResumeID(v uuid.UUID) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldTaskResumeID, v)
	return u
}

// UpdateTaskResumeID sets the "task_resume_id" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateTaskResumeID() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldTaskResumeID)
	return u
}

// SetNodeKey sets the "node_key" field.
func (u *ScreeningNodeRunUpsert) SetNodeKey(v string) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldNodeKey, v)
	return u
}

// UpdateNodeKey sets the "node_key" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateNodeKey() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldNodeKey)
	return u
}

// ClearNodeKey clears the value of the "node_key" field.
func (u *ScreeningNodeRunUpsert) ClearNodeKey() *ScreeningNodeRunUpsert {
	u.SetNull(screeningnoderun.FieldNodeKey)
	return u
}

// SetStatus sets the "status" field.
func (u *ScreeningNodeRunUpsert) SetStatus(v string) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateStatus() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldStatus)
	return u
}

// SetAttemptNo sets the "attempt_no" field.
func (u *ScreeningNodeRunUpsert) SetAttemptNo(v int) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldAttemptNo, v)
	return u
}

// UpdateAttemptNo sets the "attempt_no" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateAttemptNo() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldAttemptNo)
	return u
}

// AddAttemptNo adds v to the "attempt_no" field.
func (u *ScreeningNodeRunUpsert) AddAttemptNo(v int) *ScreeningNodeRunUpsert {
	u.Add(screeningnoderun.FieldAttemptNo, v)
	return u
}

// SetTraceID sets the "trace_id" field.
func (u *ScreeningNodeRunUpsert) SetTraceID(v string) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldTraceID, v)
	return u
}

// UpdateTraceID sets the "trace_id" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateTraceID() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldTraceID)
	return u
}

// ClearTraceID clears the value of the "trace_id" field.
func (u *ScreeningNodeRunUpsert) ClearTraceID() *ScreeningNodeRunUpsert {
	u.SetNull(screeningnoderun.FieldTraceID)
	return u
}

// SetAgentVersion sets the "agent_version" field.
func (u *ScreeningNodeRunUpsert) SetAgentVersion(v string) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldAgentVersion, v)
	return u
}

// UpdateAgentVersion sets the "agent_version" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateAgentVersion() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldAgentVersion)
	return u
}

// ClearAgentVersion clears the value of the "agent_version" field.
func (u *ScreeningNodeRunUpsert) ClearAgentVersion() *ScreeningNodeRunUpsert {
	u.SetNull(screeningnoderun.FieldAgentVersion)
	return u
}

// SetModelName sets the "model_name" field.
func (u *ScreeningNodeRunUpsert) SetModelName(v string) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldModelName, v)
	return u
}

// UpdateModelName sets the "model_name" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateModelName() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldModelName)
	return u
}

// ClearModelName clears the value of the "model_name" field.
func (u *ScreeningNodeRunUpsert) ClearModelName() *ScreeningNodeRunUpsert {
	u.SetNull(screeningnoderun.FieldModelName)
	return u
}

// SetModelProvider sets the "model_provider" field.
func (u *ScreeningNodeRunUpsert) SetModelProvider(v string) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldModelProvider, v)
	return u
}

// UpdateModelProvider sets the "model_provider" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateModelProvider() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldModelProvider)
	return u
}

// ClearModelProvider clears the value of the "model_provider" field.
func (u *ScreeningNodeRunUpsert) ClearModelProvider() *ScreeningNodeRunUpsert {
	u.SetNull(screeningnoderun.FieldModelProvider)
	return u
}

// SetLlmParams sets the "llm_params" field.
func (u *ScreeningNodeRunUpsert) SetLlmParams(v map[string]interface{}) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldLlmParams, v)
	return u
}

// UpdateLlmParams sets the "llm_params" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateLlmParams() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldLlmParams)
	return u
}

// ClearLlmParams clears the value of the "llm_params" field.
func (u *ScreeningNodeRunUpsert) ClearLlmParams() *ScreeningNodeRunUpsert {
	u.SetNull(screeningnoderun.FieldLlmParams)
	return u
}

// SetInputPayload sets the "input_payload" field.
func (u *ScreeningNodeRunUpsert) SetInputPayload(v map[string]interface{}) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldInputPayload, v)
	return u
}

// UpdateInputPayload sets the "input_payload" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateInputPayload() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldInputPayload)
	return u
}

// ClearInputPayload clears the value of the "input_payload" field.
func (u *ScreeningNodeRunUpsert) ClearInputPayload() *ScreeningNodeRunUpsert {
	u.SetNull(screeningnoderun.FieldInputPayload)
	return u
}

// SetOutputPayload sets the "output_payload" field.
func (u *ScreeningNodeRunUpsert) SetOutputPayload(v map[string]interface{}) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldOutputPayload, v)
	return u
}

// UpdateOutputPayload sets the "output_payload" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateOutputPayload() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldOutputPayload)
	return u
}

// ClearOutputPayload clears the value of the "output_payload" field.
func (u *ScreeningNodeRunUpsert) ClearOutputPayload() *ScreeningNodeRunUpsert {
	u.SetNull(screeningnoderun.FieldOutputPayload)
	return u
}

// SetErrorMessage sets the "error_message" field.
func (u *ScreeningNodeRunUpsert) SetErrorMessage(v string) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldErrorMessage, v)
	return u
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateErrorMessage() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldErrorMessage)
	return u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *ScreeningNodeRunUpsert) ClearErrorMessage() *ScreeningNodeRunUpsert {
	u.SetNull(screeningnoderun.FieldErrorMessage)
	return u
}

// SetTokensInput sets the "tokens_input" field.
func (u *ScreeningNodeRunUpsert) SetTokensInput(v int64) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldTokensInput, v)
	return u
}

// UpdateTokensInput sets the "tokens_input" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateTokensInput() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldTokensInput)
	return u
}

// AddTokensInput adds v to the "tokens_input" field.
func (u *ScreeningNodeRunUpsert) AddTokensInput(v int64) *ScreeningNodeRunUpsert {
	u.Add(screeningnoderun.FieldTokensInput, v)
	return u
}

// ClearTokensInput clears the value of the "tokens_input" field.
func (u *ScreeningNodeRunUpsert) ClearTokensInput() *ScreeningNodeRunUpsert {
	u.SetNull(screeningnoderun.FieldTokensInput)
	return u
}

// SetTokensOutput sets the "tokens_output" field.
func (u *ScreeningNodeRunUpsert) SetTokensOutput(v int64) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldTokensOutput, v)
	return u
}

// UpdateTokensOutput sets the "tokens_output" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateTokensOutput() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldTokensOutput)
	return u
}

// AddTokensOutput adds v to the "tokens_output" field.
func (u *ScreeningNodeRunUpsert) AddTokensOutput(v int64) *ScreeningNodeRunUpsert {
	u.Add(screeningnoderun.FieldTokensOutput, v)
	return u
}

// ClearTokensOutput clears the value of the "tokens_output" field.
func (u *ScreeningNodeRunUpsert) ClearTokensOutput() *ScreeningNodeRunUpsert {
	u.SetNull(screeningnoderun.FieldTokensOutput)
	return u
}

// SetTotalCost sets the "total_cost" field.
func (u *ScreeningNodeRunUpsert) SetTotalCost(v float64) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldTotalCost, v)
	return u
}

// UpdateTotalCost sets the "total_cost" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateTotalCost() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldTotalCost)
	return u
}

// AddTotalCost adds v to the "total_cost" field.
func (u *ScreeningNodeRunUpsert) AddTotalCost(v float64) *ScreeningNodeRunUpsert {
	u.Add(screeningnoderun.FieldTotalCost, v)
	return u
}

// ClearTotalCost clears the value of the "total_cost" field.
func (u *ScreeningNodeRunUpsert) ClearTotalCost() *ScreeningNodeRunUpsert {
	u.SetNull(screeningnoderun.FieldTotalCost)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *ScreeningNodeRunUpsert) SetStartedAt(v time.Time) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateStartedAt() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldStartedAt)
	return u
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ScreeningNodeRunUpsert) ClearStartedAt() *ScreeningNodeRunUpsert {
	u.SetNull(screeningnoderun.FieldStartedAt)
	return u
}

// SetFinishedAt sets the "finished_at" field.
func (u *ScreeningNodeRunUpsert) SetFinishedAt(v time.Time) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldFinishedAt, v)
	return u
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateFinishedAt() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldFinishedAt)
	return u
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *ScreeningNodeRunUpsert) ClearFinishedAt() *ScreeningNodeRunUpsert {
	u.SetNull(screeningnoderun.FieldFinishedAt)
	return u
}

// SetDurationMs sets the "duration_ms" field.
func (u *ScreeningNodeRunUpsert) SetDurationMs(v int) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldDurationMs, v)
	return u
}

// UpdateDurationMs sets the "duration_ms" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateDurationMs() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldDurationMs)
	return u
}

// AddDurationMs adds v to the "duration_ms" field.
func (u *ScreeningNodeRunUpsert) AddDurationMs(v int) *ScreeningNodeRunUpsert {
	u.Add(screeningnoderun.FieldDurationMs, v)
	return u
}

// ClearDurationMs clears the value of the "duration_ms" field.
func (u *ScreeningNodeRunUpsert) ClearDurationMs() *ScreeningNodeRunUpsert {
	u.SetNull(screeningnoderun.FieldDurationMs)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningNodeRunUpsert) SetUpdatedAt(v time.Time) *ScreeningNodeRunUpsert {
	u.Set(screeningnoderun.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsert) UpdateUpdatedAt() *ScreeningNodeRunUpsert {
	u.SetExcluded(screeningnoderun.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ScreeningNodeRun.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(screeningnoderun.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScreeningNodeRunUpsertOne) UpdateNewValues() *ScreeningNodeRunUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(screeningnoderun.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(screeningnoderun.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScreeningNodeRun.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ScreeningNodeRunUpsertOne) Ignore() *ScreeningNodeRunUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScreeningNodeRunUpsertOne) DoNothing() *ScreeningNodeRunUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScreeningNodeRunCreate.OnConflict
// documentation for more info.
func (u *ScreeningNodeRunUpsertOne) Update(set func(*ScreeningNodeRunUpsert)) *ScreeningNodeRunUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScreeningNodeRunUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ScreeningNodeRunUpsertOne) SetDeletedAt(v time.Time) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateDeletedAt() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScreeningNodeRunUpsertOne) ClearDeletedAt() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTaskID sets the "task_id" field.
func (u *ScreeningNodeRunUpsertOne) SetTaskID(v uuid.UUID) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateTaskID() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateTaskID()
	})
}

// SetTaskResumeID sets the "task_resume_id" field.
func (u *ScreeningNodeRunUpsertOne) SetTaskResumeID(v uuid.UUID) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetTaskResumeID(v)
	})
}

// UpdateTaskResumeID sets the "task_resume_id" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateTaskResumeID() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateTaskResumeID()
	})
}

// SetNodeKey sets the "node_key" field.
func (u *ScreeningNodeRunUpsertOne) SetNodeKey(v string) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetNodeKey(v)
	})
}

// UpdateNodeKey sets the "node_key" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateNodeKey() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateNodeKey()
	})
}

// ClearNodeKey clears the value of the "node_key" field.
func (u *ScreeningNodeRunUpsertOne) ClearNodeKey() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearNodeKey()
	})
}

// SetStatus sets the "status" field.
func (u *ScreeningNodeRunUpsertOne) SetStatus(v string) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateStatus() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateStatus()
	})
}

// SetAttemptNo sets the "attempt_no" field.
func (u *ScreeningNodeRunUpsertOne) SetAttemptNo(v int) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetAttemptNo(v)
	})
}

// AddAttemptNo adds v to the "attempt_no" field.
func (u *ScreeningNodeRunUpsertOne) AddAttemptNo(v int) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.AddAttemptNo(v)
	})
}

// UpdateAttemptNo sets the "attempt_no" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateAttemptNo() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateAttemptNo()
	})
}

// SetTraceID sets the "trace_id" field.
func (u *ScreeningNodeRunUpsertOne) SetTraceID(v string) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetTraceID(v)
	})
}

// UpdateTraceID sets the "trace_id" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateTraceID() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateTraceID()
	})
}

// ClearTraceID clears the value of the "trace_id" field.
func (u *ScreeningNodeRunUpsertOne) ClearTraceID() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearTraceID()
	})
}

// SetAgentVersion sets the "agent_version" field.
func (u *ScreeningNodeRunUpsertOne) SetAgentVersion(v string) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetAgentVersion(v)
	})
}

// UpdateAgentVersion sets the "agent_version" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateAgentVersion() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateAgentVersion()
	})
}

// ClearAgentVersion clears the value of the "agent_version" field.
func (u *ScreeningNodeRunUpsertOne) ClearAgentVersion() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearAgentVersion()
	})
}

// SetModelName sets the "model_name" field.
func (u *ScreeningNodeRunUpsertOne) SetModelName(v string) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetModelName(v)
	})
}

// UpdateModelName sets the "model_name" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateModelName() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateModelName()
	})
}

// ClearModelName clears the value of the "model_name" field.
func (u *ScreeningNodeRunUpsertOne) ClearModelName() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearModelName()
	})
}

// SetModelProvider sets the "model_provider" field.
func (u *ScreeningNodeRunUpsertOne) SetModelProvider(v string) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetModelProvider(v)
	})
}

// UpdateModelProvider sets the "model_provider" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateModelProvider() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateModelProvider()
	})
}

// ClearModelProvider clears the value of the "model_provider" field.
func (u *ScreeningNodeRunUpsertOne) ClearModelProvider() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearModelProvider()
	})
}

// SetLlmParams sets the "llm_params" field.
func (u *ScreeningNodeRunUpsertOne) SetLlmParams(v map[string]interface{}) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetLlmParams(v)
	})
}

// UpdateLlmParams sets the "llm_params" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateLlmParams() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateLlmParams()
	})
}

// ClearLlmParams clears the value of the "llm_params" field.
func (u *ScreeningNodeRunUpsertOne) ClearLlmParams() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearLlmParams()
	})
}

// SetInputPayload sets the "input_payload" field.
func (u *ScreeningNodeRunUpsertOne) SetInputPayload(v map[string]interface{}) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetInputPayload(v)
	})
}

// UpdateInputPayload sets the "input_payload" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateInputPayload() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateInputPayload()
	})
}

// ClearInputPayload clears the value of the "input_payload" field.
func (u *ScreeningNodeRunUpsertOne) ClearInputPayload() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearInputPayload()
	})
}

// SetOutputPayload sets the "output_payload" field.
func (u *ScreeningNodeRunUpsertOne) SetOutputPayload(v map[string]interface{}) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetOutputPayload(v)
	})
}

// UpdateOutputPayload sets the "output_payload" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateOutputPayload() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateOutputPayload()
	})
}

// ClearOutputPayload clears the value of the "output_payload" field.
func (u *ScreeningNodeRunUpsertOne) ClearOutputPayload() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearOutputPayload()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *ScreeningNodeRunUpsertOne) SetErrorMessage(v string) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateErrorMessage() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *ScreeningNodeRunUpsertOne) ClearErrorMessage() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearErrorMessage()
	})
}

// SetTokensInput sets the "tokens_input" field.
func (u *ScreeningNodeRunUpsertOne) SetTokensInput(v int64) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetTokensInput(v)
	})
}

// AddTokensInput adds v to the "tokens_input" field.
func (u *ScreeningNodeRunUpsertOne) AddTokensInput(v int64) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.AddTokensInput(v)
	})
}

// UpdateTokensInput sets the "tokens_input" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateTokensInput() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateTokensInput()
	})
}

// ClearTokensInput clears the value of the "tokens_input" field.
func (u *ScreeningNodeRunUpsertOne) ClearTokensInput() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearTokensInput()
	})
}

// SetTokensOutput sets the "tokens_output" field.
func (u *ScreeningNodeRunUpsertOne) SetTokensOutput(v int64) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetTokensOutput(v)
	})
}

// AddTokensOutput adds v to the "tokens_output" field.
func (u *ScreeningNodeRunUpsertOne) AddTokensOutput(v int64) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.AddTokensOutput(v)
	})
}

// UpdateTokensOutput sets the "tokens_output" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateTokensOutput() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateTokensOutput()
	})
}

// ClearTokensOutput clears the value of the "tokens_output" field.
func (u *ScreeningNodeRunUpsertOne) ClearTokensOutput() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearTokensOutput()
	})
}

// SetTotalCost sets the "total_cost" field.
func (u *ScreeningNodeRunUpsertOne) SetTotalCost(v float64) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetTotalCost(v)
	})
}

// AddTotalCost adds v to the "total_cost" field.
func (u *ScreeningNodeRunUpsertOne) AddTotalCost(v float64) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.AddTotalCost(v)
	})
}

// UpdateTotalCost sets the "total_cost" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateTotalCost() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateTotalCost()
	})
}

// ClearTotalCost clears the value of the "total_cost" field.
func (u *ScreeningNodeRunUpsertOne) ClearTotalCost() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearTotalCost()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *ScreeningNodeRunUpsertOne) SetStartedAt(v time.Time) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateStartedAt() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ScreeningNodeRunUpsertOne) ClearStartedAt() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *ScreeningNodeRunUpsertOne) SetFinishedAt(v time.Time) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateFinishedAt() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateFinishedAt()
	})
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *ScreeningNodeRunUpsertOne) ClearFinishedAt() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearFinishedAt()
	})
}

// SetDurationMs sets the "duration_ms" field.
func (u *ScreeningNodeRunUpsertOne) SetDurationMs(v int) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetDurationMs(v)
	})
}

// AddDurationMs adds v to the "duration_ms" field.
func (u *ScreeningNodeRunUpsertOne) AddDurationMs(v int) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.AddDurationMs(v)
	})
}

// UpdateDurationMs sets the "duration_ms" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateDurationMs() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateDurationMs()
	})
}

// ClearDurationMs clears the value of the "duration_ms" field.
func (u *ScreeningNodeRunUpsertOne) ClearDurationMs() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearDurationMs()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningNodeRunUpsertOne) SetUpdatedAt(v time.Time) *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertOne) UpdateUpdatedAt() *ScreeningNodeRunUpsertOne {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ScreeningNodeRunUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ScreeningNodeRunCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScreeningNodeRunUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScreeningNodeRunUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ScreeningNodeRunUpsertOne.ID is not supported by MySQL driver. Use ScreeningNodeRunUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScreeningNodeRunUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScreeningNodeRunCreateBulk is the builder for creating many ScreeningNodeRun entities in bulk.
type ScreeningNodeRunCreateBulk struct {
	config
	err      error
	builders []*ScreeningNodeRunCreate
	conflict []sql.ConflictOption
}

// Save creates the ScreeningNodeRun entities in the database.
func (snrcb *ScreeningNodeRunCreateBulk) Save(ctx context.Context) ([]*ScreeningNodeRun, error) {
	if snrcb.err != nil {
		return nil, snrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(snrcb.builders))
	nodes := make([]*ScreeningNodeRun, len(snrcb.builders))
	mutators := make([]Mutator, len(snrcb.builders))
	for i := range snrcb.builders {
		func(i int, root context.Context) {
			builder := snrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScreeningNodeRunMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, snrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = snrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, snrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, snrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (snrcb *ScreeningNodeRunCreateBulk) SaveX(ctx context.Context) []*ScreeningNodeRun {
	v, err := snrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (snrcb *ScreeningNodeRunCreateBulk) Exec(ctx context.Context) error {
	_, err := snrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snrcb *ScreeningNodeRunCreateBulk) ExecX(ctx context.Context) {
	if err := snrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScreeningNodeRun.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScreeningNodeRunUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (snrcb *ScreeningNodeRunCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScreeningNodeRunUpsertBulk {
	snrcb.conflict = opts
	return &ScreeningNodeRunUpsertBulk{
		create: snrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScreeningNodeRun.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (snrcb *ScreeningNodeRunCreateBulk) OnConflictColumns(columns ...string) *ScreeningNodeRunUpsertBulk {
	snrcb.conflict = append(snrcb.conflict, sql.ConflictColumns(columns...))
	return &ScreeningNodeRunUpsertBulk{
		create: snrcb,
	}
}

// ScreeningNodeRunUpsertBulk is the builder for "upsert"-ing
// a bulk of ScreeningNodeRun nodes.
type ScreeningNodeRunUpsertBulk struct {
	create *ScreeningNodeRunCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ScreeningNodeRun.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(screeningnoderun.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScreeningNodeRunUpsertBulk) UpdateNewValues() *ScreeningNodeRunUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(screeningnoderun.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(screeningnoderun.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScreeningNodeRun.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ScreeningNodeRunUpsertBulk) Ignore() *ScreeningNodeRunUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScreeningNodeRunUpsertBulk) DoNothing() *ScreeningNodeRunUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScreeningNodeRunCreateBulk.OnConflict
// documentation for more info.
func (u *ScreeningNodeRunUpsertBulk) Update(set func(*ScreeningNodeRunUpsert)) *ScreeningNodeRunUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScreeningNodeRunUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ScreeningNodeRunUpsertBulk) SetDeletedAt(v time.Time) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateDeletedAt() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScreeningNodeRunUpsertBulk) ClearDeletedAt() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTaskID sets the "task_id" field.
func (u *ScreeningNodeRunUpsertBulk) SetTaskID(v uuid.UUID) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateTaskID() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateTaskID()
	})
}

// SetTaskResumeID sets the "task_resume_id" field.
func (u *ScreeningNodeRunUpsertBulk) SetTaskResumeID(v uuid.UUID) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetTaskResumeID(v)
	})
}

// UpdateTaskResumeID sets the "task_resume_id" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateTaskResumeID() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateTaskResumeID()
	})
}

// SetNodeKey sets the "node_key" field.
func (u *ScreeningNodeRunUpsertBulk) SetNodeKey(v string) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetNodeKey(v)
	})
}

// UpdateNodeKey sets the "node_key" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateNodeKey() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateNodeKey()
	})
}

// ClearNodeKey clears the value of the "node_key" field.
func (u *ScreeningNodeRunUpsertBulk) ClearNodeKey() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearNodeKey()
	})
}

// SetStatus sets the "status" field.
func (u *ScreeningNodeRunUpsertBulk) SetStatus(v string) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateStatus() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateStatus()
	})
}

// SetAttemptNo sets the "attempt_no" field.
func (u *ScreeningNodeRunUpsertBulk) SetAttemptNo(v int) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetAttemptNo(v)
	})
}

// AddAttemptNo adds v to the "attempt_no" field.
func (u *ScreeningNodeRunUpsertBulk) AddAttemptNo(v int) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.AddAttemptNo(v)
	})
}

// UpdateAttemptNo sets the "attempt_no" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateAttemptNo() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateAttemptNo()
	})
}

// SetTraceID sets the "trace_id" field.
func (u *ScreeningNodeRunUpsertBulk) SetTraceID(v string) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetTraceID(v)
	})
}

// UpdateTraceID sets the "trace_id" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateTraceID() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateTraceID()
	})
}

// ClearTraceID clears the value of the "trace_id" field.
func (u *ScreeningNodeRunUpsertBulk) ClearTraceID() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearTraceID()
	})
}

// SetAgentVersion sets the "agent_version" field.
func (u *ScreeningNodeRunUpsertBulk) SetAgentVersion(v string) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetAgentVersion(v)
	})
}

// UpdateAgentVersion sets the "agent_version" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateAgentVersion() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateAgentVersion()
	})
}

// ClearAgentVersion clears the value of the "agent_version" field.
func (u *ScreeningNodeRunUpsertBulk) ClearAgentVersion() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearAgentVersion()
	})
}

// SetModelName sets the "model_name" field.
func (u *ScreeningNodeRunUpsertBulk) SetModelName(v string) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetModelName(v)
	})
}

// UpdateModelName sets the "model_name" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateModelName() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateModelName()
	})
}

// ClearModelName clears the value of the "model_name" field.
func (u *ScreeningNodeRunUpsertBulk) ClearModelName() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearModelName()
	})
}

// SetModelProvider sets the "model_provider" field.
func (u *ScreeningNodeRunUpsertBulk) SetModelProvider(v string) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetModelProvider(v)
	})
}

// UpdateModelProvider sets the "model_provider" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateModelProvider() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateModelProvider()
	})
}

// ClearModelProvider clears the value of the "model_provider" field.
func (u *ScreeningNodeRunUpsertBulk) ClearModelProvider() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearModelProvider()
	})
}

// SetLlmParams sets the "llm_params" field.
func (u *ScreeningNodeRunUpsertBulk) SetLlmParams(v map[string]interface{}) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetLlmParams(v)
	})
}

// UpdateLlmParams sets the "llm_params" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateLlmParams() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateLlmParams()
	})
}

// ClearLlmParams clears the value of the "llm_params" field.
func (u *ScreeningNodeRunUpsertBulk) ClearLlmParams() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearLlmParams()
	})
}

// SetInputPayload sets the "input_payload" field.
func (u *ScreeningNodeRunUpsertBulk) SetInputPayload(v map[string]interface{}) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetInputPayload(v)
	})
}

// UpdateInputPayload sets the "input_payload" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateInputPayload() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateInputPayload()
	})
}

// ClearInputPayload clears the value of the "input_payload" field.
func (u *ScreeningNodeRunUpsertBulk) ClearInputPayload() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearInputPayload()
	})
}

// SetOutputPayload sets the "output_payload" field.
func (u *ScreeningNodeRunUpsertBulk) SetOutputPayload(v map[string]interface{}) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetOutputPayload(v)
	})
}

// UpdateOutputPayload sets the "output_payload" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateOutputPayload() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateOutputPayload()
	})
}

// ClearOutputPayload clears the value of the "output_payload" field.
func (u *ScreeningNodeRunUpsertBulk) ClearOutputPayload() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearOutputPayload()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *ScreeningNodeRunUpsertBulk) SetErrorMessage(v string) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateErrorMessage() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *ScreeningNodeRunUpsertBulk) ClearErrorMessage() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearErrorMessage()
	})
}

// SetTokensInput sets the "tokens_input" field.
func (u *ScreeningNodeRunUpsertBulk) SetTokensInput(v int64) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetTokensInput(v)
	})
}

// AddTokensInput adds v to the "tokens_input" field.
func (u *ScreeningNodeRunUpsertBulk) AddTokensInput(v int64) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.AddTokensInput(v)
	})
}

// UpdateTokensInput sets the "tokens_input" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateTokensInput() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateTokensInput()
	})
}

// ClearTokensInput clears the value of the "tokens_input" field.
func (u *ScreeningNodeRunUpsertBulk) ClearTokensInput() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearTokensInput()
	})
}

// SetTokensOutput sets the "tokens_output" field.
func (u *ScreeningNodeRunUpsertBulk) SetTokensOutput(v int64) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetTokensOutput(v)
	})
}

// AddTokensOutput adds v to the "tokens_output" field.
func (u *ScreeningNodeRunUpsertBulk) AddTokensOutput(v int64) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.AddTokensOutput(v)
	})
}

// UpdateTokensOutput sets the "tokens_output" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateTokensOutput() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateTokensOutput()
	})
}

// ClearTokensOutput clears the value of the "tokens_output" field.
func (u *ScreeningNodeRunUpsertBulk) ClearTokensOutput() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearTokensOutput()
	})
}

// SetTotalCost sets the "total_cost" field.
func (u *ScreeningNodeRunUpsertBulk) SetTotalCost(v float64) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetTotalCost(v)
	})
}

// AddTotalCost adds v to the "total_cost" field.
func (u *ScreeningNodeRunUpsertBulk) AddTotalCost(v float64) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.AddTotalCost(v)
	})
}

// UpdateTotalCost sets the "total_cost" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateTotalCost() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateTotalCost()
	})
}

// ClearTotalCost clears the value of the "total_cost" field.
func (u *ScreeningNodeRunUpsertBulk) ClearTotalCost() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearTotalCost()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *ScreeningNodeRunUpsertBulk) SetStartedAt(v time.Time) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateStartedAt() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ScreeningNodeRunUpsertBulk) ClearStartedAt() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *ScreeningNodeRunUpsertBulk) SetFinishedAt(v time.Time) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateFinishedAt() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateFinishedAt()
	})
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *ScreeningNodeRunUpsertBulk) ClearFinishedAt() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearFinishedAt()
	})
}

// SetDurationMs sets the "duration_ms" field.
func (u *ScreeningNodeRunUpsertBulk) SetDurationMs(v int) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetDurationMs(v)
	})
}

// AddDurationMs adds v to the "duration_ms" field.
func (u *ScreeningNodeRunUpsertBulk) AddDurationMs(v int) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.AddDurationMs(v)
	})
}

// UpdateDurationMs sets the "duration_ms" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateDurationMs() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateDurationMs()
	})
}

// ClearDurationMs clears the value of the "duration_ms" field.
func (u *ScreeningNodeRunUpsertBulk) ClearDurationMs() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.ClearDurationMs()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningNodeRunUpsertBulk) SetUpdatedAt(v time.Time) *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningNodeRunUpsertBulk) UpdateUpdatedAt() *ScreeningNodeRunUpsertBulk {
	return u.Update(func(s *ScreeningNodeRunUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ScreeningNodeRunUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ScreeningNodeRunCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ScreeningNodeRunCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScreeningNodeRunUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
