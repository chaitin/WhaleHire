// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/jobskill"
	"github.com/chaitin/WhaleHire/backend/db/jobskillmeta"
	"github.com/google/uuid"
)

// JobSkillCreate is the builder for creating a JobSkill entity.
type JobSkillCreate struct {
	config
	mutation *JobSkillMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (jsc *JobSkillCreate) SetDeletedAt(t time.Time) *JobSkillCreate {
	jsc.mutation.SetDeletedAt(t)
	return jsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jsc *JobSkillCreate) SetNillableDeletedAt(t *time.Time) *JobSkillCreate {
	if t != nil {
		jsc.SetDeletedAt(*t)
	}
	return jsc
}

// SetJobID sets the "job_id" field.
func (jsc *JobSkillCreate) SetJobID(u uuid.UUID) *JobSkillCreate {
	jsc.mutation.SetJobID(u)
	return jsc
}

// SetSkillID sets the "skill_id" field.
func (jsc *JobSkillCreate) SetSkillID(u uuid.UUID) *JobSkillCreate {
	jsc.mutation.SetSkillID(u)
	return jsc
}

// SetType sets the "type" field.
func (jsc *JobSkillCreate) SetType(j jobskill.Type) *JobSkillCreate {
	jsc.mutation.SetType(j)
	return jsc
}

// SetWeight sets the "weight" field.
func (jsc *JobSkillCreate) SetWeight(i int) *JobSkillCreate {
	jsc.mutation.SetWeight(i)
	return jsc
}

// SetCreatedAt sets the "created_at" field.
func (jsc *JobSkillCreate) SetCreatedAt(t time.Time) *JobSkillCreate {
	jsc.mutation.SetCreatedAt(t)
	return jsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jsc *JobSkillCreate) SetNillableCreatedAt(t *time.Time) *JobSkillCreate {
	if t != nil {
		jsc.SetCreatedAt(*t)
	}
	return jsc
}

// SetUpdatedAt sets the "updated_at" field.
func (jsc *JobSkillCreate) SetUpdatedAt(t time.Time) *JobSkillCreate {
	jsc.mutation.SetUpdatedAt(t)
	return jsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jsc *JobSkillCreate) SetNillableUpdatedAt(t *time.Time) *JobSkillCreate {
	if t != nil {
		jsc.SetUpdatedAt(*t)
	}
	return jsc
}

// SetID sets the "id" field.
func (jsc *JobSkillCreate) SetID(u uuid.UUID) *JobSkillCreate {
	jsc.mutation.SetID(u)
	return jsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jsc *JobSkillCreate) SetNillableID(u *uuid.UUID) *JobSkillCreate {
	if u != nil {
		jsc.SetID(*u)
	}
	return jsc
}

// SetJob sets the "job" edge to the JobPosition entity.
func (jsc *JobSkillCreate) SetJob(j *JobPosition) *JobSkillCreate {
	return jsc.SetJobID(j.ID)
}

// SetSkill sets the "skill" edge to the JobSkillMeta entity.
func (jsc *JobSkillCreate) SetSkill(j *JobSkillMeta) *JobSkillCreate {
	return jsc.SetSkillID(j.ID)
}

// Mutation returns the JobSkillMutation object of the builder.
func (jsc *JobSkillCreate) Mutation() *JobSkillMutation {
	return jsc.mutation
}

// Save creates the JobSkill in the database.
func (jsc *JobSkillCreate) Save(ctx context.Context) (*JobSkill, error) {
	if err := jsc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jsc.sqlSave, jsc.mutation, jsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jsc *JobSkillCreate) SaveX(ctx context.Context) *JobSkill {
	v, err := jsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jsc *JobSkillCreate) Exec(ctx context.Context) error {
	_, err := jsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jsc *JobSkillCreate) ExecX(ctx context.Context) {
	if err := jsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jsc *JobSkillCreate) defaults() error {
	if _, ok := jsc.mutation.CreatedAt(); !ok {
		if jobskill.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized jobskill.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := jobskill.DefaultCreatedAt()
		jsc.mutation.SetCreatedAt(v)
	}
	if _, ok := jsc.mutation.UpdatedAt(); !ok {
		if jobskill.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized jobskill.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := jobskill.DefaultUpdatedAt()
		jsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jsc.mutation.ID(); !ok {
		if jobskill.DefaultID == nil {
			return fmt.Errorf("db: uninitialized jobskill.DefaultID (forgotten import db/runtime?)")
		}
		v := jobskill.DefaultID()
		jsc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jsc *JobSkillCreate) check() error {
	if _, ok := jsc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job_id", err: errors.New(`db: missing required field "JobSkill.job_id"`)}
	}
	if _, ok := jsc.mutation.SkillID(); !ok {
		return &ValidationError{Name: "skill_id", err: errors.New(`db: missing required field "JobSkill.skill_id"`)}
	}
	if _, ok := jsc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "JobSkill.type"`)}
	}
	if v, ok := jsc.mutation.GetType(); ok {
		if err := jobskill.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "JobSkill.type": %w`, err)}
		}
	}
	if _, ok := jsc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`db: missing required field "JobSkill.weight"`)}
	}
	if v, ok := jsc.mutation.Weight(); ok {
		if err := jobskill.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`db: validator failed for field "JobSkill.weight": %w`, err)}
		}
	}
	if _, ok := jsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "JobSkill.created_at"`)}
	}
	if _, ok := jsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "JobSkill.updated_at"`)}
	}
	if len(jsc.mutation.JobIDs()) == 0 {
		return &ValidationError{Name: "job", err: errors.New(`db: missing required edge "JobSkill.job"`)}
	}
	if len(jsc.mutation.SkillIDs()) == 0 {
		return &ValidationError{Name: "skill", err: errors.New(`db: missing required edge "JobSkill.skill"`)}
	}
	return nil
}

func (jsc *JobSkillCreate) sqlSave(ctx context.Context) (*JobSkill, error) {
	if err := jsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	jsc.mutation.id = &_node.ID
	jsc.mutation.done = true
	return _node, nil
}

func (jsc *JobSkillCreate) createSpec() (*JobSkill, *sqlgraph.CreateSpec) {
	var (
		_node = &JobSkill{config: jsc.config}
		_spec = sqlgraph.NewCreateSpec(jobskill.Table, sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = jsc.conflict
	if id, ok := jsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := jsc.mutation.DeletedAt(); ok {
		_spec.SetField(jobskill.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := jsc.mutation.GetType(); ok {
		_spec.SetField(jobskill.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := jsc.mutation.Weight(); ok {
		_spec.SetField(jobskill.FieldWeight, field.TypeInt, value)
		_node.Weight = value
	}
	if value, ok := jsc.mutation.CreatedAt(); ok {
		_spec.SetField(jobskill.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jsc.mutation.UpdatedAt(); ok {
		_spec.SetField(jobskill.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := jsc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobskill.JobTable,
			Columns: []string{jobskill.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.JobID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jsc.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobskill.SkillTable,
			Columns: []string{jobskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskillmeta.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SkillID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobSkill.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobSkillUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (jsc *JobSkillCreate) OnConflict(opts ...sql.ConflictOption) *JobSkillUpsertOne {
	jsc.conflict = opts
	return &JobSkillUpsertOne{
		create: jsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobSkill.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jsc *JobSkillCreate) OnConflictColumns(columns ...string) *JobSkillUpsertOne {
	jsc.conflict = append(jsc.conflict, sql.ConflictColumns(columns...))
	return &JobSkillUpsertOne{
		create: jsc,
	}
}

type (
	// JobSkillUpsertOne is the builder for "upsert"-ing
	//  one JobSkill node.
	JobSkillUpsertOne struct {
		create *JobSkillCreate
	}

	// JobSkillUpsert is the "OnConflict" setter.
	JobSkillUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *JobSkillUpsert) SetDeletedAt(v time.Time) *JobSkillUpsert {
	u.Set(jobskill.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobSkillUpsert) UpdateDeletedAt() *JobSkillUpsert {
	u.SetExcluded(jobskill.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobSkillUpsert) ClearDeletedAt() *JobSkillUpsert {
	u.SetNull(jobskill.FieldDeletedAt)
	return u
}

// SetJobID sets the "job_id" field.
func (u *JobSkillUpsert) SetJobID(v uuid.UUID) *JobSkillUpsert {
	u.Set(jobskill.FieldJobID, v)
	return u
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *JobSkillUpsert) UpdateJobID() *JobSkillUpsert {
	u.SetExcluded(jobskill.FieldJobID)
	return u
}

// SetSkillID sets the "skill_id" field.
func (u *JobSkillUpsert) SetSkillID(v uuid.UUID) *JobSkillUpsert {
	u.Set(jobskill.FieldSkillID, v)
	return u
}

// UpdateSkillID sets the "skill_id" field to the value that was provided on create.
func (u *JobSkillUpsert) UpdateSkillID() *JobSkillUpsert {
	u.SetExcluded(jobskill.FieldSkillID)
	return u
}

// SetType sets the "type" field.
func (u *JobSkillUpsert) SetType(v jobskill.Type) *JobSkillUpsert {
	u.Set(jobskill.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *JobSkillUpsert) UpdateType() *JobSkillUpsert {
	u.SetExcluded(jobskill.FieldType)
	return u
}

// SetWeight sets the "weight" field.
func (u *JobSkillUpsert) SetWeight(v int) *JobSkillUpsert {
	u.Set(jobskill.FieldWeight, v)
	return u
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *JobSkillUpsert) UpdateWeight() *JobSkillUpsert {
	u.SetExcluded(jobskill.FieldWeight)
	return u
}

// AddWeight adds v to the "weight" field.
func (u *JobSkillUpsert) AddWeight(v int) *JobSkillUpsert {
	u.Add(jobskill.FieldWeight, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobSkillUpsert) SetUpdatedAt(v time.Time) *JobSkillUpsert {
	u.Set(jobskill.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobSkillUpsert) UpdateUpdatedAt() *JobSkillUpsert {
	u.SetExcluded(jobskill.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.JobSkill.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobskill.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobSkillUpsertOne) UpdateNewValues() *JobSkillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(jobskill.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(jobskill.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobSkill.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *JobSkillUpsertOne) Ignore() *JobSkillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobSkillUpsertOne) DoNothing() *JobSkillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobSkillCreate.OnConflict
// documentation for more info.
func (u *JobSkillUpsertOne) Update(set func(*JobSkillUpsert)) *JobSkillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobSkillUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *JobSkillUpsertOne) SetDeletedAt(v time.Time) *JobSkillUpsertOne {
	return u.Update(func(s *JobSkillUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobSkillUpsertOne) UpdateDeletedAt() *JobSkillUpsertOne {
	return u.Update(func(s *JobSkillUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobSkillUpsertOne) ClearDeletedAt() *JobSkillUpsertOne {
	return u.Update(func(s *JobSkillUpsert) {
		s.ClearDeletedAt()
	})
}

// SetJobID sets the "job_id" field.
func (u *JobSkillUpsertOne) SetJobID(v uuid.UUID) *JobSkillUpsertOne {
	return u.Update(func(s *JobSkillUpsert) {
		s.SetJobID(v)
	})
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *JobSkillUpsertOne) UpdateJobID() *JobSkillUpsertOne {
	return u.Update(func(s *JobSkillUpsert) {
		s.UpdateJobID()
	})
}

// SetSkillID sets the "skill_id" field.
func (u *JobSkillUpsertOne) SetSkillID(v uuid.UUID) *JobSkillUpsertOne {
	return u.Update(func(s *JobSkillUpsert) {
		s.SetSkillID(v)
	})
}

// UpdateSkillID sets the "skill_id" field to the value that was provided on create.
func (u *JobSkillUpsertOne) UpdateSkillID() *JobSkillUpsertOne {
	return u.Update(func(s *JobSkillUpsert) {
		s.UpdateSkillID()
	})
}

// SetType sets the "type" field.
func (u *JobSkillUpsertOne) SetType(v jobskill.Type) *JobSkillUpsertOne {
	return u.Update(func(s *JobSkillUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *JobSkillUpsertOne) UpdateType() *JobSkillUpsertOne {
	return u.Update(func(s *JobSkillUpsert) {
		s.UpdateType()
	})
}

// SetWeight sets the "weight" field.
func (u *JobSkillUpsertOne) SetWeight(v int) *JobSkillUpsertOne {
	return u.Update(func(s *JobSkillUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *JobSkillUpsertOne) AddWeight(v int) *JobSkillUpsertOne {
	return u.Update(func(s *JobSkillUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *JobSkillUpsertOne) UpdateWeight() *JobSkillUpsertOne {
	return u.Update(func(s *JobSkillUpsert) {
		s.UpdateWeight()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobSkillUpsertOne) SetUpdatedAt(v time.Time) *JobSkillUpsertOne {
	return u.Update(func(s *JobSkillUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobSkillUpsertOne) UpdateUpdatedAt() *JobSkillUpsertOne {
	return u.Update(func(s *JobSkillUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *JobSkillUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for JobSkillCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobSkillUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *JobSkillUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: JobSkillUpsertOne.ID is not supported by MySQL driver. Use JobSkillUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *JobSkillUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// JobSkillCreateBulk is the builder for creating many JobSkill entities in bulk.
type JobSkillCreateBulk struct {
	config
	err      error
	builders []*JobSkillCreate
	conflict []sql.ConflictOption
}

// Save creates the JobSkill entities in the database.
func (jscb *JobSkillCreateBulk) Save(ctx context.Context) ([]*JobSkill, error) {
	if jscb.err != nil {
		return nil, jscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jscb.builders))
	nodes := make([]*JobSkill, len(jscb.builders))
	mutators := make([]Mutator, len(jscb.builders))
	for i := range jscb.builders {
		func(i int, root context.Context) {
			builder := jscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobSkillMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = jscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jscb *JobSkillCreateBulk) SaveX(ctx context.Context) []*JobSkill {
	v, err := jscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jscb *JobSkillCreateBulk) Exec(ctx context.Context) error {
	_, err := jscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jscb *JobSkillCreateBulk) ExecX(ctx context.Context) {
	if err := jscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobSkill.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobSkillUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (jscb *JobSkillCreateBulk) OnConflict(opts ...sql.ConflictOption) *JobSkillUpsertBulk {
	jscb.conflict = opts
	return &JobSkillUpsertBulk{
		create: jscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobSkill.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jscb *JobSkillCreateBulk) OnConflictColumns(columns ...string) *JobSkillUpsertBulk {
	jscb.conflict = append(jscb.conflict, sql.ConflictColumns(columns...))
	return &JobSkillUpsertBulk{
		create: jscb,
	}
}

// JobSkillUpsertBulk is the builder for "upsert"-ing
// a bulk of JobSkill nodes.
type JobSkillUpsertBulk struct {
	create *JobSkillCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.JobSkill.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobskill.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobSkillUpsertBulk) UpdateNewValues() *JobSkillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(jobskill.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(jobskill.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobSkill.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *JobSkillUpsertBulk) Ignore() *JobSkillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobSkillUpsertBulk) DoNothing() *JobSkillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobSkillCreateBulk.OnConflict
// documentation for more info.
func (u *JobSkillUpsertBulk) Update(set func(*JobSkillUpsert)) *JobSkillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobSkillUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *JobSkillUpsertBulk) SetDeletedAt(v time.Time) *JobSkillUpsertBulk {
	return u.Update(func(s *JobSkillUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobSkillUpsertBulk) UpdateDeletedAt() *JobSkillUpsertBulk {
	return u.Update(func(s *JobSkillUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobSkillUpsertBulk) ClearDeletedAt() *JobSkillUpsertBulk {
	return u.Update(func(s *JobSkillUpsert) {
		s.ClearDeletedAt()
	})
}

// SetJobID sets the "job_id" field.
func (u *JobSkillUpsertBulk) SetJobID(v uuid.UUID) *JobSkillUpsertBulk {
	return u.Update(func(s *JobSkillUpsert) {
		s.SetJobID(v)
	})
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *JobSkillUpsertBulk) UpdateJobID() *JobSkillUpsertBulk {
	return u.Update(func(s *JobSkillUpsert) {
		s.UpdateJobID()
	})
}

// SetSkillID sets the "skill_id" field.
func (u *JobSkillUpsertBulk) SetSkillID(v uuid.UUID) *JobSkillUpsertBulk {
	return u.Update(func(s *JobSkillUpsert) {
		s.SetSkillID(v)
	})
}

// UpdateSkillID sets the "skill_id" field to the value that was provided on create.
func (u *JobSkillUpsertBulk) UpdateSkillID() *JobSkillUpsertBulk {
	return u.Update(func(s *JobSkillUpsert) {
		s.UpdateSkillID()
	})
}

// SetType sets the "type" field.
func (u *JobSkillUpsertBulk) SetType(v jobskill.Type) *JobSkillUpsertBulk {
	return u.Update(func(s *JobSkillUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *JobSkillUpsertBulk) UpdateType() *JobSkillUpsertBulk {
	return u.Update(func(s *JobSkillUpsert) {
		s.UpdateType()
	})
}

// SetWeight sets the "weight" field.
func (u *JobSkillUpsertBulk) SetWeight(v int) *JobSkillUpsertBulk {
	return u.Update(func(s *JobSkillUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *JobSkillUpsertBulk) AddWeight(v int) *JobSkillUpsertBulk {
	return u.Update(func(s *JobSkillUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *JobSkillUpsertBulk) UpdateWeight() *JobSkillUpsertBulk {
	return u.Update(func(s *JobSkillUpsert) {
		s.UpdateWeight()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobSkillUpsertBulk) SetUpdatedAt(v time.Time) *JobSkillUpsertBulk {
	return u.Update(func(s *JobSkillUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobSkillUpsertBulk) UpdateUpdatedAt() *JobSkillUpsertBulk {
	return u.Update(func(s *JobSkillUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *JobSkillUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the JobSkillCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for JobSkillCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobSkillUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
