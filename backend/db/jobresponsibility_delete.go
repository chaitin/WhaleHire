// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobresponsibility"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
)

// JobResponsibilityDelete is the builder for deleting a JobResponsibility entity.
type JobResponsibilityDelete struct {
	config
	hooks    []Hook
	mutation *JobResponsibilityMutation
}

// Where appends a list predicates to the JobResponsibilityDelete builder.
func (jrd *JobResponsibilityDelete) Where(ps ...predicate.JobResponsibility) *JobResponsibilityDelete {
	jrd.mutation.Where(ps...)
	return jrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jrd *JobResponsibilityDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, jrd.sqlExec, jrd.mutation, jrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jrd *JobResponsibilityDelete) ExecX(ctx context.Context) int {
	n, err := jrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jrd *JobResponsibilityDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(jobresponsibility.Table, sqlgraph.NewFieldSpec(jobresponsibility.FieldID, field.TypeUUID))
	if ps := jrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jrd.mutation.done = true
	return affected, err
}

// JobResponsibilityDeleteOne is the builder for deleting a single JobResponsibility entity.
type JobResponsibilityDeleteOne struct {
	jrd *JobResponsibilityDelete
}

// Where appends a list predicates to the JobResponsibilityDelete builder.
func (jrdo *JobResponsibilityDeleteOne) Where(ps ...predicate.JobResponsibility) *JobResponsibilityDeleteOne {
	jrdo.jrd.mutation.Where(ps...)
	return jrdo
}

// Exec executes the deletion query.
func (jrdo *JobResponsibilityDeleteOne) Exec(ctx context.Context) error {
	n, err := jrdo.jrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{jobresponsibility.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jrdo *JobResponsibilityDeleteOne) ExecX(ctx context.Context) {
	if err := jrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
