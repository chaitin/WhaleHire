// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobeducationrequirement"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
)

// JobEducationRequirementDelete is the builder for deleting a JobEducationRequirement entity.
type JobEducationRequirementDelete struct {
	config
	hooks    []Hook
	mutation *JobEducationRequirementMutation
}

// Where appends a list predicates to the JobEducationRequirementDelete builder.
func (jerd *JobEducationRequirementDelete) Where(ps ...predicate.JobEducationRequirement) *JobEducationRequirementDelete {
	jerd.mutation.Where(ps...)
	return jerd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jerd *JobEducationRequirementDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, jerd.sqlExec, jerd.mutation, jerd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jerd *JobEducationRequirementDelete) ExecX(ctx context.Context) int {
	n, err := jerd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jerd *JobEducationRequirementDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(jobeducationrequirement.Table, sqlgraph.NewFieldSpec(jobeducationrequirement.FieldID, field.TypeUUID))
	if ps := jerd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jerd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jerd.mutation.done = true
	return affected, err
}

// JobEducationRequirementDeleteOne is the builder for deleting a single JobEducationRequirement entity.
type JobEducationRequirementDeleteOne struct {
	jerd *JobEducationRequirementDelete
}

// Where appends a list predicates to the JobEducationRequirementDelete builder.
func (jerdo *JobEducationRequirementDeleteOne) Where(ps ...predicate.JobEducationRequirement) *JobEducationRequirementDeleteOne {
	jerdo.jerd.mutation.Where(ps...)
	return jerdo
}

// Exec executes the deletion query.
func (jerdo *JobEducationRequirementDeleteOne) Exec(ctx context.Context) error {
	n, err := jerdo.jerd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{jobeducationrequirement.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jerdo *JobEducationRequirementDeleteOne) ExecX(ctx context.Context) {
	if err := jerdo.Exec(ctx); err != nil {
		panic(err)
	}
}
