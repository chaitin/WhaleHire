// Code generated by ent, DO NOT EDIT.

package resumejobapplication

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldDeletedAt, v))
}

// ResumeID applies equality check predicate on the "resume_id" field. It's identical to ResumeIDEQ.
func ResumeID(v uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldResumeID, v))
}

// JobPositionID applies equality check predicate on the "job_position_id" field. It's identical to JobPositionIDEQ.
func JobPositionID(v uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldJobPositionID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldStatus, v))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldSource, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldNotes, v))
}

// AppliedAt applies equality check predicate on the "applied_at" field. It's identical to AppliedAtEQ.
func AppliedAt(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldAppliedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNotNull(FieldDeletedAt))
}

// ResumeIDEQ applies the EQ predicate on the "resume_id" field.
func ResumeIDEQ(v uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldResumeID, v))
}

// ResumeIDNEQ applies the NEQ predicate on the "resume_id" field.
func ResumeIDNEQ(v uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNEQ(FieldResumeID, v))
}

// ResumeIDIn applies the In predicate on the "resume_id" field.
func ResumeIDIn(vs ...uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldIn(FieldResumeID, vs...))
}

// ResumeIDNotIn applies the NotIn predicate on the "resume_id" field.
func ResumeIDNotIn(vs ...uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNotIn(FieldResumeID, vs...))
}

// JobPositionIDEQ applies the EQ predicate on the "job_position_id" field.
func JobPositionIDEQ(v uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldJobPositionID, v))
}

// JobPositionIDNEQ applies the NEQ predicate on the "job_position_id" field.
func JobPositionIDNEQ(v uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNEQ(FieldJobPositionID, v))
}

// JobPositionIDIn applies the In predicate on the "job_position_id" field.
func JobPositionIDIn(vs ...uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldIn(FieldJobPositionID, vs...))
}

// JobPositionIDNotIn applies the NotIn predicate on the "job_position_id" field.
func JobPositionIDNotIn(vs ...uuid.UUID) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNotIn(FieldJobPositionID, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldContainsFold(FieldStatus, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldLTE(FieldSource, v))
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldContains(FieldSource, v))
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldHasPrefix(FieldSource, v))
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldHasSuffix(FieldSource, v))
}

// SourceIsNil applies the IsNil predicate on the "source" field.
func SourceIsNil() predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldIsNull(FieldSource))
}

// SourceNotNil applies the NotNil predicate on the "source" field.
func SourceNotNil() predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNotNull(FieldSource))
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEqualFold(FieldSource, v))
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldContainsFold(FieldSource, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldContainsFold(FieldNotes, v))
}

// AppliedAtEQ applies the EQ predicate on the "applied_at" field.
func AppliedAtEQ(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldAppliedAt, v))
}

// AppliedAtNEQ applies the NEQ predicate on the "applied_at" field.
func AppliedAtNEQ(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNEQ(FieldAppliedAt, v))
}

// AppliedAtIn applies the In predicate on the "applied_at" field.
func AppliedAtIn(vs ...time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldIn(FieldAppliedAt, vs...))
}

// AppliedAtNotIn applies the NotIn predicate on the "applied_at" field.
func AppliedAtNotIn(vs ...time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNotIn(FieldAppliedAt, vs...))
}

// AppliedAtGT applies the GT predicate on the "applied_at" field.
func AppliedAtGT(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldGT(FieldAppliedAt, v))
}

// AppliedAtGTE applies the GTE predicate on the "applied_at" field.
func AppliedAtGTE(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldGTE(FieldAppliedAt, v))
}

// AppliedAtLT applies the LT predicate on the "applied_at" field.
func AppliedAtLT(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldLT(FieldAppliedAt, v))
}

// AppliedAtLTE applies the LTE predicate on the "applied_at" field.
func AppliedAtLTE(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldLTE(FieldAppliedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasResume applies the HasEdge predicate on the "resume" edge.
func HasResume() predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ResumeTable, ResumeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResumeWith applies the HasEdge predicate on the "resume" edge with a given conditions (other predicates).
func HasResumeWith(preds ...predicate.Resume) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(func(s *sql.Selector) {
		step := newResumeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobPosition applies the HasEdge predicate on the "job_position" edge.
func HasJobPosition() predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobPositionTable, JobPositionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobPositionWith applies the HasEdge predicate on the "job_position" edge with a given conditions (other predicates).
func HasJobPositionWith(preds ...predicate.JobPosition) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(func(s *sql.Selector) {
		step := newJobPositionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ResumeJobApplication) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ResumeJobApplication) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ResumeJobApplication) predicate.ResumeJobApplication {
	return predicate.ResumeJobApplication(sql.NotPredicates(p))
}
