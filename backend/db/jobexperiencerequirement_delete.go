// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobexperiencerequirement"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
)

// JobExperienceRequirementDelete is the builder for deleting a JobExperienceRequirement entity.
type JobExperienceRequirementDelete struct {
	config
	hooks    []Hook
	mutation *JobExperienceRequirementMutation
}

// Where appends a list predicates to the JobExperienceRequirementDelete builder.
func (jerd *JobExperienceRequirementDelete) Where(ps ...predicate.JobExperienceRequirement) *JobExperienceRequirementDelete {
	jerd.mutation.Where(ps...)
	return jerd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jerd *JobExperienceRequirementDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, jerd.sqlExec, jerd.mutation, jerd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jerd *JobExperienceRequirementDelete) ExecX(ctx context.Context) int {
	n, err := jerd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jerd *JobExperienceRequirementDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(jobexperiencerequirement.Table, sqlgraph.NewFieldSpec(jobexperiencerequirement.FieldID, field.TypeUUID))
	if ps := jerd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jerd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jerd.mutation.done = true
	return affected, err
}

// JobExperienceRequirementDeleteOne is the builder for deleting a single JobExperienceRequirement entity.
type JobExperienceRequirementDeleteOne struct {
	jerd *JobExperienceRequirementDelete
}

// Where appends a list predicates to the JobExperienceRequirementDelete builder.
func (jerdo *JobExperienceRequirementDeleteOne) Where(ps ...predicate.JobExperienceRequirement) *JobExperienceRequirementDeleteOne {
	jerdo.jerd.mutation.Where(ps...)
	return jerdo
}

// Exec executes the deletion query.
func (jerdo *JobExperienceRequirementDeleteOne) Exec(ctx context.Context) error {
	n, err := jerdo.jerd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{jobexperiencerequirement.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jerdo *JobExperienceRequirementDeleteOne) ExecX(ctx context.Context) {
	if err := jerdo.Exec(ctx); err != nil {
		panic(err)
	}
}
