// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/chaitin/WhaleHire/backend/db/weighttemplate"
	"github.com/google/uuid"
)

// WeightTemplate is the model entity for the WeightTemplate schema.
type WeightTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 模板名称
	Name string `json:"name,omitempty"`
	// 模板描述
	Description string `json:"description,omitempty"`
	// 权重配置 JSONB
	Weights map[string]interface{} `json:"weights,omitempty"`
	// 创建者ID
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WeightTemplateQuery when eager-loading is set.
	Edges        WeightTemplateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WeightTemplateEdges holds the relations/edges for other nodes in the graph.
type WeightTemplateEdges struct {
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WeightTemplateEdges) CreatorOrErr() (*User, error) {
	if e.Creator != nil {
		return e.Creator, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WeightTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case weighttemplate.FieldWeights:
			values[i] = new([]byte)
		case weighttemplate.FieldName, weighttemplate.FieldDescription:
			values[i] = new(sql.NullString)
		case weighttemplate.FieldDeletedAt, weighttemplate.FieldCreatedAt, weighttemplate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case weighttemplate.FieldID, weighttemplate.FieldCreatedBy:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WeightTemplate fields.
func (wt *WeightTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case weighttemplate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wt.ID = *value
			}
		case weighttemplate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				wt.DeletedAt = value.Time
			}
		case weighttemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				wt.Name = value.String
			}
		case weighttemplate.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				wt.Description = value.String
			}
		case weighttemplate.FieldWeights:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field weights", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &wt.Weights); err != nil {
					return fmt.Errorf("unmarshal field weights: %w", err)
				}
			}
		case weighttemplate.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				wt.CreatedBy = *value
			}
		case weighttemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wt.CreatedAt = value.Time
			}
		case weighttemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wt.UpdatedAt = value.Time
			}
		default:
			wt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WeightTemplate.
// This includes values selected through modifiers, order, etc.
func (wt *WeightTemplate) Value(name string) (ent.Value, error) {
	return wt.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the WeightTemplate entity.
func (wt *WeightTemplate) QueryCreator() *UserQuery {
	return NewWeightTemplateClient(wt.config).QueryCreator(wt)
}

// Update returns a builder for updating this WeightTemplate.
// Note that you need to call WeightTemplate.Unwrap() before calling this method if this WeightTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (wt *WeightTemplate) Update() *WeightTemplateUpdateOne {
	return NewWeightTemplateClient(wt.config).UpdateOne(wt)
}

// Unwrap unwraps the WeightTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wt *WeightTemplate) Unwrap() *WeightTemplate {
	_tx, ok := wt.config.driver.(*txDriver)
	if !ok {
		panic("db: WeightTemplate is not a transactional entity")
	}
	wt.config.driver = _tx.drv
	return wt
}

// String implements the fmt.Stringer.
func (wt *WeightTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("WeightTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wt.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(wt.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(wt.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(wt.Description)
	builder.WriteString(", ")
	builder.WriteString("weights=")
	builder.WriteString(fmt.Sprintf("%v", wt.Weights))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", wt.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wt.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WeightTemplates is a parsable slice of WeightTemplate.
type WeightTemplates []*WeightTemplate
