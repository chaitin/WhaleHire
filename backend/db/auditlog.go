// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/auditlog"
	"github.com/google/uuid"
)

// AuditLog is the model entity for the AuditLog schema.
type AuditLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 操作者类型：user/admin
	OperatorType consts.OperatorType `json:"operator_type,omitempty"`
	// 操作者ID
	OperatorID uuid.UUID `json:"operator_id,omitempty"`
	// 操作者名称
	OperatorName string `json:"operator_name,omitempty"`
	// 操作类型：create/update/delete/view/login/logout
	OperationType consts.OperationType `json:"operation_type,omitempty"`
	// 资源类型
	ResourceType consts.ResourceType `json:"resource_type,omitempty"`
	// 资源ID
	ResourceID string `json:"resource_id,omitempty"`
	// 资源名称
	ResourceName string `json:"resource_name,omitempty"`
	// HTTP方法
	Method string `json:"method,omitempty"`
	// 请求路径
	Path string `json:"path,omitempty"`
	// 查询参数
	QueryParams string `json:"query_params,omitempty"`
	// 请求体（敏感信息已脱敏）
	RequestBody string `json:"request_body,omitempty"`
	// 用户代理
	UserAgent string `json:"user_agent,omitempty"`
	// HTTP状态码
	StatusCode int `json:"status_code,omitempty"`
	// 操作状态：success/failed
	Status consts.AuditLogStatus `json:"status,omitempty"`
	// 响应体（敏感信息已脱敏）
	ResponseBody string `json:"response_body,omitempty"`
	// 错误信息
	ErrorMessage string `json:"error_message,omitempty"`
	// 客户端IP
	IP string `json:"ip,omitempty"`
	// 国家
	Country string `json:"country,omitempty"`
	// 省份
	Province string `json:"province,omitempty"`
	// 城市
	City string `json:"city,omitempty"`
	// 运营商
	Isp string `json:"isp,omitempty"`
	// 会话ID
	SessionID string `json:"session_id,omitempty"`
	// 链路追踪ID
	TraceID string `json:"trace_id,omitempty"`
	// 业务相关数据（JSON格式）
	BusinessData string `json:"business_data,omitempty"`
	// 变更内容（JSON格式，记录before/after）
	Changes string `json:"changes,omitempty"`
	// 操作描述
	Description string `json:"description,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 请求处理时长（毫秒）
	DurationMs   int64 `json:"duration_ms,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuditLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case auditlog.FieldStatusCode, auditlog.FieldDurationMs:
			values[i] = new(sql.NullInt64)
		case auditlog.FieldOperatorType, auditlog.FieldOperatorName, auditlog.FieldOperationType, auditlog.FieldResourceType, auditlog.FieldResourceID, auditlog.FieldResourceName, auditlog.FieldMethod, auditlog.FieldPath, auditlog.FieldQueryParams, auditlog.FieldRequestBody, auditlog.FieldUserAgent, auditlog.FieldStatus, auditlog.FieldResponseBody, auditlog.FieldErrorMessage, auditlog.FieldIP, auditlog.FieldCountry, auditlog.FieldProvince, auditlog.FieldCity, auditlog.FieldIsp, auditlog.FieldSessionID, auditlog.FieldTraceID, auditlog.FieldBusinessData, auditlog.FieldChanges, auditlog.FieldDescription:
			values[i] = new(sql.NullString)
		case auditlog.FieldDeletedAt, auditlog.FieldCreatedAt, auditlog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case auditlog.FieldID, auditlog.FieldOperatorID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuditLog fields.
func (al *AuditLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case auditlog.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				al.ID = *value
			}
		case auditlog.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				al.DeletedAt = value.Time
			}
		case auditlog.FieldOperatorType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator_type", values[i])
			} else if value.Valid {
				al.OperatorType = consts.OperatorType(value.String)
			}
		case auditlog.FieldOperatorID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field operator_id", values[i])
			} else if value != nil {
				al.OperatorID = *value
			}
		case auditlog.FieldOperatorName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator_name", values[i])
			} else if value.Valid {
				al.OperatorName = value.String
			}
		case auditlog.FieldOperationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation_type", values[i])
			} else if value.Valid {
				al.OperationType = consts.OperationType(value.String)
			}
		case auditlog.FieldResourceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_type", values[i])
			} else if value.Valid {
				al.ResourceType = consts.ResourceType(value.String)
			}
		case auditlog.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				al.ResourceID = value.String
			}
		case auditlog.FieldResourceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_name", values[i])
			} else if value.Valid {
				al.ResourceName = value.String
			}
		case auditlog.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				al.Method = value.String
			}
		case auditlog.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				al.Path = value.String
			}
		case auditlog.FieldQueryParams:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field query_params", values[i])
			} else if value.Valid {
				al.QueryParams = value.String
			}
		case auditlog.FieldRequestBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_body", values[i])
			} else if value.Valid {
				al.RequestBody = value.String
			}
		case auditlog.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				al.UserAgent = value.String
			}
		case auditlog.FieldStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_code", values[i])
			} else if value.Valid {
				al.StatusCode = int(value.Int64)
			}
		case auditlog.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				al.Status = consts.AuditLogStatus(value.String)
			}
		case auditlog.FieldResponseBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_body", values[i])
			} else if value.Valid {
				al.ResponseBody = value.String
			}
		case auditlog.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				al.ErrorMessage = value.String
			}
		case auditlog.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				al.IP = value.String
			}
		case auditlog.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				al.Country = value.String
			}
		case auditlog.FieldProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field province", values[i])
			} else if value.Valid {
				al.Province = value.String
			}
		case auditlog.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				al.City = value.String
			}
		case auditlog.FieldIsp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isp", values[i])
			} else if value.Valid {
				al.Isp = value.String
			}
		case auditlog.FieldSessionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field session_id", values[i])
			} else if value.Valid {
				al.SessionID = value.String
			}
		case auditlog.FieldTraceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trace_id", values[i])
			} else if value.Valid {
				al.TraceID = value.String
			}
		case auditlog.FieldBusinessData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_data", values[i])
			} else if value.Valid {
				al.BusinessData = value.String
			}
		case auditlog.FieldChanges:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field changes", values[i])
			} else if value.Valid {
				al.Changes = value.String
			}
		case auditlog.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				al.Description = value.String
			}
		case auditlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				al.CreatedAt = value.Time
			}
		case auditlog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				al.UpdatedAt = value.Time
			}
		case auditlog.FieldDurationMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_ms", values[i])
			} else if value.Valid {
				al.DurationMs = value.Int64
			}
		default:
			al.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuditLog.
// This includes values selected through modifiers, order, etc.
func (al *AuditLog) Value(name string) (ent.Value, error) {
	return al.selectValues.Get(name)
}

// Update returns a builder for updating this AuditLog.
// Note that you need to call AuditLog.Unwrap() before calling this method if this AuditLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AuditLog) Update() *AuditLogUpdateOne {
	return NewAuditLogClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the AuditLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AuditLog) Unwrap() *AuditLog {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("db: AuditLog is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AuditLog) String() string {
	var builder strings.Builder
	builder.WriteString("AuditLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(al.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("operator_type=")
	builder.WriteString(fmt.Sprintf("%v", al.OperatorType))
	builder.WriteString(", ")
	builder.WriteString("operator_id=")
	builder.WriteString(fmt.Sprintf("%v", al.OperatorID))
	builder.WriteString(", ")
	builder.WriteString("operator_name=")
	builder.WriteString(al.OperatorName)
	builder.WriteString(", ")
	builder.WriteString("operation_type=")
	builder.WriteString(fmt.Sprintf("%v", al.OperationType))
	builder.WriteString(", ")
	builder.WriteString("resource_type=")
	builder.WriteString(fmt.Sprintf("%v", al.ResourceType))
	builder.WriteString(", ")
	builder.WriteString("resource_id=")
	builder.WriteString(al.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("resource_name=")
	builder.WriteString(al.ResourceName)
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(al.Method)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(al.Path)
	builder.WriteString(", ")
	builder.WriteString("query_params=")
	builder.WriteString(al.QueryParams)
	builder.WriteString(", ")
	builder.WriteString("request_body=")
	builder.WriteString(al.RequestBody)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(al.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("status_code=")
	builder.WriteString(fmt.Sprintf("%v", al.StatusCode))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", al.Status))
	builder.WriteString(", ")
	builder.WriteString("response_body=")
	builder.WriteString(al.ResponseBody)
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(al.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(al.IP)
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(al.Country)
	builder.WriteString(", ")
	builder.WriteString("province=")
	builder.WriteString(al.Province)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(al.City)
	builder.WriteString(", ")
	builder.WriteString("isp=")
	builder.WriteString(al.Isp)
	builder.WriteString(", ")
	builder.WriteString("session_id=")
	builder.WriteString(al.SessionID)
	builder.WriteString(", ")
	builder.WriteString("trace_id=")
	builder.WriteString(al.TraceID)
	builder.WriteString(", ")
	builder.WriteString("business_data=")
	builder.WriteString(al.BusinessData)
	builder.WriteString(", ")
	builder.WriteString("changes=")
	builder.WriteString(al.Changes)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(al.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(al.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(al.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("duration_ms=")
	builder.WriteString(fmt.Sprintf("%v", al.DurationMs))
	builder.WriteByte(')')
	return builder.String()
}

// AuditLogs is a parsable slice of AuditLog.
type AuditLogs []*AuditLog
