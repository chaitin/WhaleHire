// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/department"
	"github.com/chaitin/WhaleHire/backend/db/jobeducationrequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobexperiencerequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobindustryrequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/jobresponsibility"
	"github.com/chaitin/WhaleHire/backend/db/jobskill"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// JobPositionUpdate is the builder for updating JobPosition entities.
type JobPositionUpdate struct {
	config
	hooks     []Hook
	mutation  *JobPositionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the JobPositionUpdate builder.
func (jpu *JobPositionUpdate) Where(ps ...predicate.JobPosition) *JobPositionUpdate {
	jpu.mutation.Where(ps...)
	return jpu
}

// SetDeletedAt sets the "deleted_at" field.
func (jpu *JobPositionUpdate) SetDeletedAt(t time.Time) *JobPositionUpdate {
	jpu.mutation.SetDeletedAt(t)
	return jpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jpu *JobPositionUpdate) SetNillableDeletedAt(t *time.Time) *JobPositionUpdate {
	if t != nil {
		jpu.SetDeletedAt(*t)
	}
	return jpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jpu *JobPositionUpdate) ClearDeletedAt() *JobPositionUpdate {
	jpu.mutation.ClearDeletedAt()
	return jpu
}

// SetName sets the "name" field.
func (jpu *JobPositionUpdate) SetName(s string) *JobPositionUpdate {
	jpu.mutation.SetName(s)
	return jpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (jpu *JobPositionUpdate) SetNillableName(s *string) *JobPositionUpdate {
	if s != nil {
		jpu.SetName(*s)
	}
	return jpu
}

// SetDepartmentID sets the "department_id" field.
func (jpu *JobPositionUpdate) SetDepartmentID(u uuid.UUID) *JobPositionUpdate {
	jpu.mutation.SetDepartmentID(u)
	return jpu
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (jpu *JobPositionUpdate) SetNillableDepartmentID(u *uuid.UUID) *JobPositionUpdate {
	if u != nil {
		jpu.SetDepartmentID(*u)
	}
	return jpu
}

// SetLocation sets the "location" field.
func (jpu *JobPositionUpdate) SetLocation(s string) *JobPositionUpdate {
	jpu.mutation.SetLocation(s)
	return jpu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (jpu *JobPositionUpdate) SetNillableLocation(s *string) *JobPositionUpdate {
	if s != nil {
		jpu.SetLocation(*s)
	}
	return jpu
}

// ClearLocation clears the value of the "location" field.
func (jpu *JobPositionUpdate) ClearLocation() *JobPositionUpdate {
	jpu.mutation.ClearLocation()
	return jpu
}

// SetSalaryMin sets the "salary_min" field.
func (jpu *JobPositionUpdate) SetSalaryMin(f float64) *JobPositionUpdate {
	jpu.mutation.ResetSalaryMin()
	jpu.mutation.SetSalaryMin(f)
	return jpu
}

// SetNillableSalaryMin sets the "salary_min" field if the given value is not nil.
func (jpu *JobPositionUpdate) SetNillableSalaryMin(f *float64) *JobPositionUpdate {
	if f != nil {
		jpu.SetSalaryMin(*f)
	}
	return jpu
}

// AddSalaryMin adds f to the "salary_min" field.
func (jpu *JobPositionUpdate) AddSalaryMin(f float64) *JobPositionUpdate {
	jpu.mutation.AddSalaryMin(f)
	return jpu
}

// ClearSalaryMin clears the value of the "salary_min" field.
func (jpu *JobPositionUpdate) ClearSalaryMin() *JobPositionUpdate {
	jpu.mutation.ClearSalaryMin()
	return jpu
}

// SetSalaryMax sets the "salary_max" field.
func (jpu *JobPositionUpdate) SetSalaryMax(f float64) *JobPositionUpdate {
	jpu.mutation.ResetSalaryMax()
	jpu.mutation.SetSalaryMax(f)
	return jpu
}

// SetNillableSalaryMax sets the "salary_max" field if the given value is not nil.
func (jpu *JobPositionUpdate) SetNillableSalaryMax(f *float64) *JobPositionUpdate {
	if f != nil {
		jpu.SetSalaryMax(*f)
	}
	return jpu
}

// AddSalaryMax adds f to the "salary_max" field.
func (jpu *JobPositionUpdate) AddSalaryMax(f float64) *JobPositionUpdate {
	jpu.mutation.AddSalaryMax(f)
	return jpu
}

// ClearSalaryMax clears the value of the "salary_max" field.
func (jpu *JobPositionUpdate) ClearSalaryMax() *JobPositionUpdate {
	jpu.mutation.ClearSalaryMax()
	return jpu
}

// SetDescription sets the "description" field.
func (jpu *JobPositionUpdate) SetDescription(s string) *JobPositionUpdate {
	jpu.mutation.SetDescription(s)
	return jpu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (jpu *JobPositionUpdate) SetNillableDescription(s *string) *JobPositionUpdate {
	if s != nil {
		jpu.SetDescription(*s)
	}
	return jpu
}

// ClearDescription clears the value of the "description" field.
func (jpu *JobPositionUpdate) ClearDescription() *JobPositionUpdate {
	jpu.mutation.ClearDescription()
	return jpu
}

// SetUpdatedAt sets the "updated_at" field.
func (jpu *JobPositionUpdate) SetUpdatedAt(t time.Time) *JobPositionUpdate {
	jpu.mutation.SetUpdatedAt(t)
	return jpu
}

// SetDepartment sets the "department" edge to the Department entity.
func (jpu *JobPositionUpdate) SetDepartment(d *Department) *JobPositionUpdate {
	return jpu.SetDepartmentID(d.ID)
}

// AddResponsibilityIDs adds the "responsibilities" edge to the JobResponsibility entity by IDs.
func (jpu *JobPositionUpdate) AddResponsibilityIDs(ids ...uuid.UUID) *JobPositionUpdate {
	jpu.mutation.AddResponsibilityIDs(ids...)
	return jpu
}

// AddResponsibilities adds the "responsibilities" edges to the JobResponsibility entity.
func (jpu *JobPositionUpdate) AddResponsibilities(j ...*JobResponsibility) *JobPositionUpdate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpu.AddResponsibilityIDs(ids...)
}

// AddSkillIDs adds the "skills" edge to the JobSkill entity by IDs.
func (jpu *JobPositionUpdate) AddSkillIDs(ids ...uuid.UUID) *JobPositionUpdate {
	jpu.mutation.AddSkillIDs(ids...)
	return jpu
}

// AddSkills adds the "skills" edges to the JobSkill entity.
func (jpu *JobPositionUpdate) AddSkills(j ...*JobSkill) *JobPositionUpdate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpu.AddSkillIDs(ids...)
}

// AddEducationRequirementIDs adds the "education_requirements" edge to the JobEducationRequirement entity by IDs.
func (jpu *JobPositionUpdate) AddEducationRequirementIDs(ids ...uuid.UUID) *JobPositionUpdate {
	jpu.mutation.AddEducationRequirementIDs(ids...)
	return jpu
}

// AddEducationRequirements adds the "education_requirements" edges to the JobEducationRequirement entity.
func (jpu *JobPositionUpdate) AddEducationRequirements(j ...*JobEducationRequirement) *JobPositionUpdate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpu.AddEducationRequirementIDs(ids...)
}

// AddExperienceRequirementIDs adds the "experience_requirements" edge to the JobExperienceRequirement entity by IDs.
func (jpu *JobPositionUpdate) AddExperienceRequirementIDs(ids ...uuid.UUID) *JobPositionUpdate {
	jpu.mutation.AddExperienceRequirementIDs(ids...)
	return jpu
}

// AddExperienceRequirements adds the "experience_requirements" edges to the JobExperienceRequirement entity.
func (jpu *JobPositionUpdate) AddExperienceRequirements(j ...*JobExperienceRequirement) *JobPositionUpdate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpu.AddExperienceRequirementIDs(ids...)
}

// AddIndustryRequirementIDs adds the "industry_requirements" edge to the JobIndustryRequirement entity by IDs.
func (jpu *JobPositionUpdate) AddIndustryRequirementIDs(ids ...uuid.UUID) *JobPositionUpdate {
	jpu.mutation.AddIndustryRequirementIDs(ids...)
	return jpu
}

// AddIndustryRequirements adds the "industry_requirements" edges to the JobIndustryRequirement entity.
func (jpu *JobPositionUpdate) AddIndustryRequirements(j ...*JobIndustryRequirement) *JobPositionUpdate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpu.AddIndustryRequirementIDs(ids...)
}

// Mutation returns the JobPositionMutation object of the builder.
func (jpu *JobPositionUpdate) Mutation() *JobPositionMutation {
	return jpu.mutation
}

// ClearDepartment clears the "department" edge to the Department entity.
func (jpu *JobPositionUpdate) ClearDepartment() *JobPositionUpdate {
	jpu.mutation.ClearDepartment()
	return jpu
}

// ClearResponsibilities clears all "responsibilities" edges to the JobResponsibility entity.
func (jpu *JobPositionUpdate) ClearResponsibilities() *JobPositionUpdate {
	jpu.mutation.ClearResponsibilities()
	return jpu
}

// RemoveResponsibilityIDs removes the "responsibilities" edge to JobResponsibility entities by IDs.
func (jpu *JobPositionUpdate) RemoveResponsibilityIDs(ids ...uuid.UUID) *JobPositionUpdate {
	jpu.mutation.RemoveResponsibilityIDs(ids...)
	return jpu
}

// RemoveResponsibilities removes "responsibilities" edges to JobResponsibility entities.
func (jpu *JobPositionUpdate) RemoveResponsibilities(j ...*JobResponsibility) *JobPositionUpdate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpu.RemoveResponsibilityIDs(ids...)
}

// ClearSkills clears all "skills" edges to the JobSkill entity.
func (jpu *JobPositionUpdate) ClearSkills() *JobPositionUpdate {
	jpu.mutation.ClearSkills()
	return jpu
}

// RemoveSkillIDs removes the "skills" edge to JobSkill entities by IDs.
func (jpu *JobPositionUpdate) RemoveSkillIDs(ids ...uuid.UUID) *JobPositionUpdate {
	jpu.mutation.RemoveSkillIDs(ids...)
	return jpu
}

// RemoveSkills removes "skills" edges to JobSkill entities.
func (jpu *JobPositionUpdate) RemoveSkills(j ...*JobSkill) *JobPositionUpdate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpu.RemoveSkillIDs(ids...)
}

// ClearEducationRequirements clears all "education_requirements" edges to the JobEducationRequirement entity.
func (jpu *JobPositionUpdate) ClearEducationRequirements() *JobPositionUpdate {
	jpu.mutation.ClearEducationRequirements()
	return jpu
}

// RemoveEducationRequirementIDs removes the "education_requirements" edge to JobEducationRequirement entities by IDs.
func (jpu *JobPositionUpdate) RemoveEducationRequirementIDs(ids ...uuid.UUID) *JobPositionUpdate {
	jpu.mutation.RemoveEducationRequirementIDs(ids...)
	return jpu
}

// RemoveEducationRequirements removes "education_requirements" edges to JobEducationRequirement entities.
func (jpu *JobPositionUpdate) RemoveEducationRequirements(j ...*JobEducationRequirement) *JobPositionUpdate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpu.RemoveEducationRequirementIDs(ids...)
}

// ClearExperienceRequirements clears all "experience_requirements" edges to the JobExperienceRequirement entity.
func (jpu *JobPositionUpdate) ClearExperienceRequirements() *JobPositionUpdate {
	jpu.mutation.ClearExperienceRequirements()
	return jpu
}

// RemoveExperienceRequirementIDs removes the "experience_requirements" edge to JobExperienceRequirement entities by IDs.
func (jpu *JobPositionUpdate) RemoveExperienceRequirementIDs(ids ...uuid.UUID) *JobPositionUpdate {
	jpu.mutation.RemoveExperienceRequirementIDs(ids...)
	return jpu
}

// RemoveExperienceRequirements removes "experience_requirements" edges to JobExperienceRequirement entities.
func (jpu *JobPositionUpdate) RemoveExperienceRequirements(j ...*JobExperienceRequirement) *JobPositionUpdate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpu.RemoveExperienceRequirementIDs(ids...)
}

// ClearIndustryRequirements clears all "industry_requirements" edges to the JobIndustryRequirement entity.
func (jpu *JobPositionUpdate) ClearIndustryRequirements() *JobPositionUpdate {
	jpu.mutation.ClearIndustryRequirements()
	return jpu
}

// RemoveIndustryRequirementIDs removes the "industry_requirements" edge to JobIndustryRequirement entities by IDs.
func (jpu *JobPositionUpdate) RemoveIndustryRequirementIDs(ids ...uuid.UUID) *JobPositionUpdate {
	jpu.mutation.RemoveIndustryRequirementIDs(ids...)
	return jpu
}

// RemoveIndustryRequirements removes "industry_requirements" edges to JobIndustryRequirement entities.
func (jpu *JobPositionUpdate) RemoveIndustryRequirements(j ...*JobIndustryRequirement) *JobPositionUpdate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpu.RemoveIndustryRequirementIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jpu *JobPositionUpdate) Save(ctx context.Context) (int, error) {
	if err := jpu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, jpu.sqlSave, jpu.mutation, jpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jpu *JobPositionUpdate) SaveX(ctx context.Context) int {
	affected, err := jpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jpu *JobPositionUpdate) Exec(ctx context.Context) error {
	_, err := jpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jpu *JobPositionUpdate) ExecX(ctx context.Context) {
	if err := jpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jpu *JobPositionUpdate) defaults() error {
	if _, ok := jpu.mutation.UpdatedAt(); !ok {
		if jobposition.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized jobposition.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := jobposition.UpdateDefaultUpdatedAt()
		jpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jpu *JobPositionUpdate) check() error {
	if v, ok := jpu.mutation.Name(); ok {
		if err := jobposition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "JobPosition.name": %w`, err)}
		}
	}
	if v, ok := jpu.mutation.Location(); ok {
		if err := jobposition.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`db: validator failed for field "JobPosition.location": %w`, err)}
		}
	}
	if jpu.mutation.DepartmentCleared() && len(jpu.mutation.DepartmentIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "JobPosition.department"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jpu *JobPositionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobPositionUpdate {
	jpu.modifiers = append(jpu.modifiers, modifiers...)
	return jpu
}

func (jpu *JobPositionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobposition.Table, jobposition.Columns, sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID))
	if ps := jpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jpu.mutation.DeletedAt(); ok {
		_spec.SetField(jobposition.FieldDeletedAt, field.TypeTime, value)
	}
	if jpu.mutation.DeletedAtCleared() {
		_spec.ClearField(jobposition.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jpu.mutation.Name(); ok {
		_spec.SetField(jobposition.FieldName, field.TypeString, value)
	}
	if value, ok := jpu.mutation.Location(); ok {
		_spec.SetField(jobposition.FieldLocation, field.TypeString, value)
	}
	if jpu.mutation.LocationCleared() {
		_spec.ClearField(jobposition.FieldLocation, field.TypeString)
	}
	if value, ok := jpu.mutation.SalaryMin(); ok {
		_spec.SetField(jobposition.FieldSalaryMin, field.TypeFloat64, value)
	}
	if value, ok := jpu.mutation.AddedSalaryMin(); ok {
		_spec.AddField(jobposition.FieldSalaryMin, field.TypeFloat64, value)
	}
	if jpu.mutation.SalaryMinCleared() {
		_spec.ClearField(jobposition.FieldSalaryMin, field.TypeFloat64)
	}
	if value, ok := jpu.mutation.SalaryMax(); ok {
		_spec.SetField(jobposition.FieldSalaryMax, field.TypeFloat64, value)
	}
	if value, ok := jpu.mutation.AddedSalaryMax(); ok {
		_spec.AddField(jobposition.FieldSalaryMax, field.TypeFloat64, value)
	}
	if jpu.mutation.SalaryMaxCleared() {
		_spec.ClearField(jobposition.FieldSalaryMax, field.TypeFloat64)
	}
	if value, ok := jpu.mutation.Description(); ok {
		_spec.SetField(jobposition.FieldDescription, field.TypeString, value)
	}
	if jpu.mutation.DescriptionCleared() {
		_spec.ClearField(jobposition.FieldDescription, field.TypeString)
	}
	if value, ok := jpu.mutation.UpdatedAt(); ok {
		_spec.SetField(jobposition.FieldUpdatedAt, field.TypeTime, value)
	}
	if jpu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobposition.DepartmentTable,
			Columns: []string{jobposition.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobposition.DepartmentTable,
			Columns: []string{jobposition.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jpu.mutation.ResponsibilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.ResponsibilitiesTable,
			Columns: []string{jobposition.ResponsibilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobresponsibility.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.RemovedResponsibilitiesIDs(); len(nodes) > 0 && !jpu.mutation.ResponsibilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.ResponsibilitiesTable,
			Columns: []string{jobposition.ResponsibilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobresponsibility.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.ResponsibilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.ResponsibilitiesTable,
			Columns: []string{jobposition.ResponsibilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobresponsibility.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jpu.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.SkillsTable,
			Columns: []string{jobposition.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.RemovedSkillsIDs(); len(nodes) > 0 && !jpu.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.SkillsTable,
			Columns: []string{jobposition.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.SkillsTable,
			Columns: []string{jobposition.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jpu.mutation.EducationRequirementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.EducationRequirementsTable,
			Columns: []string{jobposition.EducationRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobeducationrequirement.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.RemovedEducationRequirementsIDs(); len(nodes) > 0 && !jpu.mutation.EducationRequirementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.EducationRequirementsTable,
			Columns: []string{jobposition.EducationRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobeducationrequirement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.EducationRequirementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.EducationRequirementsTable,
			Columns: []string{jobposition.EducationRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobeducationrequirement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jpu.mutation.ExperienceRequirementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.ExperienceRequirementsTable,
			Columns: []string{jobposition.ExperienceRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobexperiencerequirement.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.RemovedExperienceRequirementsIDs(); len(nodes) > 0 && !jpu.mutation.ExperienceRequirementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.ExperienceRequirementsTable,
			Columns: []string{jobposition.ExperienceRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobexperiencerequirement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.ExperienceRequirementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.ExperienceRequirementsTable,
			Columns: []string{jobposition.ExperienceRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobexperiencerequirement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jpu.mutation.IndustryRequirementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.IndustryRequirementsTable,
			Columns: []string{jobposition.IndustryRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobindustryrequirement.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.RemovedIndustryRequirementsIDs(); len(nodes) > 0 && !jpu.mutation.IndustryRequirementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.IndustryRequirementsTable,
			Columns: []string{jobposition.IndustryRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobindustryrequirement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.IndustryRequirementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.IndustryRequirementsTable,
			Columns: []string{jobposition.IndustryRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobindustryrequirement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(jpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, jpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobposition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jpu.mutation.done = true
	return n, nil
}

// JobPositionUpdateOne is the builder for updating a single JobPosition entity.
type JobPositionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *JobPositionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (jpuo *JobPositionUpdateOne) SetDeletedAt(t time.Time) *JobPositionUpdateOne {
	jpuo.mutation.SetDeletedAt(t)
	return jpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jpuo *JobPositionUpdateOne) SetNillableDeletedAt(t *time.Time) *JobPositionUpdateOne {
	if t != nil {
		jpuo.SetDeletedAt(*t)
	}
	return jpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jpuo *JobPositionUpdateOne) ClearDeletedAt() *JobPositionUpdateOne {
	jpuo.mutation.ClearDeletedAt()
	return jpuo
}

// SetName sets the "name" field.
func (jpuo *JobPositionUpdateOne) SetName(s string) *JobPositionUpdateOne {
	jpuo.mutation.SetName(s)
	return jpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (jpuo *JobPositionUpdateOne) SetNillableName(s *string) *JobPositionUpdateOne {
	if s != nil {
		jpuo.SetName(*s)
	}
	return jpuo
}

// SetDepartmentID sets the "department_id" field.
func (jpuo *JobPositionUpdateOne) SetDepartmentID(u uuid.UUID) *JobPositionUpdateOne {
	jpuo.mutation.SetDepartmentID(u)
	return jpuo
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (jpuo *JobPositionUpdateOne) SetNillableDepartmentID(u *uuid.UUID) *JobPositionUpdateOne {
	if u != nil {
		jpuo.SetDepartmentID(*u)
	}
	return jpuo
}

// SetLocation sets the "location" field.
func (jpuo *JobPositionUpdateOne) SetLocation(s string) *JobPositionUpdateOne {
	jpuo.mutation.SetLocation(s)
	return jpuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (jpuo *JobPositionUpdateOne) SetNillableLocation(s *string) *JobPositionUpdateOne {
	if s != nil {
		jpuo.SetLocation(*s)
	}
	return jpuo
}

// ClearLocation clears the value of the "location" field.
func (jpuo *JobPositionUpdateOne) ClearLocation() *JobPositionUpdateOne {
	jpuo.mutation.ClearLocation()
	return jpuo
}

// SetSalaryMin sets the "salary_min" field.
func (jpuo *JobPositionUpdateOne) SetSalaryMin(f float64) *JobPositionUpdateOne {
	jpuo.mutation.ResetSalaryMin()
	jpuo.mutation.SetSalaryMin(f)
	return jpuo
}

// SetNillableSalaryMin sets the "salary_min" field if the given value is not nil.
func (jpuo *JobPositionUpdateOne) SetNillableSalaryMin(f *float64) *JobPositionUpdateOne {
	if f != nil {
		jpuo.SetSalaryMin(*f)
	}
	return jpuo
}

// AddSalaryMin adds f to the "salary_min" field.
func (jpuo *JobPositionUpdateOne) AddSalaryMin(f float64) *JobPositionUpdateOne {
	jpuo.mutation.AddSalaryMin(f)
	return jpuo
}

// ClearSalaryMin clears the value of the "salary_min" field.
func (jpuo *JobPositionUpdateOne) ClearSalaryMin() *JobPositionUpdateOne {
	jpuo.mutation.ClearSalaryMin()
	return jpuo
}

// SetSalaryMax sets the "salary_max" field.
func (jpuo *JobPositionUpdateOne) SetSalaryMax(f float64) *JobPositionUpdateOne {
	jpuo.mutation.ResetSalaryMax()
	jpuo.mutation.SetSalaryMax(f)
	return jpuo
}

// SetNillableSalaryMax sets the "salary_max" field if the given value is not nil.
func (jpuo *JobPositionUpdateOne) SetNillableSalaryMax(f *float64) *JobPositionUpdateOne {
	if f != nil {
		jpuo.SetSalaryMax(*f)
	}
	return jpuo
}

// AddSalaryMax adds f to the "salary_max" field.
func (jpuo *JobPositionUpdateOne) AddSalaryMax(f float64) *JobPositionUpdateOne {
	jpuo.mutation.AddSalaryMax(f)
	return jpuo
}

// ClearSalaryMax clears the value of the "salary_max" field.
func (jpuo *JobPositionUpdateOne) ClearSalaryMax() *JobPositionUpdateOne {
	jpuo.mutation.ClearSalaryMax()
	return jpuo
}

// SetDescription sets the "description" field.
func (jpuo *JobPositionUpdateOne) SetDescription(s string) *JobPositionUpdateOne {
	jpuo.mutation.SetDescription(s)
	return jpuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (jpuo *JobPositionUpdateOne) SetNillableDescription(s *string) *JobPositionUpdateOne {
	if s != nil {
		jpuo.SetDescription(*s)
	}
	return jpuo
}

// ClearDescription clears the value of the "description" field.
func (jpuo *JobPositionUpdateOne) ClearDescription() *JobPositionUpdateOne {
	jpuo.mutation.ClearDescription()
	return jpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (jpuo *JobPositionUpdateOne) SetUpdatedAt(t time.Time) *JobPositionUpdateOne {
	jpuo.mutation.SetUpdatedAt(t)
	return jpuo
}

// SetDepartment sets the "department" edge to the Department entity.
func (jpuo *JobPositionUpdateOne) SetDepartment(d *Department) *JobPositionUpdateOne {
	return jpuo.SetDepartmentID(d.ID)
}

// AddResponsibilityIDs adds the "responsibilities" edge to the JobResponsibility entity by IDs.
func (jpuo *JobPositionUpdateOne) AddResponsibilityIDs(ids ...uuid.UUID) *JobPositionUpdateOne {
	jpuo.mutation.AddResponsibilityIDs(ids...)
	return jpuo
}

// AddResponsibilities adds the "responsibilities" edges to the JobResponsibility entity.
func (jpuo *JobPositionUpdateOne) AddResponsibilities(j ...*JobResponsibility) *JobPositionUpdateOne {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpuo.AddResponsibilityIDs(ids...)
}

// AddSkillIDs adds the "skills" edge to the JobSkill entity by IDs.
func (jpuo *JobPositionUpdateOne) AddSkillIDs(ids ...uuid.UUID) *JobPositionUpdateOne {
	jpuo.mutation.AddSkillIDs(ids...)
	return jpuo
}

// AddSkills adds the "skills" edges to the JobSkill entity.
func (jpuo *JobPositionUpdateOne) AddSkills(j ...*JobSkill) *JobPositionUpdateOne {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpuo.AddSkillIDs(ids...)
}

// AddEducationRequirementIDs adds the "education_requirements" edge to the JobEducationRequirement entity by IDs.
func (jpuo *JobPositionUpdateOne) AddEducationRequirementIDs(ids ...uuid.UUID) *JobPositionUpdateOne {
	jpuo.mutation.AddEducationRequirementIDs(ids...)
	return jpuo
}

// AddEducationRequirements adds the "education_requirements" edges to the JobEducationRequirement entity.
func (jpuo *JobPositionUpdateOne) AddEducationRequirements(j ...*JobEducationRequirement) *JobPositionUpdateOne {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpuo.AddEducationRequirementIDs(ids...)
}

// AddExperienceRequirementIDs adds the "experience_requirements" edge to the JobExperienceRequirement entity by IDs.
func (jpuo *JobPositionUpdateOne) AddExperienceRequirementIDs(ids ...uuid.UUID) *JobPositionUpdateOne {
	jpuo.mutation.AddExperienceRequirementIDs(ids...)
	return jpuo
}

// AddExperienceRequirements adds the "experience_requirements" edges to the JobExperienceRequirement entity.
func (jpuo *JobPositionUpdateOne) AddExperienceRequirements(j ...*JobExperienceRequirement) *JobPositionUpdateOne {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpuo.AddExperienceRequirementIDs(ids...)
}

// AddIndustryRequirementIDs adds the "industry_requirements" edge to the JobIndustryRequirement entity by IDs.
func (jpuo *JobPositionUpdateOne) AddIndustryRequirementIDs(ids ...uuid.UUID) *JobPositionUpdateOne {
	jpuo.mutation.AddIndustryRequirementIDs(ids...)
	return jpuo
}

// AddIndustryRequirements adds the "industry_requirements" edges to the JobIndustryRequirement entity.
func (jpuo *JobPositionUpdateOne) AddIndustryRequirements(j ...*JobIndustryRequirement) *JobPositionUpdateOne {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpuo.AddIndustryRequirementIDs(ids...)
}

// Mutation returns the JobPositionMutation object of the builder.
func (jpuo *JobPositionUpdateOne) Mutation() *JobPositionMutation {
	return jpuo.mutation
}

// ClearDepartment clears the "department" edge to the Department entity.
func (jpuo *JobPositionUpdateOne) ClearDepartment() *JobPositionUpdateOne {
	jpuo.mutation.ClearDepartment()
	return jpuo
}

// ClearResponsibilities clears all "responsibilities" edges to the JobResponsibility entity.
func (jpuo *JobPositionUpdateOne) ClearResponsibilities() *JobPositionUpdateOne {
	jpuo.mutation.ClearResponsibilities()
	return jpuo
}

// RemoveResponsibilityIDs removes the "responsibilities" edge to JobResponsibility entities by IDs.
func (jpuo *JobPositionUpdateOne) RemoveResponsibilityIDs(ids ...uuid.UUID) *JobPositionUpdateOne {
	jpuo.mutation.RemoveResponsibilityIDs(ids...)
	return jpuo
}

// RemoveResponsibilities removes "responsibilities" edges to JobResponsibility entities.
func (jpuo *JobPositionUpdateOne) RemoveResponsibilities(j ...*JobResponsibility) *JobPositionUpdateOne {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpuo.RemoveResponsibilityIDs(ids...)
}

// ClearSkills clears all "skills" edges to the JobSkill entity.
func (jpuo *JobPositionUpdateOne) ClearSkills() *JobPositionUpdateOne {
	jpuo.mutation.ClearSkills()
	return jpuo
}

// RemoveSkillIDs removes the "skills" edge to JobSkill entities by IDs.
func (jpuo *JobPositionUpdateOne) RemoveSkillIDs(ids ...uuid.UUID) *JobPositionUpdateOne {
	jpuo.mutation.RemoveSkillIDs(ids...)
	return jpuo
}

// RemoveSkills removes "skills" edges to JobSkill entities.
func (jpuo *JobPositionUpdateOne) RemoveSkills(j ...*JobSkill) *JobPositionUpdateOne {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpuo.RemoveSkillIDs(ids...)
}

// ClearEducationRequirements clears all "education_requirements" edges to the JobEducationRequirement entity.
func (jpuo *JobPositionUpdateOne) ClearEducationRequirements() *JobPositionUpdateOne {
	jpuo.mutation.ClearEducationRequirements()
	return jpuo
}

// RemoveEducationRequirementIDs removes the "education_requirements" edge to JobEducationRequirement entities by IDs.
func (jpuo *JobPositionUpdateOne) RemoveEducationRequirementIDs(ids ...uuid.UUID) *JobPositionUpdateOne {
	jpuo.mutation.RemoveEducationRequirementIDs(ids...)
	return jpuo
}

// RemoveEducationRequirements removes "education_requirements" edges to JobEducationRequirement entities.
func (jpuo *JobPositionUpdateOne) RemoveEducationRequirements(j ...*JobEducationRequirement) *JobPositionUpdateOne {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpuo.RemoveEducationRequirementIDs(ids...)
}

// ClearExperienceRequirements clears all "experience_requirements" edges to the JobExperienceRequirement entity.
func (jpuo *JobPositionUpdateOne) ClearExperienceRequirements() *JobPositionUpdateOne {
	jpuo.mutation.ClearExperienceRequirements()
	return jpuo
}

// RemoveExperienceRequirementIDs removes the "experience_requirements" edge to JobExperienceRequirement entities by IDs.
func (jpuo *JobPositionUpdateOne) RemoveExperienceRequirementIDs(ids ...uuid.UUID) *JobPositionUpdateOne {
	jpuo.mutation.RemoveExperienceRequirementIDs(ids...)
	return jpuo
}

// RemoveExperienceRequirements removes "experience_requirements" edges to JobExperienceRequirement entities.
func (jpuo *JobPositionUpdateOne) RemoveExperienceRequirements(j ...*JobExperienceRequirement) *JobPositionUpdateOne {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpuo.RemoveExperienceRequirementIDs(ids...)
}

// ClearIndustryRequirements clears all "industry_requirements" edges to the JobIndustryRequirement entity.
func (jpuo *JobPositionUpdateOne) ClearIndustryRequirements() *JobPositionUpdateOne {
	jpuo.mutation.ClearIndustryRequirements()
	return jpuo
}

// RemoveIndustryRequirementIDs removes the "industry_requirements" edge to JobIndustryRequirement entities by IDs.
func (jpuo *JobPositionUpdateOne) RemoveIndustryRequirementIDs(ids ...uuid.UUID) *JobPositionUpdateOne {
	jpuo.mutation.RemoveIndustryRequirementIDs(ids...)
	return jpuo
}

// RemoveIndustryRequirements removes "industry_requirements" edges to JobIndustryRequirement entities.
func (jpuo *JobPositionUpdateOne) RemoveIndustryRequirements(j ...*JobIndustryRequirement) *JobPositionUpdateOne {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpuo.RemoveIndustryRequirementIDs(ids...)
}

// Where appends a list predicates to the JobPositionUpdate builder.
func (jpuo *JobPositionUpdateOne) Where(ps ...predicate.JobPosition) *JobPositionUpdateOne {
	jpuo.mutation.Where(ps...)
	return jpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jpuo *JobPositionUpdateOne) Select(field string, fields ...string) *JobPositionUpdateOne {
	jpuo.fields = append([]string{field}, fields...)
	return jpuo
}

// Save executes the query and returns the updated JobPosition entity.
func (jpuo *JobPositionUpdateOne) Save(ctx context.Context) (*JobPosition, error) {
	if err := jpuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jpuo.sqlSave, jpuo.mutation, jpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jpuo *JobPositionUpdateOne) SaveX(ctx context.Context) *JobPosition {
	node, err := jpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jpuo *JobPositionUpdateOne) Exec(ctx context.Context) error {
	_, err := jpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jpuo *JobPositionUpdateOne) ExecX(ctx context.Context) {
	if err := jpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jpuo *JobPositionUpdateOne) defaults() error {
	if _, ok := jpuo.mutation.UpdatedAt(); !ok {
		if jobposition.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized jobposition.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := jobposition.UpdateDefaultUpdatedAt()
		jpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jpuo *JobPositionUpdateOne) check() error {
	if v, ok := jpuo.mutation.Name(); ok {
		if err := jobposition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "JobPosition.name": %w`, err)}
		}
	}
	if v, ok := jpuo.mutation.Location(); ok {
		if err := jobposition.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`db: validator failed for field "JobPosition.location": %w`, err)}
		}
	}
	if jpuo.mutation.DepartmentCleared() && len(jpuo.mutation.DepartmentIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "JobPosition.department"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jpuo *JobPositionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobPositionUpdateOne {
	jpuo.modifiers = append(jpuo.modifiers, modifiers...)
	return jpuo
}

func (jpuo *JobPositionUpdateOne) sqlSave(ctx context.Context) (_node *JobPosition, err error) {
	if err := jpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobposition.Table, jobposition.Columns, sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID))
	id, ok := jpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "JobPosition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobposition.FieldID)
		for _, f := range fields {
			if !jobposition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != jobposition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jpuo.mutation.DeletedAt(); ok {
		_spec.SetField(jobposition.FieldDeletedAt, field.TypeTime, value)
	}
	if jpuo.mutation.DeletedAtCleared() {
		_spec.ClearField(jobposition.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jpuo.mutation.Name(); ok {
		_spec.SetField(jobposition.FieldName, field.TypeString, value)
	}
	if value, ok := jpuo.mutation.Location(); ok {
		_spec.SetField(jobposition.FieldLocation, field.TypeString, value)
	}
	if jpuo.mutation.LocationCleared() {
		_spec.ClearField(jobposition.FieldLocation, field.TypeString)
	}
	if value, ok := jpuo.mutation.SalaryMin(); ok {
		_spec.SetField(jobposition.FieldSalaryMin, field.TypeFloat64, value)
	}
	if value, ok := jpuo.mutation.AddedSalaryMin(); ok {
		_spec.AddField(jobposition.FieldSalaryMin, field.TypeFloat64, value)
	}
	if jpuo.mutation.SalaryMinCleared() {
		_spec.ClearField(jobposition.FieldSalaryMin, field.TypeFloat64)
	}
	if value, ok := jpuo.mutation.SalaryMax(); ok {
		_spec.SetField(jobposition.FieldSalaryMax, field.TypeFloat64, value)
	}
	if value, ok := jpuo.mutation.AddedSalaryMax(); ok {
		_spec.AddField(jobposition.FieldSalaryMax, field.TypeFloat64, value)
	}
	if jpuo.mutation.SalaryMaxCleared() {
		_spec.ClearField(jobposition.FieldSalaryMax, field.TypeFloat64)
	}
	if value, ok := jpuo.mutation.Description(); ok {
		_spec.SetField(jobposition.FieldDescription, field.TypeString, value)
	}
	if jpuo.mutation.DescriptionCleared() {
		_spec.ClearField(jobposition.FieldDescription, field.TypeString)
	}
	if value, ok := jpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobposition.FieldUpdatedAt, field.TypeTime, value)
	}
	if jpuo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobposition.DepartmentTable,
			Columns: []string{jobposition.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobposition.DepartmentTable,
			Columns: []string{jobposition.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jpuo.mutation.ResponsibilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.ResponsibilitiesTable,
			Columns: []string{jobposition.ResponsibilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobresponsibility.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.RemovedResponsibilitiesIDs(); len(nodes) > 0 && !jpuo.mutation.ResponsibilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.ResponsibilitiesTable,
			Columns: []string{jobposition.ResponsibilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobresponsibility.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.ResponsibilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.ResponsibilitiesTable,
			Columns: []string{jobposition.ResponsibilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobresponsibility.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jpuo.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.SkillsTable,
			Columns: []string{jobposition.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.RemovedSkillsIDs(); len(nodes) > 0 && !jpuo.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.SkillsTable,
			Columns: []string{jobposition.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.SkillsTable,
			Columns: []string{jobposition.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jpuo.mutation.EducationRequirementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.EducationRequirementsTable,
			Columns: []string{jobposition.EducationRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobeducationrequirement.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.RemovedEducationRequirementsIDs(); len(nodes) > 0 && !jpuo.mutation.EducationRequirementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.EducationRequirementsTable,
			Columns: []string{jobposition.EducationRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobeducationrequirement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.EducationRequirementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.EducationRequirementsTable,
			Columns: []string{jobposition.EducationRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobeducationrequirement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jpuo.mutation.ExperienceRequirementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.ExperienceRequirementsTable,
			Columns: []string{jobposition.ExperienceRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobexperiencerequirement.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.RemovedExperienceRequirementsIDs(); len(nodes) > 0 && !jpuo.mutation.ExperienceRequirementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.ExperienceRequirementsTable,
			Columns: []string{jobposition.ExperienceRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobexperiencerequirement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.ExperienceRequirementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.ExperienceRequirementsTable,
			Columns: []string{jobposition.ExperienceRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobexperiencerequirement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jpuo.mutation.IndustryRequirementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.IndustryRequirementsTable,
			Columns: []string{jobposition.IndustryRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobindustryrequirement.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.RemovedIndustryRequirementsIDs(); len(nodes) > 0 && !jpuo.mutation.IndustryRequirementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.IndustryRequirementsTable,
			Columns: []string{jobposition.IndustryRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobindustryrequirement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.IndustryRequirementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.IndustryRequirementsTable,
			Columns: []string{jobposition.IndustryRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobindustryrequirement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(jpuo.modifiers...)
	_node = &JobPosition{config: jpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobposition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jpuo.mutation.done = true
	return _node, nil
}
