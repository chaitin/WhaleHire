// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/screeningresult"
	"github.com/chaitin/WhaleHire/backend/db/screeningrunmetric"
	"github.com/chaitin/WhaleHire/backend/db/screeningtask"
	"github.com/chaitin/WhaleHire/backend/db/screeningtaskresume"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/google/uuid"
)

// ScreeningTaskCreate is the builder for creating a ScreeningTask entity.
type ScreeningTaskCreate struct {
	config
	mutation *ScreeningTaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (stc *ScreeningTaskCreate) SetDeletedAt(t time.Time) *ScreeningTaskCreate {
	stc.mutation.SetDeletedAt(t)
	return stc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (stc *ScreeningTaskCreate) SetNillableDeletedAt(t *time.Time) *ScreeningTaskCreate {
	if t != nil {
		stc.SetDeletedAt(*t)
	}
	return stc
}

// SetJobPositionID sets the "job_position_id" field.
func (stc *ScreeningTaskCreate) SetJobPositionID(u uuid.UUID) *ScreeningTaskCreate {
	stc.mutation.SetJobPositionID(u)
	return stc
}

// SetCreatedBy sets the "created_by" field.
func (stc *ScreeningTaskCreate) SetCreatedBy(u uuid.UUID) *ScreeningTaskCreate {
	stc.mutation.SetCreatedBy(u)
	return stc
}

// SetStatus sets the "status" field.
func (stc *ScreeningTaskCreate) SetStatus(s string) *ScreeningTaskCreate {
	stc.mutation.SetStatus(s)
	return stc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (stc *ScreeningTaskCreate) SetNillableStatus(s *string) *ScreeningTaskCreate {
	if s != nil {
		stc.SetStatus(*s)
	}
	return stc
}

// SetDimensionWeights sets the "dimension_weights" field.
func (stc *ScreeningTaskCreate) SetDimensionWeights(m map[string]interface{}) *ScreeningTaskCreate {
	stc.mutation.SetDimensionWeights(m)
	return stc
}

// SetLlmConfig sets the "llm_config" field.
func (stc *ScreeningTaskCreate) SetLlmConfig(m map[string]interface{}) *ScreeningTaskCreate {
	stc.mutation.SetLlmConfig(m)
	return stc
}

// SetNotes sets the "notes" field.
func (stc *ScreeningTaskCreate) SetNotes(s string) *ScreeningTaskCreate {
	stc.mutation.SetNotes(s)
	return stc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (stc *ScreeningTaskCreate) SetNillableNotes(s *string) *ScreeningTaskCreate {
	if s != nil {
		stc.SetNotes(*s)
	}
	return stc
}

// SetResumeTotal sets the "resume_total" field.
func (stc *ScreeningTaskCreate) SetResumeTotal(i int) *ScreeningTaskCreate {
	stc.mutation.SetResumeTotal(i)
	return stc
}

// SetNillableResumeTotal sets the "resume_total" field if the given value is not nil.
func (stc *ScreeningTaskCreate) SetNillableResumeTotal(i *int) *ScreeningTaskCreate {
	if i != nil {
		stc.SetResumeTotal(*i)
	}
	return stc
}

// SetResumeProcessed sets the "resume_processed" field.
func (stc *ScreeningTaskCreate) SetResumeProcessed(i int) *ScreeningTaskCreate {
	stc.mutation.SetResumeProcessed(i)
	return stc
}

// SetNillableResumeProcessed sets the "resume_processed" field if the given value is not nil.
func (stc *ScreeningTaskCreate) SetNillableResumeProcessed(i *int) *ScreeningTaskCreate {
	if i != nil {
		stc.SetResumeProcessed(*i)
	}
	return stc
}

// SetResumeSucceeded sets the "resume_succeeded" field.
func (stc *ScreeningTaskCreate) SetResumeSucceeded(i int) *ScreeningTaskCreate {
	stc.mutation.SetResumeSucceeded(i)
	return stc
}

// SetNillableResumeSucceeded sets the "resume_succeeded" field if the given value is not nil.
func (stc *ScreeningTaskCreate) SetNillableResumeSucceeded(i *int) *ScreeningTaskCreate {
	if i != nil {
		stc.SetResumeSucceeded(*i)
	}
	return stc
}

// SetResumeFailed sets the "resume_failed" field.
func (stc *ScreeningTaskCreate) SetResumeFailed(i int) *ScreeningTaskCreate {
	stc.mutation.SetResumeFailed(i)
	return stc
}

// SetNillableResumeFailed sets the "resume_failed" field if the given value is not nil.
func (stc *ScreeningTaskCreate) SetNillableResumeFailed(i *int) *ScreeningTaskCreate {
	if i != nil {
		stc.SetResumeFailed(*i)
	}
	return stc
}

// SetAgentVersion sets the "agent_version" field.
func (stc *ScreeningTaskCreate) SetAgentVersion(s string) *ScreeningTaskCreate {
	stc.mutation.SetAgentVersion(s)
	return stc
}

// SetNillableAgentVersion sets the "agent_version" field if the given value is not nil.
func (stc *ScreeningTaskCreate) SetNillableAgentVersion(s *string) *ScreeningTaskCreate {
	if s != nil {
		stc.SetAgentVersion(*s)
	}
	return stc
}

// SetStartedAt sets the "started_at" field.
func (stc *ScreeningTaskCreate) SetStartedAt(t time.Time) *ScreeningTaskCreate {
	stc.mutation.SetStartedAt(t)
	return stc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (stc *ScreeningTaskCreate) SetNillableStartedAt(t *time.Time) *ScreeningTaskCreate {
	if t != nil {
		stc.SetStartedAt(*t)
	}
	return stc
}

// SetFinishedAt sets the "finished_at" field.
func (stc *ScreeningTaskCreate) SetFinishedAt(t time.Time) *ScreeningTaskCreate {
	stc.mutation.SetFinishedAt(t)
	return stc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (stc *ScreeningTaskCreate) SetNillableFinishedAt(t *time.Time) *ScreeningTaskCreate {
	if t != nil {
		stc.SetFinishedAt(*t)
	}
	return stc
}

// SetCreatedAt sets the "created_at" field.
func (stc *ScreeningTaskCreate) SetCreatedAt(t time.Time) *ScreeningTaskCreate {
	stc.mutation.SetCreatedAt(t)
	return stc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stc *ScreeningTaskCreate) SetNillableCreatedAt(t *time.Time) *ScreeningTaskCreate {
	if t != nil {
		stc.SetCreatedAt(*t)
	}
	return stc
}

// SetUpdatedAt sets the "updated_at" field.
func (stc *ScreeningTaskCreate) SetUpdatedAt(t time.Time) *ScreeningTaskCreate {
	stc.mutation.SetUpdatedAt(t)
	return stc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (stc *ScreeningTaskCreate) SetNillableUpdatedAt(t *time.Time) *ScreeningTaskCreate {
	if t != nil {
		stc.SetUpdatedAt(*t)
	}
	return stc
}

// SetID sets the "id" field.
func (stc *ScreeningTaskCreate) SetID(u uuid.UUID) *ScreeningTaskCreate {
	stc.mutation.SetID(u)
	return stc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (stc *ScreeningTaskCreate) SetNillableID(u *uuid.UUID) *ScreeningTaskCreate {
	if u != nil {
		stc.SetID(*u)
	}
	return stc
}

// SetJobPosition sets the "job_position" edge to the JobPosition entity.
func (stc *ScreeningTaskCreate) SetJobPosition(j *JobPosition) *ScreeningTaskCreate {
	return stc.SetJobPositionID(j.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (stc *ScreeningTaskCreate) SetCreatorID(id uuid.UUID) *ScreeningTaskCreate {
	stc.mutation.SetCreatorID(id)
	return stc
}

// SetCreator sets the "creator" edge to the User entity.
func (stc *ScreeningTaskCreate) SetCreator(u *User) *ScreeningTaskCreate {
	return stc.SetCreatorID(u.ID)
}

// AddTaskResumeIDs adds the "task_resumes" edge to the ScreeningTaskResume entity by IDs.
func (stc *ScreeningTaskCreate) AddTaskResumeIDs(ids ...uuid.UUID) *ScreeningTaskCreate {
	stc.mutation.AddTaskResumeIDs(ids...)
	return stc
}

// AddTaskResumes adds the "task_resumes" edges to the ScreeningTaskResume entity.
func (stc *ScreeningTaskCreate) AddTaskResumes(s ...*ScreeningTaskResume) *ScreeningTaskCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stc.AddTaskResumeIDs(ids...)
}

// AddResultIDs adds the "results" edge to the ScreeningResult entity by IDs.
func (stc *ScreeningTaskCreate) AddResultIDs(ids ...uuid.UUID) *ScreeningTaskCreate {
	stc.mutation.AddResultIDs(ids...)
	return stc
}

// AddResults adds the "results" edges to the ScreeningResult entity.
func (stc *ScreeningTaskCreate) AddResults(s ...*ScreeningResult) *ScreeningTaskCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stc.AddResultIDs(ids...)
}

// AddRunMetricIDs adds the "run_metrics" edge to the ScreeningRunMetric entity by IDs.
func (stc *ScreeningTaskCreate) AddRunMetricIDs(ids ...uuid.UUID) *ScreeningTaskCreate {
	stc.mutation.AddRunMetricIDs(ids...)
	return stc
}

// AddRunMetrics adds the "run_metrics" edges to the ScreeningRunMetric entity.
func (stc *ScreeningTaskCreate) AddRunMetrics(s ...*ScreeningRunMetric) *ScreeningTaskCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stc.AddRunMetricIDs(ids...)
}

// Mutation returns the ScreeningTaskMutation object of the builder.
func (stc *ScreeningTaskCreate) Mutation() *ScreeningTaskMutation {
	return stc.mutation
}

// Save creates the ScreeningTask in the database.
func (stc *ScreeningTaskCreate) Save(ctx context.Context) (*ScreeningTask, error) {
	if err := stc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *ScreeningTaskCreate) SaveX(ctx context.Context) *ScreeningTask {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *ScreeningTaskCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *ScreeningTaskCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stc *ScreeningTaskCreate) defaults() error {
	if _, ok := stc.mutation.Status(); !ok {
		v := screeningtask.DefaultStatus
		stc.mutation.SetStatus(v)
	}
	if _, ok := stc.mutation.ResumeTotal(); !ok {
		v := screeningtask.DefaultResumeTotal
		stc.mutation.SetResumeTotal(v)
	}
	if _, ok := stc.mutation.ResumeProcessed(); !ok {
		v := screeningtask.DefaultResumeProcessed
		stc.mutation.SetResumeProcessed(v)
	}
	if _, ok := stc.mutation.ResumeSucceeded(); !ok {
		v := screeningtask.DefaultResumeSucceeded
		stc.mutation.SetResumeSucceeded(v)
	}
	if _, ok := stc.mutation.ResumeFailed(); !ok {
		v := screeningtask.DefaultResumeFailed
		stc.mutation.SetResumeFailed(v)
	}
	if _, ok := stc.mutation.CreatedAt(); !ok {
		if screeningtask.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningtask.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := screeningtask.DefaultCreatedAt()
		stc.mutation.SetCreatedAt(v)
	}
	if _, ok := stc.mutation.UpdatedAt(); !ok {
		if screeningtask.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningtask.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := screeningtask.DefaultUpdatedAt()
		stc.mutation.SetUpdatedAt(v)
	}
	if _, ok := stc.mutation.ID(); !ok {
		if screeningtask.DefaultID == nil {
			return fmt.Errorf("db: uninitialized screeningtask.DefaultID (forgotten import db/runtime?)")
		}
		v := screeningtask.DefaultID()
		stc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (stc *ScreeningTaskCreate) check() error {
	if _, ok := stc.mutation.JobPositionID(); !ok {
		return &ValidationError{Name: "job_position_id", err: errors.New(`db: missing required field "ScreeningTask.job_position_id"`)}
	}
	if _, ok := stc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`db: missing required field "ScreeningTask.created_by"`)}
	}
	if _, ok := stc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "ScreeningTask.status"`)}
	}
	if _, ok := stc.mutation.ResumeTotal(); !ok {
		return &ValidationError{Name: "resume_total", err: errors.New(`db: missing required field "ScreeningTask.resume_total"`)}
	}
	if _, ok := stc.mutation.ResumeProcessed(); !ok {
		return &ValidationError{Name: "resume_processed", err: errors.New(`db: missing required field "ScreeningTask.resume_processed"`)}
	}
	if _, ok := stc.mutation.ResumeSucceeded(); !ok {
		return &ValidationError{Name: "resume_succeeded", err: errors.New(`db: missing required field "ScreeningTask.resume_succeeded"`)}
	}
	if _, ok := stc.mutation.ResumeFailed(); !ok {
		return &ValidationError{Name: "resume_failed", err: errors.New(`db: missing required field "ScreeningTask.resume_failed"`)}
	}
	if v, ok := stc.mutation.AgentVersion(); ok {
		if err := screeningtask.AgentVersionValidator(v); err != nil {
			return &ValidationError{Name: "agent_version", err: fmt.Errorf(`db: validator failed for field "ScreeningTask.agent_version": %w`, err)}
		}
	}
	if _, ok := stc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ScreeningTask.created_at"`)}
	}
	if _, ok := stc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "ScreeningTask.updated_at"`)}
	}
	if len(stc.mutation.JobPositionIDs()) == 0 {
		return &ValidationError{Name: "job_position", err: errors.New(`db: missing required edge "ScreeningTask.job_position"`)}
	}
	if len(stc.mutation.CreatorIDs()) == 0 {
		return &ValidationError{Name: "creator", err: errors.New(`db: missing required edge "ScreeningTask.creator"`)}
	}
	return nil
}

func (stc *ScreeningTaskCreate) sqlSave(ctx context.Context) (*ScreeningTask, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *ScreeningTaskCreate) createSpec() (*ScreeningTask, *sqlgraph.CreateSpec) {
	var (
		_node = &ScreeningTask{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(screeningtask.Table, sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = stc.conflict
	if id, ok := stc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := stc.mutation.DeletedAt(); ok {
		_spec.SetField(screeningtask.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := stc.mutation.Status(); ok {
		_spec.SetField(screeningtask.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := stc.mutation.DimensionWeights(); ok {
		_spec.SetField(screeningtask.FieldDimensionWeights, field.TypeJSON, value)
		_node.DimensionWeights = value
	}
	if value, ok := stc.mutation.LlmConfig(); ok {
		_spec.SetField(screeningtask.FieldLlmConfig, field.TypeJSON, value)
		_node.LlmConfig = value
	}
	if value, ok := stc.mutation.Notes(); ok {
		_spec.SetField(screeningtask.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := stc.mutation.ResumeTotal(); ok {
		_spec.SetField(screeningtask.FieldResumeTotal, field.TypeInt, value)
		_node.ResumeTotal = value
	}
	if value, ok := stc.mutation.ResumeProcessed(); ok {
		_spec.SetField(screeningtask.FieldResumeProcessed, field.TypeInt, value)
		_node.ResumeProcessed = value
	}
	if value, ok := stc.mutation.ResumeSucceeded(); ok {
		_spec.SetField(screeningtask.FieldResumeSucceeded, field.TypeInt, value)
		_node.ResumeSucceeded = value
	}
	if value, ok := stc.mutation.ResumeFailed(); ok {
		_spec.SetField(screeningtask.FieldResumeFailed, field.TypeInt, value)
		_node.ResumeFailed = value
	}
	if value, ok := stc.mutation.AgentVersion(); ok {
		_spec.SetField(screeningtask.FieldAgentVersion, field.TypeString, value)
		_node.AgentVersion = value
	}
	if value, ok := stc.mutation.StartedAt(); ok {
		_spec.SetField(screeningtask.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := stc.mutation.FinishedAt(); ok {
		_spec.SetField(screeningtask.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = value
	}
	if value, ok := stc.mutation.CreatedAt(); ok {
		_spec.SetField(screeningtask.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := stc.mutation.UpdatedAt(); ok {
		_spec.SetField(screeningtask.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := stc.mutation.JobPositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningtask.JobPositionTable,
			Columns: []string{screeningtask.JobPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.JobPositionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningtask.CreatorTable,
			Columns: []string{screeningtask.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.TaskResumesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.TaskResumesTable,
			Columns: []string{screeningtask.TaskResumesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtaskresume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.ResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.ResultsTable,
			Columns: []string{screeningtask.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.RunMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.RunMetricsTable,
			Columns: []string{screeningtask.RunMetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningrunmetric.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScreeningTask.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScreeningTaskUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (stc *ScreeningTaskCreate) OnConflict(opts ...sql.ConflictOption) *ScreeningTaskUpsertOne {
	stc.conflict = opts
	return &ScreeningTaskUpsertOne{
		create: stc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScreeningTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stc *ScreeningTaskCreate) OnConflictColumns(columns ...string) *ScreeningTaskUpsertOne {
	stc.conflict = append(stc.conflict, sql.ConflictColumns(columns...))
	return &ScreeningTaskUpsertOne{
		create: stc,
	}
}

type (
	// ScreeningTaskUpsertOne is the builder for "upsert"-ing
	//  one ScreeningTask node.
	ScreeningTaskUpsertOne struct {
		create *ScreeningTaskCreate
	}

	// ScreeningTaskUpsert is the "OnConflict" setter.
	ScreeningTaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *ScreeningTaskUpsert) SetDeletedAt(v time.Time) *ScreeningTaskUpsert {
	u.Set(screeningtask.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScreeningTaskUpsert) UpdateDeletedAt() *ScreeningTaskUpsert {
	u.SetExcluded(screeningtask.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScreeningTaskUpsert) ClearDeletedAt() *ScreeningTaskUpsert {
	u.SetNull(screeningtask.FieldDeletedAt)
	return u
}

// SetJobPositionID sets the "job_position_id" field.
func (u *ScreeningTaskUpsert) SetJobPositionID(v uuid.UUID) *ScreeningTaskUpsert {
	u.Set(screeningtask.FieldJobPositionID, v)
	return u
}

// UpdateJobPositionID sets the "job_position_id" field to the value that was provided on create.
func (u *ScreeningTaskUpsert) UpdateJobPositionID() *ScreeningTaskUpsert {
	u.SetExcluded(screeningtask.FieldJobPositionID)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ScreeningTaskUpsert) SetCreatedBy(v uuid.UUID) *ScreeningTaskUpsert {
	u.Set(screeningtask.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ScreeningTaskUpsert) UpdateCreatedBy() *ScreeningTaskUpsert {
	u.SetExcluded(screeningtask.FieldCreatedBy)
	return u
}

// SetStatus sets the "status" field.
func (u *ScreeningTaskUpsert) SetStatus(v string) *ScreeningTaskUpsert {
	u.Set(screeningtask.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ScreeningTaskUpsert) UpdateStatus() *ScreeningTaskUpsert {
	u.SetExcluded(screeningtask.FieldStatus)
	return u
}

// SetDimensionWeights sets the "dimension_weights" field.
func (u *ScreeningTaskUpsert) SetDimensionWeights(v map[string]interface{}) *ScreeningTaskUpsert {
	u.Set(screeningtask.FieldDimensionWeights, v)
	return u
}

// UpdateDimensionWeights sets the "dimension_weights" field to the value that was provided on create.
func (u *ScreeningTaskUpsert) UpdateDimensionWeights() *ScreeningTaskUpsert {
	u.SetExcluded(screeningtask.FieldDimensionWeights)
	return u
}

// ClearDimensionWeights clears the value of the "dimension_weights" field.
func (u *ScreeningTaskUpsert) ClearDimensionWeights() *ScreeningTaskUpsert {
	u.SetNull(screeningtask.FieldDimensionWeights)
	return u
}

// SetLlmConfig sets the "llm_config" field.
func (u *ScreeningTaskUpsert) SetLlmConfig(v map[string]interface{}) *ScreeningTaskUpsert {
	u.Set(screeningtask.FieldLlmConfig, v)
	return u
}

// UpdateLlmConfig sets the "llm_config" field to the value that was provided on create.
func (u *ScreeningTaskUpsert) UpdateLlmConfig() *ScreeningTaskUpsert {
	u.SetExcluded(screeningtask.FieldLlmConfig)
	return u
}

// ClearLlmConfig clears the value of the "llm_config" field.
func (u *ScreeningTaskUpsert) ClearLlmConfig() *ScreeningTaskUpsert {
	u.SetNull(screeningtask.FieldLlmConfig)
	return u
}

// SetNotes sets the "notes" field.
func (u *ScreeningTaskUpsert) SetNotes(v string) *ScreeningTaskUpsert {
	u.Set(screeningtask.FieldNotes, v)
	return u
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *ScreeningTaskUpsert) UpdateNotes() *ScreeningTaskUpsert {
	u.SetExcluded(screeningtask.FieldNotes)
	return u
}

// ClearNotes clears the value of the "notes" field.
func (u *ScreeningTaskUpsert) ClearNotes() *ScreeningTaskUpsert {
	u.SetNull(screeningtask.FieldNotes)
	return u
}

// SetResumeTotal sets the "resume_total" field.
func (u *ScreeningTaskUpsert) SetResumeTotal(v int) *ScreeningTaskUpsert {
	u.Set(screeningtask.FieldResumeTotal, v)
	return u
}

// UpdateResumeTotal sets the "resume_total" field to the value that was provided on create.
func (u *ScreeningTaskUpsert) UpdateResumeTotal() *ScreeningTaskUpsert {
	u.SetExcluded(screeningtask.FieldResumeTotal)
	return u
}

// AddResumeTotal adds v to the "resume_total" field.
func (u *ScreeningTaskUpsert) AddResumeTotal(v int) *ScreeningTaskUpsert {
	u.Add(screeningtask.FieldResumeTotal, v)
	return u
}

// SetResumeProcessed sets the "resume_processed" field.
func (u *ScreeningTaskUpsert) SetResumeProcessed(v int) *ScreeningTaskUpsert {
	u.Set(screeningtask.FieldResumeProcessed, v)
	return u
}

// UpdateResumeProcessed sets the "resume_processed" field to the value that was provided on create.
func (u *ScreeningTaskUpsert) UpdateResumeProcessed() *ScreeningTaskUpsert {
	u.SetExcluded(screeningtask.FieldResumeProcessed)
	return u
}

// AddResumeProcessed adds v to the "resume_processed" field.
func (u *ScreeningTaskUpsert) AddResumeProcessed(v int) *ScreeningTaskUpsert {
	u.Add(screeningtask.FieldResumeProcessed, v)
	return u
}

// SetResumeSucceeded sets the "resume_succeeded" field.
func (u *ScreeningTaskUpsert) SetResumeSucceeded(v int) *ScreeningTaskUpsert {
	u.Set(screeningtask.FieldResumeSucceeded, v)
	return u
}

// UpdateResumeSucceeded sets the "resume_succeeded" field to the value that was provided on create.
func (u *ScreeningTaskUpsert) UpdateResumeSucceeded() *ScreeningTaskUpsert {
	u.SetExcluded(screeningtask.FieldResumeSucceeded)
	return u
}

// AddResumeSucceeded adds v to the "resume_succeeded" field.
func (u *ScreeningTaskUpsert) AddResumeSucceeded(v int) *ScreeningTaskUpsert {
	u.Add(screeningtask.FieldResumeSucceeded, v)
	return u
}

// SetResumeFailed sets the "resume_failed" field.
func (u *ScreeningTaskUpsert) SetResumeFailed(v int) *ScreeningTaskUpsert {
	u.Set(screeningtask.FieldResumeFailed, v)
	return u
}

// UpdateResumeFailed sets the "resume_failed" field to the value that was provided on create.
func (u *ScreeningTaskUpsert) UpdateResumeFailed() *ScreeningTaskUpsert {
	u.SetExcluded(screeningtask.FieldResumeFailed)
	return u
}

// AddResumeFailed adds v to the "resume_failed" field.
func (u *ScreeningTaskUpsert) AddResumeFailed(v int) *ScreeningTaskUpsert {
	u.Add(screeningtask.FieldResumeFailed, v)
	return u
}

// SetAgentVersion sets the "agent_version" field.
func (u *ScreeningTaskUpsert) SetAgentVersion(v string) *ScreeningTaskUpsert {
	u.Set(screeningtask.FieldAgentVersion, v)
	return u
}

// UpdateAgentVersion sets the "agent_version" field to the value that was provided on create.
func (u *ScreeningTaskUpsert) UpdateAgentVersion() *ScreeningTaskUpsert {
	u.SetExcluded(screeningtask.FieldAgentVersion)
	return u
}

// ClearAgentVersion clears the value of the "agent_version" field.
func (u *ScreeningTaskUpsert) ClearAgentVersion() *ScreeningTaskUpsert {
	u.SetNull(screeningtask.FieldAgentVersion)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *ScreeningTaskUpsert) SetStartedAt(v time.Time) *ScreeningTaskUpsert {
	u.Set(screeningtask.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ScreeningTaskUpsert) UpdateStartedAt() *ScreeningTaskUpsert {
	u.SetExcluded(screeningtask.FieldStartedAt)
	return u
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ScreeningTaskUpsert) ClearStartedAt() *ScreeningTaskUpsert {
	u.SetNull(screeningtask.FieldStartedAt)
	return u
}

// SetFinishedAt sets the "finished_at" field.
func (u *ScreeningTaskUpsert) SetFinishedAt(v time.Time) *ScreeningTaskUpsert {
	u.Set(screeningtask.FieldFinishedAt, v)
	return u
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *ScreeningTaskUpsert) UpdateFinishedAt() *ScreeningTaskUpsert {
	u.SetExcluded(screeningtask.FieldFinishedAt)
	return u
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *ScreeningTaskUpsert) ClearFinishedAt() *ScreeningTaskUpsert {
	u.SetNull(screeningtask.FieldFinishedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningTaskUpsert) SetUpdatedAt(v time.Time) *ScreeningTaskUpsert {
	u.Set(screeningtask.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningTaskUpsert) UpdateUpdatedAt() *ScreeningTaskUpsert {
	u.SetExcluded(screeningtask.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ScreeningTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(screeningtask.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScreeningTaskUpsertOne) UpdateNewValues() *ScreeningTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(screeningtask.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(screeningtask.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScreeningTask.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ScreeningTaskUpsertOne) Ignore() *ScreeningTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScreeningTaskUpsertOne) DoNothing() *ScreeningTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScreeningTaskCreate.OnConflict
// documentation for more info.
func (u *ScreeningTaskUpsertOne) Update(set func(*ScreeningTaskUpsert)) *ScreeningTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScreeningTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ScreeningTaskUpsertOne) SetDeletedAt(v time.Time) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScreeningTaskUpsertOne) UpdateDeletedAt() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScreeningTaskUpsertOne) ClearDeletedAt() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.ClearDeletedAt()
	})
}

// SetJobPositionID sets the "job_position_id" field.
func (u *ScreeningTaskUpsertOne) SetJobPositionID(v uuid.UUID) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetJobPositionID(v)
	})
}

// UpdateJobPositionID sets the "job_position_id" field to the value that was provided on create.
func (u *ScreeningTaskUpsertOne) UpdateJobPositionID() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateJobPositionID()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *ScreeningTaskUpsertOne) SetCreatedBy(v uuid.UUID) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ScreeningTaskUpsertOne) UpdateCreatedBy() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetStatus sets the "status" field.
func (u *ScreeningTaskUpsertOne) SetStatus(v string) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ScreeningTaskUpsertOne) UpdateStatus() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateStatus()
	})
}

// SetDimensionWeights sets the "dimension_weights" field.
func (u *ScreeningTaskUpsertOne) SetDimensionWeights(v map[string]interface{}) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetDimensionWeights(v)
	})
}

// UpdateDimensionWeights sets the "dimension_weights" field to the value that was provided on create.
func (u *ScreeningTaskUpsertOne) UpdateDimensionWeights() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateDimensionWeights()
	})
}

// ClearDimensionWeights clears the value of the "dimension_weights" field.
func (u *ScreeningTaskUpsertOne) ClearDimensionWeights() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.ClearDimensionWeights()
	})
}

// SetLlmConfig sets the "llm_config" field.
func (u *ScreeningTaskUpsertOne) SetLlmConfig(v map[string]interface{}) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetLlmConfig(v)
	})
}

// UpdateLlmConfig sets the "llm_config" field to the value that was provided on create.
func (u *ScreeningTaskUpsertOne) UpdateLlmConfig() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateLlmConfig()
	})
}

// ClearLlmConfig clears the value of the "llm_config" field.
func (u *ScreeningTaskUpsertOne) ClearLlmConfig() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.ClearLlmConfig()
	})
}

// SetNotes sets the "notes" field.
func (u *ScreeningTaskUpsertOne) SetNotes(v string) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *ScreeningTaskUpsertOne) UpdateNotes() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *ScreeningTaskUpsertOne) ClearNotes() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.ClearNotes()
	})
}

// SetResumeTotal sets the "resume_total" field.
func (u *ScreeningTaskUpsertOne) SetResumeTotal(v int) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetResumeTotal(v)
	})
}

// AddResumeTotal adds v to the "resume_total" field.
func (u *ScreeningTaskUpsertOne) AddResumeTotal(v int) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.AddResumeTotal(v)
	})
}

// UpdateResumeTotal sets the "resume_total" field to the value that was provided on create.
func (u *ScreeningTaskUpsertOne) UpdateResumeTotal() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateResumeTotal()
	})
}

// SetResumeProcessed sets the "resume_processed" field.
func (u *ScreeningTaskUpsertOne) SetResumeProcessed(v int) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetResumeProcessed(v)
	})
}

// AddResumeProcessed adds v to the "resume_processed" field.
func (u *ScreeningTaskUpsertOne) AddResumeProcessed(v int) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.AddResumeProcessed(v)
	})
}

// UpdateResumeProcessed sets the "resume_processed" field to the value that was provided on create.
func (u *ScreeningTaskUpsertOne) UpdateResumeProcessed() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateResumeProcessed()
	})
}

// SetResumeSucceeded sets the "resume_succeeded" field.
func (u *ScreeningTaskUpsertOne) SetResumeSucceeded(v int) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetResumeSucceeded(v)
	})
}

// AddResumeSucceeded adds v to the "resume_succeeded" field.
func (u *ScreeningTaskUpsertOne) AddResumeSucceeded(v int) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.AddResumeSucceeded(v)
	})
}

// UpdateResumeSucceeded sets the "resume_succeeded" field to the value that was provided on create.
func (u *ScreeningTaskUpsertOne) UpdateResumeSucceeded() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateResumeSucceeded()
	})
}

// SetResumeFailed sets the "resume_failed" field.
func (u *ScreeningTaskUpsertOne) SetResumeFailed(v int) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetResumeFailed(v)
	})
}

// AddResumeFailed adds v to the "resume_failed" field.
func (u *ScreeningTaskUpsertOne) AddResumeFailed(v int) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.AddResumeFailed(v)
	})
}

// UpdateResumeFailed sets the "resume_failed" field to the value that was provided on create.
func (u *ScreeningTaskUpsertOne) UpdateResumeFailed() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateResumeFailed()
	})
}

// SetAgentVersion sets the "agent_version" field.
func (u *ScreeningTaskUpsertOne) SetAgentVersion(v string) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetAgentVersion(v)
	})
}

// UpdateAgentVersion sets the "agent_version" field to the value that was provided on create.
func (u *ScreeningTaskUpsertOne) UpdateAgentVersion() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateAgentVersion()
	})
}

// ClearAgentVersion clears the value of the "agent_version" field.
func (u *ScreeningTaskUpsertOne) ClearAgentVersion() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.ClearAgentVersion()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *ScreeningTaskUpsertOne) SetStartedAt(v time.Time) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ScreeningTaskUpsertOne) UpdateStartedAt() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ScreeningTaskUpsertOne) ClearStartedAt() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.ClearStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *ScreeningTaskUpsertOne) SetFinishedAt(v time.Time) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *ScreeningTaskUpsertOne) UpdateFinishedAt() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateFinishedAt()
	})
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *ScreeningTaskUpsertOne) ClearFinishedAt() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.ClearFinishedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningTaskUpsertOne) SetUpdatedAt(v time.Time) *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningTaskUpsertOne) UpdateUpdatedAt() *ScreeningTaskUpsertOne {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ScreeningTaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ScreeningTaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScreeningTaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScreeningTaskUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ScreeningTaskUpsertOne.ID is not supported by MySQL driver. Use ScreeningTaskUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScreeningTaskUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScreeningTaskCreateBulk is the builder for creating many ScreeningTask entities in bulk.
type ScreeningTaskCreateBulk struct {
	config
	err      error
	builders []*ScreeningTaskCreate
	conflict []sql.ConflictOption
}

// Save creates the ScreeningTask entities in the database.
func (stcb *ScreeningTaskCreateBulk) Save(ctx context.Context) ([]*ScreeningTask, error) {
	if stcb.err != nil {
		return nil, stcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*ScreeningTask, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScreeningTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = stcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *ScreeningTaskCreateBulk) SaveX(ctx context.Context) []*ScreeningTask {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *ScreeningTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *ScreeningTaskCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScreeningTask.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScreeningTaskUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (stcb *ScreeningTaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScreeningTaskUpsertBulk {
	stcb.conflict = opts
	return &ScreeningTaskUpsertBulk{
		create: stcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScreeningTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stcb *ScreeningTaskCreateBulk) OnConflictColumns(columns ...string) *ScreeningTaskUpsertBulk {
	stcb.conflict = append(stcb.conflict, sql.ConflictColumns(columns...))
	return &ScreeningTaskUpsertBulk{
		create: stcb,
	}
}

// ScreeningTaskUpsertBulk is the builder for "upsert"-ing
// a bulk of ScreeningTask nodes.
type ScreeningTaskUpsertBulk struct {
	create *ScreeningTaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ScreeningTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(screeningtask.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScreeningTaskUpsertBulk) UpdateNewValues() *ScreeningTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(screeningtask.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(screeningtask.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScreeningTask.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ScreeningTaskUpsertBulk) Ignore() *ScreeningTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScreeningTaskUpsertBulk) DoNothing() *ScreeningTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScreeningTaskCreateBulk.OnConflict
// documentation for more info.
func (u *ScreeningTaskUpsertBulk) Update(set func(*ScreeningTaskUpsert)) *ScreeningTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScreeningTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ScreeningTaskUpsertBulk) SetDeletedAt(v time.Time) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScreeningTaskUpsertBulk) UpdateDeletedAt() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScreeningTaskUpsertBulk) ClearDeletedAt() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.ClearDeletedAt()
	})
}

// SetJobPositionID sets the "job_position_id" field.
func (u *ScreeningTaskUpsertBulk) SetJobPositionID(v uuid.UUID) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetJobPositionID(v)
	})
}

// UpdateJobPositionID sets the "job_position_id" field to the value that was provided on create.
func (u *ScreeningTaskUpsertBulk) UpdateJobPositionID() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateJobPositionID()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *ScreeningTaskUpsertBulk) SetCreatedBy(v uuid.UUID) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ScreeningTaskUpsertBulk) UpdateCreatedBy() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetStatus sets the "status" field.
func (u *ScreeningTaskUpsertBulk) SetStatus(v string) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ScreeningTaskUpsertBulk) UpdateStatus() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateStatus()
	})
}

// SetDimensionWeights sets the "dimension_weights" field.
func (u *ScreeningTaskUpsertBulk) SetDimensionWeights(v map[string]interface{}) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetDimensionWeights(v)
	})
}

// UpdateDimensionWeights sets the "dimension_weights" field to the value that was provided on create.
func (u *ScreeningTaskUpsertBulk) UpdateDimensionWeights() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateDimensionWeights()
	})
}

// ClearDimensionWeights clears the value of the "dimension_weights" field.
func (u *ScreeningTaskUpsertBulk) ClearDimensionWeights() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.ClearDimensionWeights()
	})
}

// SetLlmConfig sets the "llm_config" field.
func (u *ScreeningTaskUpsertBulk) SetLlmConfig(v map[string]interface{}) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetLlmConfig(v)
	})
}

// UpdateLlmConfig sets the "llm_config" field to the value that was provided on create.
func (u *ScreeningTaskUpsertBulk) UpdateLlmConfig() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateLlmConfig()
	})
}

// ClearLlmConfig clears the value of the "llm_config" field.
func (u *ScreeningTaskUpsertBulk) ClearLlmConfig() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.ClearLlmConfig()
	})
}

// SetNotes sets the "notes" field.
func (u *ScreeningTaskUpsertBulk) SetNotes(v string) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *ScreeningTaskUpsertBulk) UpdateNotes() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *ScreeningTaskUpsertBulk) ClearNotes() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.ClearNotes()
	})
}

// SetResumeTotal sets the "resume_total" field.
func (u *ScreeningTaskUpsertBulk) SetResumeTotal(v int) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetResumeTotal(v)
	})
}

// AddResumeTotal adds v to the "resume_total" field.
func (u *ScreeningTaskUpsertBulk) AddResumeTotal(v int) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.AddResumeTotal(v)
	})
}

// UpdateResumeTotal sets the "resume_total" field to the value that was provided on create.
func (u *ScreeningTaskUpsertBulk) UpdateResumeTotal() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateResumeTotal()
	})
}

// SetResumeProcessed sets the "resume_processed" field.
func (u *ScreeningTaskUpsertBulk) SetResumeProcessed(v int) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetResumeProcessed(v)
	})
}

// AddResumeProcessed adds v to the "resume_processed" field.
func (u *ScreeningTaskUpsertBulk) AddResumeProcessed(v int) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.AddResumeProcessed(v)
	})
}

// UpdateResumeProcessed sets the "resume_processed" field to the value that was provided on create.
func (u *ScreeningTaskUpsertBulk) UpdateResumeProcessed() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateResumeProcessed()
	})
}

// SetResumeSucceeded sets the "resume_succeeded" field.
func (u *ScreeningTaskUpsertBulk) SetResumeSucceeded(v int) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetResumeSucceeded(v)
	})
}

// AddResumeSucceeded adds v to the "resume_succeeded" field.
func (u *ScreeningTaskUpsertBulk) AddResumeSucceeded(v int) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.AddResumeSucceeded(v)
	})
}

// UpdateResumeSucceeded sets the "resume_succeeded" field to the value that was provided on create.
func (u *ScreeningTaskUpsertBulk) UpdateResumeSucceeded() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateResumeSucceeded()
	})
}

// SetResumeFailed sets the "resume_failed" field.
func (u *ScreeningTaskUpsertBulk) SetResumeFailed(v int) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetResumeFailed(v)
	})
}

// AddResumeFailed adds v to the "resume_failed" field.
func (u *ScreeningTaskUpsertBulk) AddResumeFailed(v int) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.AddResumeFailed(v)
	})
}

// UpdateResumeFailed sets the "resume_failed" field to the value that was provided on create.
func (u *ScreeningTaskUpsertBulk) UpdateResumeFailed() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateResumeFailed()
	})
}

// SetAgentVersion sets the "agent_version" field.
func (u *ScreeningTaskUpsertBulk) SetAgentVersion(v string) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetAgentVersion(v)
	})
}

// UpdateAgentVersion sets the "agent_version" field to the value that was provided on create.
func (u *ScreeningTaskUpsertBulk) UpdateAgentVersion() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateAgentVersion()
	})
}

// ClearAgentVersion clears the value of the "agent_version" field.
func (u *ScreeningTaskUpsertBulk) ClearAgentVersion() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.ClearAgentVersion()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *ScreeningTaskUpsertBulk) SetStartedAt(v time.Time) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ScreeningTaskUpsertBulk) UpdateStartedAt() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ScreeningTaskUpsertBulk) ClearStartedAt() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.ClearStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *ScreeningTaskUpsertBulk) SetFinishedAt(v time.Time) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *ScreeningTaskUpsertBulk) UpdateFinishedAt() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateFinishedAt()
	})
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *ScreeningTaskUpsertBulk) ClearFinishedAt() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.ClearFinishedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningTaskUpsertBulk) SetUpdatedAt(v time.Time) *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningTaskUpsertBulk) UpdateUpdatedAt() *ScreeningTaskUpsertBulk {
	return u.Update(func(s *ScreeningTaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ScreeningTaskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ScreeningTaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ScreeningTaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScreeningTaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
