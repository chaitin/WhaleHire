// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumedocumentparse"
	"github.com/chaitin/WhaleHire/backend/db/resumeeducation"
	"github.com/chaitin/WhaleHire/backend/db/resumeexperience"
	"github.com/chaitin/WhaleHire/backend/db/resumejobapplication"
	"github.com/chaitin/WhaleHire/backend/db/resumelog"
	"github.com/chaitin/WhaleHire/backend/db/resumeproject"
	"github.com/chaitin/WhaleHire/backend/db/resumeskill"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/google/uuid"
)

// ResumeUpdate is the builder for updating Resume entities.
type ResumeUpdate struct {
	config
	hooks     []Hook
	mutation  *ResumeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ResumeUpdate builder.
func (ru *ResumeUpdate) Where(ps ...predicate.Resume) *ResumeUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *ResumeUpdate) SetDeletedAt(t time.Time) *ResumeUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableDeletedAt(t *time.Time) *ResumeUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *ResumeUpdate) ClearDeletedAt() *ResumeUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetUploaderID sets the "uploader_id" field.
func (ru *ResumeUpdate) SetUploaderID(u uuid.UUID) *ResumeUpdate {
	ru.mutation.SetUploaderID(u)
	return ru
}

// SetNillableUploaderID sets the "uploader_id" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableUploaderID(u *uuid.UUID) *ResumeUpdate {
	if u != nil {
		ru.SetUploaderID(*u)
	}
	return ru
}

// SetName sets the "name" field.
func (ru *ResumeUpdate) SetName(s string) *ResumeUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableName(s *string) *ResumeUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// ClearName clears the value of the "name" field.
func (ru *ResumeUpdate) ClearName() *ResumeUpdate {
	ru.mutation.ClearName()
	return ru
}

// SetGender sets the "gender" field.
func (ru *ResumeUpdate) SetGender(s string) *ResumeUpdate {
	ru.mutation.SetGender(s)
	return ru
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableGender(s *string) *ResumeUpdate {
	if s != nil {
		ru.SetGender(*s)
	}
	return ru
}

// ClearGender clears the value of the "gender" field.
func (ru *ResumeUpdate) ClearGender() *ResumeUpdate {
	ru.mutation.ClearGender()
	return ru
}

// SetBirthday sets the "birthday" field.
func (ru *ResumeUpdate) SetBirthday(t time.Time) *ResumeUpdate {
	ru.mutation.SetBirthday(t)
	return ru
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableBirthday(t *time.Time) *ResumeUpdate {
	if t != nil {
		ru.SetBirthday(*t)
	}
	return ru
}

// ClearBirthday clears the value of the "birthday" field.
func (ru *ResumeUpdate) ClearBirthday() *ResumeUpdate {
	ru.mutation.ClearBirthday()
	return ru
}

// SetEmail sets the "email" field.
func (ru *ResumeUpdate) SetEmail(s string) *ResumeUpdate {
	ru.mutation.SetEmail(s)
	return ru
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableEmail(s *string) *ResumeUpdate {
	if s != nil {
		ru.SetEmail(*s)
	}
	return ru
}

// ClearEmail clears the value of the "email" field.
func (ru *ResumeUpdate) ClearEmail() *ResumeUpdate {
	ru.mutation.ClearEmail()
	return ru
}

// SetPhone sets the "phone" field.
func (ru *ResumeUpdate) SetPhone(s string) *ResumeUpdate {
	ru.mutation.SetPhone(s)
	return ru
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillablePhone(s *string) *ResumeUpdate {
	if s != nil {
		ru.SetPhone(*s)
	}
	return ru
}

// ClearPhone clears the value of the "phone" field.
func (ru *ResumeUpdate) ClearPhone() *ResumeUpdate {
	ru.mutation.ClearPhone()
	return ru
}

// SetCurrentCity sets the "current_city" field.
func (ru *ResumeUpdate) SetCurrentCity(s string) *ResumeUpdate {
	ru.mutation.SetCurrentCity(s)
	return ru
}

// SetNillableCurrentCity sets the "current_city" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableCurrentCity(s *string) *ResumeUpdate {
	if s != nil {
		ru.SetCurrentCity(*s)
	}
	return ru
}

// ClearCurrentCity clears the value of the "current_city" field.
func (ru *ResumeUpdate) ClearCurrentCity() *ResumeUpdate {
	ru.mutation.ClearCurrentCity()
	return ru
}

// SetHighestEducation sets the "highest_education" field.
func (ru *ResumeUpdate) SetHighestEducation(s string) *ResumeUpdate {
	ru.mutation.SetHighestEducation(s)
	return ru
}

// SetNillableHighestEducation sets the "highest_education" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableHighestEducation(s *string) *ResumeUpdate {
	if s != nil {
		ru.SetHighestEducation(*s)
	}
	return ru
}

// ClearHighestEducation clears the value of the "highest_education" field.
func (ru *ResumeUpdate) ClearHighestEducation() *ResumeUpdate {
	ru.mutation.ClearHighestEducation()
	return ru
}

// SetYearsExperience sets the "years_experience" field.
func (ru *ResumeUpdate) SetYearsExperience(f float64) *ResumeUpdate {
	ru.mutation.ResetYearsExperience()
	ru.mutation.SetYearsExperience(f)
	return ru
}

// SetNillableYearsExperience sets the "years_experience" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableYearsExperience(f *float64) *ResumeUpdate {
	if f != nil {
		ru.SetYearsExperience(*f)
	}
	return ru
}

// AddYearsExperience adds f to the "years_experience" field.
func (ru *ResumeUpdate) AddYearsExperience(f float64) *ResumeUpdate {
	ru.mutation.AddYearsExperience(f)
	return ru
}

// ClearYearsExperience clears the value of the "years_experience" field.
func (ru *ResumeUpdate) ClearYearsExperience() *ResumeUpdate {
	ru.mutation.ClearYearsExperience()
	return ru
}

// SetResumeFileURL sets the "resume_file_url" field.
func (ru *ResumeUpdate) SetResumeFileURL(s string) *ResumeUpdate {
	ru.mutation.SetResumeFileURL(s)
	return ru
}

// SetNillableResumeFileURL sets the "resume_file_url" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableResumeFileURL(s *string) *ResumeUpdate {
	if s != nil {
		ru.SetResumeFileURL(*s)
	}
	return ru
}

// ClearResumeFileURL clears the value of the "resume_file_url" field.
func (ru *ResumeUpdate) ClearResumeFileURL() *ResumeUpdate {
	ru.mutation.ClearResumeFileURL()
	return ru
}

// SetStatus sets the "status" field.
func (ru *ResumeUpdate) SetStatus(s string) *ResumeUpdate {
	ru.mutation.SetStatus(s)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableStatus(s *string) *ResumeUpdate {
	if s != nil {
		ru.SetStatus(*s)
	}
	return ru
}

// SetErrorMessage sets the "error_message" field.
func (ru *ResumeUpdate) SetErrorMessage(s string) *ResumeUpdate {
	ru.mutation.SetErrorMessage(s)
	return ru
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableErrorMessage(s *string) *ResumeUpdate {
	if s != nil {
		ru.SetErrorMessage(*s)
	}
	return ru
}

// ClearErrorMessage clears the value of the "error_message" field.
func (ru *ResumeUpdate) ClearErrorMessage() *ResumeUpdate {
	ru.mutation.ClearErrorMessage()
	return ru
}

// SetParsedAt sets the "parsed_at" field.
func (ru *ResumeUpdate) SetParsedAt(t time.Time) *ResumeUpdate {
	ru.mutation.SetParsedAt(t)
	return ru
}

// SetNillableParsedAt sets the "parsed_at" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableParsedAt(t *time.Time) *ResumeUpdate {
	if t != nil {
		ru.SetParsedAt(*t)
	}
	return ru
}

// ClearParsedAt clears the value of the "parsed_at" field.
func (ru *ResumeUpdate) ClearParsedAt() *ResumeUpdate {
	ru.mutation.ClearParsedAt()
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *ResumeUpdate) SetCreatedAt(t time.Time) *ResumeUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableCreatedAt(t *time.Time) *ResumeUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ResumeUpdate) SetUpdatedAt(t time.Time) *ResumeUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ru *ResumeUpdate) SetUserID(id uuid.UUID) *ResumeUpdate {
	ru.mutation.SetUserID(id)
	return ru
}

// SetUser sets the "user" edge to the User entity.
func (ru *ResumeUpdate) SetUser(u *User) *ResumeUpdate {
	return ru.SetUserID(u.ID)
}

// AddEducationIDs adds the "educations" edge to the ResumeEducation entity by IDs.
func (ru *ResumeUpdate) AddEducationIDs(ids ...uuid.UUID) *ResumeUpdate {
	ru.mutation.AddEducationIDs(ids...)
	return ru
}

// AddEducations adds the "educations" edges to the ResumeEducation entity.
func (ru *ResumeUpdate) AddEducations(r ...*ResumeEducation) *ResumeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddEducationIDs(ids...)
}

// AddExperienceIDs adds the "experiences" edge to the ResumeExperience entity by IDs.
func (ru *ResumeUpdate) AddExperienceIDs(ids ...uuid.UUID) *ResumeUpdate {
	ru.mutation.AddExperienceIDs(ids...)
	return ru
}

// AddExperiences adds the "experiences" edges to the ResumeExperience entity.
func (ru *ResumeUpdate) AddExperiences(r ...*ResumeExperience) *ResumeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddExperienceIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the ResumeProject entity by IDs.
func (ru *ResumeUpdate) AddProjectIDs(ids ...uuid.UUID) *ResumeUpdate {
	ru.mutation.AddProjectIDs(ids...)
	return ru
}

// AddProjects adds the "projects" edges to the ResumeProject entity.
func (ru *ResumeUpdate) AddProjects(r ...*ResumeProject) *ResumeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddProjectIDs(ids...)
}

// AddSkillIDs adds the "skills" edge to the ResumeSkill entity by IDs.
func (ru *ResumeUpdate) AddSkillIDs(ids ...uuid.UUID) *ResumeUpdate {
	ru.mutation.AddSkillIDs(ids...)
	return ru
}

// AddSkills adds the "skills" edges to the ResumeSkill entity.
func (ru *ResumeUpdate) AddSkills(r ...*ResumeSkill) *ResumeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddSkillIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the ResumeLog entity by IDs.
func (ru *ResumeUpdate) AddLogIDs(ids ...uuid.UUID) *ResumeUpdate {
	ru.mutation.AddLogIDs(ids...)
	return ru
}

// AddLogs adds the "logs" edges to the ResumeLog entity.
func (ru *ResumeUpdate) AddLogs(r ...*ResumeLog) *ResumeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddLogIDs(ids...)
}

// AddDocumentParseIDs adds the "document_parse" edge to the ResumeDocumentParse entity by IDs.
func (ru *ResumeUpdate) AddDocumentParseIDs(ids ...uuid.UUID) *ResumeUpdate {
	ru.mutation.AddDocumentParseIDs(ids...)
	return ru
}

// AddDocumentParse adds the "document_parse" edges to the ResumeDocumentParse entity.
func (ru *ResumeUpdate) AddDocumentParse(r ...*ResumeDocumentParse) *ResumeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddDocumentParseIDs(ids...)
}

// AddJobApplicationIDs adds the "job_applications" edge to the ResumeJobApplication entity by IDs.
func (ru *ResumeUpdate) AddJobApplicationIDs(ids ...uuid.UUID) *ResumeUpdate {
	ru.mutation.AddJobApplicationIDs(ids...)
	return ru
}

// AddJobApplications adds the "job_applications" edges to the ResumeJobApplication entity.
func (ru *ResumeUpdate) AddJobApplications(r ...*ResumeJobApplication) *ResumeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddJobApplicationIDs(ids...)
}

// Mutation returns the ResumeMutation object of the builder.
func (ru *ResumeUpdate) Mutation() *ResumeMutation {
	return ru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ru *ResumeUpdate) ClearUser() *ResumeUpdate {
	ru.mutation.ClearUser()
	return ru
}

// ClearEducations clears all "educations" edges to the ResumeEducation entity.
func (ru *ResumeUpdate) ClearEducations() *ResumeUpdate {
	ru.mutation.ClearEducations()
	return ru
}

// RemoveEducationIDs removes the "educations" edge to ResumeEducation entities by IDs.
func (ru *ResumeUpdate) RemoveEducationIDs(ids ...uuid.UUID) *ResumeUpdate {
	ru.mutation.RemoveEducationIDs(ids...)
	return ru
}

// RemoveEducations removes "educations" edges to ResumeEducation entities.
func (ru *ResumeUpdate) RemoveEducations(r ...*ResumeEducation) *ResumeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveEducationIDs(ids...)
}

// ClearExperiences clears all "experiences" edges to the ResumeExperience entity.
func (ru *ResumeUpdate) ClearExperiences() *ResumeUpdate {
	ru.mutation.ClearExperiences()
	return ru
}

// RemoveExperienceIDs removes the "experiences" edge to ResumeExperience entities by IDs.
func (ru *ResumeUpdate) RemoveExperienceIDs(ids ...uuid.UUID) *ResumeUpdate {
	ru.mutation.RemoveExperienceIDs(ids...)
	return ru
}

// RemoveExperiences removes "experiences" edges to ResumeExperience entities.
func (ru *ResumeUpdate) RemoveExperiences(r ...*ResumeExperience) *ResumeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveExperienceIDs(ids...)
}

// ClearProjects clears all "projects" edges to the ResumeProject entity.
func (ru *ResumeUpdate) ClearProjects() *ResumeUpdate {
	ru.mutation.ClearProjects()
	return ru
}

// RemoveProjectIDs removes the "projects" edge to ResumeProject entities by IDs.
func (ru *ResumeUpdate) RemoveProjectIDs(ids ...uuid.UUID) *ResumeUpdate {
	ru.mutation.RemoveProjectIDs(ids...)
	return ru
}

// RemoveProjects removes "projects" edges to ResumeProject entities.
func (ru *ResumeUpdate) RemoveProjects(r ...*ResumeProject) *ResumeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveProjectIDs(ids...)
}

// ClearSkills clears all "skills" edges to the ResumeSkill entity.
func (ru *ResumeUpdate) ClearSkills() *ResumeUpdate {
	ru.mutation.ClearSkills()
	return ru
}

// RemoveSkillIDs removes the "skills" edge to ResumeSkill entities by IDs.
func (ru *ResumeUpdate) RemoveSkillIDs(ids ...uuid.UUID) *ResumeUpdate {
	ru.mutation.RemoveSkillIDs(ids...)
	return ru
}

// RemoveSkills removes "skills" edges to ResumeSkill entities.
func (ru *ResumeUpdate) RemoveSkills(r ...*ResumeSkill) *ResumeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveSkillIDs(ids...)
}

// ClearLogs clears all "logs" edges to the ResumeLog entity.
func (ru *ResumeUpdate) ClearLogs() *ResumeUpdate {
	ru.mutation.ClearLogs()
	return ru
}

// RemoveLogIDs removes the "logs" edge to ResumeLog entities by IDs.
func (ru *ResumeUpdate) RemoveLogIDs(ids ...uuid.UUID) *ResumeUpdate {
	ru.mutation.RemoveLogIDs(ids...)
	return ru
}

// RemoveLogs removes "logs" edges to ResumeLog entities.
func (ru *ResumeUpdate) RemoveLogs(r ...*ResumeLog) *ResumeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveLogIDs(ids...)
}

// ClearDocumentParse clears all "document_parse" edges to the ResumeDocumentParse entity.
func (ru *ResumeUpdate) ClearDocumentParse() *ResumeUpdate {
	ru.mutation.ClearDocumentParse()
	return ru
}

// RemoveDocumentParseIDs removes the "document_parse" edge to ResumeDocumentParse entities by IDs.
func (ru *ResumeUpdate) RemoveDocumentParseIDs(ids ...uuid.UUID) *ResumeUpdate {
	ru.mutation.RemoveDocumentParseIDs(ids...)
	return ru
}

// RemoveDocumentParse removes "document_parse" edges to ResumeDocumentParse entities.
func (ru *ResumeUpdate) RemoveDocumentParse(r ...*ResumeDocumentParse) *ResumeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveDocumentParseIDs(ids...)
}

// ClearJobApplications clears all "job_applications" edges to the ResumeJobApplication entity.
func (ru *ResumeUpdate) ClearJobApplications() *ResumeUpdate {
	ru.mutation.ClearJobApplications()
	return ru
}

// RemoveJobApplicationIDs removes the "job_applications" edge to ResumeJobApplication entities by IDs.
func (ru *ResumeUpdate) RemoveJobApplicationIDs(ids ...uuid.UUID) *ResumeUpdate {
	ru.mutation.RemoveJobApplicationIDs(ids...)
	return ru
}

// RemoveJobApplications removes "job_applications" edges to ResumeJobApplication entities.
func (ru *ResumeUpdate) RemoveJobApplications(r ...*ResumeJobApplication) *ResumeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveJobApplicationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResumeUpdate) Save(ctx context.Context) (int, error) {
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResumeUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResumeUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResumeUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ResumeUpdate) defaults() error {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		if resume.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resume.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resume.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ru *ResumeUpdate) check() error {
	if v, ok := ru.mutation.HighestEducation(); ok {
		if err := resume.HighestEducationValidator(v); err != nil {
			return &ValidationError{Name: "highest_education", err: fmt.Errorf(`db: validator failed for field "Resume.highest_education": %w`, err)}
		}
	}
	if ru.mutation.UserCleared() && len(ru.mutation.UserIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Resume.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *ResumeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *ResumeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resume.Table, resume.Columns, sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(resume.FieldDeletedAt, field.TypeTime, value)
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.ClearField(resume.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(resume.FieldName, field.TypeString, value)
	}
	if ru.mutation.NameCleared() {
		_spec.ClearField(resume.FieldName, field.TypeString)
	}
	if value, ok := ru.mutation.Gender(); ok {
		_spec.SetField(resume.FieldGender, field.TypeString, value)
	}
	if ru.mutation.GenderCleared() {
		_spec.ClearField(resume.FieldGender, field.TypeString)
	}
	if value, ok := ru.mutation.Birthday(); ok {
		_spec.SetField(resume.FieldBirthday, field.TypeTime, value)
	}
	if ru.mutation.BirthdayCleared() {
		_spec.ClearField(resume.FieldBirthday, field.TypeTime)
	}
	if value, ok := ru.mutation.Email(); ok {
		_spec.SetField(resume.FieldEmail, field.TypeString, value)
	}
	if ru.mutation.EmailCleared() {
		_spec.ClearField(resume.FieldEmail, field.TypeString)
	}
	if value, ok := ru.mutation.Phone(); ok {
		_spec.SetField(resume.FieldPhone, field.TypeString, value)
	}
	if ru.mutation.PhoneCleared() {
		_spec.ClearField(resume.FieldPhone, field.TypeString)
	}
	if value, ok := ru.mutation.CurrentCity(); ok {
		_spec.SetField(resume.FieldCurrentCity, field.TypeString, value)
	}
	if ru.mutation.CurrentCityCleared() {
		_spec.ClearField(resume.FieldCurrentCity, field.TypeString)
	}
	if value, ok := ru.mutation.HighestEducation(); ok {
		_spec.SetField(resume.FieldHighestEducation, field.TypeString, value)
	}
	if ru.mutation.HighestEducationCleared() {
		_spec.ClearField(resume.FieldHighestEducation, field.TypeString)
	}
	if value, ok := ru.mutation.YearsExperience(); ok {
		_spec.SetField(resume.FieldYearsExperience, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedYearsExperience(); ok {
		_spec.AddField(resume.FieldYearsExperience, field.TypeFloat64, value)
	}
	if ru.mutation.YearsExperienceCleared() {
		_spec.ClearField(resume.FieldYearsExperience, field.TypeFloat64)
	}
	if value, ok := ru.mutation.ResumeFileURL(); ok {
		_spec.SetField(resume.FieldResumeFileURL, field.TypeString, value)
	}
	if ru.mutation.ResumeFileURLCleared() {
		_spec.ClearField(resume.FieldResumeFileURL, field.TypeString)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(resume.FieldStatus, field.TypeString, value)
	}
	if value, ok := ru.mutation.ErrorMessage(); ok {
		_spec.SetField(resume.FieldErrorMessage, field.TypeString, value)
	}
	if ru.mutation.ErrorMessageCleared() {
		_spec.ClearField(resume.FieldErrorMessage, field.TypeString)
	}
	if value, ok := ru.mutation.ParsedAt(); ok {
		_spec.SetField(resume.FieldParsedAt, field.TypeTime, value)
	}
	if ru.mutation.ParsedAtCleared() {
		_spec.ClearField(resume.FieldParsedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(resume.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(resume.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.UserTable,
			Columns: []string{resume.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.UserTable,
			Columns: []string{resume.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.EducationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.EducationsTable,
			Columns: []string{resume.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeeducation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedEducationsIDs(); len(nodes) > 0 && !ru.mutation.EducationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.EducationsTable,
			Columns: []string{resume.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeeducation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EducationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.EducationsTable,
			Columns: []string{resume.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeeducation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.ExperiencesTable,
			Columns: []string{resume.ExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeexperience.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedExperiencesIDs(); len(nodes) > 0 && !ru.mutation.ExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.ExperiencesTable,
			Columns: []string{resume.ExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeexperience.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ExperiencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.ExperiencesTable,
			Columns: []string{resume.ExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeexperience.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.ProjectsTable,
			Columns: []string{resume.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeproject.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !ru.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.ProjectsTable,
			Columns: []string{resume.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeproject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.ProjectsTable,
			Columns: []string{resume.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeproject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.SkillsTable,
			Columns: []string{resume.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeskill.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedSkillsIDs(); len(nodes) > 0 && !ru.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.SkillsTable,
			Columns: []string{resume.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.SkillsTable,
			Columns: []string{resume.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.LogsTable,
			Columns: []string{resume.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumelog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedLogsIDs(); len(nodes) > 0 && !ru.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.LogsTable,
			Columns: []string{resume.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.LogsTable,
			Columns: []string{resume.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.DocumentParseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.DocumentParseTable,
			Columns: []string{resume.DocumentParseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumedocumentparse.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedDocumentParseIDs(); len(nodes) > 0 && !ru.mutation.DocumentParseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.DocumentParseTable,
			Columns: []string{resume.DocumentParseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumedocumentparse.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.DocumentParseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.DocumentParseTable,
			Columns: []string{resume.DocumentParseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumedocumentparse.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.JobApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.JobApplicationsTable,
			Columns: []string{resume.JobApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumejobapplication.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedJobApplicationsIDs(); len(nodes) > 0 && !ru.mutation.JobApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.JobApplicationsTable,
			Columns: []string{resume.JobApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumejobapplication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.JobApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.JobApplicationsTable,
			Columns: []string{resume.JobApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumejobapplication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resume.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ResumeUpdateOne is the builder for updating a single Resume entity.
type ResumeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ResumeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *ResumeUpdateOne) SetDeletedAt(t time.Time) *ResumeUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableDeletedAt(t *time.Time) *ResumeUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *ResumeUpdateOne) ClearDeletedAt() *ResumeUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetUploaderID sets the "uploader_id" field.
func (ruo *ResumeUpdateOne) SetUploaderID(u uuid.UUID) *ResumeUpdateOne {
	ruo.mutation.SetUploaderID(u)
	return ruo
}

// SetNillableUploaderID sets the "uploader_id" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableUploaderID(u *uuid.UUID) *ResumeUpdateOne {
	if u != nil {
		ruo.SetUploaderID(*u)
	}
	return ruo
}

// SetName sets the "name" field.
func (ruo *ResumeUpdateOne) SetName(s string) *ResumeUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableName(s *string) *ResumeUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// ClearName clears the value of the "name" field.
func (ruo *ResumeUpdateOne) ClearName() *ResumeUpdateOne {
	ruo.mutation.ClearName()
	return ruo
}

// SetGender sets the "gender" field.
func (ruo *ResumeUpdateOne) SetGender(s string) *ResumeUpdateOne {
	ruo.mutation.SetGender(s)
	return ruo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableGender(s *string) *ResumeUpdateOne {
	if s != nil {
		ruo.SetGender(*s)
	}
	return ruo
}

// ClearGender clears the value of the "gender" field.
func (ruo *ResumeUpdateOne) ClearGender() *ResumeUpdateOne {
	ruo.mutation.ClearGender()
	return ruo
}

// SetBirthday sets the "birthday" field.
func (ruo *ResumeUpdateOne) SetBirthday(t time.Time) *ResumeUpdateOne {
	ruo.mutation.SetBirthday(t)
	return ruo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableBirthday(t *time.Time) *ResumeUpdateOne {
	if t != nil {
		ruo.SetBirthday(*t)
	}
	return ruo
}

// ClearBirthday clears the value of the "birthday" field.
func (ruo *ResumeUpdateOne) ClearBirthday() *ResumeUpdateOne {
	ruo.mutation.ClearBirthday()
	return ruo
}

// SetEmail sets the "email" field.
func (ruo *ResumeUpdateOne) SetEmail(s string) *ResumeUpdateOne {
	ruo.mutation.SetEmail(s)
	return ruo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableEmail(s *string) *ResumeUpdateOne {
	if s != nil {
		ruo.SetEmail(*s)
	}
	return ruo
}

// ClearEmail clears the value of the "email" field.
func (ruo *ResumeUpdateOne) ClearEmail() *ResumeUpdateOne {
	ruo.mutation.ClearEmail()
	return ruo
}

// SetPhone sets the "phone" field.
func (ruo *ResumeUpdateOne) SetPhone(s string) *ResumeUpdateOne {
	ruo.mutation.SetPhone(s)
	return ruo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillablePhone(s *string) *ResumeUpdateOne {
	if s != nil {
		ruo.SetPhone(*s)
	}
	return ruo
}

// ClearPhone clears the value of the "phone" field.
func (ruo *ResumeUpdateOne) ClearPhone() *ResumeUpdateOne {
	ruo.mutation.ClearPhone()
	return ruo
}

// SetCurrentCity sets the "current_city" field.
func (ruo *ResumeUpdateOne) SetCurrentCity(s string) *ResumeUpdateOne {
	ruo.mutation.SetCurrentCity(s)
	return ruo
}

// SetNillableCurrentCity sets the "current_city" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableCurrentCity(s *string) *ResumeUpdateOne {
	if s != nil {
		ruo.SetCurrentCity(*s)
	}
	return ruo
}

// ClearCurrentCity clears the value of the "current_city" field.
func (ruo *ResumeUpdateOne) ClearCurrentCity() *ResumeUpdateOne {
	ruo.mutation.ClearCurrentCity()
	return ruo
}

// SetHighestEducation sets the "highest_education" field.
func (ruo *ResumeUpdateOne) SetHighestEducation(s string) *ResumeUpdateOne {
	ruo.mutation.SetHighestEducation(s)
	return ruo
}

// SetNillableHighestEducation sets the "highest_education" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableHighestEducation(s *string) *ResumeUpdateOne {
	if s != nil {
		ruo.SetHighestEducation(*s)
	}
	return ruo
}

// ClearHighestEducation clears the value of the "highest_education" field.
func (ruo *ResumeUpdateOne) ClearHighestEducation() *ResumeUpdateOne {
	ruo.mutation.ClearHighestEducation()
	return ruo
}

// SetYearsExperience sets the "years_experience" field.
func (ruo *ResumeUpdateOne) SetYearsExperience(f float64) *ResumeUpdateOne {
	ruo.mutation.ResetYearsExperience()
	ruo.mutation.SetYearsExperience(f)
	return ruo
}

// SetNillableYearsExperience sets the "years_experience" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableYearsExperience(f *float64) *ResumeUpdateOne {
	if f != nil {
		ruo.SetYearsExperience(*f)
	}
	return ruo
}

// AddYearsExperience adds f to the "years_experience" field.
func (ruo *ResumeUpdateOne) AddYearsExperience(f float64) *ResumeUpdateOne {
	ruo.mutation.AddYearsExperience(f)
	return ruo
}

// ClearYearsExperience clears the value of the "years_experience" field.
func (ruo *ResumeUpdateOne) ClearYearsExperience() *ResumeUpdateOne {
	ruo.mutation.ClearYearsExperience()
	return ruo
}

// SetResumeFileURL sets the "resume_file_url" field.
func (ruo *ResumeUpdateOne) SetResumeFileURL(s string) *ResumeUpdateOne {
	ruo.mutation.SetResumeFileURL(s)
	return ruo
}

// SetNillableResumeFileURL sets the "resume_file_url" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableResumeFileURL(s *string) *ResumeUpdateOne {
	if s != nil {
		ruo.SetResumeFileURL(*s)
	}
	return ruo
}

// ClearResumeFileURL clears the value of the "resume_file_url" field.
func (ruo *ResumeUpdateOne) ClearResumeFileURL() *ResumeUpdateOne {
	ruo.mutation.ClearResumeFileURL()
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *ResumeUpdateOne) SetStatus(s string) *ResumeUpdateOne {
	ruo.mutation.SetStatus(s)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableStatus(s *string) *ResumeUpdateOne {
	if s != nil {
		ruo.SetStatus(*s)
	}
	return ruo
}

// SetErrorMessage sets the "error_message" field.
func (ruo *ResumeUpdateOne) SetErrorMessage(s string) *ResumeUpdateOne {
	ruo.mutation.SetErrorMessage(s)
	return ruo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableErrorMessage(s *string) *ResumeUpdateOne {
	if s != nil {
		ruo.SetErrorMessage(*s)
	}
	return ruo
}

// ClearErrorMessage clears the value of the "error_message" field.
func (ruo *ResumeUpdateOne) ClearErrorMessage() *ResumeUpdateOne {
	ruo.mutation.ClearErrorMessage()
	return ruo
}

// SetParsedAt sets the "parsed_at" field.
func (ruo *ResumeUpdateOne) SetParsedAt(t time.Time) *ResumeUpdateOne {
	ruo.mutation.SetParsedAt(t)
	return ruo
}

// SetNillableParsedAt sets the "parsed_at" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableParsedAt(t *time.Time) *ResumeUpdateOne {
	if t != nil {
		ruo.SetParsedAt(*t)
	}
	return ruo
}

// ClearParsedAt clears the value of the "parsed_at" field.
func (ruo *ResumeUpdateOne) ClearParsedAt() *ResumeUpdateOne {
	ruo.mutation.ClearParsedAt()
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *ResumeUpdateOne) SetCreatedAt(t time.Time) *ResumeUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableCreatedAt(t *time.Time) *ResumeUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ResumeUpdateOne) SetUpdatedAt(t time.Time) *ResumeUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ruo *ResumeUpdateOne) SetUserID(id uuid.UUID) *ResumeUpdateOne {
	ruo.mutation.SetUserID(id)
	return ruo
}

// SetUser sets the "user" edge to the User entity.
func (ruo *ResumeUpdateOne) SetUser(u *User) *ResumeUpdateOne {
	return ruo.SetUserID(u.ID)
}

// AddEducationIDs adds the "educations" edge to the ResumeEducation entity by IDs.
func (ruo *ResumeUpdateOne) AddEducationIDs(ids ...uuid.UUID) *ResumeUpdateOne {
	ruo.mutation.AddEducationIDs(ids...)
	return ruo
}

// AddEducations adds the "educations" edges to the ResumeEducation entity.
func (ruo *ResumeUpdateOne) AddEducations(r ...*ResumeEducation) *ResumeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddEducationIDs(ids...)
}

// AddExperienceIDs adds the "experiences" edge to the ResumeExperience entity by IDs.
func (ruo *ResumeUpdateOne) AddExperienceIDs(ids ...uuid.UUID) *ResumeUpdateOne {
	ruo.mutation.AddExperienceIDs(ids...)
	return ruo
}

// AddExperiences adds the "experiences" edges to the ResumeExperience entity.
func (ruo *ResumeUpdateOne) AddExperiences(r ...*ResumeExperience) *ResumeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddExperienceIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the ResumeProject entity by IDs.
func (ruo *ResumeUpdateOne) AddProjectIDs(ids ...uuid.UUID) *ResumeUpdateOne {
	ruo.mutation.AddProjectIDs(ids...)
	return ruo
}

// AddProjects adds the "projects" edges to the ResumeProject entity.
func (ruo *ResumeUpdateOne) AddProjects(r ...*ResumeProject) *ResumeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddProjectIDs(ids...)
}

// AddSkillIDs adds the "skills" edge to the ResumeSkill entity by IDs.
func (ruo *ResumeUpdateOne) AddSkillIDs(ids ...uuid.UUID) *ResumeUpdateOne {
	ruo.mutation.AddSkillIDs(ids...)
	return ruo
}

// AddSkills adds the "skills" edges to the ResumeSkill entity.
func (ruo *ResumeUpdateOne) AddSkills(r ...*ResumeSkill) *ResumeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddSkillIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the ResumeLog entity by IDs.
func (ruo *ResumeUpdateOne) AddLogIDs(ids ...uuid.UUID) *ResumeUpdateOne {
	ruo.mutation.AddLogIDs(ids...)
	return ruo
}

// AddLogs adds the "logs" edges to the ResumeLog entity.
func (ruo *ResumeUpdateOne) AddLogs(r ...*ResumeLog) *ResumeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddLogIDs(ids...)
}

// AddDocumentParseIDs adds the "document_parse" edge to the ResumeDocumentParse entity by IDs.
func (ruo *ResumeUpdateOne) AddDocumentParseIDs(ids ...uuid.UUID) *ResumeUpdateOne {
	ruo.mutation.AddDocumentParseIDs(ids...)
	return ruo
}

// AddDocumentParse adds the "document_parse" edges to the ResumeDocumentParse entity.
func (ruo *ResumeUpdateOne) AddDocumentParse(r ...*ResumeDocumentParse) *ResumeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddDocumentParseIDs(ids...)
}

// AddJobApplicationIDs adds the "job_applications" edge to the ResumeJobApplication entity by IDs.
func (ruo *ResumeUpdateOne) AddJobApplicationIDs(ids ...uuid.UUID) *ResumeUpdateOne {
	ruo.mutation.AddJobApplicationIDs(ids...)
	return ruo
}

// AddJobApplications adds the "job_applications" edges to the ResumeJobApplication entity.
func (ruo *ResumeUpdateOne) AddJobApplications(r ...*ResumeJobApplication) *ResumeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddJobApplicationIDs(ids...)
}

// Mutation returns the ResumeMutation object of the builder.
func (ruo *ResumeUpdateOne) Mutation() *ResumeMutation {
	return ruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ruo *ResumeUpdateOne) ClearUser() *ResumeUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// ClearEducations clears all "educations" edges to the ResumeEducation entity.
func (ruo *ResumeUpdateOne) ClearEducations() *ResumeUpdateOne {
	ruo.mutation.ClearEducations()
	return ruo
}

// RemoveEducationIDs removes the "educations" edge to ResumeEducation entities by IDs.
func (ruo *ResumeUpdateOne) RemoveEducationIDs(ids ...uuid.UUID) *ResumeUpdateOne {
	ruo.mutation.RemoveEducationIDs(ids...)
	return ruo
}

// RemoveEducations removes "educations" edges to ResumeEducation entities.
func (ruo *ResumeUpdateOne) RemoveEducations(r ...*ResumeEducation) *ResumeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveEducationIDs(ids...)
}

// ClearExperiences clears all "experiences" edges to the ResumeExperience entity.
func (ruo *ResumeUpdateOne) ClearExperiences() *ResumeUpdateOne {
	ruo.mutation.ClearExperiences()
	return ruo
}

// RemoveExperienceIDs removes the "experiences" edge to ResumeExperience entities by IDs.
func (ruo *ResumeUpdateOne) RemoveExperienceIDs(ids ...uuid.UUID) *ResumeUpdateOne {
	ruo.mutation.RemoveExperienceIDs(ids...)
	return ruo
}

// RemoveExperiences removes "experiences" edges to ResumeExperience entities.
func (ruo *ResumeUpdateOne) RemoveExperiences(r ...*ResumeExperience) *ResumeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveExperienceIDs(ids...)
}

// ClearProjects clears all "projects" edges to the ResumeProject entity.
func (ruo *ResumeUpdateOne) ClearProjects() *ResumeUpdateOne {
	ruo.mutation.ClearProjects()
	return ruo
}

// RemoveProjectIDs removes the "projects" edge to ResumeProject entities by IDs.
func (ruo *ResumeUpdateOne) RemoveProjectIDs(ids ...uuid.UUID) *ResumeUpdateOne {
	ruo.mutation.RemoveProjectIDs(ids...)
	return ruo
}

// RemoveProjects removes "projects" edges to ResumeProject entities.
func (ruo *ResumeUpdateOne) RemoveProjects(r ...*ResumeProject) *ResumeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveProjectIDs(ids...)
}

// ClearSkills clears all "skills" edges to the ResumeSkill entity.
func (ruo *ResumeUpdateOne) ClearSkills() *ResumeUpdateOne {
	ruo.mutation.ClearSkills()
	return ruo
}

// RemoveSkillIDs removes the "skills" edge to ResumeSkill entities by IDs.
func (ruo *ResumeUpdateOne) RemoveSkillIDs(ids ...uuid.UUID) *ResumeUpdateOne {
	ruo.mutation.RemoveSkillIDs(ids...)
	return ruo
}

// RemoveSkills removes "skills" edges to ResumeSkill entities.
func (ruo *ResumeUpdateOne) RemoveSkills(r ...*ResumeSkill) *ResumeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveSkillIDs(ids...)
}

// ClearLogs clears all "logs" edges to the ResumeLog entity.
func (ruo *ResumeUpdateOne) ClearLogs() *ResumeUpdateOne {
	ruo.mutation.ClearLogs()
	return ruo
}

// RemoveLogIDs removes the "logs" edge to ResumeLog entities by IDs.
func (ruo *ResumeUpdateOne) RemoveLogIDs(ids ...uuid.UUID) *ResumeUpdateOne {
	ruo.mutation.RemoveLogIDs(ids...)
	return ruo
}

// RemoveLogs removes "logs" edges to ResumeLog entities.
func (ruo *ResumeUpdateOne) RemoveLogs(r ...*ResumeLog) *ResumeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveLogIDs(ids...)
}

// ClearDocumentParse clears all "document_parse" edges to the ResumeDocumentParse entity.
func (ruo *ResumeUpdateOne) ClearDocumentParse() *ResumeUpdateOne {
	ruo.mutation.ClearDocumentParse()
	return ruo
}

// RemoveDocumentParseIDs removes the "document_parse" edge to ResumeDocumentParse entities by IDs.
func (ruo *ResumeUpdateOne) RemoveDocumentParseIDs(ids ...uuid.UUID) *ResumeUpdateOne {
	ruo.mutation.RemoveDocumentParseIDs(ids...)
	return ruo
}

// RemoveDocumentParse removes "document_parse" edges to ResumeDocumentParse entities.
func (ruo *ResumeUpdateOne) RemoveDocumentParse(r ...*ResumeDocumentParse) *ResumeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveDocumentParseIDs(ids...)
}

// ClearJobApplications clears all "job_applications" edges to the ResumeJobApplication entity.
func (ruo *ResumeUpdateOne) ClearJobApplications() *ResumeUpdateOne {
	ruo.mutation.ClearJobApplications()
	return ruo
}

// RemoveJobApplicationIDs removes the "job_applications" edge to ResumeJobApplication entities by IDs.
func (ruo *ResumeUpdateOne) RemoveJobApplicationIDs(ids ...uuid.UUID) *ResumeUpdateOne {
	ruo.mutation.RemoveJobApplicationIDs(ids...)
	return ruo
}

// RemoveJobApplications removes "job_applications" edges to ResumeJobApplication entities.
func (ruo *ResumeUpdateOne) RemoveJobApplications(r ...*ResumeJobApplication) *ResumeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveJobApplicationIDs(ids...)
}

// Where appends a list predicates to the ResumeUpdate builder.
func (ruo *ResumeUpdateOne) Where(ps ...predicate.Resume) *ResumeUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ResumeUpdateOne) Select(field string, fields ...string) *ResumeUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Resume entity.
func (ruo *ResumeUpdateOne) Save(ctx context.Context) (*Resume, error) {
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResumeUpdateOne) SaveX(ctx context.Context) *Resume {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResumeUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResumeUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ResumeUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		if resume.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resume.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resume.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ResumeUpdateOne) check() error {
	if v, ok := ruo.mutation.HighestEducation(); ok {
		if err := resume.HighestEducationValidator(v); err != nil {
			return &ValidationError{Name: "highest_education", err: fmt.Errorf(`db: validator failed for field "Resume.highest_education": %w`, err)}
		}
	}
	if ruo.mutation.UserCleared() && len(ruo.mutation.UserIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Resume.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *ResumeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *ResumeUpdateOne) sqlSave(ctx context.Context) (_node *Resume, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resume.Table, resume.Columns, sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Resume.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resume.FieldID)
		for _, f := range fields {
			if !resume.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != resume.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(resume.FieldDeletedAt, field.TypeTime, value)
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.ClearField(resume.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(resume.FieldName, field.TypeString, value)
	}
	if ruo.mutation.NameCleared() {
		_spec.ClearField(resume.FieldName, field.TypeString)
	}
	if value, ok := ruo.mutation.Gender(); ok {
		_spec.SetField(resume.FieldGender, field.TypeString, value)
	}
	if ruo.mutation.GenderCleared() {
		_spec.ClearField(resume.FieldGender, field.TypeString)
	}
	if value, ok := ruo.mutation.Birthday(); ok {
		_spec.SetField(resume.FieldBirthday, field.TypeTime, value)
	}
	if ruo.mutation.BirthdayCleared() {
		_spec.ClearField(resume.FieldBirthday, field.TypeTime)
	}
	if value, ok := ruo.mutation.Email(); ok {
		_spec.SetField(resume.FieldEmail, field.TypeString, value)
	}
	if ruo.mutation.EmailCleared() {
		_spec.ClearField(resume.FieldEmail, field.TypeString)
	}
	if value, ok := ruo.mutation.Phone(); ok {
		_spec.SetField(resume.FieldPhone, field.TypeString, value)
	}
	if ruo.mutation.PhoneCleared() {
		_spec.ClearField(resume.FieldPhone, field.TypeString)
	}
	if value, ok := ruo.mutation.CurrentCity(); ok {
		_spec.SetField(resume.FieldCurrentCity, field.TypeString, value)
	}
	if ruo.mutation.CurrentCityCleared() {
		_spec.ClearField(resume.FieldCurrentCity, field.TypeString)
	}
	if value, ok := ruo.mutation.HighestEducation(); ok {
		_spec.SetField(resume.FieldHighestEducation, field.TypeString, value)
	}
	if ruo.mutation.HighestEducationCleared() {
		_spec.ClearField(resume.FieldHighestEducation, field.TypeString)
	}
	if value, ok := ruo.mutation.YearsExperience(); ok {
		_spec.SetField(resume.FieldYearsExperience, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedYearsExperience(); ok {
		_spec.AddField(resume.FieldYearsExperience, field.TypeFloat64, value)
	}
	if ruo.mutation.YearsExperienceCleared() {
		_spec.ClearField(resume.FieldYearsExperience, field.TypeFloat64)
	}
	if value, ok := ruo.mutation.ResumeFileURL(); ok {
		_spec.SetField(resume.FieldResumeFileURL, field.TypeString, value)
	}
	if ruo.mutation.ResumeFileURLCleared() {
		_spec.ClearField(resume.FieldResumeFileURL, field.TypeString)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(resume.FieldStatus, field.TypeString, value)
	}
	if value, ok := ruo.mutation.ErrorMessage(); ok {
		_spec.SetField(resume.FieldErrorMessage, field.TypeString, value)
	}
	if ruo.mutation.ErrorMessageCleared() {
		_spec.ClearField(resume.FieldErrorMessage, field.TypeString)
	}
	if value, ok := ruo.mutation.ParsedAt(); ok {
		_spec.SetField(resume.FieldParsedAt, field.TypeTime, value)
	}
	if ruo.mutation.ParsedAtCleared() {
		_spec.ClearField(resume.FieldParsedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(resume.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(resume.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.UserTable,
			Columns: []string{resume.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.UserTable,
			Columns: []string{resume.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.EducationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.EducationsTable,
			Columns: []string{resume.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeeducation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedEducationsIDs(); len(nodes) > 0 && !ruo.mutation.EducationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.EducationsTable,
			Columns: []string{resume.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeeducation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EducationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.EducationsTable,
			Columns: []string{resume.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeeducation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.ExperiencesTable,
			Columns: []string{resume.ExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeexperience.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedExperiencesIDs(); len(nodes) > 0 && !ruo.mutation.ExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.ExperiencesTable,
			Columns: []string{resume.ExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeexperience.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ExperiencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.ExperiencesTable,
			Columns: []string{resume.ExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeexperience.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.ProjectsTable,
			Columns: []string{resume.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeproject.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !ruo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.ProjectsTable,
			Columns: []string{resume.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeproject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.ProjectsTable,
			Columns: []string{resume.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeproject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.SkillsTable,
			Columns: []string{resume.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeskill.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedSkillsIDs(); len(nodes) > 0 && !ruo.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.SkillsTable,
			Columns: []string{resume.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.SkillsTable,
			Columns: []string{resume.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumeskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.LogsTable,
			Columns: []string{resume.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumelog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedLogsIDs(); len(nodes) > 0 && !ruo.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.LogsTable,
			Columns: []string{resume.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.LogsTable,
			Columns: []string{resume.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.DocumentParseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.DocumentParseTable,
			Columns: []string{resume.DocumentParseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumedocumentparse.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedDocumentParseIDs(); len(nodes) > 0 && !ruo.mutation.DocumentParseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.DocumentParseTable,
			Columns: []string{resume.DocumentParseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumedocumentparse.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.DocumentParseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.DocumentParseTable,
			Columns: []string{resume.DocumentParseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumedocumentparse.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.JobApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.JobApplicationsTable,
			Columns: []string{resume.JobApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumejobapplication.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedJobApplicationsIDs(); len(nodes) > 0 && !ruo.mutation.JobApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.JobApplicationsTable,
			Columns: []string{resume.JobApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumejobapplication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.JobApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resume.JobApplicationsTable,
			Columns: []string{resume.JobApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumejobapplication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Resume{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resume.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
