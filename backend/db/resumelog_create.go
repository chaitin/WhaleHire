// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumelog"
	"github.com/google/uuid"
)

// ResumeLogCreate is the builder for creating a ResumeLog entity.
type ResumeLogCreate struct {
	config
	mutation *ResumeLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (rlc *ResumeLogCreate) SetDeletedAt(t time.Time) *ResumeLogCreate {
	rlc.mutation.SetDeletedAt(t)
	return rlc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rlc *ResumeLogCreate) SetNillableDeletedAt(t *time.Time) *ResumeLogCreate {
	if t != nil {
		rlc.SetDeletedAt(*t)
	}
	return rlc
}

// SetResumeID sets the "resume_id" field.
func (rlc *ResumeLogCreate) SetResumeID(u uuid.UUID) *ResumeLogCreate {
	rlc.mutation.SetResumeID(u)
	return rlc
}

// SetAction sets the "action" field.
func (rlc *ResumeLogCreate) SetAction(s string) *ResumeLogCreate {
	rlc.mutation.SetAction(s)
	return rlc
}

// SetMessage sets the "message" field.
func (rlc *ResumeLogCreate) SetMessage(s string) *ResumeLogCreate {
	rlc.mutation.SetMessage(s)
	return rlc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (rlc *ResumeLogCreate) SetNillableMessage(s *string) *ResumeLogCreate {
	if s != nil {
		rlc.SetMessage(*s)
	}
	return rlc
}

// SetCreatedAt sets the "created_at" field.
func (rlc *ResumeLogCreate) SetCreatedAt(t time.Time) *ResumeLogCreate {
	rlc.mutation.SetCreatedAt(t)
	return rlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rlc *ResumeLogCreate) SetNillableCreatedAt(t *time.Time) *ResumeLogCreate {
	if t != nil {
		rlc.SetCreatedAt(*t)
	}
	return rlc
}

// SetUpdatedAt sets the "updated_at" field.
func (rlc *ResumeLogCreate) SetUpdatedAt(t time.Time) *ResumeLogCreate {
	rlc.mutation.SetUpdatedAt(t)
	return rlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rlc *ResumeLogCreate) SetNillableUpdatedAt(t *time.Time) *ResumeLogCreate {
	if t != nil {
		rlc.SetUpdatedAt(*t)
	}
	return rlc
}

// SetID sets the "id" field.
func (rlc *ResumeLogCreate) SetID(u uuid.UUID) *ResumeLogCreate {
	rlc.mutation.SetID(u)
	return rlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rlc *ResumeLogCreate) SetNillableID(u *uuid.UUID) *ResumeLogCreate {
	if u != nil {
		rlc.SetID(*u)
	}
	return rlc
}

// SetResume sets the "resume" edge to the Resume entity.
func (rlc *ResumeLogCreate) SetResume(r *Resume) *ResumeLogCreate {
	return rlc.SetResumeID(r.ID)
}

// Mutation returns the ResumeLogMutation object of the builder.
func (rlc *ResumeLogCreate) Mutation() *ResumeLogMutation {
	return rlc.mutation
}

// Save creates the ResumeLog in the database.
func (rlc *ResumeLogCreate) Save(ctx context.Context) (*ResumeLog, error) {
	if err := rlc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rlc.sqlSave, rlc.mutation, rlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rlc *ResumeLogCreate) SaveX(ctx context.Context) *ResumeLog {
	v, err := rlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rlc *ResumeLogCreate) Exec(ctx context.Context) error {
	_, err := rlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlc *ResumeLogCreate) ExecX(ctx context.Context) {
	if err := rlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rlc *ResumeLogCreate) defaults() error {
	if _, ok := rlc.mutation.CreatedAt(); !ok {
		if resumelog.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized resumelog.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := resumelog.DefaultCreatedAt()
		rlc.mutation.SetCreatedAt(v)
	}
	if _, ok := rlc.mutation.UpdatedAt(); !ok {
		if resumelog.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumelog.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumelog.DefaultUpdatedAt()
		rlc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rlc.mutation.ID(); !ok {
		if resumelog.DefaultID == nil {
			return fmt.Errorf("db: uninitialized resumelog.DefaultID (forgotten import db/runtime?)")
		}
		v := resumelog.DefaultID()
		rlc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rlc *ResumeLogCreate) check() error {
	if _, ok := rlc.mutation.ResumeID(); !ok {
		return &ValidationError{Name: "resume_id", err: errors.New(`db: missing required field "ResumeLog.resume_id"`)}
	}
	if _, ok := rlc.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`db: missing required field "ResumeLog.action"`)}
	}
	if v, ok := rlc.mutation.Action(); ok {
		if err := resumelog.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`db: validator failed for field "ResumeLog.action": %w`, err)}
		}
	}
	if _, ok := rlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ResumeLog.created_at"`)}
	}
	if _, ok := rlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "ResumeLog.updated_at"`)}
	}
	if len(rlc.mutation.ResumeIDs()) == 0 {
		return &ValidationError{Name: "resume", err: errors.New(`db: missing required edge "ResumeLog.resume"`)}
	}
	return nil
}

func (rlc *ResumeLogCreate) sqlSave(ctx context.Context) (*ResumeLog, error) {
	if err := rlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rlc.mutation.id = &_node.ID
	rlc.mutation.done = true
	return _node, nil
}

func (rlc *ResumeLogCreate) createSpec() (*ResumeLog, *sqlgraph.CreateSpec) {
	var (
		_node = &ResumeLog{config: rlc.config}
		_spec = sqlgraph.NewCreateSpec(resumelog.Table, sqlgraph.NewFieldSpec(resumelog.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rlc.conflict
	if id, ok := rlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rlc.mutation.DeletedAt(); ok {
		_spec.SetField(resumelog.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rlc.mutation.Action(); ok {
		_spec.SetField(resumelog.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := rlc.mutation.Message(); ok {
		_spec.SetField(resumelog.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := rlc.mutation.CreatedAt(); ok {
		_spec.SetField(resumelog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rlc.mutation.UpdatedAt(); ok {
		_spec.SetField(resumelog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rlc.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumelog.ResumeTable,
			Columns: []string{resumelog.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResumeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeLog.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeLogUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rlc *ResumeLogCreate) OnConflict(opts ...sql.ConflictOption) *ResumeLogUpsertOne {
	rlc.conflict = opts
	return &ResumeLogUpsertOne{
		create: rlc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rlc *ResumeLogCreate) OnConflictColumns(columns ...string) *ResumeLogUpsertOne {
	rlc.conflict = append(rlc.conflict, sql.ConflictColumns(columns...))
	return &ResumeLogUpsertOne{
		create: rlc,
	}
}

type (
	// ResumeLogUpsertOne is the builder for "upsert"-ing
	//  one ResumeLog node.
	ResumeLogUpsertOne struct {
		create *ResumeLogCreate
	}

	// ResumeLogUpsert is the "OnConflict" setter.
	ResumeLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeLogUpsert) SetDeletedAt(v time.Time) *ResumeLogUpsert {
	u.Set(resumelog.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeLogUpsert) UpdateDeletedAt() *ResumeLogUpsert {
	u.SetExcluded(resumelog.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeLogUpsert) ClearDeletedAt() *ResumeLogUpsert {
	u.SetNull(resumelog.FieldDeletedAt)
	return u
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeLogUpsert) SetResumeID(v uuid.UUID) *ResumeLogUpsert {
	u.Set(resumelog.FieldResumeID, v)
	return u
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeLogUpsert) UpdateResumeID() *ResumeLogUpsert {
	u.SetExcluded(resumelog.FieldResumeID)
	return u
}

// SetAction sets the "action" field.
func (u *ResumeLogUpsert) SetAction(v string) *ResumeLogUpsert {
	u.Set(resumelog.FieldAction, v)
	return u
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *ResumeLogUpsert) UpdateAction() *ResumeLogUpsert {
	u.SetExcluded(resumelog.FieldAction)
	return u
}

// SetMessage sets the "message" field.
func (u *ResumeLogUpsert) SetMessage(v string) *ResumeLogUpsert {
	u.Set(resumelog.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ResumeLogUpsert) UpdateMessage() *ResumeLogUpsert {
	u.SetExcluded(resumelog.FieldMessage)
	return u
}

// ClearMessage clears the value of the "message" field.
func (u *ResumeLogUpsert) ClearMessage() *ResumeLogUpsert {
	u.SetNull(resumelog.FieldMessage)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeLogUpsert) SetCreatedAt(v time.Time) *ResumeLogUpsert {
	u.Set(resumelog.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeLogUpsert) UpdateCreatedAt() *ResumeLogUpsert {
	u.SetExcluded(resumelog.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeLogUpsert) SetUpdatedAt(v time.Time) *ResumeLogUpsert {
	u.Set(resumelog.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeLogUpsert) UpdateUpdatedAt() *ResumeLogUpsert {
	u.SetExcluded(resumelog.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ResumeLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumelog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeLogUpsertOne) UpdateNewValues() *ResumeLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resumelog.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResumeLogUpsertOne) Ignore() *ResumeLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeLogUpsertOne) DoNothing() *ResumeLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeLogCreate.OnConflict
// documentation for more info.
func (u *ResumeLogUpsertOne) Update(set func(*ResumeLogUpsert)) *ResumeLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeLogUpsertOne) SetDeletedAt(v time.Time) *ResumeLogUpsertOne {
	return u.Update(func(s *ResumeLogUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeLogUpsertOne) UpdateDeletedAt() *ResumeLogUpsertOne {
	return u.Update(func(s *ResumeLogUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeLogUpsertOne) ClearDeletedAt() *ResumeLogUpsertOne {
	return u.Update(func(s *ResumeLogUpsert) {
		s.ClearDeletedAt()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeLogUpsertOne) SetResumeID(v uuid.UUID) *ResumeLogUpsertOne {
	return u.Update(func(s *ResumeLogUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeLogUpsertOne) UpdateResumeID() *ResumeLogUpsertOne {
	return u.Update(func(s *ResumeLogUpsert) {
		s.UpdateResumeID()
	})
}

// SetAction sets the "action" field.
func (u *ResumeLogUpsertOne) SetAction(v string) *ResumeLogUpsertOne {
	return u.Update(func(s *ResumeLogUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *ResumeLogUpsertOne) UpdateAction() *ResumeLogUpsertOne {
	return u.Update(func(s *ResumeLogUpsert) {
		s.UpdateAction()
	})
}

// SetMessage sets the "message" field.
func (u *ResumeLogUpsertOne) SetMessage(v string) *ResumeLogUpsertOne {
	return u.Update(func(s *ResumeLogUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ResumeLogUpsertOne) UpdateMessage() *ResumeLogUpsertOne {
	return u.Update(func(s *ResumeLogUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *ResumeLogUpsertOne) ClearMessage() *ResumeLogUpsertOne {
	return u.Update(func(s *ResumeLogUpsert) {
		s.ClearMessage()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeLogUpsertOne) SetCreatedAt(v time.Time) *ResumeLogUpsertOne {
	return u.Update(func(s *ResumeLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeLogUpsertOne) UpdateCreatedAt() *ResumeLogUpsertOne {
	return u.Update(func(s *ResumeLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeLogUpsertOne) SetUpdatedAt(v time.Time) *ResumeLogUpsertOne {
	return u.Update(func(s *ResumeLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeLogUpsertOne) UpdateUpdatedAt() *ResumeLogUpsertOne {
	return u.Update(func(s *ResumeLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResumeLogUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ResumeLogUpsertOne.ID is not supported by MySQL driver. Use ResumeLogUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResumeLogUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResumeLogCreateBulk is the builder for creating many ResumeLog entities in bulk.
type ResumeLogCreateBulk struct {
	config
	err      error
	builders []*ResumeLogCreate
	conflict []sql.ConflictOption
}

// Save creates the ResumeLog entities in the database.
func (rlcb *ResumeLogCreateBulk) Save(ctx context.Context) ([]*ResumeLog, error) {
	if rlcb.err != nil {
		return nil, rlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rlcb.builders))
	nodes := make([]*ResumeLog, len(rlcb.builders))
	mutators := make([]Mutator, len(rlcb.builders))
	for i := range rlcb.builders {
		func(i int, root context.Context) {
			builder := rlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResumeLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rlcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rlcb *ResumeLogCreateBulk) SaveX(ctx context.Context) []*ResumeLog {
	v, err := rlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rlcb *ResumeLogCreateBulk) Exec(ctx context.Context) error {
	_, err := rlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlcb *ResumeLogCreateBulk) ExecX(ctx context.Context) {
	if err := rlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeLogUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rlcb *ResumeLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResumeLogUpsertBulk {
	rlcb.conflict = opts
	return &ResumeLogUpsertBulk{
		create: rlcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rlcb *ResumeLogCreateBulk) OnConflictColumns(columns ...string) *ResumeLogUpsertBulk {
	rlcb.conflict = append(rlcb.conflict, sql.ConflictColumns(columns...))
	return &ResumeLogUpsertBulk{
		create: rlcb,
	}
}

// ResumeLogUpsertBulk is the builder for "upsert"-ing
// a bulk of ResumeLog nodes.
type ResumeLogUpsertBulk struct {
	create *ResumeLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ResumeLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumelog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeLogUpsertBulk) UpdateNewValues() *ResumeLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resumelog.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResumeLogUpsertBulk) Ignore() *ResumeLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeLogUpsertBulk) DoNothing() *ResumeLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeLogCreateBulk.OnConflict
// documentation for more info.
func (u *ResumeLogUpsertBulk) Update(set func(*ResumeLogUpsert)) *ResumeLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeLogUpsertBulk) SetDeletedAt(v time.Time) *ResumeLogUpsertBulk {
	return u.Update(func(s *ResumeLogUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeLogUpsertBulk) UpdateDeletedAt() *ResumeLogUpsertBulk {
	return u.Update(func(s *ResumeLogUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeLogUpsertBulk) ClearDeletedAt() *ResumeLogUpsertBulk {
	return u.Update(func(s *ResumeLogUpsert) {
		s.ClearDeletedAt()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeLogUpsertBulk) SetResumeID(v uuid.UUID) *ResumeLogUpsertBulk {
	return u.Update(func(s *ResumeLogUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeLogUpsertBulk) UpdateResumeID() *ResumeLogUpsertBulk {
	return u.Update(func(s *ResumeLogUpsert) {
		s.UpdateResumeID()
	})
}

// SetAction sets the "action" field.
func (u *ResumeLogUpsertBulk) SetAction(v string) *ResumeLogUpsertBulk {
	return u.Update(func(s *ResumeLogUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *ResumeLogUpsertBulk) UpdateAction() *ResumeLogUpsertBulk {
	return u.Update(func(s *ResumeLogUpsert) {
		s.UpdateAction()
	})
}

// SetMessage sets the "message" field.
func (u *ResumeLogUpsertBulk) SetMessage(v string) *ResumeLogUpsertBulk {
	return u.Update(func(s *ResumeLogUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ResumeLogUpsertBulk) UpdateMessage() *ResumeLogUpsertBulk {
	return u.Update(func(s *ResumeLogUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *ResumeLogUpsertBulk) ClearMessage() *ResumeLogUpsertBulk {
	return u.Update(func(s *ResumeLogUpsert) {
		s.ClearMessage()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeLogUpsertBulk) SetCreatedAt(v time.Time) *ResumeLogUpsertBulk {
	return u.Update(func(s *ResumeLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeLogUpsertBulk) UpdateCreatedAt() *ResumeLogUpsertBulk {
	return u.Update(func(s *ResumeLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeLogUpsertBulk) SetUpdatedAt(v time.Time) *ResumeLogUpsertBulk {
	return u.Update(func(s *ResumeLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeLogUpsertBulk) UpdateUpdatedAt() *ResumeLogUpsertBulk {
	return u.Update(func(s *ResumeLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ResumeLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
