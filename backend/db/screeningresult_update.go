// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/screeningresult"
	"github.com/chaitin/WhaleHire/backend/db/screeningtask"
	"github.com/google/uuid"
)

// ScreeningResultUpdate is the builder for updating ScreeningResult entities.
type ScreeningResultUpdate struct {
	config
	hooks     []Hook
	mutation  *ScreeningResultMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ScreeningResultUpdate builder.
func (sru *ScreeningResultUpdate) Where(ps ...predicate.ScreeningResult) *ScreeningResultUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetDeletedAt sets the "deleted_at" field.
func (sru *ScreeningResultUpdate) SetDeletedAt(t time.Time) *ScreeningResultUpdate {
	sru.mutation.SetDeletedAt(t)
	return sru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sru *ScreeningResultUpdate) SetNillableDeletedAt(t *time.Time) *ScreeningResultUpdate {
	if t != nil {
		sru.SetDeletedAt(*t)
	}
	return sru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sru *ScreeningResultUpdate) ClearDeletedAt() *ScreeningResultUpdate {
	sru.mutation.ClearDeletedAt()
	return sru
}

// SetTaskID sets the "task_id" field.
func (sru *ScreeningResultUpdate) SetTaskID(u uuid.UUID) *ScreeningResultUpdate {
	sru.mutation.SetTaskID(u)
	return sru
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (sru *ScreeningResultUpdate) SetNillableTaskID(u *uuid.UUID) *ScreeningResultUpdate {
	if u != nil {
		sru.SetTaskID(*u)
	}
	return sru
}

// SetJobPositionID sets the "job_position_id" field.
func (sru *ScreeningResultUpdate) SetJobPositionID(u uuid.UUID) *ScreeningResultUpdate {
	sru.mutation.SetJobPositionID(u)
	return sru
}

// SetNillableJobPositionID sets the "job_position_id" field if the given value is not nil.
func (sru *ScreeningResultUpdate) SetNillableJobPositionID(u *uuid.UUID) *ScreeningResultUpdate {
	if u != nil {
		sru.SetJobPositionID(*u)
	}
	return sru
}

// SetResumeID sets the "resume_id" field.
func (sru *ScreeningResultUpdate) SetResumeID(u uuid.UUID) *ScreeningResultUpdate {
	sru.mutation.SetResumeID(u)
	return sru
}

// SetNillableResumeID sets the "resume_id" field if the given value is not nil.
func (sru *ScreeningResultUpdate) SetNillableResumeID(u *uuid.UUID) *ScreeningResultUpdate {
	if u != nil {
		sru.SetResumeID(*u)
	}
	return sru
}

// SetOverallScore sets the "overall_score" field.
func (sru *ScreeningResultUpdate) SetOverallScore(f float64) *ScreeningResultUpdate {
	sru.mutation.ResetOverallScore()
	sru.mutation.SetOverallScore(f)
	return sru
}

// SetNillableOverallScore sets the "overall_score" field if the given value is not nil.
func (sru *ScreeningResultUpdate) SetNillableOverallScore(f *float64) *ScreeningResultUpdate {
	if f != nil {
		sru.SetOverallScore(*f)
	}
	return sru
}

// AddOverallScore adds f to the "overall_score" field.
func (sru *ScreeningResultUpdate) AddOverallScore(f float64) *ScreeningResultUpdate {
	sru.mutation.AddOverallScore(f)
	return sru
}

// SetMatchLevel sets the "match_level" field.
func (sru *ScreeningResultUpdate) SetMatchLevel(sl screeningresult.MatchLevel) *ScreeningResultUpdate {
	sru.mutation.SetMatchLevel(sl)
	return sru
}

// SetNillableMatchLevel sets the "match_level" field if the given value is not nil.
func (sru *ScreeningResultUpdate) SetNillableMatchLevel(sl *screeningresult.MatchLevel) *ScreeningResultUpdate {
	if sl != nil {
		sru.SetMatchLevel(*sl)
	}
	return sru
}

// ClearMatchLevel clears the value of the "match_level" field.
func (sru *ScreeningResultUpdate) ClearMatchLevel() *ScreeningResultUpdate {
	sru.mutation.ClearMatchLevel()
	return sru
}

// SetDimensionScores sets the "dimension_scores" field.
func (sru *ScreeningResultUpdate) SetDimensionScores(m map[string]interface{}) *ScreeningResultUpdate {
	sru.mutation.SetDimensionScores(m)
	return sru
}

// ClearDimensionScores clears the value of the "dimension_scores" field.
func (sru *ScreeningResultUpdate) ClearDimensionScores() *ScreeningResultUpdate {
	sru.mutation.ClearDimensionScores()
	return sru
}

// SetSkillDetail sets the "skill_detail" field.
func (sru *ScreeningResultUpdate) SetSkillDetail(m map[string]interface{}) *ScreeningResultUpdate {
	sru.mutation.SetSkillDetail(m)
	return sru
}

// ClearSkillDetail clears the value of the "skill_detail" field.
func (sru *ScreeningResultUpdate) ClearSkillDetail() *ScreeningResultUpdate {
	sru.mutation.ClearSkillDetail()
	return sru
}

// SetResponsibilityDetail sets the "responsibility_detail" field.
func (sru *ScreeningResultUpdate) SetResponsibilityDetail(m map[string]interface{}) *ScreeningResultUpdate {
	sru.mutation.SetResponsibilityDetail(m)
	return sru
}

// ClearResponsibilityDetail clears the value of the "responsibility_detail" field.
func (sru *ScreeningResultUpdate) ClearResponsibilityDetail() *ScreeningResultUpdate {
	sru.mutation.ClearResponsibilityDetail()
	return sru
}

// SetExperienceDetail sets the "experience_detail" field.
func (sru *ScreeningResultUpdate) SetExperienceDetail(m map[string]interface{}) *ScreeningResultUpdate {
	sru.mutation.SetExperienceDetail(m)
	return sru
}

// ClearExperienceDetail clears the value of the "experience_detail" field.
func (sru *ScreeningResultUpdate) ClearExperienceDetail() *ScreeningResultUpdate {
	sru.mutation.ClearExperienceDetail()
	return sru
}

// SetEducationDetail sets the "education_detail" field.
func (sru *ScreeningResultUpdate) SetEducationDetail(m map[string]interface{}) *ScreeningResultUpdate {
	sru.mutation.SetEducationDetail(m)
	return sru
}

// ClearEducationDetail clears the value of the "education_detail" field.
func (sru *ScreeningResultUpdate) ClearEducationDetail() *ScreeningResultUpdate {
	sru.mutation.ClearEducationDetail()
	return sru
}

// SetIndustryDetail sets the "industry_detail" field.
func (sru *ScreeningResultUpdate) SetIndustryDetail(m map[string]interface{}) *ScreeningResultUpdate {
	sru.mutation.SetIndustryDetail(m)
	return sru
}

// ClearIndustryDetail clears the value of the "industry_detail" field.
func (sru *ScreeningResultUpdate) ClearIndustryDetail() *ScreeningResultUpdate {
	sru.mutation.ClearIndustryDetail()
	return sru
}

// SetBasicDetail sets the "basic_detail" field.
func (sru *ScreeningResultUpdate) SetBasicDetail(m map[string]interface{}) *ScreeningResultUpdate {
	sru.mutation.SetBasicDetail(m)
	return sru
}

// ClearBasicDetail clears the value of the "basic_detail" field.
func (sru *ScreeningResultUpdate) ClearBasicDetail() *ScreeningResultUpdate {
	sru.mutation.ClearBasicDetail()
	return sru
}

// SetRecommendations sets the "recommendations" field.
func (sru *ScreeningResultUpdate) SetRecommendations(s []string) *ScreeningResultUpdate {
	sru.mutation.SetRecommendations(s)
	return sru
}

// AppendRecommendations appends s to the "recommendations" field.
func (sru *ScreeningResultUpdate) AppendRecommendations(s []string) *ScreeningResultUpdate {
	sru.mutation.AppendRecommendations(s)
	return sru
}

// ClearRecommendations clears the value of the "recommendations" field.
func (sru *ScreeningResultUpdate) ClearRecommendations() *ScreeningResultUpdate {
	sru.mutation.ClearRecommendations()
	return sru
}

// SetTraceID sets the "trace_id" field.
func (sru *ScreeningResultUpdate) SetTraceID(s string) *ScreeningResultUpdate {
	sru.mutation.SetTraceID(s)
	return sru
}

// SetNillableTraceID sets the "trace_id" field if the given value is not nil.
func (sru *ScreeningResultUpdate) SetNillableTraceID(s *string) *ScreeningResultUpdate {
	if s != nil {
		sru.SetTraceID(*s)
	}
	return sru
}

// ClearTraceID clears the value of the "trace_id" field.
func (sru *ScreeningResultUpdate) ClearTraceID() *ScreeningResultUpdate {
	sru.mutation.ClearTraceID()
	return sru
}

// SetRuntimeMetadata sets the "runtime_metadata" field.
func (sru *ScreeningResultUpdate) SetRuntimeMetadata(m map[string]interface{}) *ScreeningResultUpdate {
	sru.mutation.SetRuntimeMetadata(m)
	return sru
}

// ClearRuntimeMetadata clears the value of the "runtime_metadata" field.
func (sru *ScreeningResultUpdate) ClearRuntimeMetadata() *ScreeningResultUpdate {
	sru.mutation.ClearRuntimeMetadata()
	return sru
}

// SetSubAgentVersions sets the "sub_agent_versions" field.
func (sru *ScreeningResultUpdate) SetSubAgentVersions(m map[string]interface{}) *ScreeningResultUpdate {
	sru.mutation.SetSubAgentVersions(m)
	return sru
}

// ClearSubAgentVersions clears the value of the "sub_agent_versions" field.
func (sru *ScreeningResultUpdate) ClearSubAgentVersions() *ScreeningResultUpdate {
	sru.mutation.ClearSubAgentVersions()
	return sru
}

// SetMatchedAt sets the "matched_at" field.
func (sru *ScreeningResultUpdate) SetMatchedAt(t time.Time) *ScreeningResultUpdate {
	sru.mutation.SetMatchedAt(t)
	return sru
}

// SetNillableMatchedAt sets the "matched_at" field if the given value is not nil.
func (sru *ScreeningResultUpdate) SetNillableMatchedAt(t *time.Time) *ScreeningResultUpdate {
	if t != nil {
		sru.SetMatchedAt(*t)
	}
	return sru
}

// SetUpdatedAt sets the "updated_at" field.
func (sru *ScreeningResultUpdate) SetUpdatedAt(t time.Time) *ScreeningResultUpdate {
	sru.mutation.SetUpdatedAt(t)
	return sru
}

// SetTask sets the "task" edge to the ScreeningTask entity.
func (sru *ScreeningResultUpdate) SetTask(s *ScreeningTask) *ScreeningResultUpdate {
	return sru.SetTaskID(s.ID)
}

// SetJobPosition sets the "job_position" edge to the JobPosition entity.
func (sru *ScreeningResultUpdate) SetJobPosition(j *JobPosition) *ScreeningResultUpdate {
	return sru.SetJobPositionID(j.ID)
}

// SetResume sets the "resume" edge to the Resume entity.
func (sru *ScreeningResultUpdate) SetResume(r *Resume) *ScreeningResultUpdate {
	return sru.SetResumeID(r.ID)
}

// Mutation returns the ScreeningResultMutation object of the builder.
func (sru *ScreeningResultUpdate) Mutation() *ScreeningResultMutation {
	return sru.mutation
}

// ClearTask clears the "task" edge to the ScreeningTask entity.
func (sru *ScreeningResultUpdate) ClearTask() *ScreeningResultUpdate {
	sru.mutation.ClearTask()
	return sru
}

// ClearJobPosition clears the "job_position" edge to the JobPosition entity.
func (sru *ScreeningResultUpdate) ClearJobPosition() *ScreeningResultUpdate {
	sru.mutation.ClearJobPosition()
	return sru
}

// ClearResume clears the "resume" edge to the Resume entity.
func (sru *ScreeningResultUpdate) ClearResume() *ScreeningResultUpdate {
	sru.mutation.ClearResume()
	return sru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *ScreeningResultUpdate) Save(ctx context.Context) (int, error) {
	if err := sru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *ScreeningResultUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *ScreeningResultUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *ScreeningResultUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sru *ScreeningResultUpdate) defaults() error {
	if _, ok := sru.mutation.UpdatedAt(); !ok {
		if screeningresult.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningresult.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := screeningresult.UpdateDefaultUpdatedAt()
		sru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sru *ScreeningResultUpdate) check() error {
	if v, ok := sru.mutation.MatchLevel(); ok {
		if err := screeningresult.MatchLevelValidator(v); err != nil {
			return &ValidationError{Name: "match_level", err: fmt.Errorf(`db: validator failed for field "ScreeningResult.match_level": %w`, err)}
		}
	}
	if v, ok := sru.mutation.TraceID(); ok {
		if err := screeningresult.TraceIDValidator(v); err != nil {
			return &ValidationError{Name: "trace_id", err: fmt.Errorf(`db: validator failed for field "ScreeningResult.trace_id": %w`, err)}
		}
	}
	if sru.mutation.TaskCleared() && len(sru.mutation.TaskIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ScreeningResult.task"`)
	}
	if sru.mutation.JobPositionCleared() && len(sru.mutation.JobPositionIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ScreeningResult.job_position"`)
	}
	if sru.mutation.ResumeCleared() && len(sru.mutation.ResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ScreeningResult.resume"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sru *ScreeningResultUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScreeningResultUpdate {
	sru.modifiers = append(sru.modifiers, modifiers...)
	return sru
}

func (sru *ScreeningResultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(screeningresult.Table, screeningresult.Columns, sqlgraph.NewFieldSpec(screeningresult.FieldID, field.TypeUUID))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.DeletedAt(); ok {
		_spec.SetField(screeningresult.FieldDeletedAt, field.TypeTime, value)
	}
	if sru.mutation.DeletedAtCleared() {
		_spec.ClearField(screeningresult.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sru.mutation.OverallScore(); ok {
		_spec.SetField(screeningresult.FieldOverallScore, field.TypeFloat64, value)
	}
	if value, ok := sru.mutation.AddedOverallScore(); ok {
		_spec.AddField(screeningresult.FieldOverallScore, field.TypeFloat64, value)
	}
	if value, ok := sru.mutation.MatchLevel(); ok {
		_spec.SetField(screeningresult.FieldMatchLevel, field.TypeEnum, value)
	}
	if sru.mutation.MatchLevelCleared() {
		_spec.ClearField(screeningresult.FieldMatchLevel, field.TypeEnum)
	}
	if value, ok := sru.mutation.DimensionScores(); ok {
		_spec.SetField(screeningresult.FieldDimensionScores, field.TypeJSON, value)
	}
	if sru.mutation.DimensionScoresCleared() {
		_spec.ClearField(screeningresult.FieldDimensionScores, field.TypeJSON)
	}
	if value, ok := sru.mutation.SkillDetail(); ok {
		_spec.SetField(screeningresult.FieldSkillDetail, field.TypeJSON, value)
	}
	if sru.mutation.SkillDetailCleared() {
		_spec.ClearField(screeningresult.FieldSkillDetail, field.TypeJSON)
	}
	if value, ok := sru.mutation.ResponsibilityDetail(); ok {
		_spec.SetField(screeningresult.FieldResponsibilityDetail, field.TypeJSON, value)
	}
	if sru.mutation.ResponsibilityDetailCleared() {
		_spec.ClearField(screeningresult.FieldResponsibilityDetail, field.TypeJSON)
	}
	if value, ok := sru.mutation.ExperienceDetail(); ok {
		_spec.SetField(screeningresult.FieldExperienceDetail, field.TypeJSON, value)
	}
	if sru.mutation.ExperienceDetailCleared() {
		_spec.ClearField(screeningresult.FieldExperienceDetail, field.TypeJSON)
	}
	if value, ok := sru.mutation.EducationDetail(); ok {
		_spec.SetField(screeningresult.FieldEducationDetail, field.TypeJSON, value)
	}
	if sru.mutation.EducationDetailCleared() {
		_spec.ClearField(screeningresult.FieldEducationDetail, field.TypeJSON)
	}
	if value, ok := sru.mutation.IndustryDetail(); ok {
		_spec.SetField(screeningresult.FieldIndustryDetail, field.TypeJSON, value)
	}
	if sru.mutation.IndustryDetailCleared() {
		_spec.ClearField(screeningresult.FieldIndustryDetail, field.TypeJSON)
	}
	if value, ok := sru.mutation.BasicDetail(); ok {
		_spec.SetField(screeningresult.FieldBasicDetail, field.TypeJSON, value)
	}
	if sru.mutation.BasicDetailCleared() {
		_spec.ClearField(screeningresult.FieldBasicDetail, field.TypeJSON)
	}
	if value, ok := sru.mutation.Recommendations(); ok {
		_spec.SetField(screeningresult.FieldRecommendations, field.TypeJSON, value)
	}
	if value, ok := sru.mutation.AppendedRecommendations(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, screeningresult.FieldRecommendations, value)
		})
	}
	if sru.mutation.RecommendationsCleared() {
		_spec.ClearField(screeningresult.FieldRecommendations, field.TypeJSON)
	}
	if value, ok := sru.mutation.TraceID(); ok {
		_spec.SetField(screeningresult.FieldTraceID, field.TypeString, value)
	}
	if sru.mutation.TraceIDCleared() {
		_spec.ClearField(screeningresult.FieldTraceID, field.TypeString)
	}
	if value, ok := sru.mutation.RuntimeMetadata(); ok {
		_spec.SetField(screeningresult.FieldRuntimeMetadata, field.TypeJSON, value)
	}
	if sru.mutation.RuntimeMetadataCleared() {
		_spec.ClearField(screeningresult.FieldRuntimeMetadata, field.TypeJSON)
	}
	if value, ok := sru.mutation.SubAgentVersions(); ok {
		_spec.SetField(screeningresult.FieldSubAgentVersions, field.TypeJSON, value)
	}
	if sru.mutation.SubAgentVersionsCleared() {
		_spec.ClearField(screeningresult.FieldSubAgentVersions, field.TypeJSON)
	}
	if value, ok := sru.mutation.MatchedAt(); ok {
		_spec.SetField(screeningresult.FieldMatchedAt, field.TypeTime, value)
	}
	if value, ok := sru.mutation.UpdatedAt(); ok {
		_spec.SetField(screeningresult.FieldUpdatedAt, field.TypeTime, value)
	}
	if sru.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningresult.TaskTable,
			Columns: []string{screeningresult.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningresult.TaskTable,
			Columns: []string{screeningresult.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.JobPositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningresult.JobPositionTable,
			Columns: []string{screeningresult.JobPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.JobPositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningresult.JobPositionTable,
			Columns: []string{screeningresult.JobPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningresult.ResumeTable,
			Columns: []string{screeningresult.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningresult.ResumeTable,
			Columns: []string{screeningresult.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{screeningresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// ScreeningResultUpdateOne is the builder for updating a single ScreeningResult entity.
type ScreeningResultUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ScreeningResultMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (sruo *ScreeningResultUpdateOne) SetDeletedAt(t time.Time) *ScreeningResultUpdateOne {
	sruo.mutation.SetDeletedAt(t)
	return sruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sruo *ScreeningResultUpdateOne) SetNillableDeletedAt(t *time.Time) *ScreeningResultUpdateOne {
	if t != nil {
		sruo.SetDeletedAt(*t)
	}
	return sruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sruo *ScreeningResultUpdateOne) ClearDeletedAt() *ScreeningResultUpdateOne {
	sruo.mutation.ClearDeletedAt()
	return sruo
}

// SetTaskID sets the "task_id" field.
func (sruo *ScreeningResultUpdateOne) SetTaskID(u uuid.UUID) *ScreeningResultUpdateOne {
	sruo.mutation.SetTaskID(u)
	return sruo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (sruo *ScreeningResultUpdateOne) SetNillableTaskID(u *uuid.UUID) *ScreeningResultUpdateOne {
	if u != nil {
		sruo.SetTaskID(*u)
	}
	return sruo
}

// SetJobPositionID sets the "job_position_id" field.
func (sruo *ScreeningResultUpdateOne) SetJobPositionID(u uuid.UUID) *ScreeningResultUpdateOne {
	sruo.mutation.SetJobPositionID(u)
	return sruo
}

// SetNillableJobPositionID sets the "job_position_id" field if the given value is not nil.
func (sruo *ScreeningResultUpdateOne) SetNillableJobPositionID(u *uuid.UUID) *ScreeningResultUpdateOne {
	if u != nil {
		sruo.SetJobPositionID(*u)
	}
	return sruo
}

// SetResumeID sets the "resume_id" field.
func (sruo *ScreeningResultUpdateOne) SetResumeID(u uuid.UUID) *ScreeningResultUpdateOne {
	sruo.mutation.SetResumeID(u)
	return sruo
}

// SetNillableResumeID sets the "resume_id" field if the given value is not nil.
func (sruo *ScreeningResultUpdateOne) SetNillableResumeID(u *uuid.UUID) *ScreeningResultUpdateOne {
	if u != nil {
		sruo.SetResumeID(*u)
	}
	return sruo
}

// SetOverallScore sets the "overall_score" field.
func (sruo *ScreeningResultUpdateOne) SetOverallScore(f float64) *ScreeningResultUpdateOne {
	sruo.mutation.ResetOverallScore()
	sruo.mutation.SetOverallScore(f)
	return sruo
}

// SetNillableOverallScore sets the "overall_score" field if the given value is not nil.
func (sruo *ScreeningResultUpdateOne) SetNillableOverallScore(f *float64) *ScreeningResultUpdateOne {
	if f != nil {
		sruo.SetOverallScore(*f)
	}
	return sruo
}

// AddOverallScore adds f to the "overall_score" field.
func (sruo *ScreeningResultUpdateOne) AddOverallScore(f float64) *ScreeningResultUpdateOne {
	sruo.mutation.AddOverallScore(f)
	return sruo
}

// SetMatchLevel sets the "match_level" field.
func (sruo *ScreeningResultUpdateOne) SetMatchLevel(sl screeningresult.MatchLevel) *ScreeningResultUpdateOne {
	sruo.mutation.SetMatchLevel(sl)
	return sruo
}

// SetNillableMatchLevel sets the "match_level" field if the given value is not nil.
func (sruo *ScreeningResultUpdateOne) SetNillableMatchLevel(sl *screeningresult.MatchLevel) *ScreeningResultUpdateOne {
	if sl != nil {
		sruo.SetMatchLevel(*sl)
	}
	return sruo
}

// ClearMatchLevel clears the value of the "match_level" field.
func (sruo *ScreeningResultUpdateOne) ClearMatchLevel() *ScreeningResultUpdateOne {
	sruo.mutation.ClearMatchLevel()
	return sruo
}

// SetDimensionScores sets the "dimension_scores" field.
func (sruo *ScreeningResultUpdateOne) SetDimensionScores(m map[string]interface{}) *ScreeningResultUpdateOne {
	sruo.mutation.SetDimensionScores(m)
	return sruo
}

// ClearDimensionScores clears the value of the "dimension_scores" field.
func (sruo *ScreeningResultUpdateOne) ClearDimensionScores() *ScreeningResultUpdateOne {
	sruo.mutation.ClearDimensionScores()
	return sruo
}

// SetSkillDetail sets the "skill_detail" field.
func (sruo *ScreeningResultUpdateOne) SetSkillDetail(m map[string]interface{}) *ScreeningResultUpdateOne {
	sruo.mutation.SetSkillDetail(m)
	return sruo
}

// ClearSkillDetail clears the value of the "skill_detail" field.
func (sruo *ScreeningResultUpdateOne) ClearSkillDetail() *ScreeningResultUpdateOne {
	sruo.mutation.ClearSkillDetail()
	return sruo
}

// SetResponsibilityDetail sets the "responsibility_detail" field.
func (sruo *ScreeningResultUpdateOne) SetResponsibilityDetail(m map[string]interface{}) *ScreeningResultUpdateOne {
	sruo.mutation.SetResponsibilityDetail(m)
	return sruo
}

// ClearResponsibilityDetail clears the value of the "responsibility_detail" field.
func (sruo *ScreeningResultUpdateOne) ClearResponsibilityDetail() *ScreeningResultUpdateOne {
	sruo.mutation.ClearResponsibilityDetail()
	return sruo
}

// SetExperienceDetail sets the "experience_detail" field.
func (sruo *ScreeningResultUpdateOne) SetExperienceDetail(m map[string]interface{}) *ScreeningResultUpdateOne {
	sruo.mutation.SetExperienceDetail(m)
	return sruo
}

// ClearExperienceDetail clears the value of the "experience_detail" field.
func (sruo *ScreeningResultUpdateOne) ClearExperienceDetail() *ScreeningResultUpdateOne {
	sruo.mutation.ClearExperienceDetail()
	return sruo
}

// SetEducationDetail sets the "education_detail" field.
func (sruo *ScreeningResultUpdateOne) SetEducationDetail(m map[string]interface{}) *ScreeningResultUpdateOne {
	sruo.mutation.SetEducationDetail(m)
	return sruo
}

// ClearEducationDetail clears the value of the "education_detail" field.
func (sruo *ScreeningResultUpdateOne) ClearEducationDetail() *ScreeningResultUpdateOne {
	sruo.mutation.ClearEducationDetail()
	return sruo
}

// SetIndustryDetail sets the "industry_detail" field.
func (sruo *ScreeningResultUpdateOne) SetIndustryDetail(m map[string]interface{}) *ScreeningResultUpdateOne {
	sruo.mutation.SetIndustryDetail(m)
	return sruo
}

// ClearIndustryDetail clears the value of the "industry_detail" field.
func (sruo *ScreeningResultUpdateOne) ClearIndustryDetail() *ScreeningResultUpdateOne {
	sruo.mutation.ClearIndustryDetail()
	return sruo
}

// SetBasicDetail sets the "basic_detail" field.
func (sruo *ScreeningResultUpdateOne) SetBasicDetail(m map[string]interface{}) *ScreeningResultUpdateOne {
	sruo.mutation.SetBasicDetail(m)
	return sruo
}

// ClearBasicDetail clears the value of the "basic_detail" field.
func (sruo *ScreeningResultUpdateOne) ClearBasicDetail() *ScreeningResultUpdateOne {
	sruo.mutation.ClearBasicDetail()
	return sruo
}

// SetRecommendations sets the "recommendations" field.
func (sruo *ScreeningResultUpdateOne) SetRecommendations(s []string) *ScreeningResultUpdateOne {
	sruo.mutation.SetRecommendations(s)
	return sruo
}

// AppendRecommendations appends s to the "recommendations" field.
func (sruo *ScreeningResultUpdateOne) AppendRecommendations(s []string) *ScreeningResultUpdateOne {
	sruo.mutation.AppendRecommendations(s)
	return sruo
}

// ClearRecommendations clears the value of the "recommendations" field.
func (sruo *ScreeningResultUpdateOne) ClearRecommendations() *ScreeningResultUpdateOne {
	sruo.mutation.ClearRecommendations()
	return sruo
}

// SetTraceID sets the "trace_id" field.
func (sruo *ScreeningResultUpdateOne) SetTraceID(s string) *ScreeningResultUpdateOne {
	sruo.mutation.SetTraceID(s)
	return sruo
}

// SetNillableTraceID sets the "trace_id" field if the given value is not nil.
func (sruo *ScreeningResultUpdateOne) SetNillableTraceID(s *string) *ScreeningResultUpdateOne {
	if s != nil {
		sruo.SetTraceID(*s)
	}
	return sruo
}

// ClearTraceID clears the value of the "trace_id" field.
func (sruo *ScreeningResultUpdateOne) ClearTraceID() *ScreeningResultUpdateOne {
	sruo.mutation.ClearTraceID()
	return sruo
}

// SetRuntimeMetadata sets the "runtime_metadata" field.
func (sruo *ScreeningResultUpdateOne) SetRuntimeMetadata(m map[string]interface{}) *ScreeningResultUpdateOne {
	sruo.mutation.SetRuntimeMetadata(m)
	return sruo
}

// ClearRuntimeMetadata clears the value of the "runtime_metadata" field.
func (sruo *ScreeningResultUpdateOne) ClearRuntimeMetadata() *ScreeningResultUpdateOne {
	sruo.mutation.ClearRuntimeMetadata()
	return sruo
}

// SetSubAgentVersions sets the "sub_agent_versions" field.
func (sruo *ScreeningResultUpdateOne) SetSubAgentVersions(m map[string]interface{}) *ScreeningResultUpdateOne {
	sruo.mutation.SetSubAgentVersions(m)
	return sruo
}

// ClearSubAgentVersions clears the value of the "sub_agent_versions" field.
func (sruo *ScreeningResultUpdateOne) ClearSubAgentVersions() *ScreeningResultUpdateOne {
	sruo.mutation.ClearSubAgentVersions()
	return sruo
}

// SetMatchedAt sets the "matched_at" field.
func (sruo *ScreeningResultUpdateOne) SetMatchedAt(t time.Time) *ScreeningResultUpdateOne {
	sruo.mutation.SetMatchedAt(t)
	return sruo
}

// SetNillableMatchedAt sets the "matched_at" field if the given value is not nil.
func (sruo *ScreeningResultUpdateOne) SetNillableMatchedAt(t *time.Time) *ScreeningResultUpdateOne {
	if t != nil {
		sruo.SetMatchedAt(*t)
	}
	return sruo
}

// SetUpdatedAt sets the "updated_at" field.
func (sruo *ScreeningResultUpdateOne) SetUpdatedAt(t time.Time) *ScreeningResultUpdateOne {
	sruo.mutation.SetUpdatedAt(t)
	return sruo
}

// SetTask sets the "task" edge to the ScreeningTask entity.
func (sruo *ScreeningResultUpdateOne) SetTask(s *ScreeningTask) *ScreeningResultUpdateOne {
	return sruo.SetTaskID(s.ID)
}

// SetJobPosition sets the "job_position" edge to the JobPosition entity.
func (sruo *ScreeningResultUpdateOne) SetJobPosition(j *JobPosition) *ScreeningResultUpdateOne {
	return sruo.SetJobPositionID(j.ID)
}

// SetResume sets the "resume" edge to the Resume entity.
func (sruo *ScreeningResultUpdateOne) SetResume(r *Resume) *ScreeningResultUpdateOne {
	return sruo.SetResumeID(r.ID)
}

// Mutation returns the ScreeningResultMutation object of the builder.
func (sruo *ScreeningResultUpdateOne) Mutation() *ScreeningResultMutation {
	return sruo.mutation
}

// ClearTask clears the "task" edge to the ScreeningTask entity.
func (sruo *ScreeningResultUpdateOne) ClearTask() *ScreeningResultUpdateOne {
	sruo.mutation.ClearTask()
	return sruo
}

// ClearJobPosition clears the "job_position" edge to the JobPosition entity.
func (sruo *ScreeningResultUpdateOne) ClearJobPosition() *ScreeningResultUpdateOne {
	sruo.mutation.ClearJobPosition()
	return sruo
}

// ClearResume clears the "resume" edge to the Resume entity.
func (sruo *ScreeningResultUpdateOne) ClearResume() *ScreeningResultUpdateOne {
	sruo.mutation.ClearResume()
	return sruo
}

// Where appends a list predicates to the ScreeningResultUpdate builder.
func (sruo *ScreeningResultUpdateOne) Where(ps ...predicate.ScreeningResult) *ScreeningResultUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *ScreeningResultUpdateOne) Select(field string, fields ...string) *ScreeningResultUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated ScreeningResult entity.
func (sruo *ScreeningResultUpdateOne) Save(ctx context.Context) (*ScreeningResult, error) {
	if err := sruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *ScreeningResultUpdateOne) SaveX(ctx context.Context) *ScreeningResult {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *ScreeningResultUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *ScreeningResultUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sruo *ScreeningResultUpdateOne) defaults() error {
	if _, ok := sruo.mutation.UpdatedAt(); !ok {
		if screeningresult.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningresult.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := screeningresult.UpdateDefaultUpdatedAt()
		sruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sruo *ScreeningResultUpdateOne) check() error {
	if v, ok := sruo.mutation.MatchLevel(); ok {
		if err := screeningresult.MatchLevelValidator(v); err != nil {
			return &ValidationError{Name: "match_level", err: fmt.Errorf(`db: validator failed for field "ScreeningResult.match_level": %w`, err)}
		}
	}
	if v, ok := sruo.mutation.TraceID(); ok {
		if err := screeningresult.TraceIDValidator(v); err != nil {
			return &ValidationError{Name: "trace_id", err: fmt.Errorf(`db: validator failed for field "ScreeningResult.trace_id": %w`, err)}
		}
	}
	if sruo.mutation.TaskCleared() && len(sruo.mutation.TaskIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ScreeningResult.task"`)
	}
	if sruo.mutation.JobPositionCleared() && len(sruo.mutation.JobPositionIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ScreeningResult.job_position"`)
	}
	if sruo.mutation.ResumeCleared() && len(sruo.mutation.ResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ScreeningResult.resume"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sruo *ScreeningResultUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScreeningResultUpdateOne {
	sruo.modifiers = append(sruo.modifiers, modifiers...)
	return sruo
}

func (sruo *ScreeningResultUpdateOne) sqlSave(ctx context.Context) (_node *ScreeningResult, err error) {
	if err := sruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(screeningresult.Table, screeningresult.Columns, sqlgraph.NewFieldSpec(screeningresult.FieldID, field.TypeUUID))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ScreeningResult.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, screeningresult.FieldID)
		for _, f := range fields {
			if !screeningresult.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != screeningresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.DeletedAt(); ok {
		_spec.SetField(screeningresult.FieldDeletedAt, field.TypeTime, value)
	}
	if sruo.mutation.DeletedAtCleared() {
		_spec.ClearField(screeningresult.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sruo.mutation.OverallScore(); ok {
		_spec.SetField(screeningresult.FieldOverallScore, field.TypeFloat64, value)
	}
	if value, ok := sruo.mutation.AddedOverallScore(); ok {
		_spec.AddField(screeningresult.FieldOverallScore, field.TypeFloat64, value)
	}
	if value, ok := sruo.mutation.MatchLevel(); ok {
		_spec.SetField(screeningresult.FieldMatchLevel, field.TypeEnum, value)
	}
	if sruo.mutation.MatchLevelCleared() {
		_spec.ClearField(screeningresult.FieldMatchLevel, field.TypeEnum)
	}
	if value, ok := sruo.mutation.DimensionScores(); ok {
		_spec.SetField(screeningresult.FieldDimensionScores, field.TypeJSON, value)
	}
	if sruo.mutation.DimensionScoresCleared() {
		_spec.ClearField(screeningresult.FieldDimensionScores, field.TypeJSON)
	}
	if value, ok := sruo.mutation.SkillDetail(); ok {
		_spec.SetField(screeningresult.FieldSkillDetail, field.TypeJSON, value)
	}
	if sruo.mutation.SkillDetailCleared() {
		_spec.ClearField(screeningresult.FieldSkillDetail, field.TypeJSON)
	}
	if value, ok := sruo.mutation.ResponsibilityDetail(); ok {
		_spec.SetField(screeningresult.FieldResponsibilityDetail, field.TypeJSON, value)
	}
	if sruo.mutation.ResponsibilityDetailCleared() {
		_spec.ClearField(screeningresult.FieldResponsibilityDetail, field.TypeJSON)
	}
	if value, ok := sruo.mutation.ExperienceDetail(); ok {
		_spec.SetField(screeningresult.FieldExperienceDetail, field.TypeJSON, value)
	}
	if sruo.mutation.ExperienceDetailCleared() {
		_spec.ClearField(screeningresult.FieldExperienceDetail, field.TypeJSON)
	}
	if value, ok := sruo.mutation.EducationDetail(); ok {
		_spec.SetField(screeningresult.FieldEducationDetail, field.TypeJSON, value)
	}
	if sruo.mutation.EducationDetailCleared() {
		_spec.ClearField(screeningresult.FieldEducationDetail, field.TypeJSON)
	}
	if value, ok := sruo.mutation.IndustryDetail(); ok {
		_spec.SetField(screeningresult.FieldIndustryDetail, field.TypeJSON, value)
	}
	if sruo.mutation.IndustryDetailCleared() {
		_spec.ClearField(screeningresult.FieldIndustryDetail, field.TypeJSON)
	}
	if value, ok := sruo.mutation.BasicDetail(); ok {
		_spec.SetField(screeningresult.FieldBasicDetail, field.TypeJSON, value)
	}
	if sruo.mutation.BasicDetailCleared() {
		_spec.ClearField(screeningresult.FieldBasicDetail, field.TypeJSON)
	}
	if value, ok := sruo.mutation.Recommendations(); ok {
		_spec.SetField(screeningresult.FieldRecommendations, field.TypeJSON, value)
	}
	if value, ok := sruo.mutation.AppendedRecommendations(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, screeningresult.FieldRecommendations, value)
		})
	}
	if sruo.mutation.RecommendationsCleared() {
		_spec.ClearField(screeningresult.FieldRecommendations, field.TypeJSON)
	}
	if value, ok := sruo.mutation.TraceID(); ok {
		_spec.SetField(screeningresult.FieldTraceID, field.TypeString, value)
	}
	if sruo.mutation.TraceIDCleared() {
		_spec.ClearField(screeningresult.FieldTraceID, field.TypeString)
	}
	if value, ok := sruo.mutation.RuntimeMetadata(); ok {
		_spec.SetField(screeningresult.FieldRuntimeMetadata, field.TypeJSON, value)
	}
	if sruo.mutation.RuntimeMetadataCleared() {
		_spec.ClearField(screeningresult.FieldRuntimeMetadata, field.TypeJSON)
	}
	if value, ok := sruo.mutation.SubAgentVersions(); ok {
		_spec.SetField(screeningresult.FieldSubAgentVersions, field.TypeJSON, value)
	}
	if sruo.mutation.SubAgentVersionsCleared() {
		_spec.ClearField(screeningresult.FieldSubAgentVersions, field.TypeJSON)
	}
	if value, ok := sruo.mutation.MatchedAt(); ok {
		_spec.SetField(screeningresult.FieldMatchedAt, field.TypeTime, value)
	}
	if value, ok := sruo.mutation.UpdatedAt(); ok {
		_spec.SetField(screeningresult.FieldUpdatedAt, field.TypeTime, value)
	}
	if sruo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningresult.TaskTable,
			Columns: []string{screeningresult.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningresult.TaskTable,
			Columns: []string{screeningresult.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.JobPositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningresult.JobPositionTable,
			Columns: []string{screeningresult.JobPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.JobPositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningresult.JobPositionTable,
			Columns: []string{screeningresult.JobPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningresult.ResumeTable,
			Columns: []string{screeningresult.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningresult.ResumeTable,
			Columns: []string{screeningresult.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sruo.modifiers...)
	_node = &ScreeningResult{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{screeningresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
