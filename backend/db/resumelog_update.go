// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumelog"
	"github.com/google/uuid"
)

// ResumeLogUpdate is the builder for updating ResumeLog entities.
type ResumeLogUpdate struct {
	config
	hooks     []Hook
	mutation  *ResumeLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ResumeLogUpdate builder.
func (rlu *ResumeLogUpdate) Where(ps ...predicate.ResumeLog) *ResumeLogUpdate {
	rlu.mutation.Where(ps...)
	return rlu
}

// SetDeletedAt sets the "deleted_at" field.
func (rlu *ResumeLogUpdate) SetDeletedAt(t time.Time) *ResumeLogUpdate {
	rlu.mutation.SetDeletedAt(t)
	return rlu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rlu *ResumeLogUpdate) SetNillableDeletedAt(t *time.Time) *ResumeLogUpdate {
	if t != nil {
		rlu.SetDeletedAt(*t)
	}
	return rlu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rlu *ResumeLogUpdate) ClearDeletedAt() *ResumeLogUpdate {
	rlu.mutation.ClearDeletedAt()
	return rlu
}

// SetResumeID sets the "resume_id" field.
func (rlu *ResumeLogUpdate) SetResumeID(u uuid.UUID) *ResumeLogUpdate {
	rlu.mutation.SetResumeID(u)
	return rlu
}

// SetNillableResumeID sets the "resume_id" field if the given value is not nil.
func (rlu *ResumeLogUpdate) SetNillableResumeID(u *uuid.UUID) *ResumeLogUpdate {
	if u != nil {
		rlu.SetResumeID(*u)
	}
	return rlu
}

// SetAction sets the "action" field.
func (rlu *ResumeLogUpdate) SetAction(s string) *ResumeLogUpdate {
	rlu.mutation.SetAction(s)
	return rlu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (rlu *ResumeLogUpdate) SetNillableAction(s *string) *ResumeLogUpdate {
	if s != nil {
		rlu.SetAction(*s)
	}
	return rlu
}

// SetMessage sets the "message" field.
func (rlu *ResumeLogUpdate) SetMessage(s string) *ResumeLogUpdate {
	rlu.mutation.SetMessage(s)
	return rlu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (rlu *ResumeLogUpdate) SetNillableMessage(s *string) *ResumeLogUpdate {
	if s != nil {
		rlu.SetMessage(*s)
	}
	return rlu
}

// ClearMessage clears the value of the "message" field.
func (rlu *ResumeLogUpdate) ClearMessage() *ResumeLogUpdate {
	rlu.mutation.ClearMessage()
	return rlu
}

// SetCreatedAt sets the "created_at" field.
func (rlu *ResumeLogUpdate) SetCreatedAt(t time.Time) *ResumeLogUpdate {
	rlu.mutation.SetCreatedAt(t)
	return rlu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rlu *ResumeLogUpdate) SetNillableCreatedAt(t *time.Time) *ResumeLogUpdate {
	if t != nil {
		rlu.SetCreatedAt(*t)
	}
	return rlu
}

// SetUpdatedAt sets the "updated_at" field.
func (rlu *ResumeLogUpdate) SetUpdatedAt(t time.Time) *ResumeLogUpdate {
	rlu.mutation.SetUpdatedAt(t)
	return rlu
}

// SetResume sets the "resume" edge to the Resume entity.
func (rlu *ResumeLogUpdate) SetResume(r *Resume) *ResumeLogUpdate {
	return rlu.SetResumeID(r.ID)
}

// Mutation returns the ResumeLogMutation object of the builder.
func (rlu *ResumeLogUpdate) Mutation() *ResumeLogMutation {
	return rlu.mutation
}

// ClearResume clears the "resume" edge to the Resume entity.
func (rlu *ResumeLogUpdate) ClearResume() *ResumeLogUpdate {
	rlu.mutation.ClearResume()
	return rlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rlu *ResumeLogUpdate) Save(ctx context.Context) (int, error) {
	if err := rlu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, rlu.sqlSave, rlu.mutation, rlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rlu *ResumeLogUpdate) SaveX(ctx context.Context) int {
	affected, err := rlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rlu *ResumeLogUpdate) Exec(ctx context.Context) error {
	_, err := rlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlu *ResumeLogUpdate) ExecX(ctx context.Context) {
	if err := rlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rlu *ResumeLogUpdate) defaults() error {
	if _, ok := rlu.mutation.UpdatedAt(); !ok {
		if resumelog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumelog.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumelog.UpdateDefaultUpdatedAt()
		rlu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rlu *ResumeLogUpdate) check() error {
	if v, ok := rlu.mutation.Action(); ok {
		if err := resumelog.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`db: validator failed for field "ResumeLog.action": %w`, err)}
		}
	}
	if rlu.mutation.ResumeCleared() && len(rlu.mutation.ResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeLog.resume"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rlu *ResumeLogUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeLogUpdate {
	rlu.modifiers = append(rlu.modifiers, modifiers...)
	return rlu
}

func (rlu *ResumeLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumelog.Table, resumelog.Columns, sqlgraph.NewFieldSpec(resumelog.FieldID, field.TypeUUID))
	if ps := rlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rlu.mutation.DeletedAt(); ok {
		_spec.SetField(resumelog.FieldDeletedAt, field.TypeTime, value)
	}
	if rlu.mutation.DeletedAtCleared() {
		_spec.ClearField(resumelog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rlu.mutation.Action(); ok {
		_spec.SetField(resumelog.FieldAction, field.TypeString, value)
	}
	if value, ok := rlu.mutation.Message(); ok {
		_spec.SetField(resumelog.FieldMessage, field.TypeString, value)
	}
	if rlu.mutation.MessageCleared() {
		_spec.ClearField(resumelog.FieldMessage, field.TypeString)
	}
	if value, ok := rlu.mutation.CreatedAt(); ok {
		_spec.SetField(resumelog.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rlu.mutation.UpdatedAt(); ok {
		_spec.SetField(resumelog.FieldUpdatedAt, field.TypeTime, value)
	}
	if rlu.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumelog.ResumeTable,
			Columns: []string{resumelog.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rlu.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumelog.ResumeTable,
			Columns: []string{resumelog.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rlu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rlu.mutation.done = true
	return n, nil
}

// ResumeLogUpdateOne is the builder for updating a single ResumeLog entity.
type ResumeLogUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ResumeLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (rluo *ResumeLogUpdateOne) SetDeletedAt(t time.Time) *ResumeLogUpdateOne {
	rluo.mutation.SetDeletedAt(t)
	return rluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rluo *ResumeLogUpdateOne) SetNillableDeletedAt(t *time.Time) *ResumeLogUpdateOne {
	if t != nil {
		rluo.SetDeletedAt(*t)
	}
	return rluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rluo *ResumeLogUpdateOne) ClearDeletedAt() *ResumeLogUpdateOne {
	rluo.mutation.ClearDeletedAt()
	return rluo
}

// SetResumeID sets the "resume_id" field.
func (rluo *ResumeLogUpdateOne) SetResumeID(u uuid.UUID) *ResumeLogUpdateOne {
	rluo.mutation.SetResumeID(u)
	return rluo
}

// SetNillableResumeID sets the "resume_id" field if the given value is not nil.
func (rluo *ResumeLogUpdateOne) SetNillableResumeID(u *uuid.UUID) *ResumeLogUpdateOne {
	if u != nil {
		rluo.SetResumeID(*u)
	}
	return rluo
}

// SetAction sets the "action" field.
func (rluo *ResumeLogUpdateOne) SetAction(s string) *ResumeLogUpdateOne {
	rluo.mutation.SetAction(s)
	return rluo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (rluo *ResumeLogUpdateOne) SetNillableAction(s *string) *ResumeLogUpdateOne {
	if s != nil {
		rluo.SetAction(*s)
	}
	return rluo
}

// SetMessage sets the "message" field.
func (rluo *ResumeLogUpdateOne) SetMessage(s string) *ResumeLogUpdateOne {
	rluo.mutation.SetMessage(s)
	return rluo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (rluo *ResumeLogUpdateOne) SetNillableMessage(s *string) *ResumeLogUpdateOne {
	if s != nil {
		rluo.SetMessage(*s)
	}
	return rluo
}

// ClearMessage clears the value of the "message" field.
func (rluo *ResumeLogUpdateOne) ClearMessage() *ResumeLogUpdateOne {
	rluo.mutation.ClearMessage()
	return rluo
}

// SetCreatedAt sets the "created_at" field.
func (rluo *ResumeLogUpdateOne) SetCreatedAt(t time.Time) *ResumeLogUpdateOne {
	rluo.mutation.SetCreatedAt(t)
	return rluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rluo *ResumeLogUpdateOne) SetNillableCreatedAt(t *time.Time) *ResumeLogUpdateOne {
	if t != nil {
		rluo.SetCreatedAt(*t)
	}
	return rluo
}

// SetUpdatedAt sets the "updated_at" field.
func (rluo *ResumeLogUpdateOne) SetUpdatedAt(t time.Time) *ResumeLogUpdateOne {
	rluo.mutation.SetUpdatedAt(t)
	return rluo
}

// SetResume sets the "resume" edge to the Resume entity.
func (rluo *ResumeLogUpdateOne) SetResume(r *Resume) *ResumeLogUpdateOne {
	return rluo.SetResumeID(r.ID)
}

// Mutation returns the ResumeLogMutation object of the builder.
func (rluo *ResumeLogUpdateOne) Mutation() *ResumeLogMutation {
	return rluo.mutation
}

// ClearResume clears the "resume" edge to the Resume entity.
func (rluo *ResumeLogUpdateOne) ClearResume() *ResumeLogUpdateOne {
	rluo.mutation.ClearResume()
	return rluo
}

// Where appends a list predicates to the ResumeLogUpdate builder.
func (rluo *ResumeLogUpdateOne) Where(ps ...predicate.ResumeLog) *ResumeLogUpdateOne {
	rluo.mutation.Where(ps...)
	return rluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rluo *ResumeLogUpdateOne) Select(field string, fields ...string) *ResumeLogUpdateOne {
	rluo.fields = append([]string{field}, fields...)
	return rluo
}

// Save executes the query and returns the updated ResumeLog entity.
func (rluo *ResumeLogUpdateOne) Save(ctx context.Context) (*ResumeLog, error) {
	if err := rluo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rluo.sqlSave, rluo.mutation, rluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rluo *ResumeLogUpdateOne) SaveX(ctx context.Context) *ResumeLog {
	node, err := rluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rluo *ResumeLogUpdateOne) Exec(ctx context.Context) error {
	_, err := rluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rluo *ResumeLogUpdateOne) ExecX(ctx context.Context) {
	if err := rluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rluo *ResumeLogUpdateOne) defaults() error {
	if _, ok := rluo.mutation.UpdatedAt(); !ok {
		if resumelog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumelog.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumelog.UpdateDefaultUpdatedAt()
		rluo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rluo *ResumeLogUpdateOne) check() error {
	if v, ok := rluo.mutation.Action(); ok {
		if err := resumelog.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`db: validator failed for field "ResumeLog.action": %w`, err)}
		}
	}
	if rluo.mutation.ResumeCleared() && len(rluo.mutation.ResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeLog.resume"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rluo *ResumeLogUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeLogUpdateOne {
	rluo.modifiers = append(rluo.modifiers, modifiers...)
	return rluo
}

func (rluo *ResumeLogUpdateOne) sqlSave(ctx context.Context) (_node *ResumeLog, err error) {
	if err := rluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumelog.Table, resumelog.Columns, sqlgraph.NewFieldSpec(resumelog.FieldID, field.TypeUUID))
	id, ok := rluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ResumeLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resumelog.FieldID)
		for _, f := range fields {
			if !resumelog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != resumelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rluo.mutation.DeletedAt(); ok {
		_spec.SetField(resumelog.FieldDeletedAt, field.TypeTime, value)
	}
	if rluo.mutation.DeletedAtCleared() {
		_spec.ClearField(resumelog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rluo.mutation.Action(); ok {
		_spec.SetField(resumelog.FieldAction, field.TypeString, value)
	}
	if value, ok := rluo.mutation.Message(); ok {
		_spec.SetField(resumelog.FieldMessage, field.TypeString, value)
	}
	if rluo.mutation.MessageCleared() {
		_spec.ClearField(resumelog.FieldMessage, field.TypeString)
	}
	if value, ok := rluo.mutation.CreatedAt(); ok {
		_spec.SetField(resumelog.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rluo.mutation.UpdatedAt(); ok {
		_spec.SetField(resumelog.FieldUpdatedAt, field.TypeTime, value)
	}
	if rluo.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumelog.ResumeTable,
			Columns: []string{resumelog.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rluo.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumelog.ResumeTable,
			Columns: []string{resumelog.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rluo.modifiers...)
	_node = &ResumeLog{config: rluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rluo.mutation.done = true
	return _node, nil
}
