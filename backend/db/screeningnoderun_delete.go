// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/screeningnoderun"
)

// ScreeningNodeRunDelete is the builder for deleting a ScreeningNodeRun entity.
type ScreeningNodeRunDelete struct {
	config
	hooks    []Hook
	mutation *ScreeningNodeRunMutation
}

// Where appends a list predicates to the ScreeningNodeRunDelete builder.
func (snrd *ScreeningNodeRunDelete) Where(ps ...predicate.ScreeningNodeRun) *ScreeningNodeRunDelete {
	snrd.mutation.Where(ps...)
	return snrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (snrd *ScreeningNodeRunDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, snrd.sqlExec, snrd.mutation, snrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (snrd *ScreeningNodeRunDelete) ExecX(ctx context.Context) int {
	n, err := snrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (snrd *ScreeningNodeRunDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(screeningnoderun.Table, sqlgraph.NewFieldSpec(screeningnoderun.FieldID, field.TypeUUID))
	if ps := snrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, snrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	snrd.mutation.done = true
	return affected, err
}

// ScreeningNodeRunDeleteOne is the builder for deleting a single ScreeningNodeRun entity.
type ScreeningNodeRunDeleteOne struct {
	snrd *ScreeningNodeRunDelete
}

// Where appends a list predicates to the ScreeningNodeRunDelete builder.
func (snrdo *ScreeningNodeRunDeleteOne) Where(ps ...predicate.ScreeningNodeRun) *ScreeningNodeRunDeleteOne {
	snrdo.snrd.mutation.Where(ps...)
	return snrdo
}

// Exec executes the deletion query.
func (snrdo *ScreeningNodeRunDeleteOne) Exec(ctx context.Context) error {
	n, err := snrdo.snrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{screeningnoderun.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (snrdo *ScreeningNodeRunDeleteOne) ExecX(ctx context.Context) {
	if err := snrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
