// Code generated by ent, DO NOT EDIT.

package jobskill

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the jobskill type in the database.
	Label = "job_skill"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldJobID holds the string denoting the job_id field in the database.
	FieldJobID = "job_id"
	// FieldSkillID holds the string denoting the skill_id field in the database.
	FieldSkillID = "skill_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeJob holds the string denoting the job edge name in mutations.
	EdgeJob = "job"
	// EdgeSkill holds the string denoting the skill edge name in mutations.
	EdgeSkill = "skill"
	// Table holds the table name of the jobskill in the database.
	Table = "job_skill"
	// JobTable is the table that holds the job relation/edge.
	JobTable = "job_skill"
	// JobInverseTable is the table name for the JobPosition entity.
	// It exists in this package in order to avoid circular dependency with the "jobposition" package.
	JobInverseTable = "job_position"
	// JobColumn is the table column denoting the job relation/edge.
	JobColumn = "job_id"
	// SkillTable is the table that holds the skill relation/edge.
	SkillTable = "job_skill"
	// SkillInverseTable is the table name for the JobSkillMeta entity.
	// It exists in this package in order to avoid circular dependency with the "jobskillmeta" package.
	SkillInverseTable = "job_skillmeta"
	// SkillColumn is the table column denoting the skill relation/edge.
	SkillColumn = "skill_id"
)

// Columns holds all SQL columns for jobskill fields.
var Columns = []string{
	FieldID,
	FieldJobID,
	FieldSkillID,
	FieldType,
	FieldWeight,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// WeightValidator is a validator for the "weight" field. It is called by the builders before save.
	WeightValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeRequired Type = "required"
	TypeBonus    Type = "bonus"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeRequired, TypeBonus:
		return nil
	default:
		return fmt.Errorf("jobskill: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the JobSkill queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByJobID orders the results by the job_id field.
func ByJobID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobID, opts...).ToFunc()
}

// BySkillID orders the results by the skill_id field.
func BySkillID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSkillID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByJobField orders the results by job field.
func ByJobField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobStep(), sql.OrderByField(field, opts...))
	}
}

// BySkillField orders the results by skill field.
func BySkillField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSkillStep(), sql.OrderByField(field, opts...))
	}
}
func newJobStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
	)
}
func newSkillStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SkillInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SkillTable, SkillColumn),
	)
}
