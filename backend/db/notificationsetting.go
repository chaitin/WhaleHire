// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/notificationsetting"
	"github.com/google/uuid"
)

// NotificationSetting is the model entity for the NotificationSetting schema.
type NotificationSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 配置名称，用于区分同类型的不同配置
	Name string `json:"name,omitempty"`
	// 通知渠道
	Channel consts.NotificationChannel `json:"channel,omitempty"`
	// 是否启用
	Enabled bool `json:"enabled,omitempty"`
	// 钉钉通知配置
	DingtalkConfig map[string]interface{} `json:"dingtalk_config,omitempty"`
	// 最大重试次数
	MaxRetry int `json:"max_retry,omitempty"`
	// 超时时间(秒)
	Timeout int `json:"timeout,omitempty"`
	// 通知设置描述
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotificationSetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notificationsetting.FieldDingtalkConfig:
			values[i] = new([]byte)
		case notificationsetting.FieldEnabled:
			values[i] = new(sql.NullBool)
		case notificationsetting.FieldMaxRetry, notificationsetting.FieldTimeout:
			values[i] = new(sql.NullInt64)
		case notificationsetting.FieldName, notificationsetting.FieldChannel, notificationsetting.FieldDescription:
			values[i] = new(sql.NullString)
		case notificationsetting.FieldDeletedAt, notificationsetting.FieldCreatedAt, notificationsetting.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case notificationsetting.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotificationSetting fields.
func (ns *NotificationSetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notificationsetting.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ns.ID = *value
			}
		case notificationsetting.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ns.DeletedAt = value.Time
			}
		case notificationsetting.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ns.Name = value.String
			}
		case notificationsetting.FieldChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel", values[i])
			} else if value.Valid {
				ns.Channel = consts.NotificationChannel(value.String)
			}
		case notificationsetting.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				ns.Enabled = value.Bool
			}
		case notificationsetting.FieldDingtalkConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dingtalk_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ns.DingtalkConfig); err != nil {
					return fmt.Errorf("unmarshal field dingtalk_config: %w", err)
				}
			}
		case notificationsetting.FieldMaxRetry:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_retry", values[i])
			} else if value.Valid {
				ns.MaxRetry = int(value.Int64)
			}
		case notificationsetting.FieldTimeout:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				ns.Timeout = int(value.Int64)
			}
		case notificationsetting.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ns.Description = value.String
			}
		case notificationsetting.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ns.CreatedAt = value.Time
			}
		case notificationsetting.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ns.UpdatedAt = value.Time
			}
		default:
			ns.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NotificationSetting.
// This includes values selected through modifiers, order, etc.
func (ns *NotificationSetting) Value(name string) (ent.Value, error) {
	return ns.selectValues.Get(name)
}

// Update returns a builder for updating this NotificationSetting.
// Note that you need to call NotificationSetting.Unwrap() before calling this method if this NotificationSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (ns *NotificationSetting) Update() *NotificationSettingUpdateOne {
	return NewNotificationSettingClient(ns.config).UpdateOne(ns)
}

// Unwrap unwraps the NotificationSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ns *NotificationSetting) Unwrap() *NotificationSetting {
	_tx, ok := ns.config.driver.(*txDriver)
	if !ok {
		panic("db: NotificationSetting is not a transactional entity")
	}
	ns.config.driver = _tx.drv
	return ns
}

// String implements the fmt.Stringer.
func (ns *NotificationSetting) String() string {
	var builder strings.Builder
	builder.WriteString("NotificationSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ns.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(ns.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ns.Name)
	builder.WriteString(", ")
	builder.WriteString("channel=")
	builder.WriteString(fmt.Sprintf("%v", ns.Channel))
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", ns.Enabled))
	builder.WriteString(", ")
	builder.WriteString("dingtalk_config=")
	builder.WriteString(fmt.Sprintf("%v", ns.DingtalkConfig))
	builder.WriteString(", ")
	builder.WriteString("max_retry=")
	builder.WriteString(fmt.Sprintf("%v", ns.MaxRetry))
	builder.WriteString(", ")
	builder.WriteString("timeout=")
	builder.WriteString(fmt.Sprintf("%v", ns.Timeout))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ns.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ns.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ns.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NotificationSettings is a parsable slice of NotificationSetting.
type NotificationSettings []*NotificationSetting
