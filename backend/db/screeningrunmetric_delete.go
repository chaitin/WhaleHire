// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/screeningrunmetric"
)

// ScreeningRunMetricDelete is the builder for deleting a ScreeningRunMetric entity.
type ScreeningRunMetricDelete struct {
	config
	hooks    []Hook
	mutation *ScreeningRunMetricMutation
}

// Where appends a list predicates to the ScreeningRunMetricDelete builder.
func (srmd *ScreeningRunMetricDelete) Where(ps ...predicate.ScreeningRunMetric) *ScreeningRunMetricDelete {
	srmd.mutation.Where(ps...)
	return srmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (srmd *ScreeningRunMetricDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, srmd.sqlExec, srmd.mutation, srmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (srmd *ScreeningRunMetricDelete) ExecX(ctx context.Context) int {
	n, err := srmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (srmd *ScreeningRunMetricDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(screeningrunmetric.Table, sqlgraph.NewFieldSpec(screeningrunmetric.FieldID, field.TypeUUID))
	if ps := srmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, srmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	srmd.mutation.done = true
	return affected, err
}

// ScreeningRunMetricDeleteOne is the builder for deleting a single ScreeningRunMetric entity.
type ScreeningRunMetricDeleteOne struct {
	srmd *ScreeningRunMetricDelete
}

// Where appends a list predicates to the ScreeningRunMetricDelete builder.
func (srmdo *ScreeningRunMetricDeleteOne) Where(ps ...predicate.ScreeningRunMetric) *ScreeningRunMetricDeleteOne {
	srmdo.srmd.mutation.Where(ps...)
	return srmdo
}

// Exec executes the deletion query.
func (srmdo *ScreeningRunMetricDeleteOne) Exec(ctx context.Context) error {
	n, err := srmdo.srmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{screeningrunmetric.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (srmdo *ScreeningRunMetricDeleteOne) ExecX(ctx context.Context) {
	if err := srmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
