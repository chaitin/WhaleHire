// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/screeningrunmetric"
	"github.com/chaitin/WhaleHire/backend/db/screeningtask"
	"github.com/google/uuid"
)

// ScreeningRunMetricCreate is the builder for creating a ScreeningRunMetric entity.
type ScreeningRunMetricCreate struct {
	config
	mutation *ScreeningRunMetricMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (srmc *ScreeningRunMetricCreate) SetDeletedAt(t time.Time) *ScreeningRunMetricCreate {
	srmc.mutation.SetDeletedAt(t)
	return srmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (srmc *ScreeningRunMetricCreate) SetNillableDeletedAt(t *time.Time) *ScreeningRunMetricCreate {
	if t != nil {
		srmc.SetDeletedAt(*t)
	}
	return srmc
}

// SetTaskID sets the "task_id" field.
func (srmc *ScreeningRunMetricCreate) SetTaskID(u uuid.UUID) *ScreeningRunMetricCreate {
	srmc.mutation.SetTaskID(u)
	return srmc
}

// SetAvgScore sets the "avg_score" field.
func (srmc *ScreeningRunMetricCreate) SetAvgScore(f float64) *ScreeningRunMetricCreate {
	srmc.mutation.SetAvgScore(f)
	return srmc
}

// SetNillableAvgScore sets the "avg_score" field if the given value is not nil.
func (srmc *ScreeningRunMetricCreate) SetNillableAvgScore(f *float64) *ScreeningRunMetricCreate {
	if f != nil {
		srmc.SetAvgScore(*f)
	}
	return srmc
}

// SetHistogram sets the "histogram" field.
func (srmc *ScreeningRunMetricCreate) SetHistogram(m map[string]interface{}) *ScreeningRunMetricCreate {
	srmc.mutation.SetHistogram(m)
	return srmc
}

// SetTokensInput sets the "tokens_input" field.
func (srmc *ScreeningRunMetricCreate) SetTokensInput(i int64) *ScreeningRunMetricCreate {
	srmc.mutation.SetTokensInput(i)
	return srmc
}

// SetNillableTokensInput sets the "tokens_input" field if the given value is not nil.
func (srmc *ScreeningRunMetricCreate) SetNillableTokensInput(i *int64) *ScreeningRunMetricCreate {
	if i != nil {
		srmc.SetTokensInput(*i)
	}
	return srmc
}

// SetTokensOutput sets the "tokens_output" field.
func (srmc *ScreeningRunMetricCreate) SetTokensOutput(i int64) *ScreeningRunMetricCreate {
	srmc.mutation.SetTokensOutput(i)
	return srmc
}

// SetNillableTokensOutput sets the "tokens_output" field if the given value is not nil.
func (srmc *ScreeningRunMetricCreate) SetNillableTokensOutput(i *int64) *ScreeningRunMetricCreate {
	if i != nil {
		srmc.SetTokensOutput(*i)
	}
	return srmc
}

// SetTotalCost sets the "total_cost" field.
func (srmc *ScreeningRunMetricCreate) SetTotalCost(f float64) *ScreeningRunMetricCreate {
	srmc.mutation.SetTotalCost(f)
	return srmc
}

// SetNillableTotalCost sets the "total_cost" field if the given value is not nil.
func (srmc *ScreeningRunMetricCreate) SetNillableTotalCost(f *float64) *ScreeningRunMetricCreate {
	if f != nil {
		srmc.SetTotalCost(*f)
	}
	return srmc
}

// SetCreatedAt sets the "created_at" field.
func (srmc *ScreeningRunMetricCreate) SetCreatedAt(t time.Time) *ScreeningRunMetricCreate {
	srmc.mutation.SetCreatedAt(t)
	return srmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (srmc *ScreeningRunMetricCreate) SetNillableCreatedAt(t *time.Time) *ScreeningRunMetricCreate {
	if t != nil {
		srmc.SetCreatedAt(*t)
	}
	return srmc
}

// SetUpdatedAt sets the "updated_at" field.
func (srmc *ScreeningRunMetricCreate) SetUpdatedAt(t time.Time) *ScreeningRunMetricCreate {
	srmc.mutation.SetUpdatedAt(t)
	return srmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (srmc *ScreeningRunMetricCreate) SetNillableUpdatedAt(t *time.Time) *ScreeningRunMetricCreate {
	if t != nil {
		srmc.SetUpdatedAt(*t)
	}
	return srmc
}

// SetID sets the "id" field.
func (srmc *ScreeningRunMetricCreate) SetID(u uuid.UUID) *ScreeningRunMetricCreate {
	srmc.mutation.SetID(u)
	return srmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (srmc *ScreeningRunMetricCreate) SetNillableID(u *uuid.UUID) *ScreeningRunMetricCreate {
	if u != nil {
		srmc.SetID(*u)
	}
	return srmc
}

// SetTask sets the "task" edge to the ScreeningTask entity.
func (srmc *ScreeningRunMetricCreate) SetTask(s *ScreeningTask) *ScreeningRunMetricCreate {
	return srmc.SetTaskID(s.ID)
}

// Mutation returns the ScreeningRunMetricMutation object of the builder.
func (srmc *ScreeningRunMetricCreate) Mutation() *ScreeningRunMetricMutation {
	return srmc.mutation
}

// Save creates the ScreeningRunMetric in the database.
func (srmc *ScreeningRunMetricCreate) Save(ctx context.Context) (*ScreeningRunMetric, error) {
	if err := srmc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, srmc.sqlSave, srmc.mutation, srmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (srmc *ScreeningRunMetricCreate) SaveX(ctx context.Context) *ScreeningRunMetric {
	v, err := srmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srmc *ScreeningRunMetricCreate) Exec(ctx context.Context) error {
	_, err := srmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srmc *ScreeningRunMetricCreate) ExecX(ctx context.Context) {
	if err := srmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (srmc *ScreeningRunMetricCreate) defaults() error {
	if _, ok := srmc.mutation.CreatedAt(); !ok {
		if screeningrunmetric.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningrunmetric.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := screeningrunmetric.DefaultCreatedAt()
		srmc.mutation.SetCreatedAt(v)
	}
	if _, ok := srmc.mutation.UpdatedAt(); !ok {
		if screeningrunmetric.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningrunmetric.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := screeningrunmetric.DefaultUpdatedAt()
		srmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := srmc.mutation.ID(); !ok {
		if screeningrunmetric.DefaultID == nil {
			return fmt.Errorf("db: uninitialized screeningrunmetric.DefaultID (forgotten import db/runtime?)")
		}
		v := screeningrunmetric.DefaultID()
		srmc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (srmc *ScreeningRunMetricCreate) check() error {
	if _, ok := srmc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`db: missing required field "ScreeningRunMetric.task_id"`)}
	}
	if _, ok := srmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ScreeningRunMetric.created_at"`)}
	}
	if _, ok := srmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "ScreeningRunMetric.updated_at"`)}
	}
	if len(srmc.mutation.TaskIDs()) == 0 {
		return &ValidationError{Name: "task", err: errors.New(`db: missing required edge "ScreeningRunMetric.task"`)}
	}
	return nil
}

func (srmc *ScreeningRunMetricCreate) sqlSave(ctx context.Context) (*ScreeningRunMetric, error) {
	if err := srmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := srmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, srmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	srmc.mutation.id = &_node.ID
	srmc.mutation.done = true
	return _node, nil
}

func (srmc *ScreeningRunMetricCreate) createSpec() (*ScreeningRunMetric, *sqlgraph.CreateSpec) {
	var (
		_node = &ScreeningRunMetric{config: srmc.config}
		_spec = sqlgraph.NewCreateSpec(screeningrunmetric.Table, sqlgraph.NewFieldSpec(screeningrunmetric.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = srmc.conflict
	if id, ok := srmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := srmc.mutation.DeletedAt(); ok {
		_spec.SetField(screeningrunmetric.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := srmc.mutation.AvgScore(); ok {
		_spec.SetField(screeningrunmetric.FieldAvgScore, field.TypeFloat64, value)
		_node.AvgScore = value
	}
	if value, ok := srmc.mutation.Histogram(); ok {
		_spec.SetField(screeningrunmetric.FieldHistogram, field.TypeJSON, value)
		_node.Histogram = value
	}
	if value, ok := srmc.mutation.TokensInput(); ok {
		_spec.SetField(screeningrunmetric.FieldTokensInput, field.TypeInt64, value)
		_node.TokensInput = value
	}
	if value, ok := srmc.mutation.TokensOutput(); ok {
		_spec.SetField(screeningrunmetric.FieldTokensOutput, field.TypeInt64, value)
		_node.TokensOutput = value
	}
	if value, ok := srmc.mutation.TotalCost(); ok {
		_spec.SetField(screeningrunmetric.FieldTotalCost, field.TypeFloat64, value)
		_node.TotalCost = value
	}
	if value, ok := srmc.mutation.CreatedAt(); ok {
		_spec.SetField(screeningrunmetric.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := srmc.mutation.UpdatedAt(); ok {
		_spec.SetField(screeningrunmetric.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := srmc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningrunmetric.TaskTable,
			Columns: []string{screeningrunmetric.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScreeningRunMetric.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScreeningRunMetricUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (srmc *ScreeningRunMetricCreate) OnConflict(opts ...sql.ConflictOption) *ScreeningRunMetricUpsertOne {
	srmc.conflict = opts
	return &ScreeningRunMetricUpsertOne{
		create: srmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScreeningRunMetric.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (srmc *ScreeningRunMetricCreate) OnConflictColumns(columns ...string) *ScreeningRunMetricUpsertOne {
	srmc.conflict = append(srmc.conflict, sql.ConflictColumns(columns...))
	return &ScreeningRunMetricUpsertOne{
		create: srmc,
	}
}

type (
	// ScreeningRunMetricUpsertOne is the builder for "upsert"-ing
	//  one ScreeningRunMetric node.
	ScreeningRunMetricUpsertOne struct {
		create *ScreeningRunMetricCreate
	}

	// ScreeningRunMetricUpsert is the "OnConflict" setter.
	ScreeningRunMetricUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *ScreeningRunMetricUpsert) SetDeletedAt(v time.Time) *ScreeningRunMetricUpsert {
	u.Set(screeningrunmetric.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsert) UpdateDeletedAt() *ScreeningRunMetricUpsert {
	u.SetExcluded(screeningrunmetric.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScreeningRunMetricUpsert) ClearDeletedAt() *ScreeningRunMetricUpsert {
	u.SetNull(screeningrunmetric.FieldDeletedAt)
	return u
}

// SetTaskID sets the "task_id" field.
func (u *ScreeningRunMetricUpsert) SetTaskID(v uuid.UUID) *ScreeningRunMetricUpsert {
	u.Set(screeningrunmetric.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsert) UpdateTaskID() *ScreeningRunMetricUpsert {
	u.SetExcluded(screeningrunmetric.FieldTaskID)
	return u
}

// SetAvgScore sets the "avg_score" field.
func (u *ScreeningRunMetricUpsert) SetAvgScore(v float64) *ScreeningRunMetricUpsert {
	u.Set(screeningrunmetric.FieldAvgScore, v)
	return u
}

// UpdateAvgScore sets the "avg_score" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsert) UpdateAvgScore() *ScreeningRunMetricUpsert {
	u.SetExcluded(screeningrunmetric.FieldAvgScore)
	return u
}

// AddAvgScore adds v to the "avg_score" field.
func (u *ScreeningRunMetricUpsert) AddAvgScore(v float64) *ScreeningRunMetricUpsert {
	u.Add(screeningrunmetric.FieldAvgScore, v)
	return u
}

// ClearAvgScore clears the value of the "avg_score" field.
func (u *ScreeningRunMetricUpsert) ClearAvgScore() *ScreeningRunMetricUpsert {
	u.SetNull(screeningrunmetric.FieldAvgScore)
	return u
}

// SetHistogram sets the "histogram" field.
func (u *ScreeningRunMetricUpsert) SetHistogram(v map[string]interface{}) *ScreeningRunMetricUpsert {
	u.Set(screeningrunmetric.FieldHistogram, v)
	return u
}

// UpdateHistogram sets the "histogram" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsert) UpdateHistogram() *ScreeningRunMetricUpsert {
	u.SetExcluded(screeningrunmetric.FieldHistogram)
	return u
}

// ClearHistogram clears the value of the "histogram" field.
func (u *ScreeningRunMetricUpsert) ClearHistogram() *ScreeningRunMetricUpsert {
	u.SetNull(screeningrunmetric.FieldHistogram)
	return u
}

// SetTokensInput sets the "tokens_input" field.
func (u *ScreeningRunMetricUpsert) SetTokensInput(v int64) *ScreeningRunMetricUpsert {
	u.Set(screeningrunmetric.FieldTokensInput, v)
	return u
}

// UpdateTokensInput sets the "tokens_input" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsert) UpdateTokensInput() *ScreeningRunMetricUpsert {
	u.SetExcluded(screeningrunmetric.FieldTokensInput)
	return u
}

// AddTokensInput adds v to the "tokens_input" field.
func (u *ScreeningRunMetricUpsert) AddTokensInput(v int64) *ScreeningRunMetricUpsert {
	u.Add(screeningrunmetric.FieldTokensInput, v)
	return u
}

// ClearTokensInput clears the value of the "tokens_input" field.
func (u *ScreeningRunMetricUpsert) ClearTokensInput() *ScreeningRunMetricUpsert {
	u.SetNull(screeningrunmetric.FieldTokensInput)
	return u
}

// SetTokensOutput sets the "tokens_output" field.
func (u *ScreeningRunMetricUpsert) SetTokensOutput(v int64) *ScreeningRunMetricUpsert {
	u.Set(screeningrunmetric.FieldTokensOutput, v)
	return u
}

// UpdateTokensOutput sets the "tokens_output" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsert) UpdateTokensOutput() *ScreeningRunMetricUpsert {
	u.SetExcluded(screeningrunmetric.FieldTokensOutput)
	return u
}

// AddTokensOutput adds v to the "tokens_output" field.
func (u *ScreeningRunMetricUpsert) AddTokensOutput(v int64) *ScreeningRunMetricUpsert {
	u.Add(screeningrunmetric.FieldTokensOutput, v)
	return u
}

// ClearTokensOutput clears the value of the "tokens_output" field.
func (u *ScreeningRunMetricUpsert) ClearTokensOutput() *ScreeningRunMetricUpsert {
	u.SetNull(screeningrunmetric.FieldTokensOutput)
	return u
}

// SetTotalCost sets the "total_cost" field.
func (u *ScreeningRunMetricUpsert) SetTotalCost(v float64) *ScreeningRunMetricUpsert {
	u.Set(screeningrunmetric.FieldTotalCost, v)
	return u
}

// UpdateTotalCost sets the "total_cost" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsert) UpdateTotalCost() *ScreeningRunMetricUpsert {
	u.SetExcluded(screeningrunmetric.FieldTotalCost)
	return u
}

// AddTotalCost adds v to the "total_cost" field.
func (u *ScreeningRunMetricUpsert) AddTotalCost(v float64) *ScreeningRunMetricUpsert {
	u.Add(screeningrunmetric.FieldTotalCost, v)
	return u
}

// ClearTotalCost clears the value of the "total_cost" field.
func (u *ScreeningRunMetricUpsert) ClearTotalCost() *ScreeningRunMetricUpsert {
	u.SetNull(screeningrunmetric.FieldTotalCost)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningRunMetricUpsert) SetUpdatedAt(v time.Time) *ScreeningRunMetricUpsert {
	u.Set(screeningrunmetric.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsert) UpdateUpdatedAt() *ScreeningRunMetricUpsert {
	u.SetExcluded(screeningrunmetric.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ScreeningRunMetric.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(screeningrunmetric.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScreeningRunMetricUpsertOne) UpdateNewValues() *ScreeningRunMetricUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(screeningrunmetric.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(screeningrunmetric.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScreeningRunMetric.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ScreeningRunMetricUpsertOne) Ignore() *ScreeningRunMetricUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScreeningRunMetricUpsertOne) DoNothing() *ScreeningRunMetricUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScreeningRunMetricCreate.OnConflict
// documentation for more info.
func (u *ScreeningRunMetricUpsertOne) Update(set func(*ScreeningRunMetricUpsert)) *ScreeningRunMetricUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScreeningRunMetricUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ScreeningRunMetricUpsertOne) SetDeletedAt(v time.Time) *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsertOne) UpdateDeletedAt() *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScreeningRunMetricUpsertOne) ClearDeletedAt() *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTaskID sets the "task_id" field.
func (u *ScreeningRunMetricUpsertOne) SetTaskID(v uuid.UUID) *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsertOne) UpdateTaskID() *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.UpdateTaskID()
	})
}

// SetAvgScore sets the "avg_score" field.
func (u *ScreeningRunMetricUpsertOne) SetAvgScore(v float64) *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.SetAvgScore(v)
	})
}

// AddAvgScore adds v to the "avg_score" field.
func (u *ScreeningRunMetricUpsertOne) AddAvgScore(v float64) *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.AddAvgScore(v)
	})
}

// UpdateAvgScore sets the "avg_score" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsertOne) UpdateAvgScore() *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.UpdateAvgScore()
	})
}

// ClearAvgScore clears the value of the "avg_score" field.
func (u *ScreeningRunMetricUpsertOne) ClearAvgScore() *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.ClearAvgScore()
	})
}

// SetHistogram sets the "histogram" field.
func (u *ScreeningRunMetricUpsertOne) SetHistogram(v map[string]interface{}) *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.SetHistogram(v)
	})
}

// UpdateHistogram sets the "histogram" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsertOne) UpdateHistogram() *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.UpdateHistogram()
	})
}

// ClearHistogram clears the value of the "histogram" field.
func (u *ScreeningRunMetricUpsertOne) ClearHistogram() *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.ClearHistogram()
	})
}

// SetTokensInput sets the "tokens_input" field.
func (u *ScreeningRunMetricUpsertOne) SetTokensInput(v int64) *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.SetTokensInput(v)
	})
}

// AddTokensInput adds v to the "tokens_input" field.
func (u *ScreeningRunMetricUpsertOne) AddTokensInput(v int64) *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.AddTokensInput(v)
	})
}

// UpdateTokensInput sets the "tokens_input" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsertOne) UpdateTokensInput() *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.UpdateTokensInput()
	})
}

// ClearTokensInput clears the value of the "tokens_input" field.
func (u *ScreeningRunMetricUpsertOne) ClearTokensInput() *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.ClearTokensInput()
	})
}

// SetTokensOutput sets the "tokens_output" field.
func (u *ScreeningRunMetricUpsertOne) SetTokensOutput(v int64) *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.SetTokensOutput(v)
	})
}

// AddTokensOutput adds v to the "tokens_output" field.
func (u *ScreeningRunMetricUpsertOne) AddTokensOutput(v int64) *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.AddTokensOutput(v)
	})
}

// UpdateTokensOutput sets the "tokens_output" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsertOne) UpdateTokensOutput() *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.UpdateTokensOutput()
	})
}

// ClearTokensOutput clears the value of the "tokens_output" field.
func (u *ScreeningRunMetricUpsertOne) ClearTokensOutput() *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.ClearTokensOutput()
	})
}

// SetTotalCost sets the "total_cost" field.
func (u *ScreeningRunMetricUpsertOne) SetTotalCost(v float64) *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.SetTotalCost(v)
	})
}

// AddTotalCost adds v to the "total_cost" field.
func (u *ScreeningRunMetricUpsertOne) AddTotalCost(v float64) *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.AddTotalCost(v)
	})
}

// UpdateTotalCost sets the "total_cost" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsertOne) UpdateTotalCost() *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.UpdateTotalCost()
	})
}

// ClearTotalCost clears the value of the "total_cost" field.
func (u *ScreeningRunMetricUpsertOne) ClearTotalCost() *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.ClearTotalCost()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningRunMetricUpsertOne) SetUpdatedAt(v time.Time) *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsertOne) UpdateUpdatedAt() *ScreeningRunMetricUpsertOne {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ScreeningRunMetricUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ScreeningRunMetricCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScreeningRunMetricUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScreeningRunMetricUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ScreeningRunMetricUpsertOne.ID is not supported by MySQL driver. Use ScreeningRunMetricUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScreeningRunMetricUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScreeningRunMetricCreateBulk is the builder for creating many ScreeningRunMetric entities in bulk.
type ScreeningRunMetricCreateBulk struct {
	config
	err      error
	builders []*ScreeningRunMetricCreate
	conflict []sql.ConflictOption
}

// Save creates the ScreeningRunMetric entities in the database.
func (srmcb *ScreeningRunMetricCreateBulk) Save(ctx context.Context) ([]*ScreeningRunMetric, error) {
	if srmcb.err != nil {
		return nil, srmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srmcb.builders))
	nodes := make([]*ScreeningRunMetric, len(srmcb.builders))
	mutators := make([]Mutator, len(srmcb.builders))
	for i := range srmcb.builders {
		func(i int, root context.Context) {
			builder := srmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScreeningRunMetricMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = srmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srmcb *ScreeningRunMetricCreateBulk) SaveX(ctx context.Context) []*ScreeningRunMetric {
	v, err := srmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srmcb *ScreeningRunMetricCreateBulk) Exec(ctx context.Context) error {
	_, err := srmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srmcb *ScreeningRunMetricCreateBulk) ExecX(ctx context.Context) {
	if err := srmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScreeningRunMetric.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScreeningRunMetricUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (srmcb *ScreeningRunMetricCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScreeningRunMetricUpsertBulk {
	srmcb.conflict = opts
	return &ScreeningRunMetricUpsertBulk{
		create: srmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScreeningRunMetric.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (srmcb *ScreeningRunMetricCreateBulk) OnConflictColumns(columns ...string) *ScreeningRunMetricUpsertBulk {
	srmcb.conflict = append(srmcb.conflict, sql.ConflictColumns(columns...))
	return &ScreeningRunMetricUpsertBulk{
		create: srmcb,
	}
}

// ScreeningRunMetricUpsertBulk is the builder for "upsert"-ing
// a bulk of ScreeningRunMetric nodes.
type ScreeningRunMetricUpsertBulk struct {
	create *ScreeningRunMetricCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ScreeningRunMetric.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(screeningrunmetric.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScreeningRunMetricUpsertBulk) UpdateNewValues() *ScreeningRunMetricUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(screeningrunmetric.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(screeningrunmetric.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScreeningRunMetric.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ScreeningRunMetricUpsertBulk) Ignore() *ScreeningRunMetricUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScreeningRunMetricUpsertBulk) DoNothing() *ScreeningRunMetricUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScreeningRunMetricCreateBulk.OnConflict
// documentation for more info.
func (u *ScreeningRunMetricUpsertBulk) Update(set func(*ScreeningRunMetricUpsert)) *ScreeningRunMetricUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScreeningRunMetricUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ScreeningRunMetricUpsertBulk) SetDeletedAt(v time.Time) *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsertBulk) UpdateDeletedAt() *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScreeningRunMetricUpsertBulk) ClearDeletedAt() *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTaskID sets the "task_id" field.
func (u *ScreeningRunMetricUpsertBulk) SetTaskID(v uuid.UUID) *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsertBulk) UpdateTaskID() *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.UpdateTaskID()
	})
}

// SetAvgScore sets the "avg_score" field.
func (u *ScreeningRunMetricUpsertBulk) SetAvgScore(v float64) *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.SetAvgScore(v)
	})
}

// AddAvgScore adds v to the "avg_score" field.
func (u *ScreeningRunMetricUpsertBulk) AddAvgScore(v float64) *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.AddAvgScore(v)
	})
}

// UpdateAvgScore sets the "avg_score" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsertBulk) UpdateAvgScore() *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.UpdateAvgScore()
	})
}

// ClearAvgScore clears the value of the "avg_score" field.
func (u *ScreeningRunMetricUpsertBulk) ClearAvgScore() *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.ClearAvgScore()
	})
}

// SetHistogram sets the "histogram" field.
func (u *ScreeningRunMetricUpsertBulk) SetHistogram(v map[string]interface{}) *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.SetHistogram(v)
	})
}

// UpdateHistogram sets the "histogram" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsertBulk) UpdateHistogram() *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.UpdateHistogram()
	})
}

// ClearHistogram clears the value of the "histogram" field.
func (u *ScreeningRunMetricUpsertBulk) ClearHistogram() *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.ClearHistogram()
	})
}

// SetTokensInput sets the "tokens_input" field.
func (u *ScreeningRunMetricUpsertBulk) SetTokensInput(v int64) *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.SetTokensInput(v)
	})
}

// AddTokensInput adds v to the "tokens_input" field.
func (u *ScreeningRunMetricUpsertBulk) AddTokensInput(v int64) *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.AddTokensInput(v)
	})
}

// UpdateTokensInput sets the "tokens_input" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsertBulk) UpdateTokensInput() *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.UpdateTokensInput()
	})
}

// ClearTokensInput clears the value of the "tokens_input" field.
func (u *ScreeningRunMetricUpsertBulk) ClearTokensInput() *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.ClearTokensInput()
	})
}

// SetTokensOutput sets the "tokens_output" field.
func (u *ScreeningRunMetricUpsertBulk) SetTokensOutput(v int64) *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.SetTokensOutput(v)
	})
}

// AddTokensOutput adds v to the "tokens_output" field.
func (u *ScreeningRunMetricUpsertBulk) AddTokensOutput(v int64) *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.AddTokensOutput(v)
	})
}

// UpdateTokensOutput sets the "tokens_output" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsertBulk) UpdateTokensOutput() *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.UpdateTokensOutput()
	})
}

// ClearTokensOutput clears the value of the "tokens_output" field.
func (u *ScreeningRunMetricUpsertBulk) ClearTokensOutput() *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.ClearTokensOutput()
	})
}

// SetTotalCost sets the "total_cost" field.
func (u *ScreeningRunMetricUpsertBulk) SetTotalCost(v float64) *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.SetTotalCost(v)
	})
}

// AddTotalCost adds v to the "total_cost" field.
func (u *ScreeningRunMetricUpsertBulk) AddTotalCost(v float64) *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.AddTotalCost(v)
	})
}

// UpdateTotalCost sets the "total_cost" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsertBulk) UpdateTotalCost() *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.UpdateTotalCost()
	})
}

// ClearTotalCost clears the value of the "total_cost" field.
func (u *ScreeningRunMetricUpsertBulk) ClearTotalCost() *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.ClearTotalCost()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningRunMetricUpsertBulk) SetUpdatedAt(v time.Time) *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningRunMetricUpsertBulk) UpdateUpdatedAt() *ScreeningRunMetricUpsertBulk {
	return u.Update(func(s *ScreeningRunMetricUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ScreeningRunMetricUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ScreeningRunMetricCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ScreeningRunMetricCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScreeningRunMetricUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
