// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumeskill"
	"github.com/google/uuid"
)

// ResumeSkillUpdate is the builder for updating ResumeSkill entities.
type ResumeSkillUpdate struct {
	config
	hooks     []Hook
	mutation  *ResumeSkillMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ResumeSkillUpdate builder.
func (rsu *ResumeSkillUpdate) Where(ps ...predicate.ResumeSkill) *ResumeSkillUpdate {
	rsu.mutation.Where(ps...)
	return rsu
}

// SetDeletedAt sets the "deleted_at" field.
func (rsu *ResumeSkillUpdate) SetDeletedAt(t time.Time) *ResumeSkillUpdate {
	rsu.mutation.SetDeletedAt(t)
	return rsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rsu *ResumeSkillUpdate) SetNillableDeletedAt(t *time.Time) *ResumeSkillUpdate {
	if t != nil {
		rsu.SetDeletedAt(*t)
	}
	return rsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rsu *ResumeSkillUpdate) ClearDeletedAt() *ResumeSkillUpdate {
	rsu.mutation.ClearDeletedAt()
	return rsu
}

// SetResumeID sets the "resume_id" field.
func (rsu *ResumeSkillUpdate) SetResumeID(u uuid.UUID) *ResumeSkillUpdate {
	rsu.mutation.SetResumeID(u)
	return rsu
}

// SetNillableResumeID sets the "resume_id" field if the given value is not nil.
func (rsu *ResumeSkillUpdate) SetNillableResumeID(u *uuid.UUID) *ResumeSkillUpdate {
	if u != nil {
		rsu.SetResumeID(*u)
	}
	return rsu
}

// SetSkillName sets the "skill_name" field.
func (rsu *ResumeSkillUpdate) SetSkillName(s string) *ResumeSkillUpdate {
	rsu.mutation.SetSkillName(s)
	return rsu
}

// SetNillableSkillName sets the "skill_name" field if the given value is not nil.
func (rsu *ResumeSkillUpdate) SetNillableSkillName(s *string) *ResumeSkillUpdate {
	if s != nil {
		rsu.SetSkillName(*s)
	}
	return rsu
}

// ClearSkillName clears the value of the "skill_name" field.
func (rsu *ResumeSkillUpdate) ClearSkillName() *ResumeSkillUpdate {
	rsu.mutation.ClearSkillName()
	return rsu
}

// SetLevel sets the "level" field.
func (rsu *ResumeSkillUpdate) SetLevel(s string) *ResumeSkillUpdate {
	rsu.mutation.SetLevel(s)
	return rsu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (rsu *ResumeSkillUpdate) SetNillableLevel(s *string) *ResumeSkillUpdate {
	if s != nil {
		rsu.SetLevel(*s)
	}
	return rsu
}

// ClearLevel clears the value of the "level" field.
func (rsu *ResumeSkillUpdate) ClearLevel() *ResumeSkillUpdate {
	rsu.mutation.ClearLevel()
	return rsu
}

// SetDescription sets the "description" field.
func (rsu *ResumeSkillUpdate) SetDescription(s string) *ResumeSkillUpdate {
	rsu.mutation.SetDescription(s)
	return rsu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rsu *ResumeSkillUpdate) SetNillableDescription(s *string) *ResumeSkillUpdate {
	if s != nil {
		rsu.SetDescription(*s)
	}
	return rsu
}

// ClearDescription clears the value of the "description" field.
func (rsu *ResumeSkillUpdate) ClearDescription() *ResumeSkillUpdate {
	rsu.mutation.ClearDescription()
	return rsu
}

// SetCreatedAt sets the "created_at" field.
func (rsu *ResumeSkillUpdate) SetCreatedAt(t time.Time) *ResumeSkillUpdate {
	rsu.mutation.SetCreatedAt(t)
	return rsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rsu *ResumeSkillUpdate) SetNillableCreatedAt(t *time.Time) *ResumeSkillUpdate {
	if t != nil {
		rsu.SetCreatedAt(*t)
	}
	return rsu
}

// SetUpdatedAt sets the "updated_at" field.
func (rsu *ResumeSkillUpdate) SetUpdatedAt(t time.Time) *ResumeSkillUpdate {
	rsu.mutation.SetUpdatedAt(t)
	return rsu
}

// SetResume sets the "resume" edge to the Resume entity.
func (rsu *ResumeSkillUpdate) SetResume(r *Resume) *ResumeSkillUpdate {
	return rsu.SetResumeID(r.ID)
}

// Mutation returns the ResumeSkillMutation object of the builder.
func (rsu *ResumeSkillUpdate) Mutation() *ResumeSkillMutation {
	return rsu.mutation
}

// ClearResume clears the "resume" edge to the Resume entity.
func (rsu *ResumeSkillUpdate) ClearResume() *ResumeSkillUpdate {
	rsu.mutation.ClearResume()
	return rsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rsu *ResumeSkillUpdate) Save(ctx context.Context) (int, error) {
	if err := rsu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, rsu.sqlSave, rsu.mutation, rsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsu *ResumeSkillUpdate) SaveX(ctx context.Context) int {
	affected, err := rsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rsu *ResumeSkillUpdate) Exec(ctx context.Context) error {
	_, err := rsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsu *ResumeSkillUpdate) ExecX(ctx context.Context) {
	if err := rsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsu *ResumeSkillUpdate) defaults() error {
	if _, ok := rsu.mutation.UpdatedAt(); !ok {
		if resumeskill.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumeskill.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumeskill.UpdateDefaultUpdatedAt()
		rsu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rsu *ResumeSkillUpdate) check() error {
	if rsu.mutation.ResumeCleared() && len(rsu.mutation.ResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeSkill.resume"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rsu *ResumeSkillUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeSkillUpdate {
	rsu.modifiers = append(rsu.modifiers, modifiers...)
	return rsu
}

func (rsu *ResumeSkillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumeskill.Table, resumeskill.Columns, sqlgraph.NewFieldSpec(resumeskill.FieldID, field.TypeUUID))
	if ps := rsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsu.mutation.DeletedAt(); ok {
		_spec.SetField(resumeskill.FieldDeletedAt, field.TypeTime, value)
	}
	if rsu.mutation.DeletedAtCleared() {
		_spec.ClearField(resumeskill.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rsu.mutation.SkillName(); ok {
		_spec.SetField(resumeskill.FieldSkillName, field.TypeString, value)
	}
	if rsu.mutation.SkillNameCleared() {
		_spec.ClearField(resumeskill.FieldSkillName, field.TypeString)
	}
	if value, ok := rsu.mutation.Level(); ok {
		_spec.SetField(resumeskill.FieldLevel, field.TypeString, value)
	}
	if rsu.mutation.LevelCleared() {
		_spec.ClearField(resumeskill.FieldLevel, field.TypeString)
	}
	if value, ok := rsu.mutation.Description(); ok {
		_spec.SetField(resumeskill.FieldDescription, field.TypeString, value)
	}
	if rsu.mutation.DescriptionCleared() {
		_spec.ClearField(resumeskill.FieldDescription, field.TypeString)
	}
	if value, ok := rsu.mutation.CreatedAt(); ok {
		_spec.SetField(resumeskill.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rsu.mutation.UpdatedAt(); ok {
		_spec.SetField(resumeskill.FieldUpdatedAt, field.TypeTime, value)
	}
	if rsu.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeskill.ResumeTable,
			Columns: []string{resumeskill.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsu.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeskill.ResumeTable,
			Columns: []string{resumeskill.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumeskill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rsu.mutation.done = true
	return n, nil
}

// ResumeSkillUpdateOne is the builder for updating a single ResumeSkill entity.
type ResumeSkillUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ResumeSkillMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (rsuo *ResumeSkillUpdateOne) SetDeletedAt(t time.Time) *ResumeSkillUpdateOne {
	rsuo.mutation.SetDeletedAt(t)
	return rsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rsuo *ResumeSkillUpdateOne) SetNillableDeletedAt(t *time.Time) *ResumeSkillUpdateOne {
	if t != nil {
		rsuo.SetDeletedAt(*t)
	}
	return rsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rsuo *ResumeSkillUpdateOne) ClearDeletedAt() *ResumeSkillUpdateOne {
	rsuo.mutation.ClearDeletedAt()
	return rsuo
}

// SetResumeID sets the "resume_id" field.
func (rsuo *ResumeSkillUpdateOne) SetResumeID(u uuid.UUID) *ResumeSkillUpdateOne {
	rsuo.mutation.SetResumeID(u)
	return rsuo
}

// SetNillableResumeID sets the "resume_id" field if the given value is not nil.
func (rsuo *ResumeSkillUpdateOne) SetNillableResumeID(u *uuid.UUID) *ResumeSkillUpdateOne {
	if u != nil {
		rsuo.SetResumeID(*u)
	}
	return rsuo
}

// SetSkillName sets the "skill_name" field.
func (rsuo *ResumeSkillUpdateOne) SetSkillName(s string) *ResumeSkillUpdateOne {
	rsuo.mutation.SetSkillName(s)
	return rsuo
}

// SetNillableSkillName sets the "skill_name" field if the given value is not nil.
func (rsuo *ResumeSkillUpdateOne) SetNillableSkillName(s *string) *ResumeSkillUpdateOne {
	if s != nil {
		rsuo.SetSkillName(*s)
	}
	return rsuo
}

// ClearSkillName clears the value of the "skill_name" field.
func (rsuo *ResumeSkillUpdateOne) ClearSkillName() *ResumeSkillUpdateOne {
	rsuo.mutation.ClearSkillName()
	return rsuo
}

// SetLevel sets the "level" field.
func (rsuo *ResumeSkillUpdateOne) SetLevel(s string) *ResumeSkillUpdateOne {
	rsuo.mutation.SetLevel(s)
	return rsuo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (rsuo *ResumeSkillUpdateOne) SetNillableLevel(s *string) *ResumeSkillUpdateOne {
	if s != nil {
		rsuo.SetLevel(*s)
	}
	return rsuo
}

// ClearLevel clears the value of the "level" field.
func (rsuo *ResumeSkillUpdateOne) ClearLevel() *ResumeSkillUpdateOne {
	rsuo.mutation.ClearLevel()
	return rsuo
}

// SetDescription sets the "description" field.
func (rsuo *ResumeSkillUpdateOne) SetDescription(s string) *ResumeSkillUpdateOne {
	rsuo.mutation.SetDescription(s)
	return rsuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rsuo *ResumeSkillUpdateOne) SetNillableDescription(s *string) *ResumeSkillUpdateOne {
	if s != nil {
		rsuo.SetDescription(*s)
	}
	return rsuo
}

// ClearDescription clears the value of the "description" field.
func (rsuo *ResumeSkillUpdateOne) ClearDescription() *ResumeSkillUpdateOne {
	rsuo.mutation.ClearDescription()
	return rsuo
}

// SetCreatedAt sets the "created_at" field.
func (rsuo *ResumeSkillUpdateOne) SetCreatedAt(t time.Time) *ResumeSkillUpdateOne {
	rsuo.mutation.SetCreatedAt(t)
	return rsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rsuo *ResumeSkillUpdateOne) SetNillableCreatedAt(t *time.Time) *ResumeSkillUpdateOne {
	if t != nil {
		rsuo.SetCreatedAt(*t)
	}
	return rsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rsuo *ResumeSkillUpdateOne) SetUpdatedAt(t time.Time) *ResumeSkillUpdateOne {
	rsuo.mutation.SetUpdatedAt(t)
	return rsuo
}

// SetResume sets the "resume" edge to the Resume entity.
func (rsuo *ResumeSkillUpdateOne) SetResume(r *Resume) *ResumeSkillUpdateOne {
	return rsuo.SetResumeID(r.ID)
}

// Mutation returns the ResumeSkillMutation object of the builder.
func (rsuo *ResumeSkillUpdateOne) Mutation() *ResumeSkillMutation {
	return rsuo.mutation
}

// ClearResume clears the "resume" edge to the Resume entity.
func (rsuo *ResumeSkillUpdateOne) ClearResume() *ResumeSkillUpdateOne {
	rsuo.mutation.ClearResume()
	return rsuo
}

// Where appends a list predicates to the ResumeSkillUpdate builder.
func (rsuo *ResumeSkillUpdateOne) Where(ps ...predicate.ResumeSkill) *ResumeSkillUpdateOne {
	rsuo.mutation.Where(ps...)
	return rsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rsuo *ResumeSkillUpdateOne) Select(field string, fields ...string) *ResumeSkillUpdateOne {
	rsuo.fields = append([]string{field}, fields...)
	return rsuo
}

// Save executes the query and returns the updated ResumeSkill entity.
func (rsuo *ResumeSkillUpdateOne) Save(ctx context.Context) (*ResumeSkill, error) {
	if err := rsuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rsuo.sqlSave, rsuo.mutation, rsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsuo *ResumeSkillUpdateOne) SaveX(ctx context.Context) *ResumeSkill {
	node, err := rsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rsuo *ResumeSkillUpdateOne) Exec(ctx context.Context) error {
	_, err := rsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsuo *ResumeSkillUpdateOne) ExecX(ctx context.Context) {
	if err := rsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsuo *ResumeSkillUpdateOne) defaults() error {
	if _, ok := rsuo.mutation.UpdatedAt(); !ok {
		if resumeskill.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumeskill.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumeskill.UpdateDefaultUpdatedAt()
		rsuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rsuo *ResumeSkillUpdateOne) check() error {
	if rsuo.mutation.ResumeCleared() && len(rsuo.mutation.ResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeSkill.resume"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rsuo *ResumeSkillUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeSkillUpdateOne {
	rsuo.modifiers = append(rsuo.modifiers, modifiers...)
	return rsuo
}

func (rsuo *ResumeSkillUpdateOne) sqlSave(ctx context.Context) (_node *ResumeSkill, err error) {
	if err := rsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumeskill.Table, resumeskill.Columns, sqlgraph.NewFieldSpec(resumeskill.FieldID, field.TypeUUID))
	id, ok := rsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ResumeSkill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resumeskill.FieldID)
		for _, f := range fields {
			if !resumeskill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != resumeskill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsuo.mutation.DeletedAt(); ok {
		_spec.SetField(resumeskill.FieldDeletedAt, field.TypeTime, value)
	}
	if rsuo.mutation.DeletedAtCleared() {
		_spec.ClearField(resumeskill.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rsuo.mutation.SkillName(); ok {
		_spec.SetField(resumeskill.FieldSkillName, field.TypeString, value)
	}
	if rsuo.mutation.SkillNameCleared() {
		_spec.ClearField(resumeskill.FieldSkillName, field.TypeString)
	}
	if value, ok := rsuo.mutation.Level(); ok {
		_spec.SetField(resumeskill.FieldLevel, field.TypeString, value)
	}
	if rsuo.mutation.LevelCleared() {
		_spec.ClearField(resumeskill.FieldLevel, field.TypeString)
	}
	if value, ok := rsuo.mutation.Description(); ok {
		_spec.SetField(resumeskill.FieldDescription, field.TypeString, value)
	}
	if rsuo.mutation.DescriptionCleared() {
		_spec.ClearField(resumeskill.FieldDescription, field.TypeString)
	}
	if value, ok := rsuo.mutation.CreatedAt(); ok {
		_spec.SetField(resumeskill.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(resumeskill.FieldUpdatedAt, field.TypeTime, value)
	}
	if rsuo.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeskill.ResumeTable,
			Columns: []string{resumeskill.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsuo.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeskill.ResumeTable,
			Columns: []string{resumeskill.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rsuo.modifiers...)
	_node = &ResumeSkill{config: rsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumeskill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rsuo.mutation.done = true
	return _node, nil
}
