// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobeducationrequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// JobEducationRequirementQuery is the builder for querying JobEducationRequirement entities.
type JobEducationRequirementQuery struct {
	config
	ctx        *QueryContext
	order      []jobeducationrequirement.OrderOption
	inters     []Interceptor
	predicates []predicate.JobEducationRequirement
	withJob    *JobPositionQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JobEducationRequirementQuery builder.
func (jerq *JobEducationRequirementQuery) Where(ps ...predicate.JobEducationRequirement) *JobEducationRequirementQuery {
	jerq.predicates = append(jerq.predicates, ps...)
	return jerq
}

// Limit the number of records to be returned by this query.
func (jerq *JobEducationRequirementQuery) Limit(limit int) *JobEducationRequirementQuery {
	jerq.ctx.Limit = &limit
	return jerq
}

// Offset to start from.
func (jerq *JobEducationRequirementQuery) Offset(offset int) *JobEducationRequirementQuery {
	jerq.ctx.Offset = &offset
	return jerq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (jerq *JobEducationRequirementQuery) Unique(unique bool) *JobEducationRequirementQuery {
	jerq.ctx.Unique = &unique
	return jerq
}

// Order specifies how the records should be ordered.
func (jerq *JobEducationRequirementQuery) Order(o ...jobeducationrequirement.OrderOption) *JobEducationRequirementQuery {
	jerq.order = append(jerq.order, o...)
	return jerq
}

// QueryJob chains the current query on the "job" edge.
func (jerq *JobEducationRequirementQuery) QueryJob() *JobPositionQuery {
	query := (&JobPositionClient{config: jerq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jerq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jerq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobeducationrequirement.Table, jobeducationrequirement.FieldID, selector),
			sqlgraph.To(jobposition.Table, jobposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobeducationrequirement.JobTable, jobeducationrequirement.JobColumn),
		)
		fromU = sqlgraph.SetNeighbors(jerq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first JobEducationRequirement entity from the query.
// Returns a *NotFoundError when no JobEducationRequirement was found.
func (jerq *JobEducationRequirementQuery) First(ctx context.Context) (*JobEducationRequirement, error) {
	nodes, err := jerq.Limit(1).All(setContextOp(ctx, jerq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{jobeducationrequirement.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jerq *JobEducationRequirementQuery) FirstX(ctx context.Context) *JobEducationRequirement {
	node, err := jerq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first JobEducationRequirement ID from the query.
// Returns a *NotFoundError when no JobEducationRequirement ID was found.
func (jerq *JobEducationRequirementQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = jerq.Limit(1).IDs(setContextOp(ctx, jerq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{jobeducationrequirement.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (jerq *JobEducationRequirementQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := jerq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single JobEducationRequirement entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one JobEducationRequirement entity is found.
// Returns a *NotFoundError when no JobEducationRequirement entities are found.
func (jerq *JobEducationRequirementQuery) Only(ctx context.Context) (*JobEducationRequirement, error) {
	nodes, err := jerq.Limit(2).All(setContextOp(ctx, jerq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{jobeducationrequirement.Label}
	default:
		return nil, &NotSingularError{jobeducationrequirement.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jerq *JobEducationRequirementQuery) OnlyX(ctx context.Context) *JobEducationRequirement {
	node, err := jerq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only JobEducationRequirement ID in the query.
// Returns a *NotSingularError when more than one JobEducationRequirement ID is found.
// Returns a *NotFoundError when no entities are found.
func (jerq *JobEducationRequirementQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = jerq.Limit(2).IDs(setContextOp(ctx, jerq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{jobeducationrequirement.Label}
	default:
		err = &NotSingularError{jobeducationrequirement.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (jerq *JobEducationRequirementQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := jerq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of JobEducationRequirements.
func (jerq *JobEducationRequirementQuery) All(ctx context.Context) ([]*JobEducationRequirement, error) {
	ctx = setContextOp(ctx, jerq.ctx, ent.OpQueryAll)
	if err := jerq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*JobEducationRequirement, *JobEducationRequirementQuery]()
	return withInterceptors[[]*JobEducationRequirement](ctx, jerq, qr, jerq.inters)
}

// AllX is like All, but panics if an error occurs.
func (jerq *JobEducationRequirementQuery) AllX(ctx context.Context) []*JobEducationRequirement {
	nodes, err := jerq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of JobEducationRequirement IDs.
func (jerq *JobEducationRequirementQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if jerq.ctx.Unique == nil && jerq.path != nil {
		jerq.Unique(true)
	}
	ctx = setContextOp(ctx, jerq.ctx, ent.OpQueryIDs)
	if err = jerq.Select(jobeducationrequirement.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jerq *JobEducationRequirementQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := jerq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jerq *JobEducationRequirementQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jerq.ctx, ent.OpQueryCount)
	if err := jerq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, jerq, querierCount[*JobEducationRequirementQuery](), jerq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (jerq *JobEducationRequirementQuery) CountX(ctx context.Context) int {
	count, err := jerq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jerq *JobEducationRequirementQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, jerq.ctx, ent.OpQueryExist)
	switch _, err := jerq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (jerq *JobEducationRequirementQuery) ExistX(ctx context.Context) bool {
	exist, err := jerq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JobEducationRequirementQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jerq *JobEducationRequirementQuery) Clone() *JobEducationRequirementQuery {
	if jerq == nil {
		return nil
	}
	return &JobEducationRequirementQuery{
		config:     jerq.config,
		ctx:        jerq.ctx.Clone(),
		order:      append([]jobeducationrequirement.OrderOption{}, jerq.order...),
		inters:     append([]Interceptor{}, jerq.inters...),
		predicates: append([]predicate.JobEducationRequirement{}, jerq.predicates...),
		withJob:    jerq.withJob.Clone(),
		// clone intermediate query.
		sql:       jerq.sql.Clone(),
		path:      jerq.path,
		modifiers: append([]func(*sql.Selector){}, jerq.modifiers...),
	}
}

// WithJob tells the query-builder to eager-load the nodes that are connected to
// the "job" edge. The optional arguments are used to configure the query builder of the edge.
func (jerq *JobEducationRequirementQuery) WithJob(opts ...func(*JobPositionQuery)) *JobEducationRequirementQuery {
	query := (&JobPositionClient{config: jerq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jerq.withJob = query
	return jerq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.JobEducationRequirement.Query().
//		GroupBy(jobeducationrequirement.FieldDeletedAt).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (jerq *JobEducationRequirementQuery) GroupBy(field string, fields ...string) *JobEducationRequirementGroupBy {
	jerq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &JobEducationRequirementGroupBy{build: jerq}
	grbuild.flds = &jerq.ctx.Fields
	grbuild.label = jobeducationrequirement.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//	}
//
//	client.JobEducationRequirement.Query().
//		Select(jobeducationrequirement.FieldDeletedAt).
//		Scan(ctx, &v)
func (jerq *JobEducationRequirementQuery) Select(fields ...string) *JobEducationRequirementSelect {
	jerq.ctx.Fields = append(jerq.ctx.Fields, fields...)
	sbuild := &JobEducationRequirementSelect{JobEducationRequirementQuery: jerq}
	sbuild.label = jobeducationrequirement.Label
	sbuild.flds, sbuild.scan = &jerq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a JobEducationRequirementSelect configured with the given aggregations.
func (jerq *JobEducationRequirementQuery) Aggregate(fns ...AggregateFunc) *JobEducationRequirementSelect {
	return jerq.Select().Aggregate(fns...)
}

func (jerq *JobEducationRequirementQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range jerq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, jerq); err != nil {
				return err
			}
		}
	}
	for _, f := range jerq.ctx.Fields {
		if !jobeducationrequirement.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if jerq.path != nil {
		prev, err := jerq.path(ctx)
		if err != nil {
			return err
		}
		jerq.sql = prev
	}
	return nil
}

func (jerq *JobEducationRequirementQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*JobEducationRequirement, error) {
	var (
		nodes       = []*JobEducationRequirement{}
		_spec       = jerq.querySpec()
		loadedTypes = [1]bool{
			jerq.withJob != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*JobEducationRequirement).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &JobEducationRequirement{config: jerq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(jerq.modifiers) > 0 {
		_spec.Modifiers = jerq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, jerq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := jerq.withJob; query != nil {
		if err := jerq.loadJob(ctx, query, nodes, nil,
			func(n *JobEducationRequirement, e *JobPosition) { n.Edges.Job = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (jerq *JobEducationRequirementQuery) loadJob(ctx context.Context, query *JobPositionQuery, nodes []*JobEducationRequirement, init func(*JobEducationRequirement), assign func(*JobEducationRequirement, *JobPosition)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*JobEducationRequirement)
	for i := range nodes {
		fk := nodes[i].JobID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(jobposition.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "job_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (jerq *JobEducationRequirementQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jerq.querySpec()
	if len(jerq.modifiers) > 0 {
		_spec.Modifiers = jerq.modifiers
	}
	_spec.Node.Columns = jerq.ctx.Fields
	if len(jerq.ctx.Fields) > 0 {
		_spec.Unique = jerq.ctx.Unique != nil && *jerq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, jerq.driver, _spec)
}

func (jerq *JobEducationRequirementQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(jobeducationrequirement.Table, jobeducationrequirement.Columns, sqlgraph.NewFieldSpec(jobeducationrequirement.FieldID, field.TypeUUID))
	_spec.From = jerq.sql
	if unique := jerq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if jerq.path != nil {
		_spec.Unique = true
	}
	if fields := jerq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobeducationrequirement.FieldID)
		for i := range fields {
			if fields[i] != jobeducationrequirement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if jerq.withJob != nil {
			_spec.Node.AddColumnOnce(jobeducationrequirement.FieldJobID)
		}
	}
	if ps := jerq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jerq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jerq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jerq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jerq *JobEducationRequirementQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(jerq.driver.Dialect())
	t1 := builder.Table(jobeducationrequirement.Table)
	columns := jerq.ctx.Fields
	if len(columns) == 0 {
		columns = jobeducationrequirement.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if jerq.sql != nil {
		selector = jerq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if jerq.ctx.Unique != nil && *jerq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range jerq.modifiers {
		m(selector)
	}
	for _, p := range jerq.predicates {
		p(selector)
	}
	for _, p := range jerq.order {
		p(selector)
	}
	if offset := jerq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jerq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (jerq *JobEducationRequirementQuery) ForUpdate(opts ...sql.LockOption) *JobEducationRequirementQuery {
	if jerq.driver.Dialect() == dialect.Postgres {
		jerq.Unique(false)
	}
	jerq.modifiers = append(jerq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return jerq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (jerq *JobEducationRequirementQuery) ForShare(opts ...sql.LockOption) *JobEducationRequirementQuery {
	if jerq.driver.Dialect() == dialect.Postgres {
		jerq.Unique(false)
	}
	jerq.modifiers = append(jerq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return jerq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (jerq *JobEducationRequirementQuery) Modify(modifiers ...func(s *sql.Selector)) *JobEducationRequirementSelect {
	jerq.modifiers = append(jerq.modifiers, modifiers...)
	return jerq.Select()
}

// JobEducationRequirementGroupBy is the group-by builder for JobEducationRequirement entities.
type JobEducationRequirementGroupBy struct {
	selector
	build *JobEducationRequirementQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jergb *JobEducationRequirementGroupBy) Aggregate(fns ...AggregateFunc) *JobEducationRequirementGroupBy {
	jergb.fns = append(jergb.fns, fns...)
	return jergb
}

// Scan applies the selector query and scans the result into the given value.
func (jergb *JobEducationRequirementGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jergb.build.ctx, ent.OpQueryGroupBy)
	if err := jergb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobEducationRequirementQuery, *JobEducationRequirementGroupBy](ctx, jergb.build, jergb, jergb.build.inters, v)
}

func (jergb *JobEducationRequirementGroupBy) sqlScan(ctx context.Context, root *JobEducationRequirementQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(jergb.fns))
	for _, fn := range jergb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*jergb.flds)+len(jergb.fns))
		for _, f := range *jergb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*jergb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jergb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// JobEducationRequirementSelect is the builder for selecting fields of JobEducationRequirement entities.
type JobEducationRequirementSelect struct {
	*JobEducationRequirementQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (jers *JobEducationRequirementSelect) Aggregate(fns ...AggregateFunc) *JobEducationRequirementSelect {
	jers.fns = append(jers.fns, fns...)
	return jers
}

// Scan applies the selector query and scans the result into the given value.
func (jers *JobEducationRequirementSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jers.ctx, ent.OpQuerySelect)
	if err := jers.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobEducationRequirementQuery, *JobEducationRequirementSelect](ctx, jers.JobEducationRequirementQuery, jers, jers.inters, v)
}

func (jers *JobEducationRequirementSelect) sqlScan(ctx context.Context, root *JobEducationRequirementQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(jers.fns))
	for _, fn := range jers.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*jers.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jers.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (jers *JobEducationRequirementSelect) Modify(modifiers ...func(s *sql.Selector)) *JobEducationRequirementSelect {
	jers.modifiers = append(jers.modifiers, modifiers...)
	return jers
}
