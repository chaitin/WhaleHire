// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resumeeducation"
)

// ResumeEducationDelete is the builder for deleting a ResumeEducation entity.
type ResumeEducationDelete struct {
	config
	hooks    []Hook
	mutation *ResumeEducationMutation
}

// Where appends a list predicates to the ResumeEducationDelete builder.
func (red *ResumeEducationDelete) Where(ps ...predicate.ResumeEducation) *ResumeEducationDelete {
	red.mutation.Where(ps...)
	return red
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (red *ResumeEducationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, red.sqlExec, red.mutation, red.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (red *ResumeEducationDelete) ExecX(ctx context.Context) int {
	n, err := red.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (red *ResumeEducationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(resumeeducation.Table, sqlgraph.NewFieldSpec(resumeeducation.FieldID, field.TypeUUID))
	if ps := red.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, red.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	red.mutation.done = true
	return affected, err
}

// ResumeEducationDeleteOne is the builder for deleting a single ResumeEducation entity.
type ResumeEducationDeleteOne struct {
	red *ResumeEducationDelete
}

// Where appends a list predicates to the ResumeEducationDelete builder.
func (redo *ResumeEducationDeleteOne) Where(ps ...predicate.ResumeEducation) *ResumeEducationDeleteOne {
	redo.red.mutation.Where(ps...)
	return redo
}

// Exec executes the deletion query.
func (redo *ResumeEducationDeleteOne) Exec(ctx context.Context) error {
	n, err := redo.red.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{resumeeducation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (redo *ResumeEducationDeleteOne) ExecX(ctx context.Context) {
	if err := redo.Exec(ctx); err != nil {
		panic(err)
	}
}
