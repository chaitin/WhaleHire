// Code generated by ent, DO NOT EDIT.

package resumemailboxcursor

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldEQ(FieldDeletedAt, v))
}

// MailboxID applies equality check predicate on the "mailbox_id" field. It's identical to MailboxIDEQ.
func MailboxID(v uuid.UUID) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldEQ(FieldMailboxID, v))
}

// ProtocolCursor applies equality check predicate on the "protocol_cursor" field. It's identical to ProtocolCursorEQ.
func ProtocolCursor(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldEQ(FieldProtocolCursor, v))
}

// LastMessageID applies equality check predicate on the "last_message_id" field. It's identical to LastMessageIDEQ.
func LastMessageID(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldEQ(FieldLastMessageID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldNotNull(FieldDeletedAt))
}

// MailboxIDEQ applies the EQ predicate on the "mailbox_id" field.
func MailboxIDEQ(v uuid.UUID) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldEQ(FieldMailboxID, v))
}

// MailboxIDNEQ applies the NEQ predicate on the "mailbox_id" field.
func MailboxIDNEQ(v uuid.UUID) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldNEQ(FieldMailboxID, v))
}

// MailboxIDIn applies the In predicate on the "mailbox_id" field.
func MailboxIDIn(vs ...uuid.UUID) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldIn(FieldMailboxID, vs...))
}

// MailboxIDNotIn applies the NotIn predicate on the "mailbox_id" field.
func MailboxIDNotIn(vs ...uuid.UUID) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldNotIn(FieldMailboxID, vs...))
}

// ProtocolCursorEQ applies the EQ predicate on the "protocol_cursor" field.
func ProtocolCursorEQ(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldEQ(FieldProtocolCursor, v))
}

// ProtocolCursorNEQ applies the NEQ predicate on the "protocol_cursor" field.
func ProtocolCursorNEQ(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldNEQ(FieldProtocolCursor, v))
}

// ProtocolCursorIn applies the In predicate on the "protocol_cursor" field.
func ProtocolCursorIn(vs ...string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldIn(FieldProtocolCursor, vs...))
}

// ProtocolCursorNotIn applies the NotIn predicate on the "protocol_cursor" field.
func ProtocolCursorNotIn(vs ...string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldNotIn(FieldProtocolCursor, vs...))
}

// ProtocolCursorGT applies the GT predicate on the "protocol_cursor" field.
func ProtocolCursorGT(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldGT(FieldProtocolCursor, v))
}

// ProtocolCursorGTE applies the GTE predicate on the "protocol_cursor" field.
func ProtocolCursorGTE(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldGTE(FieldProtocolCursor, v))
}

// ProtocolCursorLT applies the LT predicate on the "protocol_cursor" field.
func ProtocolCursorLT(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldLT(FieldProtocolCursor, v))
}

// ProtocolCursorLTE applies the LTE predicate on the "protocol_cursor" field.
func ProtocolCursorLTE(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldLTE(FieldProtocolCursor, v))
}

// ProtocolCursorContains applies the Contains predicate on the "protocol_cursor" field.
func ProtocolCursorContains(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldContains(FieldProtocolCursor, v))
}

// ProtocolCursorHasPrefix applies the HasPrefix predicate on the "protocol_cursor" field.
func ProtocolCursorHasPrefix(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldHasPrefix(FieldProtocolCursor, v))
}

// ProtocolCursorHasSuffix applies the HasSuffix predicate on the "protocol_cursor" field.
func ProtocolCursorHasSuffix(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldHasSuffix(FieldProtocolCursor, v))
}

// ProtocolCursorEqualFold applies the EqualFold predicate on the "protocol_cursor" field.
func ProtocolCursorEqualFold(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldEqualFold(FieldProtocolCursor, v))
}

// ProtocolCursorContainsFold applies the ContainsFold predicate on the "protocol_cursor" field.
func ProtocolCursorContainsFold(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldContainsFold(FieldProtocolCursor, v))
}

// LastMessageIDEQ applies the EQ predicate on the "last_message_id" field.
func LastMessageIDEQ(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldEQ(FieldLastMessageID, v))
}

// LastMessageIDNEQ applies the NEQ predicate on the "last_message_id" field.
func LastMessageIDNEQ(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldNEQ(FieldLastMessageID, v))
}

// LastMessageIDIn applies the In predicate on the "last_message_id" field.
func LastMessageIDIn(vs ...string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldIn(FieldLastMessageID, vs...))
}

// LastMessageIDNotIn applies the NotIn predicate on the "last_message_id" field.
func LastMessageIDNotIn(vs ...string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldNotIn(FieldLastMessageID, vs...))
}

// LastMessageIDGT applies the GT predicate on the "last_message_id" field.
func LastMessageIDGT(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldGT(FieldLastMessageID, v))
}

// LastMessageIDGTE applies the GTE predicate on the "last_message_id" field.
func LastMessageIDGTE(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldGTE(FieldLastMessageID, v))
}

// LastMessageIDLT applies the LT predicate on the "last_message_id" field.
func LastMessageIDLT(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldLT(FieldLastMessageID, v))
}

// LastMessageIDLTE applies the LTE predicate on the "last_message_id" field.
func LastMessageIDLTE(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldLTE(FieldLastMessageID, v))
}

// LastMessageIDContains applies the Contains predicate on the "last_message_id" field.
func LastMessageIDContains(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldContains(FieldLastMessageID, v))
}

// LastMessageIDHasPrefix applies the HasPrefix predicate on the "last_message_id" field.
func LastMessageIDHasPrefix(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldHasPrefix(FieldLastMessageID, v))
}

// LastMessageIDHasSuffix applies the HasSuffix predicate on the "last_message_id" field.
func LastMessageIDHasSuffix(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldHasSuffix(FieldLastMessageID, v))
}

// LastMessageIDIsNil applies the IsNil predicate on the "last_message_id" field.
func LastMessageIDIsNil() predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldIsNull(FieldLastMessageID))
}

// LastMessageIDNotNil applies the NotNil predicate on the "last_message_id" field.
func LastMessageIDNotNil() predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldNotNull(FieldLastMessageID))
}

// LastMessageIDEqualFold applies the EqualFold predicate on the "last_message_id" field.
func LastMessageIDEqualFold(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldEqualFold(FieldLastMessageID, v))
}

// LastMessageIDContainsFold applies the ContainsFold predicate on the "last_message_id" field.
func LastMessageIDContainsFold(v string) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldContainsFold(FieldLastMessageID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasMailbox applies the HasEdge predicate on the "mailbox" edge.
func HasMailbox() predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MailboxTable, MailboxColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMailboxWith applies the HasEdge predicate on the "mailbox" edge with a given conditions (other predicates).
func HasMailboxWith(preds ...predicate.ResumeMailboxSetting) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(func(s *sql.Selector) {
		step := newMailboxStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ResumeMailboxCursor) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ResumeMailboxCursor) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ResumeMailboxCursor) predicate.ResumeMailboxCursor {
	return predicate.ResumeMailboxCursor(sql.NotPredicates(p))
}
