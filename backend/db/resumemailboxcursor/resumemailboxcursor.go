// Code generated by ent, DO NOT EDIT.

package resumemailboxcursor

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the resumemailboxcursor type in the database.
	Label = "resume_mailbox_cursor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldMailboxID holds the string denoting the mailbox_id field in the database.
	FieldMailboxID = "mailbox_id"
	// FieldProtocolCursor holds the string denoting the protocol_cursor field in the database.
	FieldProtocolCursor = "protocol_cursor"
	// FieldLastMessageID holds the string denoting the last_message_id field in the database.
	FieldLastMessageID = "last_message_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeMailbox holds the string denoting the mailbox edge name in mutations.
	EdgeMailbox = "mailbox"
	// Table holds the table name of the resumemailboxcursor in the database.
	Table = "resume_mailbox_cursors"
	// MailboxTable is the table that holds the mailbox relation/edge.
	MailboxTable = "resume_mailbox_cursors"
	// MailboxInverseTable is the table name for the ResumeMailboxSetting entity.
	// It exists in this package in order to avoid circular dependency with the "resumemailboxsetting" package.
	MailboxInverseTable = "resume_mailbox_settings"
	// MailboxColumn is the table column denoting the mailbox relation/edge.
	MailboxColumn = "mailbox_id"
)

// Columns holds all SQL columns for resumemailboxcursor fields.
var Columns = []string{
	FieldID,
	FieldDeletedAt,
	FieldMailboxID,
	FieldProtocolCursor,
	FieldLastMessageID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/chaitin/WhaleHire/backend/db/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// LastMessageIDValidator is a validator for the "last_message_id" field. It is called by the builders before save.
	LastMessageIDValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ResumeMailboxCursor queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByMailboxID orders the results by the mailbox_id field.
func ByMailboxID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMailboxID, opts...).ToFunc()
}

// ByProtocolCursor orders the results by the protocol_cursor field.
func ByProtocolCursor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProtocolCursor, opts...).ToFunc()
}

// ByLastMessageID orders the results by the last_message_id field.
func ByLastMessageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastMessageID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByMailboxField orders the results by mailbox field.
func ByMailboxField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMailboxStep(), sql.OrderByField(field, opts...))
	}
}
func newMailboxStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MailboxInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MailboxTable, MailboxColumn),
	)
}
