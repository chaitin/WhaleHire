// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumedocumentparse"
	"github.com/google/uuid"
)

// ResumeDocumentParseUpdate is the builder for updating ResumeDocumentParse entities.
type ResumeDocumentParseUpdate struct {
	config
	hooks     []Hook
	mutation  *ResumeDocumentParseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ResumeDocumentParseUpdate builder.
func (rdpu *ResumeDocumentParseUpdate) Where(ps ...predicate.ResumeDocumentParse) *ResumeDocumentParseUpdate {
	rdpu.mutation.Where(ps...)
	return rdpu
}

// SetDeletedAt sets the "deleted_at" field.
func (rdpu *ResumeDocumentParseUpdate) SetDeletedAt(t time.Time) *ResumeDocumentParseUpdate {
	rdpu.mutation.SetDeletedAt(t)
	return rdpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rdpu *ResumeDocumentParseUpdate) SetNillableDeletedAt(t *time.Time) *ResumeDocumentParseUpdate {
	if t != nil {
		rdpu.SetDeletedAt(*t)
	}
	return rdpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rdpu *ResumeDocumentParseUpdate) ClearDeletedAt() *ResumeDocumentParseUpdate {
	rdpu.mutation.ClearDeletedAt()
	return rdpu
}

// SetResumeID sets the "resume_id" field.
func (rdpu *ResumeDocumentParseUpdate) SetResumeID(u uuid.UUID) *ResumeDocumentParseUpdate {
	rdpu.mutation.SetResumeID(u)
	return rdpu
}

// SetNillableResumeID sets the "resume_id" field if the given value is not nil.
func (rdpu *ResumeDocumentParseUpdate) SetNillableResumeID(u *uuid.UUID) *ResumeDocumentParseUpdate {
	if u != nil {
		rdpu.SetResumeID(*u)
	}
	return rdpu
}

// SetFileID sets the "file_id" field.
func (rdpu *ResumeDocumentParseUpdate) SetFileID(s string) *ResumeDocumentParseUpdate {
	rdpu.mutation.SetFileID(s)
	return rdpu
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (rdpu *ResumeDocumentParseUpdate) SetNillableFileID(s *string) *ResumeDocumentParseUpdate {
	if s != nil {
		rdpu.SetFileID(*s)
	}
	return rdpu
}

// ClearFileID clears the value of the "file_id" field.
func (rdpu *ResumeDocumentParseUpdate) ClearFileID() *ResumeDocumentParseUpdate {
	rdpu.mutation.ClearFileID()
	return rdpu
}

// SetContent sets the "content" field.
func (rdpu *ResumeDocumentParseUpdate) SetContent(s string) *ResumeDocumentParseUpdate {
	rdpu.mutation.SetContent(s)
	return rdpu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (rdpu *ResumeDocumentParseUpdate) SetNillableContent(s *string) *ResumeDocumentParseUpdate {
	if s != nil {
		rdpu.SetContent(*s)
	}
	return rdpu
}

// ClearContent clears the value of the "content" field.
func (rdpu *ResumeDocumentParseUpdate) ClearContent() *ResumeDocumentParseUpdate {
	rdpu.mutation.ClearContent()
	return rdpu
}

// SetFileType sets the "file_type" field.
func (rdpu *ResumeDocumentParseUpdate) SetFileType(s string) *ResumeDocumentParseUpdate {
	rdpu.mutation.SetFileType(s)
	return rdpu
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (rdpu *ResumeDocumentParseUpdate) SetNillableFileType(s *string) *ResumeDocumentParseUpdate {
	if s != nil {
		rdpu.SetFileType(*s)
	}
	return rdpu
}

// ClearFileType clears the value of the "file_type" field.
func (rdpu *ResumeDocumentParseUpdate) ClearFileType() *ResumeDocumentParseUpdate {
	rdpu.mutation.ClearFileType()
	return rdpu
}

// SetFilename sets the "filename" field.
func (rdpu *ResumeDocumentParseUpdate) SetFilename(s string) *ResumeDocumentParseUpdate {
	rdpu.mutation.SetFilename(s)
	return rdpu
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (rdpu *ResumeDocumentParseUpdate) SetNillableFilename(s *string) *ResumeDocumentParseUpdate {
	if s != nil {
		rdpu.SetFilename(*s)
	}
	return rdpu
}

// ClearFilename clears the value of the "filename" field.
func (rdpu *ResumeDocumentParseUpdate) ClearFilename() *ResumeDocumentParseUpdate {
	rdpu.mutation.ClearFilename()
	return rdpu
}

// SetTitle sets the "title" field.
func (rdpu *ResumeDocumentParseUpdate) SetTitle(s string) *ResumeDocumentParseUpdate {
	rdpu.mutation.SetTitle(s)
	return rdpu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (rdpu *ResumeDocumentParseUpdate) SetNillableTitle(s *string) *ResumeDocumentParseUpdate {
	if s != nil {
		rdpu.SetTitle(*s)
	}
	return rdpu
}

// ClearTitle clears the value of the "title" field.
func (rdpu *ResumeDocumentParseUpdate) ClearTitle() *ResumeDocumentParseUpdate {
	rdpu.mutation.ClearTitle()
	return rdpu
}

// SetUploadAt sets the "upload_at" field.
func (rdpu *ResumeDocumentParseUpdate) SetUploadAt(t time.Time) *ResumeDocumentParseUpdate {
	rdpu.mutation.SetUploadAt(t)
	return rdpu
}

// SetNillableUploadAt sets the "upload_at" field if the given value is not nil.
func (rdpu *ResumeDocumentParseUpdate) SetNillableUploadAt(t *time.Time) *ResumeDocumentParseUpdate {
	if t != nil {
		rdpu.SetUploadAt(*t)
	}
	return rdpu
}

// ClearUploadAt clears the value of the "upload_at" field.
func (rdpu *ResumeDocumentParseUpdate) ClearUploadAt() *ResumeDocumentParseUpdate {
	rdpu.mutation.ClearUploadAt()
	return rdpu
}

// SetStatus sets the "status" field.
func (rdpu *ResumeDocumentParseUpdate) SetStatus(s string) *ResumeDocumentParseUpdate {
	rdpu.mutation.SetStatus(s)
	return rdpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rdpu *ResumeDocumentParseUpdate) SetNillableStatus(s *string) *ResumeDocumentParseUpdate {
	if s != nil {
		rdpu.SetStatus(*s)
	}
	return rdpu
}

// SetErrorMessage sets the "error_message" field.
func (rdpu *ResumeDocumentParseUpdate) SetErrorMessage(s string) *ResumeDocumentParseUpdate {
	rdpu.mutation.SetErrorMessage(s)
	return rdpu
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (rdpu *ResumeDocumentParseUpdate) SetNillableErrorMessage(s *string) *ResumeDocumentParseUpdate {
	if s != nil {
		rdpu.SetErrorMessage(*s)
	}
	return rdpu
}

// ClearErrorMessage clears the value of the "error_message" field.
func (rdpu *ResumeDocumentParseUpdate) ClearErrorMessage() *ResumeDocumentParseUpdate {
	rdpu.mutation.ClearErrorMessage()
	return rdpu
}

// SetCreatedAt sets the "created_at" field.
func (rdpu *ResumeDocumentParseUpdate) SetCreatedAt(t time.Time) *ResumeDocumentParseUpdate {
	rdpu.mutation.SetCreatedAt(t)
	return rdpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rdpu *ResumeDocumentParseUpdate) SetNillableCreatedAt(t *time.Time) *ResumeDocumentParseUpdate {
	if t != nil {
		rdpu.SetCreatedAt(*t)
	}
	return rdpu
}

// SetUpdatedAt sets the "updated_at" field.
func (rdpu *ResumeDocumentParseUpdate) SetUpdatedAt(t time.Time) *ResumeDocumentParseUpdate {
	rdpu.mutation.SetUpdatedAt(t)
	return rdpu
}

// SetResume sets the "resume" edge to the Resume entity.
func (rdpu *ResumeDocumentParseUpdate) SetResume(r *Resume) *ResumeDocumentParseUpdate {
	return rdpu.SetResumeID(r.ID)
}

// Mutation returns the ResumeDocumentParseMutation object of the builder.
func (rdpu *ResumeDocumentParseUpdate) Mutation() *ResumeDocumentParseMutation {
	return rdpu.mutation
}

// ClearResume clears the "resume" edge to the Resume entity.
func (rdpu *ResumeDocumentParseUpdate) ClearResume() *ResumeDocumentParseUpdate {
	rdpu.mutation.ClearResume()
	return rdpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rdpu *ResumeDocumentParseUpdate) Save(ctx context.Context) (int, error) {
	if err := rdpu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, rdpu.sqlSave, rdpu.mutation, rdpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdpu *ResumeDocumentParseUpdate) SaveX(ctx context.Context) int {
	affected, err := rdpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rdpu *ResumeDocumentParseUpdate) Exec(ctx context.Context) error {
	_, err := rdpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdpu *ResumeDocumentParseUpdate) ExecX(ctx context.Context) {
	if err := rdpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rdpu *ResumeDocumentParseUpdate) defaults() error {
	if _, ok := rdpu.mutation.UpdatedAt(); !ok {
		if resumedocumentparse.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumedocumentparse.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumedocumentparse.UpdateDefaultUpdatedAt()
		rdpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rdpu *ResumeDocumentParseUpdate) check() error {
	if rdpu.mutation.ResumeCleared() && len(rdpu.mutation.ResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeDocumentParse.resume"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rdpu *ResumeDocumentParseUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeDocumentParseUpdate {
	rdpu.modifiers = append(rdpu.modifiers, modifiers...)
	return rdpu
}

func (rdpu *ResumeDocumentParseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rdpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumedocumentparse.Table, resumedocumentparse.Columns, sqlgraph.NewFieldSpec(resumedocumentparse.FieldID, field.TypeUUID))
	if ps := rdpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdpu.mutation.DeletedAt(); ok {
		_spec.SetField(resumedocumentparse.FieldDeletedAt, field.TypeTime, value)
	}
	if rdpu.mutation.DeletedAtCleared() {
		_spec.ClearField(resumedocumentparse.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rdpu.mutation.FileID(); ok {
		_spec.SetField(resumedocumentparse.FieldFileID, field.TypeString, value)
	}
	if rdpu.mutation.FileIDCleared() {
		_spec.ClearField(resumedocumentparse.FieldFileID, field.TypeString)
	}
	if value, ok := rdpu.mutation.Content(); ok {
		_spec.SetField(resumedocumentparse.FieldContent, field.TypeString, value)
	}
	if rdpu.mutation.ContentCleared() {
		_spec.ClearField(resumedocumentparse.FieldContent, field.TypeString)
	}
	if value, ok := rdpu.mutation.FileType(); ok {
		_spec.SetField(resumedocumentparse.FieldFileType, field.TypeString, value)
	}
	if rdpu.mutation.FileTypeCleared() {
		_spec.ClearField(resumedocumentparse.FieldFileType, field.TypeString)
	}
	if value, ok := rdpu.mutation.Filename(); ok {
		_spec.SetField(resumedocumentparse.FieldFilename, field.TypeString, value)
	}
	if rdpu.mutation.FilenameCleared() {
		_spec.ClearField(resumedocumentparse.FieldFilename, field.TypeString)
	}
	if value, ok := rdpu.mutation.Title(); ok {
		_spec.SetField(resumedocumentparse.FieldTitle, field.TypeString, value)
	}
	if rdpu.mutation.TitleCleared() {
		_spec.ClearField(resumedocumentparse.FieldTitle, field.TypeString)
	}
	if value, ok := rdpu.mutation.UploadAt(); ok {
		_spec.SetField(resumedocumentparse.FieldUploadAt, field.TypeTime, value)
	}
	if rdpu.mutation.UploadAtCleared() {
		_spec.ClearField(resumedocumentparse.FieldUploadAt, field.TypeTime)
	}
	if value, ok := rdpu.mutation.Status(); ok {
		_spec.SetField(resumedocumentparse.FieldStatus, field.TypeString, value)
	}
	if value, ok := rdpu.mutation.ErrorMessage(); ok {
		_spec.SetField(resumedocumentparse.FieldErrorMessage, field.TypeString, value)
	}
	if rdpu.mutation.ErrorMessageCleared() {
		_spec.ClearField(resumedocumentparse.FieldErrorMessage, field.TypeString)
	}
	if value, ok := rdpu.mutation.CreatedAt(); ok {
		_spec.SetField(resumedocumentparse.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rdpu.mutation.UpdatedAt(); ok {
		_spec.SetField(resumedocumentparse.FieldUpdatedAt, field.TypeTime, value)
	}
	if rdpu.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumedocumentparse.ResumeTable,
			Columns: []string{resumedocumentparse.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdpu.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumedocumentparse.ResumeTable,
			Columns: []string{resumedocumentparse.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rdpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rdpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumedocumentparse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rdpu.mutation.done = true
	return n, nil
}

// ResumeDocumentParseUpdateOne is the builder for updating a single ResumeDocumentParse entity.
type ResumeDocumentParseUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ResumeDocumentParseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (rdpuo *ResumeDocumentParseUpdateOne) SetDeletedAt(t time.Time) *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.SetDeletedAt(t)
	return rdpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rdpuo *ResumeDocumentParseUpdateOne) SetNillableDeletedAt(t *time.Time) *ResumeDocumentParseUpdateOne {
	if t != nil {
		rdpuo.SetDeletedAt(*t)
	}
	return rdpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rdpuo *ResumeDocumentParseUpdateOne) ClearDeletedAt() *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.ClearDeletedAt()
	return rdpuo
}

// SetResumeID sets the "resume_id" field.
func (rdpuo *ResumeDocumentParseUpdateOne) SetResumeID(u uuid.UUID) *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.SetResumeID(u)
	return rdpuo
}

// SetNillableResumeID sets the "resume_id" field if the given value is not nil.
func (rdpuo *ResumeDocumentParseUpdateOne) SetNillableResumeID(u *uuid.UUID) *ResumeDocumentParseUpdateOne {
	if u != nil {
		rdpuo.SetResumeID(*u)
	}
	return rdpuo
}

// SetFileID sets the "file_id" field.
func (rdpuo *ResumeDocumentParseUpdateOne) SetFileID(s string) *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.SetFileID(s)
	return rdpuo
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (rdpuo *ResumeDocumentParseUpdateOne) SetNillableFileID(s *string) *ResumeDocumentParseUpdateOne {
	if s != nil {
		rdpuo.SetFileID(*s)
	}
	return rdpuo
}

// ClearFileID clears the value of the "file_id" field.
func (rdpuo *ResumeDocumentParseUpdateOne) ClearFileID() *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.ClearFileID()
	return rdpuo
}

// SetContent sets the "content" field.
func (rdpuo *ResumeDocumentParseUpdateOne) SetContent(s string) *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.SetContent(s)
	return rdpuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (rdpuo *ResumeDocumentParseUpdateOne) SetNillableContent(s *string) *ResumeDocumentParseUpdateOne {
	if s != nil {
		rdpuo.SetContent(*s)
	}
	return rdpuo
}

// ClearContent clears the value of the "content" field.
func (rdpuo *ResumeDocumentParseUpdateOne) ClearContent() *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.ClearContent()
	return rdpuo
}

// SetFileType sets the "file_type" field.
func (rdpuo *ResumeDocumentParseUpdateOne) SetFileType(s string) *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.SetFileType(s)
	return rdpuo
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (rdpuo *ResumeDocumentParseUpdateOne) SetNillableFileType(s *string) *ResumeDocumentParseUpdateOne {
	if s != nil {
		rdpuo.SetFileType(*s)
	}
	return rdpuo
}

// ClearFileType clears the value of the "file_type" field.
func (rdpuo *ResumeDocumentParseUpdateOne) ClearFileType() *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.ClearFileType()
	return rdpuo
}

// SetFilename sets the "filename" field.
func (rdpuo *ResumeDocumentParseUpdateOne) SetFilename(s string) *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.SetFilename(s)
	return rdpuo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (rdpuo *ResumeDocumentParseUpdateOne) SetNillableFilename(s *string) *ResumeDocumentParseUpdateOne {
	if s != nil {
		rdpuo.SetFilename(*s)
	}
	return rdpuo
}

// ClearFilename clears the value of the "filename" field.
func (rdpuo *ResumeDocumentParseUpdateOne) ClearFilename() *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.ClearFilename()
	return rdpuo
}

// SetTitle sets the "title" field.
func (rdpuo *ResumeDocumentParseUpdateOne) SetTitle(s string) *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.SetTitle(s)
	return rdpuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (rdpuo *ResumeDocumentParseUpdateOne) SetNillableTitle(s *string) *ResumeDocumentParseUpdateOne {
	if s != nil {
		rdpuo.SetTitle(*s)
	}
	return rdpuo
}

// ClearTitle clears the value of the "title" field.
func (rdpuo *ResumeDocumentParseUpdateOne) ClearTitle() *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.ClearTitle()
	return rdpuo
}

// SetUploadAt sets the "upload_at" field.
func (rdpuo *ResumeDocumentParseUpdateOne) SetUploadAt(t time.Time) *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.SetUploadAt(t)
	return rdpuo
}

// SetNillableUploadAt sets the "upload_at" field if the given value is not nil.
func (rdpuo *ResumeDocumentParseUpdateOne) SetNillableUploadAt(t *time.Time) *ResumeDocumentParseUpdateOne {
	if t != nil {
		rdpuo.SetUploadAt(*t)
	}
	return rdpuo
}

// ClearUploadAt clears the value of the "upload_at" field.
func (rdpuo *ResumeDocumentParseUpdateOne) ClearUploadAt() *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.ClearUploadAt()
	return rdpuo
}

// SetStatus sets the "status" field.
func (rdpuo *ResumeDocumentParseUpdateOne) SetStatus(s string) *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.SetStatus(s)
	return rdpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rdpuo *ResumeDocumentParseUpdateOne) SetNillableStatus(s *string) *ResumeDocumentParseUpdateOne {
	if s != nil {
		rdpuo.SetStatus(*s)
	}
	return rdpuo
}

// SetErrorMessage sets the "error_message" field.
func (rdpuo *ResumeDocumentParseUpdateOne) SetErrorMessage(s string) *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.SetErrorMessage(s)
	return rdpuo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (rdpuo *ResumeDocumentParseUpdateOne) SetNillableErrorMessage(s *string) *ResumeDocumentParseUpdateOne {
	if s != nil {
		rdpuo.SetErrorMessage(*s)
	}
	return rdpuo
}

// ClearErrorMessage clears the value of the "error_message" field.
func (rdpuo *ResumeDocumentParseUpdateOne) ClearErrorMessage() *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.ClearErrorMessage()
	return rdpuo
}

// SetCreatedAt sets the "created_at" field.
func (rdpuo *ResumeDocumentParseUpdateOne) SetCreatedAt(t time.Time) *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.SetCreatedAt(t)
	return rdpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rdpuo *ResumeDocumentParseUpdateOne) SetNillableCreatedAt(t *time.Time) *ResumeDocumentParseUpdateOne {
	if t != nil {
		rdpuo.SetCreatedAt(*t)
	}
	return rdpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rdpuo *ResumeDocumentParseUpdateOne) SetUpdatedAt(t time.Time) *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.SetUpdatedAt(t)
	return rdpuo
}

// SetResume sets the "resume" edge to the Resume entity.
func (rdpuo *ResumeDocumentParseUpdateOne) SetResume(r *Resume) *ResumeDocumentParseUpdateOne {
	return rdpuo.SetResumeID(r.ID)
}

// Mutation returns the ResumeDocumentParseMutation object of the builder.
func (rdpuo *ResumeDocumentParseUpdateOne) Mutation() *ResumeDocumentParseMutation {
	return rdpuo.mutation
}

// ClearResume clears the "resume" edge to the Resume entity.
func (rdpuo *ResumeDocumentParseUpdateOne) ClearResume() *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.ClearResume()
	return rdpuo
}

// Where appends a list predicates to the ResumeDocumentParseUpdate builder.
func (rdpuo *ResumeDocumentParseUpdateOne) Where(ps ...predicate.ResumeDocumentParse) *ResumeDocumentParseUpdateOne {
	rdpuo.mutation.Where(ps...)
	return rdpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rdpuo *ResumeDocumentParseUpdateOne) Select(field string, fields ...string) *ResumeDocumentParseUpdateOne {
	rdpuo.fields = append([]string{field}, fields...)
	return rdpuo
}

// Save executes the query and returns the updated ResumeDocumentParse entity.
func (rdpuo *ResumeDocumentParseUpdateOne) Save(ctx context.Context) (*ResumeDocumentParse, error) {
	if err := rdpuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rdpuo.sqlSave, rdpuo.mutation, rdpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdpuo *ResumeDocumentParseUpdateOne) SaveX(ctx context.Context) *ResumeDocumentParse {
	node, err := rdpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rdpuo *ResumeDocumentParseUpdateOne) Exec(ctx context.Context) error {
	_, err := rdpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdpuo *ResumeDocumentParseUpdateOne) ExecX(ctx context.Context) {
	if err := rdpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rdpuo *ResumeDocumentParseUpdateOne) defaults() error {
	if _, ok := rdpuo.mutation.UpdatedAt(); !ok {
		if resumedocumentparse.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumedocumentparse.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumedocumentparse.UpdateDefaultUpdatedAt()
		rdpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rdpuo *ResumeDocumentParseUpdateOne) check() error {
	if rdpuo.mutation.ResumeCleared() && len(rdpuo.mutation.ResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeDocumentParse.resume"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rdpuo *ResumeDocumentParseUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeDocumentParseUpdateOne {
	rdpuo.modifiers = append(rdpuo.modifiers, modifiers...)
	return rdpuo
}

func (rdpuo *ResumeDocumentParseUpdateOne) sqlSave(ctx context.Context) (_node *ResumeDocumentParse, err error) {
	if err := rdpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumedocumentparse.Table, resumedocumentparse.Columns, sqlgraph.NewFieldSpec(resumedocumentparse.FieldID, field.TypeUUID))
	id, ok := rdpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ResumeDocumentParse.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rdpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resumedocumentparse.FieldID)
		for _, f := range fields {
			if !resumedocumentparse.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != resumedocumentparse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rdpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdpuo.mutation.DeletedAt(); ok {
		_spec.SetField(resumedocumentparse.FieldDeletedAt, field.TypeTime, value)
	}
	if rdpuo.mutation.DeletedAtCleared() {
		_spec.ClearField(resumedocumentparse.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rdpuo.mutation.FileID(); ok {
		_spec.SetField(resumedocumentparse.FieldFileID, field.TypeString, value)
	}
	if rdpuo.mutation.FileIDCleared() {
		_spec.ClearField(resumedocumentparse.FieldFileID, field.TypeString)
	}
	if value, ok := rdpuo.mutation.Content(); ok {
		_spec.SetField(resumedocumentparse.FieldContent, field.TypeString, value)
	}
	if rdpuo.mutation.ContentCleared() {
		_spec.ClearField(resumedocumentparse.FieldContent, field.TypeString)
	}
	if value, ok := rdpuo.mutation.FileType(); ok {
		_spec.SetField(resumedocumentparse.FieldFileType, field.TypeString, value)
	}
	if rdpuo.mutation.FileTypeCleared() {
		_spec.ClearField(resumedocumentparse.FieldFileType, field.TypeString)
	}
	if value, ok := rdpuo.mutation.Filename(); ok {
		_spec.SetField(resumedocumentparse.FieldFilename, field.TypeString, value)
	}
	if rdpuo.mutation.FilenameCleared() {
		_spec.ClearField(resumedocumentparse.FieldFilename, field.TypeString)
	}
	if value, ok := rdpuo.mutation.Title(); ok {
		_spec.SetField(resumedocumentparse.FieldTitle, field.TypeString, value)
	}
	if rdpuo.mutation.TitleCleared() {
		_spec.ClearField(resumedocumentparse.FieldTitle, field.TypeString)
	}
	if value, ok := rdpuo.mutation.UploadAt(); ok {
		_spec.SetField(resumedocumentparse.FieldUploadAt, field.TypeTime, value)
	}
	if rdpuo.mutation.UploadAtCleared() {
		_spec.ClearField(resumedocumentparse.FieldUploadAt, field.TypeTime)
	}
	if value, ok := rdpuo.mutation.Status(); ok {
		_spec.SetField(resumedocumentparse.FieldStatus, field.TypeString, value)
	}
	if value, ok := rdpuo.mutation.ErrorMessage(); ok {
		_spec.SetField(resumedocumentparse.FieldErrorMessage, field.TypeString, value)
	}
	if rdpuo.mutation.ErrorMessageCleared() {
		_spec.ClearField(resumedocumentparse.FieldErrorMessage, field.TypeString)
	}
	if value, ok := rdpuo.mutation.CreatedAt(); ok {
		_spec.SetField(resumedocumentparse.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rdpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(resumedocumentparse.FieldUpdatedAt, field.TypeTime, value)
	}
	if rdpuo.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumedocumentparse.ResumeTable,
			Columns: []string{resumedocumentparse.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdpuo.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumedocumentparse.ResumeTable,
			Columns: []string{resumedocumentparse.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rdpuo.modifiers...)
	_node = &ResumeDocumentParse{config: rdpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rdpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumedocumentparse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rdpuo.mutation.done = true
	return _node, nil
}
