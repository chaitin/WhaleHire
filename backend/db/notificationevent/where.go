// Code generated by ent, DO NOT EDIT.

package notificationevent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldDeletedAt, v))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v consts.NotificationEventType) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldEQ(FieldEventType, vc))
}

// Channel applies equality check predicate on the "channel" field. It's identical to ChannelEQ.
func Channel(v consts.NotificationChannel) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldEQ(FieldChannel, vc))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v consts.NotificationStatus) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldEQ(FieldStatus, vc))
}

// TemplateID applies equality check predicate on the "template_id" field. It's identical to TemplateIDEQ.
func TemplateID(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldTemplateID, v))
}

// Target applies equality check predicate on the "target" field. It's identical to TargetEQ.
func Target(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldTarget, v))
}

// RetryCount applies equality check predicate on the "retry_count" field. It's identical to RetryCountEQ.
func RetryCount(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldRetryCount, v))
}

// MaxRetry applies equality check predicate on the "max_retry" field. It's identical to MaxRetryEQ.
func MaxRetry(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldMaxRetry, v))
}

// Timeout applies equality check predicate on the "timeout" field. It's identical to TimeoutEQ.
func Timeout(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldTimeout, v))
}

// LastError applies equality check predicate on the "last_error" field. It's identical to LastErrorEQ.
func LastError(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldLastError, v))
}

// TraceID applies equality check predicate on the "trace_id" field. It's identical to TraceIDEQ.
func TraceID(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldTraceID, v))
}

// ScheduledAt applies equality check predicate on the "scheduled_at" field. It's identical to ScheduledAtEQ.
func ScheduledAt(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldScheduledAt, v))
}

// DeliveredAt applies equality check predicate on the "delivered_at" field. It's identical to DeliveredAtEQ.
func DeliveredAt(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldDeliveredAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotNull(FieldDeletedAt))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v consts.NotificationEventType) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldEQ(FieldEventType, vc))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v consts.NotificationEventType) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldNEQ(FieldEventType, vc))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...consts.NotificationEventType) predicate.NotificationEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.NotificationEvent(sql.FieldIn(FieldEventType, v...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...consts.NotificationEventType) predicate.NotificationEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.NotificationEvent(sql.FieldNotIn(FieldEventType, v...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v consts.NotificationEventType) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldGT(FieldEventType, vc))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v consts.NotificationEventType) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldGTE(FieldEventType, vc))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v consts.NotificationEventType) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldLT(FieldEventType, vc))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v consts.NotificationEventType) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldLTE(FieldEventType, vc))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v consts.NotificationEventType) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldContains(FieldEventType, vc))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v consts.NotificationEventType) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldHasPrefix(FieldEventType, vc))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v consts.NotificationEventType) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldHasSuffix(FieldEventType, vc))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v consts.NotificationEventType) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldEqualFold(FieldEventType, vc))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v consts.NotificationEventType) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldContainsFold(FieldEventType, vc))
}

// ChannelEQ applies the EQ predicate on the "channel" field.
func ChannelEQ(v consts.NotificationChannel) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldEQ(FieldChannel, vc))
}

// ChannelNEQ applies the NEQ predicate on the "channel" field.
func ChannelNEQ(v consts.NotificationChannel) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldNEQ(FieldChannel, vc))
}

// ChannelIn applies the In predicate on the "channel" field.
func ChannelIn(vs ...consts.NotificationChannel) predicate.NotificationEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.NotificationEvent(sql.FieldIn(FieldChannel, v...))
}

// ChannelNotIn applies the NotIn predicate on the "channel" field.
func ChannelNotIn(vs ...consts.NotificationChannel) predicate.NotificationEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.NotificationEvent(sql.FieldNotIn(FieldChannel, v...))
}

// ChannelGT applies the GT predicate on the "channel" field.
func ChannelGT(v consts.NotificationChannel) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldGT(FieldChannel, vc))
}

// ChannelGTE applies the GTE predicate on the "channel" field.
func ChannelGTE(v consts.NotificationChannel) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldGTE(FieldChannel, vc))
}

// ChannelLT applies the LT predicate on the "channel" field.
func ChannelLT(v consts.NotificationChannel) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldLT(FieldChannel, vc))
}

// ChannelLTE applies the LTE predicate on the "channel" field.
func ChannelLTE(v consts.NotificationChannel) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldLTE(FieldChannel, vc))
}

// ChannelContains applies the Contains predicate on the "channel" field.
func ChannelContains(v consts.NotificationChannel) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldContains(FieldChannel, vc))
}

// ChannelHasPrefix applies the HasPrefix predicate on the "channel" field.
func ChannelHasPrefix(v consts.NotificationChannel) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldHasPrefix(FieldChannel, vc))
}

// ChannelHasSuffix applies the HasSuffix predicate on the "channel" field.
func ChannelHasSuffix(v consts.NotificationChannel) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldHasSuffix(FieldChannel, vc))
}

// ChannelEqualFold applies the EqualFold predicate on the "channel" field.
func ChannelEqualFold(v consts.NotificationChannel) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldEqualFold(FieldChannel, vc))
}

// ChannelContainsFold applies the ContainsFold predicate on the "channel" field.
func ChannelContainsFold(v consts.NotificationChannel) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldContainsFold(FieldChannel, vc))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v consts.NotificationStatus) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v consts.NotificationStatus) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...consts.NotificationStatus) predicate.NotificationEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.NotificationEvent(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...consts.NotificationStatus) predicate.NotificationEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.NotificationEvent(sql.FieldNotIn(FieldStatus, v...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v consts.NotificationStatus) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldGT(FieldStatus, vc))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v consts.NotificationStatus) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldGTE(FieldStatus, vc))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v consts.NotificationStatus) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldLT(FieldStatus, vc))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v consts.NotificationStatus) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldLTE(FieldStatus, vc))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v consts.NotificationStatus) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldContains(FieldStatus, vc))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v consts.NotificationStatus) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldHasPrefix(FieldStatus, vc))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v consts.NotificationStatus) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldHasSuffix(FieldStatus, vc))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v consts.NotificationStatus) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldEqualFold(FieldStatus, vc))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v consts.NotificationStatus) predicate.NotificationEvent {
	vc := string(v)
	return predicate.NotificationEvent(sql.FieldContainsFold(FieldStatus, vc))
}

// TemplateIDEQ applies the EQ predicate on the "template_id" field.
func TemplateIDEQ(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldTemplateID, v))
}

// TemplateIDNEQ applies the NEQ predicate on the "template_id" field.
func TemplateIDNEQ(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldTemplateID, v))
}

// TemplateIDIn applies the In predicate on the "template_id" field.
func TemplateIDIn(vs ...string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldTemplateID, vs...))
}

// TemplateIDNotIn applies the NotIn predicate on the "template_id" field.
func TemplateIDNotIn(vs ...string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldTemplateID, vs...))
}

// TemplateIDGT applies the GT predicate on the "template_id" field.
func TemplateIDGT(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldTemplateID, v))
}

// TemplateIDGTE applies the GTE predicate on the "template_id" field.
func TemplateIDGTE(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldTemplateID, v))
}

// TemplateIDLT applies the LT predicate on the "template_id" field.
func TemplateIDLT(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldTemplateID, v))
}

// TemplateIDLTE applies the LTE predicate on the "template_id" field.
func TemplateIDLTE(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldTemplateID, v))
}

// TemplateIDContains applies the Contains predicate on the "template_id" field.
func TemplateIDContains(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldContains(FieldTemplateID, v))
}

// TemplateIDHasPrefix applies the HasPrefix predicate on the "template_id" field.
func TemplateIDHasPrefix(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldHasPrefix(FieldTemplateID, v))
}

// TemplateIDHasSuffix applies the HasSuffix predicate on the "template_id" field.
func TemplateIDHasSuffix(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldHasSuffix(FieldTemplateID, v))
}

// TemplateIDEqualFold applies the EqualFold predicate on the "template_id" field.
func TemplateIDEqualFold(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEqualFold(FieldTemplateID, v))
}

// TemplateIDContainsFold applies the ContainsFold predicate on the "template_id" field.
func TemplateIDContainsFold(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldContainsFold(FieldTemplateID, v))
}

// TargetEQ applies the EQ predicate on the "target" field.
func TargetEQ(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldTarget, v))
}

// TargetNEQ applies the NEQ predicate on the "target" field.
func TargetNEQ(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldTarget, v))
}

// TargetIn applies the In predicate on the "target" field.
func TargetIn(vs ...string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldTarget, vs...))
}

// TargetNotIn applies the NotIn predicate on the "target" field.
func TargetNotIn(vs ...string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldTarget, vs...))
}

// TargetGT applies the GT predicate on the "target" field.
func TargetGT(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldTarget, v))
}

// TargetGTE applies the GTE predicate on the "target" field.
func TargetGTE(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldTarget, v))
}

// TargetLT applies the LT predicate on the "target" field.
func TargetLT(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldTarget, v))
}

// TargetLTE applies the LTE predicate on the "target" field.
func TargetLTE(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldTarget, v))
}

// TargetContains applies the Contains predicate on the "target" field.
func TargetContains(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldContains(FieldTarget, v))
}

// TargetHasPrefix applies the HasPrefix predicate on the "target" field.
func TargetHasPrefix(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldHasPrefix(FieldTarget, v))
}

// TargetHasSuffix applies the HasSuffix predicate on the "target" field.
func TargetHasSuffix(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldHasSuffix(FieldTarget, v))
}

// TargetEqualFold applies the EqualFold predicate on the "target" field.
func TargetEqualFold(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEqualFold(FieldTarget, v))
}

// TargetContainsFold applies the ContainsFold predicate on the "target" field.
func TargetContainsFold(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldContainsFold(FieldTarget, v))
}

// RetryCountEQ applies the EQ predicate on the "retry_count" field.
func RetryCountEQ(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldRetryCount, v))
}

// RetryCountNEQ applies the NEQ predicate on the "retry_count" field.
func RetryCountNEQ(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldRetryCount, v))
}

// RetryCountIn applies the In predicate on the "retry_count" field.
func RetryCountIn(vs ...int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldRetryCount, vs...))
}

// RetryCountNotIn applies the NotIn predicate on the "retry_count" field.
func RetryCountNotIn(vs ...int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldRetryCount, vs...))
}

// RetryCountGT applies the GT predicate on the "retry_count" field.
func RetryCountGT(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldRetryCount, v))
}

// RetryCountGTE applies the GTE predicate on the "retry_count" field.
func RetryCountGTE(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldRetryCount, v))
}

// RetryCountLT applies the LT predicate on the "retry_count" field.
func RetryCountLT(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldRetryCount, v))
}

// RetryCountLTE applies the LTE predicate on the "retry_count" field.
func RetryCountLTE(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldRetryCount, v))
}

// MaxRetryEQ applies the EQ predicate on the "max_retry" field.
func MaxRetryEQ(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldMaxRetry, v))
}

// MaxRetryNEQ applies the NEQ predicate on the "max_retry" field.
func MaxRetryNEQ(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldMaxRetry, v))
}

// MaxRetryIn applies the In predicate on the "max_retry" field.
func MaxRetryIn(vs ...int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldMaxRetry, vs...))
}

// MaxRetryNotIn applies the NotIn predicate on the "max_retry" field.
func MaxRetryNotIn(vs ...int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldMaxRetry, vs...))
}

// MaxRetryGT applies the GT predicate on the "max_retry" field.
func MaxRetryGT(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldMaxRetry, v))
}

// MaxRetryGTE applies the GTE predicate on the "max_retry" field.
func MaxRetryGTE(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldMaxRetry, v))
}

// MaxRetryLT applies the LT predicate on the "max_retry" field.
func MaxRetryLT(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldMaxRetry, v))
}

// MaxRetryLTE applies the LTE predicate on the "max_retry" field.
func MaxRetryLTE(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldMaxRetry, v))
}

// TimeoutEQ applies the EQ predicate on the "timeout" field.
func TimeoutEQ(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldTimeout, v))
}

// TimeoutNEQ applies the NEQ predicate on the "timeout" field.
func TimeoutNEQ(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldTimeout, v))
}

// TimeoutIn applies the In predicate on the "timeout" field.
func TimeoutIn(vs ...int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldTimeout, vs...))
}

// TimeoutNotIn applies the NotIn predicate on the "timeout" field.
func TimeoutNotIn(vs ...int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldTimeout, vs...))
}

// TimeoutGT applies the GT predicate on the "timeout" field.
func TimeoutGT(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldTimeout, v))
}

// TimeoutGTE applies the GTE predicate on the "timeout" field.
func TimeoutGTE(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldTimeout, v))
}

// TimeoutLT applies the LT predicate on the "timeout" field.
func TimeoutLT(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldTimeout, v))
}

// TimeoutLTE applies the LTE predicate on the "timeout" field.
func TimeoutLTE(v int) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldTimeout, v))
}

// LastErrorEQ applies the EQ predicate on the "last_error" field.
func LastErrorEQ(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldLastError, v))
}

// LastErrorNEQ applies the NEQ predicate on the "last_error" field.
func LastErrorNEQ(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldLastError, v))
}

// LastErrorIn applies the In predicate on the "last_error" field.
func LastErrorIn(vs ...string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldLastError, vs...))
}

// LastErrorNotIn applies the NotIn predicate on the "last_error" field.
func LastErrorNotIn(vs ...string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldLastError, vs...))
}

// LastErrorGT applies the GT predicate on the "last_error" field.
func LastErrorGT(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldLastError, v))
}

// LastErrorGTE applies the GTE predicate on the "last_error" field.
func LastErrorGTE(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldLastError, v))
}

// LastErrorLT applies the LT predicate on the "last_error" field.
func LastErrorLT(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldLastError, v))
}

// LastErrorLTE applies the LTE predicate on the "last_error" field.
func LastErrorLTE(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldLastError, v))
}

// LastErrorContains applies the Contains predicate on the "last_error" field.
func LastErrorContains(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldContains(FieldLastError, v))
}

// LastErrorHasPrefix applies the HasPrefix predicate on the "last_error" field.
func LastErrorHasPrefix(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldHasPrefix(FieldLastError, v))
}

// LastErrorHasSuffix applies the HasSuffix predicate on the "last_error" field.
func LastErrorHasSuffix(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldHasSuffix(FieldLastError, v))
}

// LastErrorIsNil applies the IsNil predicate on the "last_error" field.
func LastErrorIsNil() predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIsNull(FieldLastError))
}

// LastErrorNotNil applies the NotNil predicate on the "last_error" field.
func LastErrorNotNil() predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotNull(FieldLastError))
}

// LastErrorEqualFold applies the EqualFold predicate on the "last_error" field.
func LastErrorEqualFold(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEqualFold(FieldLastError, v))
}

// LastErrorContainsFold applies the ContainsFold predicate on the "last_error" field.
func LastErrorContainsFold(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldContainsFold(FieldLastError, v))
}

// TraceIDEQ applies the EQ predicate on the "trace_id" field.
func TraceIDEQ(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldTraceID, v))
}

// TraceIDNEQ applies the NEQ predicate on the "trace_id" field.
func TraceIDNEQ(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldTraceID, v))
}

// TraceIDIn applies the In predicate on the "trace_id" field.
func TraceIDIn(vs ...string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldTraceID, vs...))
}

// TraceIDNotIn applies the NotIn predicate on the "trace_id" field.
func TraceIDNotIn(vs ...string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldTraceID, vs...))
}

// TraceIDGT applies the GT predicate on the "trace_id" field.
func TraceIDGT(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldTraceID, v))
}

// TraceIDGTE applies the GTE predicate on the "trace_id" field.
func TraceIDGTE(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldTraceID, v))
}

// TraceIDLT applies the LT predicate on the "trace_id" field.
func TraceIDLT(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldTraceID, v))
}

// TraceIDLTE applies the LTE predicate on the "trace_id" field.
func TraceIDLTE(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldTraceID, v))
}

// TraceIDContains applies the Contains predicate on the "trace_id" field.
func TraceIDContains(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldContains(FieldTraceID, v))
}

// TraceIDHasPrefix applies the HasPrefix predicate on the "trace_id" field.
func TraceIDHasPrefix(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldHasPrefix(FieldTraceID, v))
}

// TraceIDHasSuffix applies the HasSuffix predicate on the "trace_id" field.
func TraceIDHasSuffix(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldHasSuffix(FieldTraceID, v))
}

// TraceIDIsNil applies the IsNil predicate on the "trace_id" field.
func TraceIDIsNil() predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIsNull(FieldTraceID))
}

// TraceIDNotNil applies the NotNil predicate on the "trace_id" field.
func TraceIDNotNil() predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotNull(FieldTraceID))
}

// TraceIDEqualFold applies the EqualFold predicate on the "trace_id" field.
func TraceIDEqualFold(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEqualFold(FieldTraceID, v))
}

// TraceIDContainsFold applies the ContainsFold predicate on the "trace_id" field.
func TraceIDContainsFold(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldContainsFold(FieldTraceID, v))
}

// ScheduledAtEQ applies the EQ predicate on the "scheduled_at" field.
func ScheduledAtEQ(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldScheduledAt, v))
}

// ScheduledAtNEQ applies the NEQ predicate on the "scheduled_at" field.
func ScheduledAtNEQ(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldScheduledAt, v))
}

// ScheduledAtIn applies the In predicate on the "scheduled_at" field.
func ScheduledAtIn(vs ...time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldScheduledAt, vs...))
}

// ScheduledAtNotIn applies the NotIn predicate on the "scheduled_at" field.
func ScheduledAtNotIn(vs ...time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldScheduledAt, vs...))
}

// ScheduledAtGT applies the GT predicate on the "scheduled_at" field.
func ScheduledAtGT(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldScheduledAt, v))
}

// ScheduledAtGTE applies the GTE predicate on the "scheduled_at" field.
func ScheduledAtGTE(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldScheduledAt, v))
}

// ScheduledAtLT applies the LT predicate on the "scheduled_at" field.
func ScheduledAtLT(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldScheduledAt, v))
}

// ScheduledAtLTE applies the LTE predicate on the "scheduled_at" field.
func ScheduledAtLTE(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldScheduledAt, v))
}

// ScheduledAtIsNil applies the IsNil predicate on the "scheduled_at" field.
func ScheduledAtIsNil() predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIsNull(FieldScheduledAt))
}

// ScheduledAtNotNil applies the NotNil predicate on the "scheduled_at" field.
func ScheduledAtNotNil() predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotNull(FieldScheduledAt))
}

// DeliveredAtEQ applies the EQ predicate on the "delivered_at" field.
func DeliveredAtEQ(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldDeliveredAt, v))
}

// DeliveredAtNEQ applies the NEQ predicate on the "delivered_at" field.
func DeliveredAtNEQ(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldDeliveredAt, v))
}

// DeliveredAtIn applies the In predicate on the "delivered_at" field.
func DeliveredAtIn(vs ...time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldDeliveredAt, vs...))
}

// DeliveredAtNotIn applies the NotIn predicate on the "delivered_at" field.
func DeliveredAtNotIn(vs ...time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldDeliveredAt, vs...))
}

// DeliveredAtGT applies the GT predicate on the "delivered_at" field.
func DeliveredAtGT(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldDeliveredAt, v))
}

// DeliveredAtGTE applies the GTE predicate on the "delivered_at" field.
func DeliveredAtGTE(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldDeliveredAt, v))
}

// DeliveredAtLT applies the LT predicate on the "delivered_at" field.
func DeliveredAtLT(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldDeliveredAt, v))
}

// DeliveredAtLTE applies the LTE predicate on the "delivered_at" field.
func DeliveredAtLTE(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldDeliveredAt, v))
}

// DeliveredAtIsNil applies the IsNil predicate on the "delivered_at" field.
func DeliveredAtIsNil() predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIsNull(FieldDeliveredAt))
}

// DeliveredAtNotNil applies the NotNil predicate on the "delivered_at" field.
func DeliveredAtNotNil() predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotNull(FieldDeliveredAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NotificationEvent) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NotificationEvent) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NotificationEvent) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.NotPredicates(p))
}
