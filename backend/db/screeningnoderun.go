// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/screeningnoderun"
	"github.com/chaitin/WhaleHire/backend/db/screeningtask"
	"github.com/chaitin/WhaleHire/backend/db/screeningtaskresume"
	"github.com/google/uuid"
)

// ScreeningNodeRun is the model entity for the ScreeningNodeRun schema.
type ScreeningNodeRun struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID uuid.UUID `json:"task_id,omitempty"`
	// TaskResumeID holds the value of the "task_resume_id" field.
	TaskResumeID uuid.UUID `json:"task_resume_id,omitempty"`
	// 节点类型，参考 domain.TaskMetaDataNode 等常量
	NodeKey string `json:"node_key,omitempty"`
	// pending/running/completed/failed
	Status string `json:"status,omitempty"`
	// 第几次尝试
	AttemptNo int `json:"attempt_no,omitempty"`
	// 链路追踪ID
	TraceID string `json:"trace_id,omitempty"`
	// Agent版本号
	AgentVersion string `json:"agent_version,omitempty"`
	// 模型名称
	ModelName string `json:"model_name,omitempty"`
	// 模型提供商
	ModelProvider string `json:"model_provider,omitempty"`
	// LLM参数快照
	LlmParams map[string]interface{} `json:"llm_params,omitempty"`
	// 节点输入快照
	InputPayload map[string]interface{} `json:"input_payload,omitempty"`
	// 节点输出快照
	OutputPayload map[string]interface{} `json:"output_payload,omitempty"`
	// 错误信息
	ErrorMessage string `json:"error_message,omitempty"`
	// 输入tokens
	TokensInput int64 `json:"tokens_input,omitempty"`
	// 输出tokens
	TokensOutput int64 `json:"tokens_output,omitempty"`
	// 调用成本
	TotalCost float64 `json:"total_cost,omitempty"`
	// 开始时间
	StartedAt time.Time `json:"started_at,omitempty"`
	// 结束时间
	FinishedAt time.Time `json:"finished_at,omitempty"`
	// 耗时(毫秒)
	DurationMs int `json:"duration_ms,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScreeningNodeRunQuery when eager-loading is set.
	Edges        ScreeningNodeRunEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScreeningNodeRunEdges holds the relations/edges for other nodes in the graph.
type ScreeningNodeRunEdges struct {
	// Task holds the value of the task edge.
	Task *ScreeningTask `json:"task,omitempty"`
	// TaskResume holds the value of the task_resume edge.
	TaskResume *ScreeningTaskResume `json:"task_resume,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScreeningNodeRunEdges) TaskOrErr() (*ScreeningTask, error) {
	if e.Task != nil {
		return e.Task, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: screeningtask.Label}
	}
	return nil, &NotLoadedError{edge: "task"}
}

// TaskResumeOrErr returns the TaskResume value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScreeningNodeRunEdges) TaskResumeOrErr() (*ScreeningTaskResume, error) {
	if e.TaskResume != nil {
		return e.TaskResume, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: screeningtaskresume.Label}
	}
	return nil, &NotLoadedError{edge: "task_resume"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScreeningNodeRun) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case screeningnoderun.FieldLlmParams, screeningnoderun.FieldInputPayload, screeningnoderun.FieldOutputPayload:
			values[i] = new([]byte)
		case screeningnoderun.FieldTotalCost:
			values[i] = new(sql.NullFloat64)
		case screeningnoderun.FieldAttemptNo, screeningnoderun.FieldTokensInput, screeningnoderun.FieldTokensOutput, screeningnoderun.FieldDurationMs:
			values[i] = new(sql.NullInt64)
		case screeningnoderun.FieldNodeKey, screeningnoderun.FieldStatus, screeningnoderun.FieldTraceID, screeningnoderun.FieldAgentVersion, screeningnoderun.FieldModelName, screeningnoderun.FieldModelProvider, screeningnoderun.FieldErrorMessage:
			values[i] = new(sql.NullString)
		case screeningnoderun.FieldDeletedAt, screeningnoderun.FieldStartedAt, screeningnoderun.FieldFinishedAt, screeningnoderun.FieldCreatedAt, screeningnoderun.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case screeningnoderun.FieldID, screeningnoderun.FieldTaskID, screeningnoderun.FieldTaskResumeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScreeningNodeRun fields.
func (snr *ScreeningNodeRun) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case screeningnoderun.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				snr.ID = *value
			}
		case screeningnoderun.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				snr.DeletedAt = value.Time
			}
		case screeningnoderun.FieldTaskID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value != nil {
				snr.TaskID = *value
			}
		case screeningnoderun.FieldTaskResumeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field task_resume_id", values[i])
			} else if value != nil {
				snr.TaskResumeID = *value
			}
		case screeningnoderun.FieldNodeKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_key", values[i])
			} else if value.Valid {
				snr.NodeKey = value.String
			}
		case screeningnoderun.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				snr.Status = value.String
			}
		case screeningnoderun.FieldAttemptNo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attempt_no", values[i])
			} else if value.Valid {
				snr.AttemptNo = int(value.Int64)
			}
		case screeningnoderun.FieldTraceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trace_id", values[i])
			} else if value.Valid {
				snr.TraceID = value.String
			}
		case screeningnoderun.FieldAgentVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_version", values[i])
			} else if value.Valid {
				snr.AgentVersion = value.String
			}
		case screeningnoderun.FieldModelName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model_name", values[i])
			} else if value.Valid {
				snr.ModelName = value.String
			}
		case screeningnoderun.FieldModelProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model_provider", values[i])
			} else if value.Valid {
				snr.ModelProvider = value.String
			}
		case screeningnoderun.FieldLlmParams:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field llm_params", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &snr.LlmParams); err != nil {
					return fmt.Errorf("unmarshal field llm_params: %w", err)
				}
			}
		case screeningnoderun.FieldInputPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field input_payload", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &snr.InputPayload); err != nil {
					return fmt.Errorf("unmarshal field input_payload: %w", err)
				}
			}
		case screeningnoderun.FieldOutputPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field output_payload", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &snr.OutputPayload); err != nil {
					return fmt.Errorf("unmarshal field output_payload: %w", err)
				}
			}
		case screeningnoderun.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				snr.ErrorMessage = value.String
			}
		case screeningnoderun.FieldTokensInput:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tokens_input", values[i])
			} else if value.Valid {
				snr.TokensInput = value.Int64
			}
		case screeningnoderun.FieldTokensOutput:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tokens_output", values[i])
			} else if value.Valid {
				snr.TokensOutput = value.Int64
			}
		case screeningnoderun.FieldTotalCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_cost", values[i])
			} else if value.Valid {
				snr.TotalCost = value.Float64
			}
		case screeningnoderun.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				snr.StartedAt = value.Time
			}
		case screeningnoderun.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				snr.FinishedAt = value.Time
			}
		case screeningnoderun.FieldDurationMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_ms", values[i])
			} else if value.Valid {
				snr.DurationMs = int(value.Int64)
			}
		case screeningnoderun.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				snr.CreatedAt = value.Time
			}
		case screeningnoderun.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				snr.UpdatedAt = value.Time
			}
		default:
			snr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScreeningNodeRun.
// This includes values selected through modifiers, order, etc.
func (snr *ScreeningNodeRun) Value(name string) (ent.Value, error) {
	return snr.selectValues.Get(name)
}

// QueryTask queries the "task" edge of the ScreeningNodeRun entity.
func (snr *ScreeningNodeRun) QueryTask() *ScreeningTaskQuery {
	return NewScreeningNodeRunClient(snr.config).QueryTask(snr)
}

// QueryTaskResume queries the "task_resume" edge of the ScreeningNodeRun entity.
func (snr *ScreeningNodeRun) QueryTaskResume() *ScreeningTaskResumeQuery {
	return NewScreeningNodeRunClient(snr.config).QueryTaskResume(snr)
}

// Update returns a builder for updating this ScreeningNodeRun.
// Note that you need to call ScreeningNodeRun.Unwrap() before calling this method if this ScreeningNodeRun
// was returned from a transaction, and the transaction was committed or rolled back.
func (snr *ScreeningNodeRun) Update() *ScreeningNodeRunUpdateOne {
	return NewScreeningNodeRunClient(snr.config).UpdateOne(snr)
}

// Unwrap unwraps the ScreeningNodeRun entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (snr *ScreeningNodeRun) Unwrap() *ScreeningNodeRun {
	_tx, ok := snr.config.driver.(*txDriver)
	if !ok {
		panic("db: ScreeningNodeRun is not a transactional entity")
	}
	snr.config.driver = _tx.drv
	return snr
}

// String implements the fmt.Stringer.
func (snr *ScreeningNodeRun) String() string {
	var builder strings.Builder
	builder.WriteString("ScreeningNodeRun(")
	builder.WriteString(fmt.Sprintf("id=%v, ", snr.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(snr.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", snr.TaskID))
	builder.WriteString(", ")
	builder.WriteString("task_resume_id=")
	builder.WriteString(fmt.Sprintf("%v", snr.TaskResumeID))
	builder.WriteString(", ")
	builder.WriteString("node_key=")
	builder.WriteString(snr.NodeKey)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(snr.Status)
	builder.WriteString(", ")
	builder.WriteString("attempt_no=")
	builder.WriteString(fmt.Sprintf("%v", snr.AttemptNo))
	builder.WriteString(", ")
	builder.WriteString("trace_id=")
	builder.WriteString(snr.TraceID)
	builder.WriteString(", ")
	builder.WriteString("agent_version=")
	builder.WriteString(snr.AgentVersion)
	builder.WriteString(", ")
	builder.WriteString("model_name=")
	builder.WriteString(snr.ModelName)
	builder.WriteString(", ")
	builder.WriteString("model_provider=")
	builder.WriteString(snr.ModelProvider)
	builder.WriteString(", ")
	builder.WriteString("llm_params=")
	builder.WriteString(fmt.Sprintf("%v", snr.LlmParams))
	builder.WriteString(", ")
	builder.WriteString("input_payload=")
	builder.WriteString(fmt.Sprintf("%v", snr.InputPayload))
	builder.WriteString(", ")
	builder.WriteString("output_payload=")
	builder.WriteString(fmt.Sprintf("%v", snr.OutputPayload))
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(snr.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("tokens_input=")
	builder.WriteString(fmt.Sprintf("%v", snr.TokensInput))
	builder.WriteString(", ")
	builder.WriteString("tokens_output=")
	builder.WriteString(fmt.Sprintf("%v", snr.TokensOutput))
	builder.WriteString(", ")
	builder.WriteString("total_cost=")
	builder.WriteString(fmt.Sprintf("%v", snr.TotalCost))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(snr.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("finished_at=")
	builder.WriteString(snr.FinishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("duration_ms=")
	builder.WriteString(fmt.Sprintf("%v", snr.DurationMs))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(snr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(snr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ScreeningNodeRuns is a parsable slice of ScreeningNodeRun.
type ScreeningNodeRuns []*ScreeningNodeRun
