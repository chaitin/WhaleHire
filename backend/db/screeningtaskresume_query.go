// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/screeningnoderun"
	"github.com/chaitin/WhaleHire/backend/db/screeningtask"
	"github.com/chaitin/WhaleHire/backend/db/screeningtaskresume"
	"github.com/google/uuid"
)

// ScreeningTaskResumeQuery is the builder for querying ScreeningTaskResume entities.
type ScreeningTaskResumeQuery struct {
	config
	ctx          *QueryContext
	order        []screeningtaskresume.OrderOption
	inters       []Interceptor
	predicates   []predicate.ScreeningTaskResume
	withTask     *ScreeningTaskQuery
	withResume   *ResumeQuery
	withNodeRuns *ScreeningNodeRunQuery
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ScreeningTaskResumeQuery builder.
func (strq *ScreeningTaskResumeQuery) Where(ps ...predicate.ScreeningTaskResume) *ScreeningTaskResumeQuery {
	strq.predicates = append(strq.predicates, ps...)
	return strq
}

// Limit the number of records to be returned by this query.
func (strq *ScreeningTaskResumeQuery) Limit(limit int) *ScreeningTaskResumeQuery {
	strq.ctx.Limit = &limit
	return strq
}

// Offset to start from.
func (strq *ScreeningTaskResumeQuery) Offset(offset int) *ScreeningTaskResumeQuery {
	strq.ctx.Offset = &offset
	return strq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (strq *ScreeningTaskResumeQuery) Unique(unique bool) *ScreeningTaskResumeQuery {
	strq.ctx.Unique = &unique
	return strq
}

// Order specifies how the records should be ordered.
func (strq *ScreeningTaskResumeQuery) Order(o ...screeningtaskresume.OrderOption) *ScreeningTaskResumeQuery {
	strq.order = append(strq.order, o...)
	return strq
}

// QueryTask chains the current query on the "task" edge.
func (strq *ScreeningTaskResumeQuery) QueryTask() *ScreeningTaskQuery {
	query := (&ScreeningTaskClient{config: strq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := strq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := strq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningtaskresume.Table, screeningtaskresume.FieldID, selector),
			sqlgraph.To(screeningtask.Table, screeningtask.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, screeningtaskresume.TaskTable, screeningtaskresume.TaskColumn),
		)
		fromU = sqlgraph.SetNeighbors(strq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResume chains the current query on the "resume" edge.
func (strq *ScreeningTaskResumeQuery) QueryResume() *ResumeQuery {
	query := (&ResumeClient{config: strq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := strq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := strq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningtaskresume.Table, screeningtaskresume.FieldID, selector),
			sqlgraph.To(resume.Table, resume.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, screeningtaskresume.ResumeTable, screeningtaskresume.ResumeColumn),
		)
		fromU = sqlgraph.SetNeighbors(strq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNodeRuns chains the current query on the "node_runs" edge.
func (strq *ScreeningTaskResumeQuery) QueryNodeRuns() *ScreeningNodeRunQuery {
	query := (&ScreeningNodeRunClient{config: strq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := strq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := strq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningtaskresume.Table, screeningtaskresume.FieldID, selector),
			sqlgraph.To(screeningnoderun.Table, screeningnoderun.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, screeningtaskresume.NodeRunsTable, screeningtaskresume.NodeRunsColumn),
		)
		fromU = sqlgraph.SetNeighbors(strq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ScreeningTaskResume entity from the query.
// Returns a *NotFoundError when no ScreeningTaskResume was found.
func (strq *ScreeningTaskResumeQuery) First(ctx context.Context) (*ScreeningTaskResume, error) {
	nodes, err := strq.Limit(1).All(setContextOp(ctx, strq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{screeningtaskresume.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (strq *ScreeningTaskResumeQuery) FirstX(ctx context.Context) *ScreeningTaskResume {
	node, err := strq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ScreeningTaskResume ID from the query.
// Returns a *NotFoundError when no ScreeningTaskResume ID was found.
func (strq *ScreeningTaskResumeQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = strq.Limit(1).IDs(setContextOp(ctx, strq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{screeningtaskresume.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (strq *ScreeningTaskResumeQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := strq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ScreeningTaskResume entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ScreeningTaskResume entity is found.
// Returns a *NotFoundError when no ScreeningTaskResume entities are found.
func (strq *ScreeningTaskResumeQuery) Only(ctx context.Context) (*ScreeningTaskResume, error) {
	nodes, err := strq.Limit(2).All(setContextOp(ctx, strq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{screeningtaskresume.Label}
	default:
		return nil, &NotSingularError{screeningtaskresume.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (strq *ScreeningTaskResumeQuery) OnlyX(ctx context.Context) *ScreeningTaskResume {
	node, err := strq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ScreeningTaskResume ID in the query.
// Returns a *NotSingularError when more than one ScreeningTaskResume ID is found.
// Returns a *NotFoundError when no entities are found.
func (strq *ScreeningTaskResumeQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = strq.Limit(2).IDs(setContextOp(ctx, strq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{screeningtaskresume.Label}
	default:
		err = &NotSingularError{screeningtaskresume.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (strq *ScreeningTaskResumeQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := strq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ScreeningTaskResumes.
func (strq *ScreeningTaskResumeQuery) All(ctx context.Context) ([]*ScreeningTaskResume, error) {
	ctx = setContextOp(ctx, strq.ctx, ent.OpQueryAll)
	if err := strq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ScreeningTaskResume, *ScreeningTaskResumeQuery]()
	return withInterceptors[[]*ScreeningTaskResume](ctx, strq, qr, strq.inters)
}

// AllX is like All, but panics if an error occurs.
func (strq *ScreeningTaskResumeQuery) AllX(ctx context.Context) []*ScreeningTaskResume {
	nodes, err := strq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ScreeningTaskResume IDs.
func (strq *ScreeningTaskResumeQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if strq.ctx.Unique == nil && strq.path != nil {
		strq.Unique(true)
	}
	ctx = setContextOp(ctx, strq.ctx, ent.OpQueryIDs)
	if err = strq.Select(screeningtaskresume.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (strq *ScreeningTaskResumeQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := strq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (strq *ScreeningTaskResumeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, strq.ctx, ent.OpQueryCount)
	if err := strq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, strq, querierCount[*ScreeningTaskResumeQuery](), strq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (strq *ScreeningTaskResumeQuery) CountX(ctx context.Context) int {
	count, err := strq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (strq *ScreeningTaskResumeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, strq.ctx, ent.OpQueryExist)
	switch _, err := strq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (strq *ScreeningTaskResumeQuery) ExistX(ctx context.Context) bool {
	exist, err := strq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ScreeningTaskResumeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (strq *ScreeningTaskResumeQuery) Clone() *ScreeningTaskResumeQuery {
	if strq == nil {
		return nil
	}
	return &ScreeningTaskResumeQuery{
		config:       strq.config,
		ctx:          strq.ctx.Clone(),
		order:        append([]screeningtaskresume.OrderOption{}, strq.order...),
		inters:       append([]Interceptor{}, strq.inters...),
		predicates:   append([]predicate.ScreeningTaskResume{}, strq.predicates...),
		withTask:     strq.withTask.Clone(),
		withResume:   strq.withResume.Clone(),
		withNodeRuns: strq.withNodeRuns.Clone(),
		// clone intermediate query.
		sql:       strq.sql.Clone(),
		path:      strq.path,
		modifiers: append([]func(*sql.Selector){}, strq.modifiers...),
	}
}

// WithTask tells the query-builder to eager-load the nodes that are connected to
// the "task" edge. The optional arguments are used to configure the query builder of the edge.
func (strq *ScreeningTaskResumeQuery) WithTask(opts ...func(*ScreeningTaskQuery)) *ScreeningTaskResumeQuery {
	query := (&ScreeningTaskClient{config: strq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	strq.withTask = query
	return strq
}

// WithResume tells the query-builder to eager-load the nodes that are connected to
// the "resume" edge. The optional arguments are used to configure the query builder of the edge.
func (strq *ScreeningTaskResumeQuery) WithResume(opts ...func(*ResumeQuery)) *ScreeningTaskResumeQuery {
	query := (&ResumeClient{config: strq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	strq.withResume = query
	return strq
}

// WithNodeRuns tells the query-builder to eager-load the nodes that are connected to
// the "node_runs" edge. The optional arguments are used to configure the query builder of the edge.
func (strq *ScreeningTaskResumeQuery) WithNodeRuns(opts ...func(*ScreeningNodeRunQuery)) *ScreeningTaskResumeQuery {
	query := (&ScreeningNodeRunClient{config: strq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	strq.withNodeRuns = query
	return strq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ScreeningTaskResume.Query().
//		GroupBy(screeningtaskresume.FieldDeletedAt).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (strq *ScreeningTaskResumeQuery) GroupBy(field string, fields ...string) *ScreeningTaskResumeGroupBy {
	strq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ScreeningTaskResumeGroupBy{build: strq}
	grbuild.flds = &strq.ctx.Fields
	grbuild.label = screeningtaskresume.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//	}
//
//	client.ScreeningTaskResume.Query().
//		Select(screeningtaskresume.FieldDeletedAt).
//		Scan(ctx, &v)
func (strq *ScreeningTaskResumeQuery) Select(fields ...string) *ScreeningTaskResumeSelect {
	strq.ctx.Fields = append(strq.ctx.Fields, fields...)
	sbuild := &ScreeningTaskResumeSelect{ScreeningTaskResumeQuery: strq}
	sbuild.label = screeningtaskresume.Label
	sbuild.flds, sbuild.scan = &strq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ScreeningTaskResumeSelect configured with the given aggregations.
func (strq *ScreeningTaskResumeQuery) Aggregate(fns ...AggregateFunc) *ScreeningTaskResumeSelect {
	return strq.Select().Aggregate(fns...)
}

func (strq *ScreeningTaskResumeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range strq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, strq); err != nil {
				return err
			}
		}
	}
	for _, f := range strq.ctx.Fields {
		if !screeningtaskresume.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if strq.path != nil {
		prev, err := strq.path(ctx)
		if err != nil {
			return err
		}
		strq.sql = prev
	}
	return nil
}

func (strq *ScreeningTaskResumeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ScreeningTaskResume, error) {
	var (
		nodes       = []*ScreeningTaskResume{}
		_spec       = strq.querySpec()
		loadedTypes = [3]bool{
			strq.withTask != nil,
			strq.withResume != nil,
			strq.withNodeRuns != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ScreeningTaskResume).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ScreeningTaskResume{config: strq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(strq.modifiers) > 0 {
		_spec.Modifiers = strq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, strq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := strq.withTask; query != nil {
		if err := strq.loadTask(ctx, query, nodes, nil,
			func(n *ScreeningTaskResume, e *ScreeningTask) { n.Edges.Task = e }); err != nil {
			return nil, err
		}
	}
	if query := strq.withResume; query != nil {
		if err := strq.loadResume(ctx, query, nodes, nil,
			func(n *ScreeningTaskResume, e *Resume) { n.Edges.Resume = e }); err != nil {
			return nil, err
		}
	}
	if query := strq.withNodeRuns; query != nil {
		if err := strq.loadNodeRuns(ctx, query, nodes,
			func(n *ScreeningTaskResume) { n.Edges.NodeRuns = []*ScreeningNodeRun{} },
			func(n *ScreeningTaskResume, e *ScreeningNodeRun) { n.Edges.NodeRuns = append(n.Edges.NodeRuns, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (strq *ScreeningTaskResumeQuery) loadTask(ctx context.Context, query *ScreeningTaskQuery, nodes []*ScreeningTaskResume, init func(*ScreeningTaskResume), assign func(*ScreeningTaskResume, *ScreeningTask)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ScreeningTaskResume)
	for i := range nodes {
		fk := nodes[i].TaskID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(screeningtask.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "task_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (strq *ScreeningTaskResumeQuery) loadResume(ctx context.Context, query *ResumeQuery, nodes []*ScreeningTaskResume, init func(*ScreeningTaskResume), assign func(*ScreeningTaskResume, *Resume)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ScreeningTaskResume)
	for i := range nodes {
		fk := nodes[i].ResumeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(resume.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "resume_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (strq *ScreeningTaskResumeQuery) loadNodeRuns(ctx context.Context, query *ScreeningNodeRunQuery, nodes []*ScreeningTaskResume, init func(*ScreeningTaskResume), assign func(*ScreeningTaskResume, *ScreeningNodeRun)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ScreeningTaskResume)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(screeningnoderun.FieldTaskResumeID)
	}
	query.Where(predicate.ScreeningNodeRun(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(screeningtaskresume.NodeRunsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TaskResumeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "task_resume_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (strq *ScreeningTaskResumeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := strq.querySpec()
	if len(strq.modifiers) > 0 {
		_spec.Modifiers = strq.modifiers
	}
	_spec.Node.Columns = strq.ctx.Fields
	if len(strq.ctx.Fields) > 0 {
		_spec.Unique = strq.ctx.Unique != nil && *strq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, strq.driver, _spec)
}

func (strq *ScreeningTaskResumeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(screeningtaskresume.Table, screeningtaskresume.Columns, sqlgraph.NewFieldSpec(screeningtaskresume.FieldID, field.TypeUUID))
	_spec.From = strq.sql
	if unique := strq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if strq.path != nil {
		_spec.Unique = true
	}
	if fields := strq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, screeningtaskresume.FieldID)
		for i := range fields {
			if fields[i] != screeningtaskresume.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if strq.withTask != nil {
			_spec.Node.AddColumnOnce(screeningtaskresume.FieldTaskID)
		}
		if strq.withResume != nil {
			_spec.Node.AddColumnOnce(screeningtaskresume.FieldResumeID)
		}
	}
	if ps := strq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := strq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := strq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := strq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (strq *ScreeningTaskResumeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(strq.driver.Dialect())
	t1 := builder.Table(screeningtaskresume.Table)
	columns := strq.ctx.Fields
	if len(columns) == 0 {
		columns = screeningtaskresume.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if strq.sql != nil {
		selector = strq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if strq.ctx.Unique != nil && *strq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range strq.modifiers {
		m(selector)
	}
	for _, p := range strq.predicates {
		p(selector)
	}
	for _, p := range strq.order {
		p(selector)
	}
	if offset := strq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := strq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (strq *ScreeningTaskResumeQuery) ForUpdate(opts ...sql.LockOption) *ScreeningTaskResumeQuery {
	if strq.driver.Dialect() == dialect.Postgres {
		strq.Unique(false)
	}
	strq.modifiers = append(strq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return strq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (strq *ScreeningTaskResumeQuery) ForShare(opts ...sql.LockOption) *ScreeningTaskResumeQuery {
	if strq.driver.Dialect() == dialect.Postgres {
		strq.Unique(false)
	}
	strq.modifiers = append(strq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return strq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (strq *ScreeningTaskResumeQuery) Modify(modifiers ...func(s *sql.Selector)) *ScreeningTaskResumeSelect {
	strq.modifiers = append(strq.modifiers, modifiers...)
	return strq.Select()
}

// ScreeningTaskResumeGroupBy is the group-by builder for ScreeningTaskResume entities.
type ScreeningTaskResumeGroupBy struct {
	selector
	build *ScreeningTaskResumeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (strgb *ScreeningTaskResumeGroupBy) Aggregate(fns ...AggregateFunc) *ScreeningTaskResumeGroupBy {
	strgb.fns = append(strgb.fns, fns...)
	return strgb
}

// Scan applies the selector query and scans the result into the given value.
func (strgb *ScreeningTaskResumeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, strgb.build.ctx, ent.OpQueryGroupBy)
	if err := strgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScreeningTaskResumeQuery, *ScreeningTaskResumeGroupBy](ctx, strgb.build, strgb, strgb.build.inters, v)
}

func (strgb *ScreeningTaskResumeGroupBy) sqlScan(ctx context.Context, root *ScreeningTaskResumeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(strgb.fns))
	for _, fn := range strgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*strgb.flds)+len(strgb.fns))
		for _, f := range *strgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*strgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := strgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ScreeningTaskResumeSelect is the builder for selecting fields of ScreeningTaskResume entities.
type ScreeningTaskResumeSelect struct {
	*ScreeningTaskResumeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (strs *ScreeningTaskResumeSelect) Aggregate(fns ...AggregateFunc) *ScreeningTaskResumeSelect {
	strs.fns = append(strs.fns, fns...)
	return strs
}

// Scan applies the selector query and scans the result into the given value.
func (strs *ScreeningTaskResumeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, strs.ctx, ent.OpQuerySelect)
	if err := strs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScreeningTaskResumeQuery, *ScreeningTaskResumeSelect](ctx, strs.ScreeningTaskResumeQuery, strs, strs.inters, v)
}

func (strs *ScreeningTaskResumeSelect) sqlScan(ctx context.Context, root *ScreeningTaskResumeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(strs.fns))
	for _, fn := range strs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*strs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := strs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (strs *ScreeningTaskResumeSelect) Modify(modifiers ...func(s *sql.Selector)) *ScreeningTaskResumeSelect {
	strs.modifiers = append(strs.modifiers, modifiers...)
	return strs
}
