// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobskill"
	"github.com/chaitin/WhaleHire/backend/db/jobskillmeta"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// JobSkillMetaUpdate is the builder for updating JobSkillMeta entities.
type JobSkillMetaUpdate struct {
	config
	hooks     []Hook
	mutation  *JobSkillMetaMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the JobSkillMetaUpdate builder.
func (jsmu *JobSkillMetaUpdate) Where(ps ...predicate.JobSkillMeta) *JobSkillMetaUpdate {
	jsmu.mutation.Where(ps...)
	return jsmu
}

// SetName sets the "name" field.
func (jsmu *JobSkillMetaUpdate) SetName(s string) *JobSkillMetaUpdate {
	jsmu.mutation.SetName(s)
	return jsmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (jsmu *JobSkillMetaUpdate) SetNillableName(s *string) *JobSkillMetaUpdate {
	if s != nil {
		jsmu.SetName(*s)
	}
	return jsmu
}

// SetUpdatedAt sets the "updated_at" field.
func (jsmu *JobSkillMetaUpdate) SetUpdatedAt(t time.Time) *JobSkillMetaUpdate {
	jsmu.mutation.SetUpdatedAt(t)
	return jsmu
}

// SetDeletedAt sets the "deleted_at" field.
func (jsmu *JobSkillMetaUpdate) SetDeletedAt(t time.Time) *JobSkillMetaUpdate {
	jsmu.mutation.SetDeletedAt(t)
	return jsmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jsmu *JobSkillMetaUpdate) SetNillableDeletedAt(t *time.Time) *JobSkillMetaUpdate {
	if t != nil {
		jsmu.SetDeletedAt(*t)
	}
	return jsmu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jsmu *JobSkillMetaUpdate) ClearDeletedAt() *JobSkillMetaUpdate {
	jsmu.mutation.ClearDeletedAt()
	return jsmu
}

// AddJobLinkIDs adds the "job_links" edge to the JobSkill entity by IDs.
func (jsmu *JobSkillMetaUpdate) AddJobLinkIDs(ids ...uuid.UUID) *JobSkillMetaUpdate {
	jsmu.mutation.AddJobLinkIDs(ids...)
	return jsmu
}

// AddJobLinks adds the "job_links" edges to the JobSkill entity.
func (jsmu *JobSkillMetaUpdate) AddJobLinks(j ...*JobSkill) *JobSkillMetaUpdate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jsmu.AddJobLinkIDs(ids...)
}

// Mutation returns the JobSkillMetaMutation object of the builder.
func (jsmu *JobSkillMetaUpdate) Mutation() *JobSkillMetaMutation {
	return jsmu.mutation
}

// ClearJobLinks clears all "job_links" edges to the JobSkill entity.
func (jsmu *JobSkillMetaUpdate) ClearJobLinks() *JobSkillMetaUpdate {
	jsmu.mutation.ClearJobLinks()
	return jsmu
}

// RemoveJobLinkIDs removes the "job_links" edge to JobSkill entities by IDs.
func (jsmu *JobSkillMetaUpdate) RemoveJobLinkIDs(ids ...uuid.UUID) *JobSkillMetaUpdate {
	jsmu.mutation.RemoveJobLinkIDs(ids...)
	return jsmu
}

// RemoveJobLinks removes "job_links" edges to JobSkill entities.
func (jsmu *JobSkillMetaUpdate) RemoveJobLinks(j ...*JobSkill) *JobSkillMetaUpdate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jsmu.RemoveJobLinkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jsmu *JobSkillMetaUpdate) Save(ctx context.Context) (int, error) {
	jsmu.defaults()
	return withHooks(ctx, jsmu.sqlSave, jsmu.mutation, jsmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jsmu *JobSkillMetaUpdate) SaveX(ctx context.Context) int {
	affected, err := jsmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jsmu *JobSkillMetaUpdate) Exec(ctx context.Context) error {
	_, err := jsmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jsmu *JobSkillMetaUpdate) ExecX(ctx context.Context) {
	if err := jsmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jsmu *JobSkillMetaUpdate) defaults() {
	if _, ok := jsmu.mutation.UpdatedAt(); !ok {
		v := jobskillmeta.UpdateDefaultUpdatedAt()
		jsmu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jsmu *JobSkillMetaUpdate) check() error {
	if v, ok := jsmu.mutation.Name(); ok {
		if err := jobskillmeta.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "JobSkillMeta.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jsmu *JobSkillMetaUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobSkillMetaUpdate {
	jsmu.modifiers = append(jsmu.modifiers, modifiers...)
	return jsmu
}

func (jsmu *JobSkillMetaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jsmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobskillmeta.Table, jobskillmeta.Columns, sqlgraph.NewFieldSpec(jobskillmeta.FieldID, field.TypeUUID))
	if ps := jsmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jsmu.mutation.Name(); ok {
		_spec.SetField(jobskillmeta.FieldName, field.TypeString, value)
	}
	if value, ok := jsmu.mutation.UpdatedAt(); ok {
		_spec.SetField(jobskillmeta.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := jsmu.mutation.DeletedAt(); ok {
		_spec.SetField(jobskillmeta.FieldDeletedAt, field.TypeTime, value)
	}
	if jsmu.mutation.DeletedAtCleared() {
		_spec.ClearField(jobskillmeta.FieldDeletedAt, field.TypeTime)
	}
	if jsmu.mutation.JobLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobskillmeta.JobLinksTable,
			Columns: []string{jobskillmeta.JobLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jsmu.mutation.RemovedJobLinksIDs(); len(nodes) > 0 && !jsmu.mutation.JobLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobskillmeta.JobLinksTable,
			Columns: []string{jobskillmeta.JobLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jsmu.mutation.JobLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobskillmeta.JobLinksTable,
			Columns: []string{jobskillmeta.JobLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(jsmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, jsmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobskillmeta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jsmu.mutation.done = true
	return n, nil
}

// JobSkillMetaUpdateOne is the builder for updating a single JobSkillMeta entity.
type JobSkillMetaUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *JobSkillMetaMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (jsmuo *JobSkillMetaUpdateOne) SetName(s string) *JobSkillMetaUpdateOne {
	jsmuo.mutation.SetName(s)
	return jsmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (jsmuo *JobSkillMetaUpdateOne) SetNillableName(s *string) *JobSkillMetaUpdateOne {
	if s != nil {
		jsmuo.SetName(*s)
	}
	return jsmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (jsmuo *JobSkillMetaUpdateOne) SetUpdatedAt(t time.Time) *JobSkillMetaUpdateOne {
	jsmuo.mutation.SetUpdatedAt(t)
	return jsmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (jsmuo *JobSkillMetaUpdateOne) SetDeletedAt(t time.Time) *JobSkillMetaUpdateOne {
	jsmuo.mutation.SetDeletedAt(t)
	return jsmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jsmuo *JobSkillMetaUpdateOne) SetNillableDeletedAt(t *time.Time) *JobSkillMetaUpdateOne {
	if t != nil {
		jsmuo.SetDeletedAt(*t)
	}
	return jsmuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jsmuo *JobSkillMetaUpdateOne) ClearDeletedAt() *JobSkillMetaUpdateOne {
	jsmuo.mutation.ClearDeletedAt()
	return jsmuo
}

// AddJobLinkIDs adds the "job_links" edge to the JobSkill entity by IDs.
func (jsmuo *JobSkillMetaUpdateOne) AddJobLinkIDs(ids ...uuid.UUID) *JobSkillMetaUpdateOne {
	jsmuo.mutation.AddJobLinkIDs(ids...)
	return jsmuo
}

// AddJobLinks adds the "job_links" edges to the JobSkill entity.
func (jsmuo *JobSkillMetaUpdateOne) AddJobLinks(j ...*JobSkill) *JobSkillMetaUpdateOne {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jsmuo.AddJobLinkIDs(ids...)
}

// Mutation returns the JobSkillMetaMutation object of the builder.
func (jsmuo *JobSkillMetaUpdateOne) Mutation() *JobSkillMetaMutation {
	return jsmuo.mutation
}

// ClearJobLinks clears all "job_links" edges to the JobSkill entity.
func (jsmuo *JobSkillMetaUpdateOne) ClearJobLinks() *JobSkillMetaUpdateOne {
	jsmuo.mutation.ClearJobLinks()
	return jsmuo
}

// RemoveJobLinkIDs removes the "job_links" edge to JobSkill entities by IDs.
func (jsmuo *JobSkillMetaUpdateOne) RemoveJobLinkIDs(ids ...uuid.UUID) *JobSkillMetaUpdateOne {
	jsmuo.mutation.RemoveJobLinkIDs(ids...)
	return jsmuo
}

// RemoveJobLinks removes "job_links" edges to JobSkill entities.
func (jsmuo *JobSkillMetaUpdateOne) RemoveJobLinks(j ...*JobSkill) *JobSkillMetaUpdateOne {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jsmuo.RemoveJobLinkIDs(ids...)
}

// Where appends a list predicates to the JobSkillMetaUpdate builder.
func (jsmuo *JobSkillMetaUpdateOne) Where(ps ...predicate.JobSkillMeta) *JobSkillMetaUpdateOne {
	jsmuo.mutation.Where(ps...)
	return jsmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jsmuo *JobSkillMetaUpdateOne) Select(field string, fields ...string) *JobSkillMetaUpdateOne {
	jsmuo.fields = append([]string{field}, fields...)
	return jsmuo
}

// Save executes the query and returns the updated JobSkillMeta entity.
func (jsmuo *JobSkillMetaUpdateOne) Save(ctx context.Context) (*JobSkillMeta, error) {
	jsmuo.defaults()
	return withHooks(ctx, jsmuo.sqlSave, jsmuo.mutation, jsmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jsmuo *JobSkillMetaUpdateOne) SaveX(ctx context.Context) *JobSkillMeta {
	node, err := jsmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jsmuo *JobSkillMetaUpdateOne) Exec(ctx context.Context) error {
	_, err := jsmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jsmuo *JobSkillMetaUpdateOne) ExecX(ctx context.Context) {
	if err := jsmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jsmuo *JobSkillMetaUpdateOne) defaults() {
	if _, ok := jsmuo.mutation.UpdatedAt(); !ok {
		v := jobskillmeta.UpdateDefaultUpdatedAt()
		jsmuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jsmuo *JobSkillMetaUpdateOne) check() error {
	if v, ok := jsmuo.mutation.Name(); ok {
		if err := jobskillmeta.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "JobSkillMeta.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jsmuo *JobSkillMetaUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobSkillMetaUpdateOne {
	jsmuo.modifiers = append(jsmuo.modifiers, modifiers...)
	return jsmuo
}

func (jsmuo *JobSkillMetaUpdateOne) sqlSave(ctx context.Context) (_node *JobSkillMeta, err error) {
	if err := jsmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobskillmeta.Table, jobskillmeta.Columns, sqlgraph.NewFieldSpec(jobskillmeta.FieldID, field.TypeUUID))
	id, ok := jsmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "JobSkillMeta.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jsmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobskillmeta.FieldID)
		for _, f := range fields {
			if !jobskillmeta.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != jobskillmeta.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jsmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jsmuo.mutation.Name(); ok {
		_spec.SetField(jobskillmeta.FieldName, field.TypeString, value)
	}
	if value, ok := jsmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobskillmeta.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := jsmuo.mutation.DeletedAt(); ok {
		_spec.SetField(jobskillmeta.FieldDeletedAt, field.TypeTime, value)
	}
	if jsmuo.mutation.DeletedAtCleared() {
		_spec.ClearField(jobskillmeta.FieldDeletedAt, field.TypeTime)
	}
	if jsmuo.mutation.JobLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobskillmeta.JobLinksTable,
			Columns: []string{jobskillmeta.JobLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jsmuo.mutation.RemovedJobLinksIDs(); len(nodes) > 0 && !jsmuo.mutation.JobLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobskillmeta.JobLinksTable,
			Columns: []string{jobskillmeta.JobLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jsmuo.mutation.JobLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobskillmeta.JobLinksTable,
			Columns: []string{jobskillmeta.JobLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(jsmuo.modifiers...)
	_node = &JobSkillMeta{config: jsmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jsmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobskillmeta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jsmuo.mutation.done = true
	return _node, nil
}
