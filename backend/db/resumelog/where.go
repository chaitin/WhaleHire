// Code generated by ent, DO NOT EDIT.

package resumelog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldEQ(FieldDeletedAt, v))
}

// ResumeID applies equality check predicate on the "resume_id" field. It's identical to ResumeIDEQ.
func ResumeID(v uuid.UUID) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldEQ(FieldResumeID, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldEQ(FieldAction, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldEQ(FieldMessage, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldNotNull(FieldDeletedAt))
}

// ResumeIDEQ applies the EQ predicate on the "resume_id" field.
func ResumeIDEQ(v uuid.UUID) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldEQ(FieldResumeID, v))
}

// ResumeIDNEQ applies the NEQ predicate on the "resume_id" field.
func ResumeIDNEQ(v uuid.UUID) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldNEQ(FieldResumeID, v))
}

// ResumeIDIn applies the In predicate on the "resume_id" field.
func ResumeIDIn(vs ...uuid.UUID) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldIn(FieldResumeID, vs...))
}

// ResumeIDNotIn applies the NotIn predicate on the "resume_id" field.
func ResumeIDNotIn(vs ...uuid.UUID) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldNotIn(FieldResumeID, vs...))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldLTE(FieldAction, v))
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldContains(FieldAction, v))
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldHasPrefix(FieldAction, v))
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldHasSuffix(FieldAction, v))
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldEqualFold(FieldAction, v))
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldContainsFold(FieldAction, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldIsNull(FieldMessage))
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldNotNull(FieldMessage))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldContainsFold(FieldMessage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ResumeLog {
	return predicate.ResumeLog(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasResume applies the HasEdge predicate on the "resume" edge.
func HasResume() predicate.ResumeLog {
	return predicate.ResumeLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ResumeTable, ResumeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResumeWith applies the HasEdge predicate on the "resume" edge with a given conditions (other predicates).
func HasResumeWith(preds ...predicate.Resume) predicate.ResumeLog {
	return predicate.ResumeLog(func(s *sql.Selector) {
		step := newResumeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ResumeLog) predicate.ResumeLog {
	return predicate.ResumeLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ResumeLog) predicate.ResumeLog {
	return predicate.ResumeLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ResumeLog) predicate.ResumeLog {
	return predicate.ResumeLog(sql.NotPredicates(p))
}
