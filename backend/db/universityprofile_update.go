// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/universityprofile"
	pgvector "github.com/pgvector/pgvector-go"
)

// UniversityProfileUpdate is the builder for updating UniversityProfile entities.
type UniversityProfileUpdate struct {
	config
	hooks     []Hook
	mutation  *UniversityProfileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UniversityProfileUpdate builder.
func (upu *UniversityProfileUpdate) Where(ps ...predicate.UniversityProfile) *UniversityProfileUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetDeletedAt sets the "deleted_at" field.
func (upu *UniversityProfileUpdate) SetDeletedAt(t time.Time) *UniversityProfileUpdate {
	upu.mutation.SetDeletedAt(t)
	return upu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (upu *UniversityProfileUpdate) SetNillableDeletedAt(t *time.Time) *UniversityProfileUpdate {
	if t != nil {
		upu.SetDeletedAt(*t)
	}
	return upu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (upu *UniversityProfileUpdate) ClearDeletedAt() *UniversityProfileUpdate {
	upu.mutation.ClearDeletedAt()
	return upu
}

// SetNameCn sets the "name_cn" field.
func (upu *UniversityProfileUpdate) SetNameCn(s string) *UniversityProfileUpdate {
	upu.mutation.SetNameCn(s)
	return upu
}

// SetNillableNameCn sets the "name_cn" field if the given value is not nil.
func (upu *UniversityProfileUpdate) SetNillableNameCn(s *string) *UniversityProfileUpdate {
	if s != nil {
		upu.SetNameCn(*s)
	}
	return upu
}

// SetNameEn sets the "name_en" field.
func (upu *UniversityProfileUpdate) SetNameEn(s string) *UniversityProfileUpdate {
	upu.mutation.SetNameEn(s)
	return upu
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (upu *UniversityProfileUpdate) SetNillableNameEn(s *string) *UniversityProfileUpdate {
	if s != nil {
		upu.SetNameEn(*s)
	}
	return upu
}

// ClearNameEn clears the value of the "name_en" field.
func (upu *UniversityProfileUpdate) ClearNameEn() *UniversityProfileUpdate {
	upu.mutation.ClearNameEn()
	return upu
}

// SetAlias sets the "alias" field.
func (upu *UniversityProfileUpdate) SetAlias(s string) *UniversityProfileUpdate {
	upu.mutation.SetAlias(s)
	return upu
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (upu *UniversityProfileUpdate) SetNillableAlias(s *string) *UniversityProfileUpdate {
	if s != nil {
		upu.SetAlias(*s)
	}
	return upu
}

// ClearAlias clears the value of the "alias" field.
func (upu *UniversityProfileUpdate) ClearAlias() *UniversityProfileUpdate {
	upu.mutation.ClearAlias()
	return upu
}

// SetCountry sets the "country" field.
func (upu *UniversityProfileUpdate) SetCountry(s string) *UniversityProfileUpdate {
	upu.mutation.SetCountry(s)
	return upu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (upu *UniversityProfileUpdate) SetNillableCountry(s *string) *UniversityProfileUpdate {
	if s != nil {
		upu.SetCountry(*s)
	}
	return upu
}

// ClearCountry clears the value of the "country" field.
func (upu *UniversityProfileUpdate) ClearCountry() *UniversityProfileUpdate {
	upu.mutation.ClearCountry()
	return upu
}

// SetIsDoubleFirstClass sets the "is_double_first_class" field.
func (upu *UniversityProfileUpdate) SetIsDoubleFirstClass(b bool) *UniversityProfileUpdate {
	upu.mutation.SetIsDoubleFirstClass(b)
	return upu
}

// SetNillableIsDoubleFirstClass sets the "is_double_first_class" field if the given value is not nil.
func (upu *UniversityProfileUpdate) SetNillableIsDoubleFirstClass(b *bool) *UniversityProfileUpdate {
	if b != nil {
		upu.SetIsDoubleFirstClass(*b)
	}
	return upu
}

// SetIsProject985 sets the "is_project_985" field.
func (upu *UniversityProfileUpdate) SetIsProject985(b bool) *UniversityProfileUpdate {
	upu.mutation.SetIsProject985(b)
	return upu
}

// SetNillableIsProject985 sets the "is_project_985" field if the given value is not nil.
func (upu *UniversityProfileUpdate) SetNillableIsProject985(b *bool) *UniversityProfileUpdate {
	if b != nil {
		upu.SetIsProject985(*b)
	}
	return upu
}

// SetIsProject211 sets the "is_project_211" field.
func (upu *UniversityProfileUpdate) SetIsProject211(b bool) *UniversityProfileUpdate {
	upu.mutation.SetIsProject211(b)
	return upu
}

// SetNillableIsProject211 sets the "is_project_211" field if the given value is not nil.
func (upu *UniversityProfileUpdate) SetNillableIsProject211(b *bool) *UniversityProfileUpdate {
	if b != nil {
		upu.SetIsProject211(*b)
	}
	return upu
}

// SetIsQsTop100 sets the "is_qs_top100" field.
func (upu *UniversityProfileUpdate) SetIsQsTop100(b bool) *UniversityProfileUpdate {
	upu.mutation.SetIsQsTop100(b)
	return upu
}

// SetNillableIsQsTop100 sets the "is_qs_top100" field if the given value is not nil.
func (upu *UniversityProfileUpdate) SetNillableIsQsTop100(b *bool) *UniversityProfileUpdate {
	if b != nil {
		upu.SetIsQsTop100(*b)
	}
	return upu
}

// SetRankQs sets the "rank_qs" field.
func (upu *UniversityProfileUpdate) SetRankQs(i int) *UniversityProfileUpdate {
	upu.mutation.ResetRankQs()
	upu.mutation.SetRankQs(i)
	return upu
}

// SetNillableRankQs sets the "rank_qs" field if the given value is not nil.
func (upu *UniversityProfileUpdate) SetNillableRankQs(i *int) *UniversityProfileUpdate {
	if i != nil {
		upu.SetRankQs(*i)
	}
	return upu
}

// AddRankQs adds i to the "rank_qs" field.
func (upu *UniversityProfileUpdate) AddRankQs(i int) *UniversityProfileUpdate {
	upu.mutation.AddRankQs(i)
	return upu
}

// ClearRankQs clears the value of the "rank_qs" field.
func (upu *UniversityProfileUpdate) ClearRankQs() *UniversityProfileUpdate {
	upu.mutation.ClearRankQs()
	return upu
}

// SetOverallScore sets the "overall_score" field.
func (upu *UniversityProfileUpdate) SetOverallScore(f float64) *UniversityProfileUpdate {
	upu.mutation.ResetOverallScore()
	upu.mutation.SetOverallScore(f)
	return upu
}

// SetNillableOverallScore sets the "overall_score" field if the given value is not nil.
func (upu *UniversityProfileUpdate) SetNillableOverallScore(f *float64) *UniversityProfileUpdate {
	if f != nil {
		upu.SetOverallScore(*f)
	}
	return upu
}

// AddOverallScore adds f to the "overall_score" field.
func (upu *UniversityProfileUpdate) AddOverallScore(f float64) *UniversityProfileUpdate {
	upu.mutation.AddOverallScore(f)
	return upu
}

// ClearOverallScore clears the value of the "overall_score" field.
func (upu *UniversityProfileUpdate) ClearOverallScore() *UniversityProfileUpdate {
	upu.mutation.ClearOverallScore()
	return upu
}

// SetMetadata sets the "metadata" field.
func (upu *UniversityProfileUpdate) SetMetadata(m map[string]interface{}) *UniversityProfileUpdate {
	upu.mutation.SetMetadata(m)
	return upu
}

// ClearMetadata clears the value of the "metadata" field.
func (upu *UniversityProfileUpdate) ClearMetadata() *UniversityProfileUpdate {
	upu.mutation.ClearMetadata()
	return upu
}

// SetVectorContent sets the "vector_content" field.
func (upu *UniversityProfileUpdate) SetVectorContent(s string) *UniversityProfileUpdate {
	upu.mutation.SetVectorContent(s)
	return upu
}

// SetNillableVectorContent sets the "vector_content" field if the given value is not nil.
func (upu *UniversityProfileUpdate) SetNillableVectorContent(s *string) *UniversityProfileUpdate {
	if s != nil {
		upu.SetVectorContent(*s)
	}
	return upu
}

// ClearVectorContent clears the value of the "vector_content" field.
func (upu *UniversityProfileUpdate) ClearVectorContent() *UniversityProfileUpdate {
	upu.mutation.ClearVectorContent()
	return upu
}

// SetVector sets the "vector" field.
func (upu *UniversityProfileUpdate) SetVector(pg *pgvector.Vector) *UniversityProfileUpdate {
	upu.mutation.SetVector(pg)
	return upu
}

// ClearVector clears the value of the "vector" field.
func (upu *UniversityProfileUpdate) ClearVector() *UniversityProfileUpdate {
	upu.mutation.ClearVector()
	return upu
}

// SetCreatedAt sets the "created_at" field.
func (upu *UniversityProfileUpdate) SetCreatedAt(t time.Time) *UniversityProfileUpdate {
	upu.mutation.SetCreatedAt(t)
	return upu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upu *UniversityProfileUpdate) SetNillableCreatedAt(t *time.Time) *UniversityProfileUpdate {
	if t != nil {
		upu.SetCreatedAt(*t)
	}
	return upu
}

// SetUpdatedAt sets the "updated_at" field.
func (upu *UniversityProfileUpdate) SetUpdatedAt(t time.Time) *UniversityProfileUpdate {
	upu.mutation.SetUpdatedAt(t)
	return upu
}

// Mutation returns the UniversityProfileMutation object of the builder.
func (upu *UniversityProfileUpdate) Mutation() *UniversityProfileMutation {
	return upu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UniversityProfileUpdate) Save(ctx context.Context) (int, error) {
	if err := upu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UniversityProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UniversityProfileUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UniversityProfileUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upu *UniversityProfileUpdate) defaults() error {
	if _, ok := upu.mutation.UpdatedAt(); !ok {
		if universityprofile.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized universityprofile.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := universityprofile.UpdateDefaultUpdatedAt()
		upu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (upu *UniversityProfileUpdate) check() error {
	if v, ok := upu.mutation.NameCn(); ok {
		if err := universityprofile.NameCnValidator(v); err != nil {
			return &ValidationError{Name: "name_cn", err: fmt.Errorf(`db: validator failed for field "UniversityProfile.name_cn": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (upu *UniversityProfileUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UniversityProfileUpdate {
	upu.modifiers = append(upu.modifiers, modifiers...)
	return upu
}

func (upu *UniversityProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := upu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(universityprofile.Table, universityprofile.Columns, sqlgraph.NewFieldSpec(universityprofile.FieldID, field.TypeUUID))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.DeletedAt(); ok {
		_spec.SetField(universityprofile.FieldDeletedAt, field.TypeTime, value)
	}
	if upu.mutation.DeletedAtCleared() {
		_spec.ClearField(universityprofile.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := upu.mutation.NameCn(); ok {
		_spec.SetField(universityprofile.FieldNameCn, field.TypeString, value)
	}
	if value, ok := upu.mutation.NameEn(); ok {
		_spec.SetField(universityprofile.FieldNameEn, field.TypeString, value)
	}
	if upu.mutation.NameEnCleared() {
		_spec.ClearField(universityprofile.FieldNameEn, field.TypeString)
	}
	if value, ok := upu.mutation.Alias(); ok {
		_spec.SetField(universityprofile.FieldAlias, field.TypeString, value)
	}
	if upu.mutation.AliasCleared() {
		_spec.ClearField(universityprofile.FieldAlias, field.TypeString)
	}
	if value, ok := upu.mutation.Country(); ok {
		_spec.SetField(universityprofile.FieldCountry, field.TypeString, value)
	}
	if upu.mutation.CountryCleared() {
		_spec.ClearField(universityprofile.FieldCountry, field.TypeString)
	}
	if value, ok := upu.mutation.IsDoubleFirstClass(); ok {
		_spec.SetField(universityprofile.FieldIsDoubleFirstClass, field.TypeBool, value)
	}
	if value, ok := upu.mutation.IsProject985(); ok {
		_spec.SetField(universityprofile.FieldIsProject985, field.TypeBool, value)
	}
	if value, ok := upu.mutation.IsProject211(); ok {
		_spec.SetField(universityprofile.FieldIsProject211, field.TypeBool, value)
	}
	if value, ok := upu.mutation.IsQsTop100(); ok {
		_spec.SetField(universityprofile.FieldIsQsTop100, field.TypeBool, value)
	}
	if value, ok := upu.mutation.RankQs(); ok {
		_spec.SetField(universityprofile.FieldRankQs, field.TypeInt, value)
	}
	if value, ok := upu.mutation.AddedRankQs(); ok {
		_spec.AddField(universityprofile.FieldRankQs, field.TypeInt, value)
	}
	if upu.mutation.RankQsCleared() {
		_spec.ClearField(universityprofile.FieldRankQs, field.TypeInt)
	}
	if value, ok := upu.mutation.OverallScore(); ok {
		_spec.SetField(universityprofile.FieldOverallScore, field.TypeFloat64, value)
	}
	if value, ok := upu.mutation.AddedOverallScore(); ok {
		_spec.AddField(universityprofile.FieldOverallScore, field.TypeFloat64, value)
	}
	if upu.mutation.OverallScoreCleared() {
		_spec.ClearField(universityprofile.FieldOverallScore, field.TypeFloat64)
	}
	if value, ok := upu.mutation.Metadata(); ok {
		_spec.SetField(universityprofile.FieldMetadata, field.TypeJSON, value)
	}
	if upu.mutation.MetadataCleared() {
		_spec.ClearField(universityprofile.FieldMetadata, field.TypeJSON)
	}
	if value, ok := upu.mutation.VectorContent(); ok {
		_spec.SetField(universityprofile.FieldVectorContent, field.TypeString, value)
	}
	if upu.mutation.VectorContentCleared() {
		_spec.ClearField(universityprofile.FieldVectorContent, field.TypeString)
	}
	if value, ok := upu.mutation.Vector(); ok {
		_spec.SetField(universityprofile.FieldVector, field.TypeOther, value)
	}
	if upu.mutation.VectorCleared() {
		_spec.ClearField(universityprofile.FieldVector, field.TypeOther)
	}
	if value, ok := upu.mutation.CreatedAt(); ok {
		_spec.SetField(universityprofile.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := upu.mutation.UpdatedAt(); ok {
		_spec.SetField(universityprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(upu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{universityprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UniversityProfileUpdateOne is the builder for updating a single UniversityProfile entity.
type UniversityProfileUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UniversityProfileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (upuo *UniversityProfileUpdateOne) SetDeletedAt(t time.Time) *UniversityProfileUpdateOne {
	upuo.mutation.SetDeletedAt(t)
	return upuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (upuo *UniversityProfileUpdateOne) SetNillableDeletedAt(t *time.Time) *UniversityProfileUpdateOne {
	if t != nil {
		upuo.SetDeletedAt(*t)
	}
	return upuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (upuo *UniversityProfileUpdateOne) ClearDeletedAt() *UniversityProfileUpdateOne {
	upuo.mutation.ClearDeletedAt()
	return upuo
}

// SetNameCn sets the "name_cn" field.
func (upuo *UniversityProfileUpdateOne) SetNameCn(s string) *UniversityProfileUpdateOne {
	upuo.mutation.SetNameCn(s)
	return upuo
}

// SetNillableNameCn sets the "name_cn" field if the given value is not nil.
func (upuo *UniversityProfileUpdateOne) SetNillableNameCn(s *string) *UniversityProfileUpdateOne {
	if s != nil {
		upuo.SetNameCn(*s)
	}
	return upuo
}

// SetNameEn sets the "name_en" field.
func (upuo *UniversityProfileUpdateOne) SetNameEn(s string) *UniversityProfileUpdateOne {
	upuo.mutation.SetNameEn(s)
	return upuo
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (upuo *UniversityProfileUpdateOne) SetNillableNameEn(s *string) *UniversityProfileUpdateOne {
	if s != nil {
		upuo.SetNameEn(*s)
	}
	return upuo
}

// ClearNameEn clears the value of the "name_en" field.
func (upuo *UniversityProfileUpdateOne) ClearNameEn() *UniversityProfileUpdateOne {
	upuo.mutation.ClearNameEn()
	return upuo
}

// SetAlias sets the "alias" field.
func (upuo *UniversityProfileUpdateOne) SetAlias(s string) *UniversityProfileUpdateOne {
	upuo.mutation.SetAlias(s)
	return upuo
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (upuo *UniversityProfileUpdateOne) SetNillableAlias(s *string) *UniversityProfileUpdateOne {
	if s != nil {
		upuo.SetAlias(*s)
	}
	return upuo
}

// ClearAlias clears the value of the "alias" field.
func (upuo *UniversityProfileUpdateOne) ClearAlias() *UniversityProfileUpdateOne {
	upuo.mutation.ClearAlias()
	return upuo
}

// SetCountry sets the "country" field.
func (upuo *UniversityProfileUpdateOne) SetCountry(s string) *UniversityProfileUpdateOne {
	upuo.mutation.SetCountry(s)
	return upuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (upuo *UniversityProfileUpdateOne) SetNillableCountry(s *string) *UniversityProfileUpdateOne {
	if s != nil {
		upuo.SetCountry(*s)
	}
	return upuo
}

// ClearCountry clears the value of the "country" field.
func (upuo *UniversityProfileUpdateOne) ClearCountry() *UniversityProfileUpdateOne {
	upuo.mutation.ClearCountry()
	return upuo
}

// SetIsDoubleFirstClass sets the "is_double_first_class" field.
func (upuo *UniversityProfileUpdateOne) SetIsDoubleFirstClass(b bool) *UniversityProfileUpdateOne {
	upuo.mutation.SetIsDoubleFirstClass(b)
	return upuo
}

// SetNillableIsDoubleFirstClass sets the "is_double_first_class" field if the given value is not nil.
func (upuo *UniversityProfileUpdateOne) SetNillableIsDoubleFirstClass(b *bool) *UniversityProfileUpdateOne {
	if b != nil {
		upuo.SetIsDoubleFirstClass(*b)
	}
	return upuo
}

// SetIsProject985 sets the "is_project_985" field.
func (upuo *UniversityProfileUpdateOne) SetIsProject985(b bool) *UniversityProfileUpdateOne {
	upuo.mutation.SetIsProject985(b)
	return upuo
}

// SetNillableIsProject985 sets the "is_project_985" field if the given value is not nil.
func (upuo *UniversityProfileUpdateOne) SetNillableIsProject985(b *bool) *UniversityProfileUpdateOne {
	if b != nil {
		upuo.SetIsProject985(*b)
	}
	return upuo
}

// SetIsProject211 sets the "is_project_211" field.
func (upuo *UniversityProfileUpdateOne) SetIsProject211(b bool) *UniversityProfileUpdateOne {
	upuo.mutation.SetIsProject211(b)
	return upuo
}

// SetNillableIsProject211 sets the "is_project_211" field if the given value is not nil.
func (upuo *UniversityProfileUpdateOne) SetNillableIsProject211(b *bool) *UniversityProfileUpdateOne {
	if b != nil {
		upuo.SetIsProject211(*b)
	}
	return upuo
}

// SetIsQsTop100 sets the "is_qs_top100" field.
func (upuo *UniversityProfileUpdateOne) SetIsQsTop100(b bool) *UniversityProfileUpdateOne {
	upuo.mutation.SetIsQsTop100(b)
	return upuo
}

// SetNillableIsQsTop100 sets the "is_qs_top100" field if the given value is not nil.
func (upuo *UniversityProfileUpdateOne) SetNillableIsQsTop100(b *bool) *UniversityProfileUpdateOne {
	if b != nil {
		upuo.SetIsQsTop100(*b)
	}
	return upuo
}

// SetRankQs sets the "rank_qs" field.
func (upuo *UniversityProfileUpdateOne) SetRankQs(i int) *UniversityProfileUpdateOne {
	upuo.mutation.ResetRankQs()
	upuo.mutation.SetRankQs(i)
	return upuo
}

// SetNillableRankQs sets the "rank_qs" field if the given value is not nil.
func (upuo *UniversityProfileUpdateOne) SetNillableRankQs(i *int) *UniversityProfileUpdateOne {
	if i != nil {
		upuo.SetRankQs(*i)
	}
	return upuo
}

// AddRankQs adds i to the "rank_qs" field.
func (upuo *UniversityProfileUpdateOne) AddRankQs(i int) *UniversityProfileUpdateOne {
	upuo.mutation.AddRankQs(i)
	return upuo
}

// ClearRankQs clears the value of the "rank_qs" field.
func (upuo *UniversityProfileUpdateOne) ClearRankQs() *UniversityProfileUpdateOne {
	upuo.mutation.ClearRankQs()
	return upuo
}

// SetOverallScore sets the "overall_score" field.
func (upuo *UniversityProfileUpdateOne) SetOverallScore(f float64) *UniversityProfileUpdateOne {
	upuo.mutation.ResetOverallScore()
	upuo.mutation.SetOverallScore(f)
	return upuo
}

// SetNillableOverallScore sets the "overall_score" field if the given value is not nil.
func (upuo *UniversityProfileUpdateOne) SetNillableOverallScore(f *float64) *UniversityProfileUpdateOne {
	if f != nil {
		upuo.SetOverallScore(*f)
	}
	return upuo
}

// AddOverallScore adds f to the "overall_score" field.
func (upuo *UniversityProfileUpdateOne) AddOverallScore(f float64) *UniversityProfileUpdateOne {
	upuo.mutation.AddOverallScore(f)
	return upuo
}

// ClearOverallScore clears the value of the "overall_score" field.
func (upuo *UniversityProfileUpdateOne) ClearOverallScore() *UniversityProfileUpdateOne {
	upuo.mutation.ClearOverallScore()
	return upuo
}

// SetMetadata sets the "metadata" field.
func (upuo *UniversityProfileUpdateOne) SetMetadata(m map[string]interface{}) *UniversityProfileUpdateOne {
	upuo.mutation.SetMetadata(m)
	return upuo
}

// ClearMetadata clears the value of the "metadata" field.
func (upuo *UniversityProfileUpdateOne) ClearMetadata() *UniversityProfileUpdateOne {
	upuo.mutation.ClearMetadata()
	return upuo
}

// SetVectorContent sets the "vector_content" field.
func (upuo *UniversityProfileUpdateOne) SetVectorContent(s string) *UniversityProfileUpdateOne {
	upuo.mutation.SetVectorContent(s)
	return upuo
}

// SetNillableVectorContent sets the "vector_content" field if the given value is not nil.
func (upuo *UniversityProfileUpdateOne) SetNillableVectorContent(s *string) *UniversityProfileUpdateOne {
	if s != nil {
		upuo.SetVectorContent(*s)
	}
	return upuo
}

// ClearVectorContent clears the value of the "vector_content" field.
func (upuo *UniversityProfileUpdateOne) ClearVectorContent() *UniversityProfileUpdateOne {
	upuo.mutation.ClearVectorContent()
	return upuo
}

// SetVector sets the "vector" field.
func (upuo *UniversityProfileUpdateOne) SetVector(pg *pgvector.Vector) *UniversityProfileUpdateOne {
	upuo.mutation.SetVector(pg)
	return upuo
}

// ClearVector clears the value of the "vector" field.
func (upuo *UniversityProfileUpdateOne) ClearVector() *UniversityProfileUpdateOne {
	upuo.mutation.ClearVector()
	return upuo
}

// SetCreatedAt sets the "created_at" field.
func (upuo *UniversityProfileUpdateOne) SetCreatedAt(t time.Time) *UniversityProfileUpdateOne {
	upuo.mutation.SetCreatedAt(t)
	return upuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upuo *UniversityProfileUpdateOne) SetNillableCreatedAt(t *time.Time) *UniversityProfileUpdateOne {
	if t != nil {
		upuo.SetCreatedAt(*t)
	}
	return upuo
}

// SetUpdatedAt sets the "updated_at" field.
func (upuo *UniversityProfileUpdateOne) SetUpdatedAt(t time.Time) *UniversityProfileUpdateOne {
	upuo.mutation.SetUpdatedAt(t)
	return upuo
}

// Mutation returns the UniversityProfileMutation object of the builder.
func (upuo *UniversityProfileUpdateOne) Mutation() *UniversityProfileMutation {
	return upuo.mutation
}

// Where appends a list predicates to the UniversityProfileUpdate builder.
func (upuo *UniversityProfileUpdateOne) Where(ps ...predicate.UniversityProfile) *UniversityProfileUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UniversityProfileUpdateOne) Select(field string, fields ...string) *UniversityProfileUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UniversityProfile entity.
func (upuo *UniversityProfileUpdateOne) Save(ctx context.Context) (*UniversityProfile, error) {
	if err := upuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UniversityProfileUpdateOne) SaveX(ctx context.Context) *UniversityProfile {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UniversityProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UniversityProfileUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upuo *UniversityProfileUpdateOne) defaults() error {
	if _, ok := upuo.mutation.UpdatedAt(); !ok {
		if universityprofile.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized universityprofile.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := universityprofile.UpdateDefaultUpdatedAt()
		upuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (upuo *UniversityProfileUpdateOne) check() error {
	if v, ok := upuo.mutation.NameCn(); ok {
		if err := universityprofile.NameCnValidator(v); err != nil {
			return &ValidationError{Name: "name_cn", err: fmt.Errorf(`db: validator failed for field "UniversityProfile.name_cn": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (upuo *UniversityProfileUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UniversityProfileUpdateOne {
	upuo.modifiers = append(upuo.modifiers, modifiers...)
	return upuo
}

func (upuo *UniversityProfileUpdateOne) sqlSave(ctx context.Context) (_node *UniversityProfile, err error) {
	if err := upuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(universityprofile.Table, universityprofile.Columns, sqlgraph.NewFieldSpec(universityprofile.FieldID, field.TypeUUID))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "UniversityProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, universityprofile.FieldID)
		for _, f := range fields {
			if !universityprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != universityprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.DeletedAt(); ok {
		_spec.SetField(universityprofile.FieldDeletedAt, field.TypeTime, value)
	}
	if upuo.mutation.DeletedAtCleared() {
		_spec.ClearField(universityprofile.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := upuo.mutation.NameCn(); ok {
		_spec.SetField(universityprofile.FieldNameCn, field.TypeString, value)
	}
	if value, ok := upuo.mutation.NameEn(); ok {
		_spec.SetField(universityprofile.FieldNameEn, field.TypeString, value)
	}
	if upuo.mutation.NameEnCleared() {
		_spec.ClearField(universityprofile.FieldNameEn, field.TypeString)
	}
	if value, ok := upuo.mutation.Alias(); ok {
		_spec.SetField(universityprofile.FieldAlias, field.TypeString, value)
	}
	if upuo.mutation.AliasCleared() {
		_spec.ClearField(universityprofile.FieldAlias, field.TypeString)
	}
	if value, ok := upuo.mutation.Country(); ok {
		_spec.SetField(universityprofile.FieldCountry, field.TypeString, value)
	}
	if upuo.mutation.CountryCleared() {
		_spec.ClearField(universityprofile.FieldCountry, field.TypeString)
	}
	if value, ok := upuo.mutation.IsDoubleFirstClass(); ok {
		_spec.SetField(universityprofile.FieldIsDoubleFirstClass, field.TypeBool, value)
	}
	if value, ok := upuo.mutation.IsProject985(); ok {
		_spec.SetField(universityprofile.FieldIsProject985, field.TypeBool, value)
	}
	if value, ok := upuo.mutation.IsProject211(); ok {
		_spec.SetField(universityprofile.FieldIsProject211, field.TypeBool, value)
	}
	if value, ok := upuo.mutation.IsQsTop100(); ok {
		_spec.SetField(universityprofile.FieldIsQsTop100, field.TypeBool, value)
	}
	if value, ok := upuo.mutation.RankQs(); ok {
		_spec.SetField(universityprofile.FieldRankQs, field.TypeInt, value)
	}
	if value, ok := upuo.mutation.AddedRankQs(); ok {
		_spec.AddField(universityprofile.FieldRankQs, field.TypeInt, value)
	}
	if upuo.mutation.RankQsCleared() {
		_spec.ClearField(universityprofile.FieldRankQs, field.TypeInt)
	}
	if value, ok := upuo.mutation.OverallScore(); ok {
		_spec.SetField(universityprofile.FieldOverallScore, field.TypeFloat64, value)
	}
	if value, ok := upuo.mutation.AddedOverallScore(); ok {
		_spec.AddField(universityprofile.FieldOverallScore, field.TypeFloat64, value)
	}
	if upuo.mutation.OverallScoreCleared() {
		_spec.ClearField(universityprofile.FieldOverallScore, field.TypeFloat64)
	}
	if value, ok := upuo.mutation.Metadata(); ok {
		_spec.SetField(universityprofile.FieldMetadata, field.TypeJSON, value)
	}
	if upuo.mutation.MetadataCleared() {
		_spec.ClearField(universityprofile.FieldMetadata, field.TypeJSON)
	}
	if value, ok := upuo.mutation.VectorContent(); ok {
		_spec.SetField(universityprofile.FieldVectorContent, field.TypeString, value)
	}
	if upuo.mutation.VectorContentCleared() {
		_spec.ClearField(universityprofile.FieldVectorContent, field.TypeString)
	}
	if value, ok := upuo.mutation.Vector(); ok {
		_spec.SetField(universityprofile.FieldVector, field.TypeOther, value)
	}
	if upuo.mutation.VectorCleared() {
		_spec.ClearField(universityprofile.FieldVector, field.TypeOther)
	}
	if value, ok := upuo.mutation.CreatedAt(); ok {
		_spec.SetField(universityprofile.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := upuo.mutation.UpdatedAt(); ok {
		_spec.SetField(universityprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(upuo.modifiers...)
	_node = &UniversityProfile{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{universityprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
