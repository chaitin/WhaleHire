// Code generated by ent, DO NOT EDIT.

package resumeskill

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEQ(FieldDeletedAt, v))
}

// ResumeID applies equality check predicate on the "resume_id" field. It's identical to ResumeIDEQ.
func ResumeID(v uuid.UUID) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEQ(FieldResumeID, v))
}

// SkillName applies equality check predicate on the "skill_name" field. It's identical to SkillNameEQ.
func SkillName(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEQ(FieldSkillName, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEQ(FieldLevel, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEQ(FieldDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNotNull(FieldDeletedAt))
}

// ResumeIDEQ applies the EQ predicate on the "resume_id" field.
func ResumeIDEQ(v uuid.UUID) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEQ(FieldResumeID, v))
}

// ResumeIDNEQ applies the NEQ predicate on the "resume_id" field.
func ResumeIDNEQ(v uuid.UUID) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNEQ(FieldResumeID, v))
}

// ResumeIDIn applies the In predicate on the "resume_id" field.
func ResumeIDIn(vs ...uuid.UUID) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldIn(FieldResumeID, vs...))
}

// ResumeIDNotIn applies the NotIn predicate on the "resume_id" field.
func ResumeIDNotIn(vs ...uuid.UUID) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNotIn(FieldResumeID, vs...))
}

// SkillNameEQ applies the EQ predicate on the "skill_name" field.
func SkillNameEQ(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEQ(FieldSkillName, v))
}

// SkillNameNEQ applies the NEQ predicate on the "skill_name" field.
func SkillNameNEQ(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNEQ(FieldSkillName, v))
}

// SkillNameIn applies the In predicate on the "skill_name" field.
func SkillNameIn(vs ...string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldIn(FieldSkillName, vs...))
}

// SkillNameNotIn applies the NotIn predicate on the "skill_name" field.
func SkillNameNotIn(vs ...string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNotIn(FieldSkillName, vs...))
}

// SkillNameGT applies the GT predicate on the "skill_name" field.
func SkillNameGT(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldGT(FieldSkillName, v))
}

// SkillNameGTE applies the GTE predicate on the "skill_name" field.
func SkillNameGTE(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldGTE(FieldSkillName, v))
}

// SkillNameLT applies the LT predicate on the "skill_name" field.
func SkillNameLT(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldLT(FieldSkillName, v))
}

// SkillNameLTE applies the LTE predicate on the "skill_name" field.
func SkillNameLTE(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldLTE(FieldSkillName, v))
}

// SkillNameContains applies the Contains predicate on the "skill_name" field.
func SkillNameContains(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldContains(FieldSkillName, v))
}

// SkillNameHasPrefix applies the HasPrefix predicate on the "skill_name" field.
func SkillNameHasPrefix(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldHasPrefix(FieldSkillName, v))
}

// SkillNameHasSuffix applies the HasSuffix predicate on the "skill_name" field.
func SkillNameHasSuffix(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldHasSuffix(FieldSkillName, v))
}

// SkillNameIsNil applies the IsNil predicate on the "skill_name" field.
func SkillNameIsNil() predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldIsNull(FieldSkillName))
}

// SkillNameNotNil applies the NotNil predicate on the "skill_name" field.
func SkillNameNotNil() predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNotNull(FieldSkillName))
}

// SkillNameEqualFold applies the EqualFold predicate on the "skill_name" field.
func SkillNameEqualFold(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEqualFold(FieldSkillName, v))
}

// SkillNameContainsFold applies the ContainsFold predicate on the "skill_name" field.
func SkillNameContainsFold(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldContainsFold(FieldSkillName, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldLTE(FieldLevel, v))
}

// LevelContains applies the Contains predicate on the "level" field.
func LevelContains(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldContains(FieldLevel, v))
}

// LevelHasPrefix applies the HasPrefix predicate on the "level" field.
func LevelHasPrefix(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldHasPrefix(FieldLevel, v))
}

// LevelHasSuffix applies the HasSuffix predicate on the "level" field.
func LevelHasSuffix(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldHasSuffix(FieldLevel, v))
}

// LevelIsNil applies the IsNil predicate on the "level" field.
func LevelIsNil() predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldIsNull(FieldLevel))
}

// LevelNotNil applies the NotNil predicate on the "level" field.
func LevelNotNil() predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNotNull(FieldLevel))
}

// LevelEqualFold applies the EqualFold predicate on the "level" field.
func LevelEqualFold(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEqualFold(FieldLevel, v))
}

// LevelContainsFold applies the ContainsFold predicate on the "level" field.
func LevelContainsFold(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldContainsFold(FieldLevel, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldContainsFold(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasResume applies the HasEdge predicate on the "resume" edge.
func HasResume() predicate.ResumeSkill {
	return predicate.ResumeSkill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ResumeTable, ResumeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResumeWith applies the HasEdge predicate on the "resume" edge with a given conditions (other predicates).
func HasResumeWith(preds ...predicate.Resume) predicate.ResumeSkill {
	return predicate.ResumeSkill(func(s *sql.Selector) {
		step := newResumeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ResumeSkill) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ResumeSkill) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ResumeSkill) predicate.ResumeSkill {
	return predicate.ResumeSkill(sql.NotPredicates(p))
}
