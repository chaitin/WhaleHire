// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/auditlog"
	"github.com/google/uuid"
)

// AuditLogCreate is the builder for creating a AuditLog entity.
type AuditLogCreate struct {
	config
	mutation *AuditLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (alc *AuditLogCreate) SetDeletedAt(t time.Time) *AuditLogCreate {
	alc.mutation.SetDeletedAt(t)
	return alc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableDeletedAt(t *time.Time) *AuditLogCreate {
	if t != nil {
		alc.SetDeletedAt(*t)
	}
	return alc
}

// SetOperatorType sets the "operator_type" field.
func (alc *AuditLogCreate) SetOperatorType(ct consts.OperatorType) *AuditLogCreate {
	alc.mutation.SetOperatorType(ct)
	return alc
}

// SetOperatorID sets the "operator_id" field.
func (alc *AuditLogCreate) SetOperatorID(u uuid.UUID) *AuditLogCreate {
	alc.mutation.SetOperatorID(u)
	return alc
}

// SetNillableOperatorID sets the "operator_id" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableOperatorID(u *uuid.UUID) *AuditLogCreate {
	if u != nil {
		alc.SetOperatorID(*u)
	}
	return alc
}

// SetOperatorName sets the "operator_name" field.
func (alc *AuditLogCreate) SetOperatorName(s string) *AuditLogCreate {
	alc.mutation.SetOperatorName(s)
	return alc
}

// SetNillableOperatorName sets the "operator_name" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableOperatorName(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetOperatorName(*s)
	}
	return alc
}

// SetOperationType sets the "operation_type" field.
func (alc *AuditLogCreate) SetOperationType(ct consts.OperationType) *AuditLogCreate {
	alc.mutation.SetOperationType(ct)
	return alc
}

// SetResourceType sets the "resource_type" field.
func (alc *AuditLogCreate) SetResourceType(ct consts.ResourceType) *AuditLogCreate {
	alc.mutation.SetResourceType(ct)
	return alc
}

// SetResourceID sets the "resource_id" field.
func (alc *AuditLogCreate) SetResourceID(s string) *AuditLogCreate {
	alc.mutation.SetResourceID(s)
	return alc
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableResourceID(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetResourceID(*s)
	}
	return alc
}

// SetResourceName sets the "resource_name" field.
func (alc *AuditLogCreate) SetResourceName(s string) *AuditLogCreate {
	alc.mutation.SetResourceName(s)
	return alc
}

// SetNillableResourceName sets the "resource_name" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableResourceName(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetResourceName(*s)
	}
	return alc
}

// SetMethod sets the "method" field.
func (alc *AuditLogCreate) SetMethod(s string) *AuditLogCreate {
	alc.mutation.SetMethod(s)
	return alc
}

// SetPath sets the "path" field.
func (alc *AuditLogCreate) SetPath(s string) *AuditLogCreate {
	alc.mutation.SetPath(s)
	return alc
}

// SetQueryParams sets the "query_params" field.
func (alc *AuditLogCreate) SetQueryParams(s string) *AuditLogCreate {
	alc.mutation.SetQueryParams(s)
	return alc
}

// SetNillableQueryParams sets the "query_params" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableQueryParams(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetQueryParams(*s)
	}
	return alc
}

// SetRequestBody sets the "request_body" field.
func (alc *AuditLogCreate) SetRequestBody(s string) *AuditLogCreate {
	alc.mutation.SetRequestBody(s)
	return alc
}

// SetNillableRequestBody sets the "request_body" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableRequestBody(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetRequestBody(*s)
	}
	return alc
}

// SetUserAgent sets the "user_agent" field.
func (alc *AuditLogCreate) SetUserAgent(s string) *AuditLogCreate {
	alc.mutation.SetUserAgent(s)
	return alc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableUserAgent(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetUserAgent(*s)
	}
	return alc
}

// SetStatusCode sets the "status_code" field.
func (alc *AuditLogCreate) SetStatusCode(i int) *AuditLogCreate {
	alc.mutation.SetStatusCode(i)
	return alc
}

// SetStatus sets the "status" field.
func (alc *AuditLogCreate) SetStatus(cls consts.AuditLogStatus) *AuditLogCreate {
	alc.mutation.SetStatus(cls)
	return alc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableStatus(cls *consts.AuditLogStatus) *AuditLogCreate {
	if cls != nil {
		alc.SetStatus(*cls)
	}
	return alc
}

// SetResponseBody sets the "response_body" field.
func (alc *AuditLogCreate) SetResponseBody(s string) *AuditLogCreate {
	alc.mutation.SetResponseBody(s)
	return alc
}

// SetNillableResponseBody sets the "response_body" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableResponseBody(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetResponseBody(*s)
	}
	return alc
}

// SetErrorMessage sets the "error_message" field.
func (alc *AuditLogCreate) SetErrorMessage(s string) *AuditLogCreate {
	alc.mutation.SetErrorMessage(s)
	return alc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableErrorMessage(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetErrorMessage(*s)
	}
	return alc
}

// SetIP sets the "ip" field.
func (alc *AuditLogCreate) SetIP(s string) *AuditLogCreate {
	alc.mutation.SetIP(s)
	return alc
}

// SetCountry sets the "country" field.
func (alc *AuditLogCreate) SetCountry(s string) *AuditLogCreate {
	alc.mutation.SetCountry(s)
	return alc
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableCountry(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetCountry(*s)
	}
	return alc
}

// SetProvince sets the "province" field.
func (alc *AuditLogCreate) SetProvince(s string) *AuditLogCreate {
	alc.mutation.SetProvince(s)
	return alc
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableProvince(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetProvince(*s)
	}
	return alc
}

// SetCity sets the "city" field.
func (alc *AuditLogCreate) SetCity(s string) *AuditLogCreate {
	alc.mutation.SetCity(s)
	return alc
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableCity(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetCity(*s)
	}
	return alc
}

// SetIsp sets the "isp" field.
func (alc *AuditLogCreate) SetIsp(s string) *AuditLogCreate {
	alc.mutation.SetIsp(s)
	return alc
}

// SetNillableIsp sets the "isp" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableIsp(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetIsp(*s)
	}
	return alc
}

// SetSessionID sets the "session_id" field.
func (alc *AuditLogCreate) SetSessionID(s string) *AuditLogCreate {
	alc.mutation.SetSessionID(s)
	return alc
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableSessionID(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetSessionID(*s)
	}
	return alc
}

// SetTraceID sets the "trace_id" field.
func (alc *AuditLogCreate) SetTraceID(s string) *AuditLogCreate {
	alc.mutation.SetTraceID(s)
	return alc
}

// SetNillableTraceID sets the "trace_id" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableTraceID(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetTraceID(*s)
	}
	return alc
}

// SetBusinessData sets the "business_data" field.
func (alc *AuditLogCreate) SetBusinessData(s string) *AuditLogCreate {
	alc.mutation.SetBusinessData(s)
	return alc
}

// SetNillableBusinessData sets the "business_data" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableBusinessData(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetBusinessData(*s)
	}
	return alc
}

// SetChanges sets the "changes" field.
func (alc *AuditLogCreate) SetChanges(s string) *AuditLogCreate {
	alc.mutation.SetChanges(s)
	return alc
}

// SetNillableChanges sets the "changes" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableChanges(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetChanges(*s)
	}
	return alc
}

// SetDescription sets the "description" field.
func (alc *AuditLogCreate) SetDescription(s string) *AuditLogCreate {
	alc.mutation.SetDescription(s)
	return alc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableDescription(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetDescription(*s)
	}
	return alc
}

// SetCreatedAt sets the "created_at" field.
func (alc *AuditLogCreate) SetCreatedAt(t time.Time) *AuditLogCreate {
	alc.mutation.SetCreatedAt(t)
	return alc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableCreatedAt(t *time.Time) *AuditLogCreate {
	if t != nil {
		alc.SetCreatedAt(*t)
	}
	return alc
}

// SetUpdatedAt sets the "updated_at" field.
func (alc *AuditLogCreate) SetUpdatedAt(t time.Time) *AuditLogCreate {
	alc.mutation.SetUpdatedAt(t)
	return alc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableUpdatedAt(t *time.Time) *AuditLogCreate {
	if t != nil {
		alc.SetUpdatedAt(*t)
	}
	return alc
}

// SetDurationMs sets the "duration_ms" field.
func (alc *AuditLogCreate) SetDurationMs(i int64) *AuditLogCreate {
	alc.mutation.SetDurationMs(i)
	return alc
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableDurationMs(i *int64) *AuditLogCreate {
	if i != nil {
		alc.SetDurationMs(*i)
	}
	return alc
}

// SetID sets the "id" field.
func (alc *AuditLogCreate) SetID(u uuid.UUID) *AuditLogCreate {
	alc.mutation.SetID(u)
	return alc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableID(u *uuid.UUID) *AuditLogCreate {
	if u != nil {
		alc.SetID(*u)
	}
	return alc
}

// Mutation returns the AuditLogMutation object of the builder.
func (alc *AuditLogCreate) Mutation() *AuditLogMutation {
	return alc.mutation
}

// Save creates the AuditLog in the database.
func (alc *AuditLogCreate) Save(ctx context.Context) (*AuditLog, error) {
	if err := alc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, alc.sqlSave, alc.mutation, alc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (alc *AuditLogCreate) SaveX(ctx context.Context) *AuditLog {
	v, err := alc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alc *AuditLogCreate) Exec(ctx context.Context) error {
	_, err := alc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alc *AuditLogCreate) ExecX(ctx context.Context) {
	if err := alc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alc *AuditLogCreate) defaults() error {
	if _, ok := alc.mutation.Status(); !ok {
		v := auditlog.DefaultStatus
		alc.mutation.SetStatus(v)
	}
	if _, ok := alc.mutation.CreatedAt(); !ok {
		if auditlog.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized auditlog.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := auditlog.DefaultCreatedAt()
		alc.mutation.SetCreatedAt(v)
	}
	if _, ok := alc.mutation.UpdatedAt(); !ok {
		if auditlog.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized auditlog.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := auditlog.DefaultUpdatedAt()
		alc.mutation.SetUpdatedAt(v)
	}
	if _, ok := alc.mutation.ID(); !ok {
		if auditlog.DefaultID == nil {
			return fmt.Errorf("db: uninitialized auditlog.DefaultID (forgotten import db/runtime?)")
		}
		v := auditlog.DefaultID()
		alc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (alc *AuditLogCreate) check() error {
	if _, ok := alc.mutation.OperatorType(); !ok {
		return &ValidationError{Name: "operator_type", err: errors.New(`db: missing required field "AuditLog.operator_type"`)}
	}
	if _, ok := alc.mutation.OperationType(); !ok {
		return &ValidationError{Name: "operation_type", err: errors.New(`db: missing required field "AuditLog.operation_type"`)}
	}
	if _, ok := alc.mutation.ResourceType(); !ok {
		return &ValidationError{Name: "resource_type", err: errors.New(`db: missing required field "AuditLog.resource_type"`)}
	}
	if _, ok := alc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`db: missing required field "AuditLog.method"`)}
	}
	if _, ok := alc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`db: missing required field "AuditLog.path"`)}
	}
	if _, ok := alc.mutation.StatusCode(); !ok {
		return &ValidationError{Name: "status_code", err: errors.New(`db: missing required field "AuditLog.status_code"`)}
	}
	if _, ok := alc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "AuditLog.status"`)}
	}
	if _, ok := alc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`db: missing required field "AuditLog.ip"`)}
	}
	if _, ok := alc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "AuditLog.created_at"`)}
	}
	if _, ok := alc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "AuditLog.updated_at"`)}
	}
	return nil
}

func (alc *AuditLogCreate) sqlSave(ctx context.Context) (*AuditLog, error) {
	if err := alc.check(); err != nil {
		return nil, err
	}
	_node, _spec := alc.createSpec()
	if err := sqlgraph.CreateNode(ctx, alc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	alc.mutation.id = &_node.ID
	alc.mutation.done = true
	return _node, nil
}

func (alc *AuditLogCreate) createSpec() (*AuditLog, *sqlgraph.CreateSpec) {
	var (
		_node = &AuditLog{config: alc.config}
		_spec = sqlgraph.NewCreateSpec(auditlog.Table, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = alc.conflict
	if id, ok := alc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := alc.mutation.DeletedAt(); ok {
		_spec.SetField(auditlog.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := alc.mutation.OperatorType(); ok {
		_spec.SetField(auditlog.FieldOperatorType, field.TypeString, value)
		_node.OperatorType = value
	}
	if value, ok := alc.mutation.OperatorID(); ok {
		_spec.SetField(auditlog.FieldOperatorID, field.TypeUUID, value)
		_node.OperatorID = value
	}
	if value, ok := alc.mutation.OperatorName(); ok {
		_spec.SetField(auditlog.FieldOperatorName, field.TypeString, value)
		_node.OperatorName = value
	}
	if value, ok := alc.mutation.OperationType(); ok {
		_spec.SetField(auditlog.FieldOperationType, field.TypeString, value)
		_node.OperationType = value
	}
	if value, ok := alc.mutation.ResourceType(); ok {
		_spec.SetField(auditlog.FieldResourceType, field.TypeString, value)
		_node.ResourceType = value
	}
	if value, ok := alc.mutation.ResourceID(); ok {
		_spec.SetField(auditlog.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := alc.mutation.ResourceName(); ok {
		_spec.SetField(auditlog.FieldResourceName, field.TypeString, value)
		_node.ResourceName = value
	}
	if value, ok := alc.mutation.Method(); ok {
		_spec.SetField(auditlog.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := alc.mutation.Path(); ok {
		_spec.SetField(auditlog.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := alc.mutation.QueryParams(); ok {
		_spec.SetField(auditlog.FieldQueryParams, field.TypeString, value)
		_node.QueryParams = value
	}
	if value, ok := alc.mutation.RequestBody(); ok {
		_spec.SetField(auditlog.FieldRequestBody, field.TypeString, value)
		_node.RequestBody = value
	}
	if value, ok := alc.mutation.UserAgent(); ok {
		_spec.SetField(auditlog.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := alc.mutation.StatusCode(); ok {
		_spec.SetField(auditlog.FieldStatusCode, field.TypeInt, value)
		_node.StatusCode = value
	}
	if value, ok := alc.mutation.Status(); ok {
		_spec.SetField(auditlog.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := alc.mutation.ResponseBody(); ok {
		_spec.SetField(auditlog.FieldResponseBody, field.TypeString, value)
		_node.ResponseBody = value
	}
	if value, ok := alc.mutation.ErrorMessage(); ok {
		_spec.SetField(auditlog.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := alc.mutation.IP(); ok {
		_spec.SetField(auditlog.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := alc.mutation.Country(); ok {
		_spec.SetField(auditlog.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := alc.mutation.Province(); ok {
		_spec.SetField(auditlog.FieldProvince, field.TypeString, value)
		_node.Province = value
	}
	if value, ok := alc.mutation.City(); ok {
		_spec.SetField(auditlog.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := alc.mutation.Isp(); ok {
		_spec.SetField(auditlog.FieldIsp, field.TypeString, value)
		_node.Isp = value
	}
	if value, ok := alc.mutation.SessionID(); ok {
		_spec.SetField(auditlog.FieldSessionID, field.TypeString, value)
		_node.SessionID = value
	}
	if value, ok := alc.mutation.TraceID(); ok {
		_spec.SetField(auditlog.FieldTraceID, field.TypeString, value)
		_node.TraceID = value
	}
	if value, ok := alc.mutation.BusinessData(); ok {
		_spec.SetField(auditlog.FieldBusinessData, field.TypeString, value)
		_node.BusinessData = value
	}
	if value, ok := alc.mutation.Changes(); ok {
		_spec.SetField(auditlog.FieldChanges, field.TypeString, value)
		_node.Changes = value
	}
	if value, ok := alc.mutation.Description(); ok {
		_spec.SetField(auditlog.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := alc.mutation.CreatedAt(); ok {
		_spec.SetField(auditlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := alc.mutation.UpdatedAt(); ok {
		_spec.SetField(auditlog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := alc.mutation.DurationMs(); ok {
		_spec.SetField(auditlog.FieldDurationMs, field.TypeInt64, value)
		_node.DurationMs = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AuditLog.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AuditLogUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (alc *AuditLogCreate) OnConflict(opts ...sql.ConflictOption) *AuditLogUpsertOne {
	alc.conflict = opts
	return &AuditLogUpsertOne{
		create: alc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AuditLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (alc *AuditLogCreate) OnConflictColumns(columns ...string) *AuditLogUpsertOne {
	alc.conflict = append(alc.conflict, sql.ConflictColumns(columns...))
	return &AuditLogUpsertOne{
		create: alc,
	}
}

type (
	// AuditLogUpsertOne is the builder for "upsert"-ing
	//  one AuditLog node.
	AuditLogUpsertOne struct {
		create *AuditLogCreate
	}

	// AuditLogUpsert is the "OnConflict" setter.
	AuditLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *AuditLogUpsert) SetDeletedAt(v time.Time) *AuditLogUpsert {
	u.Set(auditlog.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateDeletedAt() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AuditLogUpsert) ClearDeletedAt() *AuditLogUpsert {
	u.SetNull(auditlog.FieldDeletedAt)
	return u
}

// SetOperatorType sets the "operator_type" field.
func (u *AuditLogUpsert) SetOperatorType(v consts.OperatorType) *AuditLogUpsert {
	u.Set(auditlog.FieldOperatorType, v)
	return u
}

// UpdateOperatorType sets the "operator_type" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateOperatorType() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldOperatorType)
	return u
}

// SetOperatorID sets the "operator_id" field.
func (u *AuditLogUpsert) SetOperatorID(v uuid.UUID) *AuditLogUpsert {
	u.Set(auditlog.FieldOperatorID, v)
	return u
}

// UpdateOperatorID sets the "operator_id" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateOperatorID() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldOperatorID)
	return u
}

// ClearOperatorID clears the value of the "operator_id" field.
func (u *AuditLogUpsert) ClearOperatorID() *AuditLogUpsert {
	u.SetNull(auditlog.FieldOperatorID)
	return u
}

// SetOperatorName sets the "operator_name" field.
func (u *AuditLogUpsert) SetOperatorName(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldOperatorName, v)
	return u
}

// UpdateOperatorName sets the "operator_name" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateOperatorName() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldOperatorName)
	return u
}

// ClearOperatorName clears the value of the "operator_name" field.
func (u *AuditLogUpsert) ClearOperatorName() *AuditLogUpsert {
	u.SetNull(auditlog.FieldOperatorName)
	return u
}

// SetOperationType sets the "operation_type" field.
func (u *AuditLogUpsert) SetOperationType(v consts.OperationType) *AuditLogUpsert {
	u.Set(auditlog.FieldOperationType, v)
	return u
}

// UpdateOperationType sets the "operation_type" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateOperationType() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldOperationType)
	return u
}

// SetResourceType sets the "resource_type" field.
func (u *AuditLogUpsert) SetResourceType(v consts.ResourceType) *AuditLogUpsert {
	u.Set(auditlog.FieldResourceType, v)
	return u
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateResourceType() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldResourceType)
	return u
}

// SetResourceID sets the "resource_id" field.
func (u *AuditLogUpsert) SetResourceID(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldResourceID, v)
	return u
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateResourceID() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldResourceID)
	return u
}

// ClearResourceID clears the value of the "resource_id" field.
func (u *AuditLogUpsert) ClearResourceID() *AuditLogUpsert {
	u.SetNull(auditlog.FieldResourceID)
	return u
}

// SetResourceName sets the "resource_name" field.
func (u *AuditLogUpsert) SetResourceName(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldResourceName, v)
	return u
}

// UpdateResourceName sets the "resource_name" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateResourceName() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldResourceName)
	return u
}

// ClearResourceName clears the value of the "resource_name" field.
func (u *AuditLogUpsert) ClearResourceName() *AuditLogUpsert {
	u.SetNull(auditlog.FieldResourceName)
	return u
}

// SetMethod sets the "method" field.
func (u *AuditLogUpsert) SetMethod(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldMethod, v)
	return u
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateMethod() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldMethod)
	return u
}

// SetPath sets the "path" field.
func (u *AuditLogUpsert) SetPath(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdatePath() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldPath)
	return u
}

// SetQueryParams sets the "query_params" field.
func (u *AuditLogUpsert) SetQueryParams(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldQueryParams, v)
	return u
}

// UpdateQueryParams sets the "query_params" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateQueryParams() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldQueryParams)
	return u
}

// ClearQueryParams clears the value of the "query_params" field.
func (u *AuditLogUpsert) ClearQueryParams() *AuditLogUpsert {
	u.SetNull(auditlog.FieldQueryParams)
	return u
}

// SetRequestBody sets the "request_body" field.
func (u *AuditLogUpsert) SetRequestBody(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldRequestBody, v)
	return u
}

// UpdateRequestBody sets the "request_body" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateRequestBody() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldRequestBody)
	return u
}

// ClearRequestBody clears the value of the "request_body" field.
func (u *AuditLogUpsert) ClearRequestBody() *AuditLogUpsert {
	u.SetNull(auditlog.FieldRequestBody)
	return u
}

// SetUserAgent sets the "user_agent" field.
func (u *AuditLogUpsert) SetUserAgent(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldUserAgent, v)
	return u
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateUserAgent() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldUserAgent)
	return u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *AuditLogUpsert) ClearUserAgent() *AuditLogUpsert {
	u.SetNull(auditlog.FieldUserAgent)
	return u
}

// SetStatusCode sets the "status_code" field.
func (u *AuditLogUpsert) SetStatusCode(v int) *AuditLogUpsert {
	u.Set(auditlog.FieldStatusCode, v)
	return u
}

// UpdateStatusCode sets the "status_code" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateStatusCode() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldStatusCode)
	return u
}

// AddStatusCode adds v to the "status_code" field.
func (u *AuditLogUpsert) AddStatusCode(v int) *AuditLogUpsert {
	u.Add(auditlog.FieldStatusCode, v)
	return u
}

// SetStatus sets the "status" field.
func (u *AuditLogUpsert) SetStatus(v consts.AuditLogStatus) *AuditLogUpsert {
	u.Set(auditlog.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateStatus() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldStatus)
	return u
}

// SetResponseBody sets the "response_body" field.
func (u *AuditLogUpsert) SetResponseBody(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldResponseBody, v)
	return u
}

// UpdateResponseBody sets the "response_body" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateResponseBody() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldResponseBody)
	return u
}

// ClearResponseBody clears the value of the "response_body" field.
func (u *AuditLogUpsert) ClearResponseBody() *AuditLogUpsert {
	u.SetNull(auditlog.FieldResponseBody)
	return u
}

// SetErrorMessage sets the "error_message" field.
func (u *AuditLogUpsert) SetErrorMessage(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldErrorMessage, v)
	return u
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateErrorMessage() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldErrorMessage)
	return u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *AuditLogUpsert) ClearErrorMessage() *AuditLogUpsert {
	u.SetNull(auditlog.FieldErrorMessage)
	return u
}

// SetIP sets the "ip" field.
func (u *AuditLogUpsert) SetIP(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateIP() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldIP)
	return u
}

// SetCountry sets the "country" field.
func (u *AuditLogUpsert) SetCountry(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateCountry() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldCountry)
	return u
}

// ClearCountry clears the value of the "country" field.
func (u *AuditLogUpsert) ClearCountry() *AuditLogUpsert {
	u.SetNull(auditlog.FieldCountry)
	return u
}

// SetProvince sets the "province" field.
func (u *AuditLogUpsert) SetProvince(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldProvince, v)
	return u
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateProvince() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldProvince)
	return u
}

// ClearProvince clears the value of the "province" field.
func (u *AuditLogUpsert) ClearProvince() *AuditLogUpsert {
	u.SetNull(auditlog.FieldProvince)
	return u
}

// SetCity sets the "city" field.
func (u *AuditLogUpsert) SetCity(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateCity() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldCity)
	return u
}

// ClearCity clears the value of the "city" field.
func (u *AuditLogUpsert) ClearCity() *AuditLogUpsert {
	u.SetNull(auditlog.FieldCity)
	return u
}

// SetIsp sets the "isp" field.
func (u *AuditLogUpsert) SetIsp(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldIsp, v)
	return u
}

// UpdateIsp sets the "isp" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateIsp() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldIsp)
	return u
}

// ClearIsp clears the value of the "isp" field.
func (u *AuditLogUpsert) ClearIsp() *AuditLogUpsert {
	u.SetNull(auditlog.FieldIsp)
	return u
}

// SetSessionID sets the "session_id" field.
func (u *AuditLogUpsert) SetSessionID(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldSessionID, v)
	return u
}

// UpdateSessionID sets the "session_id" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateSessionID() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldSessionID)
	return u
}

// ClearSessionID clears the value of the "session_id" field.
func (u *AuditLogUpsert) ClearSessionID() *AuditLogUpsert {
	u.SetNull(auditlog.FieldSessionID)
	return u
}

// SetTraceID sets the "trace_id" field.
func (u *AuditLogUpsert) SetTraceID(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldTraceID, v)
	return u
}

// UpdateTraceID sets the "trace_id" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateTraceID() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldTraceID)
	return u
}

// ClearTraceID clears the value of the "trace_id" field.
func (u *AuditLogUpsert) ClearTraceID() *AuditLogUpsert {
	u.SetNull(auditlog.FieldTraceID)
	return u
}

// SetBusinessData sets the "business_data" field.
func (u *AuditLogUpsert) SetBusinessData(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldBusinessData, v)
	return u
}

// UpdateBusinessData sets the "business_data" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateBusinessData() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldBusinessData)
	return u
}

// ClearBusinessData clears the value of the "business_data" field.
func (u *AuditLogUpsert) ClearBusinessData() *AuditLogUpsert {
	u.SetNull(auditlog.FieldBusinessData)
	return u
}

// SetChanges sets the "changes" field.
func (u *AuditLogUpsert) SetChanges(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldChanges, v)
	return u
}

// UpdateChanges sets the "changes" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateChanges() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldChanges)
	return u
}

// ClearChanges clears the value of the "changes" field.
func (u *AuditLogUpsert) ClearChanges() *AuditLogUpsert {
	u.SetNull(auditlog.FieldChanges)
	return u
}

// SetDescription sets the "description" field.
func (u *AuditLogUpsert) SetDescription(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateDescription() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *AuditLogUpsert) ClearDescription() *AuditLogUpsert {
	u.SetNull(auditlog.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AuditLogUpsert) SetCreatedAt(v time.Time) *AuditLogUpsert {
	u.Set(auditlog.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateCreatedAt() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AuditLogUpsert) SetUpdatedAt(v time.Time) *AuditLogUpsert {
	u.Set(auditlog.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateUpdatedAt() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldUpdatedAt)
	return u
}

// SetDurationMs sets the "duration_ms" field.
func (u *AuditLogUpsert) SetDurationMs(v int64) *AuditLogUpsert {
	u.Set(auditlog.FieldDurationMs, v)
	return u
}

// UpdateDurationMs sets the "duration_ms" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateDurationMs() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldDurationMs)
	return u
}

// AddDurationMs adds v to the "duration_ms" field.
func (u *AuditLogUpsert) AddDurationMs(v int64) *AuditLogUpsert {
	u.Add(auditlog.FieldDurationMs, v)
	return u
}

// ClearDurationMs clears the value of the "duration_ms" field.
func (u *AuditLogUpsert) ClearDurationMs() *AuditLogUpsert {
	u.SetNull(auditlog.FieldDurationMs)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AuditLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(auditlog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AuditLogUpsertOne) UpdateNewValues() *AuditLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(auditlog.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AuditLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AuditLogUpsertOne) Ignore() *AuditLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AuditLogUpsertOne) DoNothing() *AuditLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AuditLogCreate.OnConflict
// documentation for more info.
func (u *AuditLogUpsertOne) Update(set func(*AuditLogUpsert)) *AuditLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AuditLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AuditLogUpsertOne) SetDeletedAt(v time.Time) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateDeletedAt() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AuditLogUpsertOne) ClearDeletedAt() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOperatorType sets the "operator_type" field.
func (u *AuditLogUpsertOne) SetOperatorType(v consts.OperatorType) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetOperatorType(v)
	})
}

// UpdateOperatorType sets the "operator_type" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateOperatorType() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateOperatorType()
	})
}

// SetOperatorID sets the "operator_id" field.
func (u *AuditLogUpsertOne) SetOperatorID(v uuid.UUID) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetOperatorID(v)
	})
}

// UpdateOperatorID sets the "operator_id" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateOperatorID() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateOperatorID()
	})
}

// ClearOperatorID clears the value of the "operator_id" field.
func (u *AuditLogUpsertOne) ClearOperatorID() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearOperatorID()
	})
}

// SetOperatorName sets the "operator_name" field.
func (u *AuditLogUpsertOne) SetOperatorName(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetOperatorName(v)
	})
}

// UpdateOperatorName sets the "operator_name" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateOperatorName() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateOperatorName()
	})
}

// ClearOperatorName clears the value of the "operator_name" field.
func (u *AuditLogUpsertOne) ClearOperatorName() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearOperatorName()
	})
}

// SetOperationType sets the "operation_type" field.
func (u *AuditLogUpsertOne) SetOperationType(v consts.OperationType) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetOperationType(v)
	})
}

// UpdateOperationType sets the "operation_type" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateOperationType() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateOperationType()
	})
}

// SetResourceType sets the "resource_type" field.
func (u *AuditLogUpsertOne) SetResourceType(v consts.ResourceType) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetResourceType(v)
	})
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateResourceType() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateResourceType()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *AuditLogUpsertOne) SetResourceID(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateResourceID() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateResourceID()
	})
}

// ClearResourceID clears the value of the "resource_id" field.
func (u *AuditLogUpsertOne) ClearResourceID() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearResourceID()
	})
}

// SetResourceName sets the "resource_name" field.
func (u *AuditLogUpsertOne) SetResourceName(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetResourceName(v)
	})
}

// UpdateResourceName sets the "resource_name" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateResourceName() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateResourceName()
	})
}

// ClearResourceName clears the value of the "resource_name" field.
func (u *AuditLogUpsertOne) ClearResourceName() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearResourceName()
	})
}

// SetMethod sets the "method" field.
func (u *AuditLogUpsertOne) SetMethod(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateMethod() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateMethod()
	})
}

// SetPath sets the "path" field.
func (u *AuditLogUpsertOne) SetPath(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdatePath() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdatePath()
	})
}

// SetQueryParams sets the "query_params" field.
func (u *AuditLogUpsertOne) SetQueryParams(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetQueryParams(v)
	})
}

// UpdateQueryParams sets the "query_params" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateQueryParams() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateQueryParams()
	})
}

// ClearQueryParams clears the value of the "query_params" field.
func (u *AuditLogUpsertOne) ClearQueryParams() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearQueryParams()
	})
}

// SetRequestBody sets the "request_body" field.
func (u *AuditLogUpsertOne) SetRequestBody(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetRequestBody(v)
	})
}

// UpdateRequestBody sets the "request_body" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateRequestBody() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateRequestBody()
	})
}

// ClearRequestBody clears the value of the "request_body" field.
func (u *AuditLogUpsertOne) ClearRequestBody() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearRequestBody()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *AuditLogUpsertOne) SetUserAgent(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateUserAgent() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *AuditLogUpsertOne) ClearUserAgent() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearUserAgent()
	})
}

// SetStatusCode sets the "status_code" field.
func (u *AuditLogUpsertOne) SetStatusCode(v int) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetStatusCode(v)
	})
}

// AddStatusCode adds v to the "status_code" field.
func (u *AuditLogUpsertOne) AddStatusCode(v int) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.AddStatusCode(v)
	})
}

// UpdateStatusCode sets the "status_code" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateStatusCode() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateStatusCode()
	})
}

// SetStatus sets the "status" field.
func (u *AuditLogUpsertOne) SetStatus(v consts.AuditLogStatus) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateStatus() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateStatus()
	})
}

// SetResponseBody sets the "response_body" field.
func (u *AuditLogUpsertOne) SetResponseBody(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetResponseBody(v)
	})
}

// UpdateResponseBody sets the "response_body" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateResponseBody() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateResponseBody()
	})
}

// ClearResponseBody clears the value of the "response_body" field.
func (u *AuditLogUpsertOne) ClearResponseBody() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearResponseBody()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *AuditLogUpsertOne) SetErrorMessage(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateErrorMessage() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *AuditLogUpsertOne) ClearErrorMessage() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearErrorMessage()
	})
}

// SetIP sets the "ip" field.
func (u *AuditLogUpsertOne) SetIP(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateIP() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateIP()
	})
}

// SetCountry sets the "country" field.
func (u *AuditLogUpsertOne) SetCountry(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateCountry() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *AuditLogUpsertOne) ClearCountry() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearCountry()
	})
}

// SetProvince sets the "province" field.
func (u *AuditLogUpsertOne) SetProvince(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetProvince(v)
	})
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateProvince() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateProvince()
	})
}

// ClearProvince clears the value of the "province" field.
func (u *AuditLogUpsertOne) ClearProvince() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearProvince()
	})
}

// SetCity sets the "city" field.
func (u *AuditLogUpsertOne) SetCity(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateCity() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateCity()
	})
}

// ClearCity clears the value of the "city" field.
func (u *AuditLogUpsertOne) ClearCity() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearCity()
	})
}

// SetIsp sets the "isp" field.
func (u *AuditLogUpsertOne) SetIsp(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetIsp(v)
	})
}

// UpdateIsp sets the "isp" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateIsp() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateIsp()
	})
}

// ClearIsp clears the value of the "isp" field.
func (u *AuditLogUpsertOne) ClearIsp() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearIsp()
	})
}

// SetSessionID sets the "session_id" field.
func (u *AuditLogUpsertOne) SetSessionID(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetSessionID(v)
	})
}

// UpdateSessionID sets the "session_id" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateSessionID() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateSessionID()
	})
}

// ClearSessionID clears the value of the "session_id" field.
func (u *AuditLogUpsertOne) ClearSessionID() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearSessionID()
	})
}

// SetTraceID sets the "trace_id" field.
func (u *AuditLogUpsertOne) SetTraceID(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetTraceID(v)
	})
}

// UpdateTraceID sets the "trace_id" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateTraceID() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateTraceID()
	})
}

// ClearTraceID clears the value of the "trace_id" field.
func (u *AuditLogUpsertOne) ClearTraceID() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearTraceID()
	})
}

// SetBusinessData sets the "business_data" field.
func (u *AuditLogUpsertOne) SetBusinessData(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetBusinessData(v)
	})
}

// UpdateBusinessData sets the "business_data" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateBusinessData() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateBusinessData()
	})
}

// ClearBusinessData clears the value of the "business_data" field.
func (u *AuditLogUpsertOne) ClearBusinessData() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearBusinessData()
	})
}

// SetChanges sets the "changes" field.
func (u *AuditLogUpsertOne) SetChanges(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetChanges(v)
	})
}

// UpdateChanges sets the "changes" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateChanges() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateChanges()
	})
}

// ClearChanges clears the value of the "changes" field.
func (u *AuditLogUpsertOne) ClearChanges() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearChanges()
	})
}

// SetDescription sets the "description" field.
func (u *AuditLogUpsertOne) SetDescription(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateDescription() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AuditLogUpsertOne) ClearDescription() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AuditLogUpsertOne) SetCreatedAt(v time.Time) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateCreatedAt() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AuditLogUpsertOne) SetUpdatedAt(v time.Time) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateUpdatedAt() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDurationMs sets the "duration_ms" field.
func (u *AuditLogUpsertOne) SetDurationMs(v int64) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetDurationMs(v)
	})
}

// AddDurationMs adds v to the "duration_ms" field.
func (u *AuditLogUpsertOne) AddDurationMs(v int64) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.AddDurationMs(v)
	})
}

// UpdateDurationMs sets the "duration_ms" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateDurationMs() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateDurationMs()
	})
}

// ClearDurationMs clears the value of the "duration_ms" field.
func (u *AuditLogUpsertOne) ClearDurationMs() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearDurationMs()
	})
}

// Exec executes the query.
func (u *AuditLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for AuditLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AuditLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AuditLogUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: AuditLogUpsertOne.ID is not supported by MySQL driver. Use AuditLogUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AuditLogUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AuditLogCreateBulk is the builder for creating many AuditLog entities in bulk.
type AuditLogCreateBulk struct {
	config
	err      error
	builders []*AuditLogCreate
	conflict []sql.ConflictOption
}

// Save creates the AuditLog entities in the database.
func (alcb *AuditLogCreateBulk) Save(ctx context.Context) ([]*AuditLog, error) {
	if alcb.err != nil {
		return nil, alcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(alcb.builders))
	nodes := make([]*AuditLog, len(alcb.builders))
	mutators := make([]Mutator, len(alcb.builders))
	for i := range alcb.builders {
		func(i int, root context.Context) {
			builder := alcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuditLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, alcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = alcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, alcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, alcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (alcb *AuditLogCreateBulk) SaveX(ctx context.Context) []*AuditLog {
	v, err := alcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alcb *AuditLogCreateBulk) Exec(ctx context.Context) error {
	_, err := alcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alcb *AuditLogCreateBulk) ExecX(ctx context.Context) {
	if err := alcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AuditLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AuditLogUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (alcb *AuditLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *AuditLogUpsertBulk {
	alcb.conflict = opts
	return &AuditLogUpsertBulk{
		create: alcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AuditLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (alcb *AuditLogCreateBulk) OnConflictColumns(columns ...string) *AuditLogUpsertBulk {
	alcb.conflict = append(alcb.conflict, sql.ConflictColumns(columns...))
	return &AuditLogUpsertBulk{
		create: alcb,
	}
}

// AuditLogUpsertBulk is the builder for "upsert"-ing
// a bulk of AuditLog nodes.
type AuditLogUpsertBulk struct {
	create *AuditLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AuditLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(auditlog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AuditLogUpsertBulk) UpdateNewValues() *AuditLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(auditlog.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AuditLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AuditLogUpsertBulk) Ignore() *AuditLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AuditLogUpsertBulk) DoNothing() *AuditLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AuditLogCreateBulk.OnConflict
// documentation for more info.
func (u *AuditLogUpsertBulk) Update(set func(*AuditLogUpsert)) *AuditLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AuditLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AuditLogUpsertBulk) SetDeletedAt(v time.Time) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateDeletedAt() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AuditLogUpsertBulk) ClearDeletedAt() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOperatorType sets the "operator_type" field.
func (u *AuditLogUpsertBulk) SetOperatorType(v consts.OperatorType) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetOperatorType(v)
	})
}

// UpdateOperatorType sets the "operator_type" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateOperatorType() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateOperatorType()
	})
}

// SetOperatorID sets the "operator_id" field.
func (u *AuditLogUpsertBulk) SetOperatorID(v uuid.UUID) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetOperatorID(v)
	})
}

// UpdateOperatorID sets the "operator_id" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateOperatorID() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateOperatorID()
	})
}

// ClearOperatorID clears the value of the "operator_id" field.
func (u *AuditLogUpsertBulk) ClearOperatorID() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearOperatorID()
	})
}

// SetOperatorName sets the "operator_name" field.
func (u *AuditLogUpsertBulk) SetOperatorName(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetOperatorName(v)
	})
}

// UpdateOperatorName sets the "operator_name" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateOperatorName() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateOperatorName()
	})
}

// ClearOperatorName clears the value of the "operator_name" field.
func (u *AuditLogUpsertBulk) ClearOperatorName() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearOperatorName()
	})
}

// SetOperationType sets the "operation_type" field.
func (u *AuditLogUpsertBulk) SetOperationType(v consts.OperationType) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetOperationType(v)
	})
}

// UpdateOperationType sets the "operation_type" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateOperationType() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateOperationType()
	})
}

// SetResourceType sets the "resource_type" field.
func (u *AuditLogUpsertBulk) SetResourceType(v consts.ResourceType) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetResourceType(v)
	})
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateResourceType() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateResourceType()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *AuditLogUpsertBulk) SetResourceID(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateResourceID() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateResourceID()
	})
}

// ClearResourceID clears the value of the "resource_id" field.
func (u *AuditLogUpsertBulk) ClearResourceID() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearResourceID()
	})
}

// SetResourceName sets the "resource_name" field.
func (u *AuditLogUpsertBulk) SetResourceName(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetResourceName(v)
	})
}

// UpdateResourceName sets the "resource_name" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateResourceName() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateResourceName()
	})
}

// ClearResourceName clears the value of the "resource_name" field.
func (u *AuditLogUpsertBulk) ClearResourceName() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearResourceName()
	})
}

// SetMethod sets the "method" field.
func (u *AuditLogUpsertBulk) SetMethod(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateMethod() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateMethod()
	})
}

// SetPath sets the "path" field.
func (u *AuditLogUpsertBulk) SetPath(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdatePath() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdatePath()
	})
}

// SetQueryParams sets the "query_params" field.
func (u *AuditLogUpsertBulk) SetQueryParams(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetQueryParams(v)
	})
}

// UpdateQueryParams sets the "query_params" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateQueryParams() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateQueryParams()
	})
}

// ClearQueryParams clears the value of the "query_params" field.
func (u *AuditLogUpsertBulk) ClearQueryParams() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearQueryParams()
	})
}

// SetRequestBody sets the "request_body" field.
func (u *AuditLogUpsertBulk) SetRequestBody(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetRequestBody(v)
	})
}

// UpdateRequestBody sets the "request_body" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateRequestBody() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateRequestBody()
	})
}

// ClearRequestBody clears the value of the "request_body" field.
func (u *AuditLogUpsertBulk) ClearRequestBody() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearRequestBody()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *AuditLogUpsertBulk) SetUserAgent(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateUserAgent() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *AuditLogUpsertBulk) ClearUserAgent() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearUserAgent()
	})
}

// SetStatusCode sets the "status_code" field.
func (u *AuditLogUpsertBulk) SetStatusCode(v int) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetStatusCode(v)
	})
}

// AddStatusCode adds v to the "status_code" field.
func (u *AuditLogUpsertBulk) AddStatusCode(v int) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.AddStatusCode(v)
	})
}

// UpdateStatusCode sets the "status_code" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateStatusCode() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateStatusCode()
	})
}

// SetStatus sets the "status" field.
func (u *AuditLogUpsertBulk) SetStatus(v consts.AuditLogStatus) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateStatus() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateStatus()
	})
}

// SetResponseBody sets the "response_body" field.
func (u *AuditLogUpsertBulk) SetResponseBody(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetResponseBody(v)
	})
}

// UpdateResponseBody sets the "response_body" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateResponseBody() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateResponseBody()
	})
}

// ClearResponseBody clears the value of the "response_body" field.
func (u *AuditLogUpsertBulk) ClearResponseBody() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearResponseBody()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *AuditLogUpsertBulk) SetErrorMessage(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateErrorMessage() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *AuditLogUpsertBulk) ClearErrorMessage() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearErrorMessage()
	})
}

// SetIP sets the "ip" field.
func (u *AuditLogUpsertBulk) SetIP(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateIP() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateIP()
	})
}

// SetCountry sets the "country" field.
func (u *AuditLogUpsertBulk) SetCountry(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateCountry() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *AuditLogUpsertBulk) ClearCountry() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearCountry()
	})
}

// SetProvince sets the "province" field.
func (u *AuditLogUpsertBulk) SetProvince(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetProvince(v)
	})
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateProvince() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateProvince()
	})
}

// ClearProvince clears the value of the "province" field.
func (u *AuditLogUpsertBulk) ClearProvince() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearProvince()
	})
}

// SetCity sets the "city" field.
func (u *AuditLogUpsertBulk) SetCity(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateCity() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateCity()
	})
}

// ClearCity clears the value of the "city" field.
func (u *AuditLogUpsertBulk) ClearCity() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearCity()
	})
}

// SetIsp sets the "isp" field.
func (u *AuditLogUpsertBulk) SetIsp(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetIsp(v)
	})
}

// UpdateIsp sets the "isp" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateIsp() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateIsp()
	})
}

// ClearIsp clears the value of the "isp" field.
func (u *AuditLogUpsertBulk) ClearIsp() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearIsp()
	})
}

// SetSessionID sets the "session_id" field.
func (u *AuditLogUpsertBulk) SetSessionID(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetSessionID(v)
	})
}

// UpdateSessionID sets the "session_id" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateSessionID() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateSessionID()
	})
}

// ClearSessionID clears the value of the "session_id" field.
func (u *AuditLogUpsertBulk) ClearSessionID() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearSessionID()
	})
}

// SetTraceID sets the "trace_id" field.
func (u *AuditLogUpsertBulk) SetTraceID(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetTraceID(v)
	})
}

// UpdateTraceID sets the "trace_id" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateTraceID() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateTraceID()
	})
}

// ClearTraceID clears the value of the "trace_id" field.
func (u *AuditLogUpsertBulk) ClearTraceID() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearTraceID()
	})
}

// SetBusinessData sets the "business_data" field.
func (u *AuditLogUpsertBulk) SetBusinessData(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetBusinessData(v)
	})
}

// UpdateBusinessData sets the "business_data" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateBusinessData() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateBusinessData()
	})
}

// ClearBusinessData clears the value of the "business_data" field.
func (u *AuditLogUpsertBulk) ClearBusinessData() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearBusinessData()
	})
}

// SetChanges sets the "changes" field.
func (u *AuditLogUpsertBulk) SetChanges(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetChanges(v)
	})
}

// UpdateChanges sets the "changes" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateChanges() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateChanges()
	})
}

// ClearChanges clears the value of the "changes" field.
func (u *AuditLogUpsertBulk) ClearChanges() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearChanges()
	})
}

// SetDescription sets the "description" field.
func (u *AuditLogUpsertBulk) SetDescription(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateDescription() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AuditLogUpsertBulk) ClearDescription() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AuditLogUpsertBulk) SetCreatedAt(v time.Time) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateCreatedAt() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AuditLogUpsertBulk) SetUpdatedAt(v time.Time) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateUpdatedAt() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDurationMs sets the "duration_ms" field.
func (u *AuditLogUpsertBulk) SetDurationMs(v int64) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetDurationMs(v)
	})
}

// AddDurationMs adds v to the "duration_ms" field.
func (u *AuditLogUpsertBulk) AddDurationMs(v int64) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.AddDurationMs(v)
	})
}

// UpdateDurationMs sets the "duration_ms" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateDurationMs() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateDurationMs()
	})
}

// ClearDurationMs clears the value of the "duration_ms" field.
func (u *AuditLogUpsertBulk) ClearDurationMs() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearDurationMs()
	})
}

// Exec executes the query.
func (u *AuditLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the AuditLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for AuditLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AuditLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
