// Code generated by ent, DO NOT EDIT.

package conversation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/ptonlix/whalehire/backend/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Conversation {
	return predicate.Conversation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Conversation {
	return predicate.Conversation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Conversation {
	return predicate.Conversation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Conversation {
	return predicate.Conversation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Conversation {
	return predicate.Conversation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Conversation {
	return predicate.Conversation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Conversation {
	return predicate.Conversation(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldDeletedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldUserID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldTitle, v))
}

// AgentName applies equality check predicate on the "agent_name" field. It's identical to AgentNameEQ.
func AgentName(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldAgentName, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Conversation {
	return predicate.Conversation(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Conversation {
	return predicate.Conversation(sql.FieldNotNull(FieldDeletedAt))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Conversation {
	return predicate.Conversation(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Conversation {
	return predicate.Conversation(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Conversation {
	return predicate.Conversation(sql.FieldNotIn(FieldUserID, vs...))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Conversation {
	return predicate.Conversation(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Conversation {
	return predicate.Conversation(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldContainsFold(FieldTitle, v))
}

// AgentNameEQ applies the EQ predicate on the "agent_name" field.
func AgentNameEQ(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldAgentName, v))
}

// AgentNameNEQ applies the NEQ predicate on the "agent_name" field.
func AgentNameNEQ(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldNEQ(FieldAgentName, v))
}

// AgentNameIn applies the In predicate on the "agent_name" field.
func AgentNameIn(vs ...string) predicate.Conversation {
	return predicate.Conversation(sql.FieldIn(FieldAgentName, vs...))
}

// AgentNameNotIn applies the NotIn predicate on the "agent_name" field.
func AgentNameNotIn(vs ...string) predicate.Conversation {
	return predicate.Conversation(sql.FieldNotIn(FieldAgentName, vs...))
}

// AgentNameGT applies the GT predicate on the "agent_name" field.
func AgentNameGT(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldGT(FieldAgentName, v))
}

// AgentNameGTE applies the GTE predicate on the "agent_name" field.
func AgentNameGTE(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldGTE(FieldAgentName, v))
}

// AgentNameLT applies the LT predicate on the "agent_name" field.
func AgentNameLT(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldLT(FieldAgentName, v))
}

// AgentNameLTE applies the LTE predicate on the "agent_name" field.
func AgentNameLTE(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldLTE(FieldAgentName, v))
}

// AgentNameContains applies the Contains predicate on the "agent_name" field.
func AgentNameContains(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldContains(FieldAgentName, v))
}

// AgentNameHasPrefix applies the HasPrefix predicate on the "agent_name" field.
func AgentNameHasPrefix(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldHasPrefix(FieldAgentName, v))
}

// AgentNameHasSuffix applies the HasSuffix predicate on the "agent_name" field.
func AgentNameHasSuffix(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldHasSuffix(FieldAgentName, v))
}

// AgentNameIsNil applies the IsNil predicate on the "agent_name" field.
func AgentNameIsNil() predicate.Conversation {
	return predicate.Conversation(sql.FieldIsNull(FieldAgentName))
}

// AgentNameNotNil applies the NotNil predicate on the "agent_name" field.
func AgentNameNotNil() predicate.Conversation {
	return predicate.Conversation(sql.FieldNotNull(FieldAgentName))
}

// AgentNameEqualFold applies the EqualFold predicate on the "agent_name" field.
func AgentNameEqualFold(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldEqualFold(FieldAgentName, v))
}

// AgentNameContainsFold applies the ContainsFold predicate on the "agent_name" field.
func AgentNameContainsFold(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldContainsFold(FieldAgentName, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Conversation {
	return predicate.Conversation(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Conversation {
	return predicate.Conversation(sql.FieldNotNull(FieldMetadata))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Conversation {
	return predicate.Conversation(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Conversation {
	return predicate.Conversation(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMessages applies the HasEdge predicate on the "messages" edge.
func HasMessages() predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessagesTable, MessagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessagesWith applies the HasEdge predicate on the "messages" edge with a given conditions (other predicates).
func HasMessagesWith(preds ...predicate.Message) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		step := newMessagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Conversation) predicate.Conversation {
	return predicate.Conversation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Conversation) predicate.Conversation {
	return predicate.Conversation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Conversation) predicate.Conversation {
	return predicate.Conversation(sql.NotPredicates(p))
}
