// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/screeningresult"
	"github.com/chaitin/WhaleHire/backend/db/screeningtask"
	"github.com/google/uuid"
)

// ScreeningResultCreate is the builder for creating a ScreeningResult entity.
type ScreeningResultCreate struct {
	config
	mutation *ScreeningResultMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (src *ScreeningResultCreate) SetDeletedAt(t time.Time) *ScreeningResultCreate {
	src.mutation.SetDeletedAt(t)
	return src
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (src *ScreeningResultCreate) SetNillableDeletedAt(t *time.Time) *ScreeningResultCreate {
	if t != nil {
		src.SetDeletedAt(*t)
	}
	return src
}

// SetTaskID sets the "task_id" field.
func (src *ScreeningResultCreate) SetTaskID(u uuid.UUID) *ScreeningResultCreate {
	src.mutation.SetTaskID(u)
	return src
}

// SetJobPositionID sets the "job_position_id" field.
func (src *ScreeningResultCreate) SetJobPositionID(u uuid.UUID) *ScreeningResultCreate {
	src.mutation.SetJobPositionID(u)
	return src
}

// SetResumeID sets the "resume_id" field.
func (src *ScreeningResultCreate) SetResumeID(u uuid.UUID) *ScreeningResultCreate {
	src.mutation.SetResumeID(u)
	return src
}

// SetOverallScore sets the "overall_score" field.
func (src *ScreeningResultCreate) SetOverallScore(f float64) *ScreeningResultCreate {
	src.mutation.SetOverallScore(f)
	return src
}

// SetMatchLevel sets the "match_level" field.
func (src *ScreeningResultCreate) SetMatchLevel(sl screeningresult.MatchLevel) *ScreeningResultCreate {
	src.mutation.SetMatchLevel(sl)
	return src
}

// SetNillableMatchLevel sets the "match_level" field if the given value is not nil.
func (src *ScreeningResultCreate) SetNillableMatchLevel(sl *screeningresult.MatchLevel) *ScreeningResultCreate {
	if sl != nil {
		src.SetMatchLevel(*sl)
	}
	return src
}

// SetDimensionScores sets the "dimension_scores" field.
func (src *ScreeningResultCreate) SetDimensionScores(m map[string]interface{}) *ScreeningResultCreate {
	src.mutation.SetDimensionScores(m)
	return src
}

// SetSkillDetail sets the "skill_detail" field.
func (src *ScreeningResultCreate) SetSkillDetail(m map[string]interface{}) *ScreeningResultCreate {
	src.mutation.SetSkillDetail(m)
	return src
}

// SetResponsibilityDetail sets the "responsibility_detail" field.
func (src *ScreeningResultCreate) SetResponsibilityDetail(m map[string]interface{}) *ScreeningResultCreate {
	src.mutation.SetResponsibilityDetail(m)
	return src
}

// SetExperienceDetail sets the "experience_detail" field.
func (src *ScreeningResultCreate) SetExperienceDetail(m map[string]interface{}) *ScreeningResultCreate {
	src.mutation.SetExperienceDetail(m)
	return src
}

// SetEducationDetail sets the "education_detail" field.
func (src *ScreeningResultCreate) SetEducationDetail(m map[string]interface{}) *ScreeningResultCreate {
	src.mutation.SetEducationDetail(m)
	return src
}

// SetIndustryDetail sets the "industry_detail" field.
func (src *ScreeningResultCreate) SetIndustryDetail(m map[string]interface{}) *ScreeningResultCreate {
	src.mutation.SetIndustryDetail(m)
	return src
}

// SetBasicDetail sets the "basic_detail" field.
func (src *ScreeningResultCreate) SetBasicDetail(m map[string]interface{}) *ScreeningResultCreate {
	src.mutation.SetBasicDetail(m)
	return src
}

// SetRecommendations sets the "recommendations" field.
func (src *ScreeningResultCreate) SetRecommendations(s []string) *ScreeningResultCreate {
	src.mutation.SetRecommendations(s)
	return src
}

// SetTraceID sets the "trace_id" field.
func (src *ScreeningResultCreate) SetTraceID(s string) *ScreeningResultCreate {
	src.mutation.SetTraceID(s)
	return src
}

// SetNillableTraceID sets the "trace_id" field if the given value is not nil.
func (src *ScreeningResultCreate) SetNillableTraceID(s *string) *ScreeningResultCreate {
	if s != nil {
		src.SetTraceID(*s)
	}
	return src
}

// SetRuntimeMetadata sets the "runtime_metadata" field.
func (src *ScreeningResultCreate) SetRuntimeMetadata(m map[string]interface{}) *ScreeningResultCreate {
	src.mutation.SetRuntimeMetadata(m)
	return src
}

// SetSubAgentVersions sets the "sub_agent_versions" field.
func (src *ScreeningResultCreate) SetSubAgentVersions(m map[string]interface{}) *ScreeningResultCreate {
	src.mutation.SetSubAgentVersions(m)
	return src
}

// SetMatchedAt sets the "matched_at" field.
func (src *ScreeningResultCreate) SetMatchedAt(t time.Time) *ScreeningResultCreate {
	src.mutation.SetMatchedAt(t)
	return src
}

// SetNillableMatchedAt sets the "matched_at" field if the given value is not nil.
func (src *ScreeningResultCreate) SetNillableMatchedAt(t *time.Time) *ScreeningResultCreate {
	if t != nil {
		src.SetMatchedAt(*t)
	}
	return src
}

// SetCreatedAt sets the "created_at" field.
func (src *ScreeningResultCreate) SetCreatedAt(t time.Time) *ScreeningResultCreate {
	src.mutation.SetCreatedAt(t)
	return src
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (src *ScreeningResultCreate) SetNillableCreatedAt(t *time.Time) *ScreeningResultCreate {
	if t != nil {
		src.SetCreatedAt(*t)
	}
	return src
}

// SetUpdatedAt sets the "updated_at" field.
func (src *ScreeningResultCreate) SetUpdatedAt(t time.Time) *ScreeningResultCreate {
	src.mutation.SetUpdatedAt(t)
	return src
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (src *ScreeningResultCreate) SetNillableUpdatedAt(t *time.Time) *ScreeningResultCreate {
	if t != nil {
		src.SetUpdatedAt(*t)
	}
	return src
}

// SetID sets the "id" field.
func (src *ScreeningResultCreate) SetID(u uuid.UUID) *ScreeningResultCreate {
	src.mutation.SetID(u)
	return src
}

// SetNillableID sets the "id" field if the given value is not nil.
func (src *ScreeningResultCreate) SetNillableID(u *uuid.UUID) *ScreeningResultCreate {
	if u != nil {
		src.SetID(*u)
	}
	return src
}

// SetTask sets the "task" edge to the ScreeningTask entity.
func (src *ScreeningResultCreate) SetTask(s *ScreeningTask) *ScreeningResultCreate {
	return src.SetTaskID(s.ID)
}

// SetJobPosition sets the "job_position" edge to the JobPosition entity.
func (src *ScreeningResultCreate) SetJobPosition(j *JobPosition) *ScreeningResultCreate {
	return src.SetJobPositionID(j.ID)
}

// SetResume sets the "resume" edge to the Resume entity.
func (src *ScreeningResultCreate) SetResume(r *Resume) *ScreeningResultCreate {
	return src.SetResumeID(r.ID)
}

// Mutation returns the ScreeningResultMutation object of the builder.
func (src *ScreeningResultCreate) Mutation() *ScreeningResultMutation {
	return src.mutation
}

// Save creates the ScreeningResult in the database.
func (src *ScreeningResultCreate) Save(ctx context.Context) (*ScreeningResult, error) {
	if err := src.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *ScreeningResultCreate) SaveX(ctx context.Context) *ScreeningResult {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *ScreeningResultCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *ScreeningResultCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *ScreeningResultCreate) defaults() error {
	if _, ok := src.mutation.MatchedAt(); !ok {
		if screeningresult.DefaultMatchedAt == nil {
			return fmt.Errorf("db: uninitialized screeningresult.DefaultMatchedAt (forgotten import db/runtime?)")
		}
		v := screeningresult.DefaultMatchedAt()
		src.mutation.SetMatchedAt(v)
	}
	if _, ok := src.mutation.CreatedAt(); !ok {
		if screeningresult.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningresult.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := screeningresult.DefaultCreatedAt()
		src.mutation.SetCreatedAt(v)
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		if screeningresult.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningresult.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := screeningresult.DefaultUpdatedAt()
		src.mutation.SetUpdatedAt(v)
	}
	if _, ok := src.mutation.ID(); !ok {
		if screeningresult.DefaultID == nil {
			return fmt.Errorf("db: uninitialized screeningresult.DefaultID (forgotten import db/runtime?)")
		}
		v := screeningresult.DefaultID()
		src.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (src *ScreeningResultCreate) check() error {
	if _, ok := src.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`db: missing required field "ScreeningResult.task_id"`)}
	}
	if _, ok := src.mutation.JobPositionID(); !ok {
		return &ValidationError{Name: "job_position_id", err: errors.New(`db: missing required field "ScreeningResult.job_position_id"`)}
	}
	if _, ok := src.mutation.ResumeID(); !ok {
		return &ValidationError{Name: "resume_id", err: errors.New(`db: missing required field "ScreeningResult.resume_id"`)}
	}
	if _, ok := src.mutation.OverallScore(); !ok {
		return &ValidationError{Name: "overall_score", err: errors.New(`db: missing required field "ScreeningResult.overall_score"`)}
	}
	if v, ok := src.mutation.MatchLevel(); ok {
		if err := screeningresult.MatchLevelValidator(v); err != nil {
			return &ValidationError{Name: "match_level", err: fmt.Errorf(`db: validator failed for field "ScreeningResult.match_level": %w`, err)}
		}
	}
	if v, ok := src.mutation.TraceID(); ok {
		if err := screeningresult.TraceIDValidator(v); err != nil {
			return &ValidationError{Name: "trace_id", err: fmt.Errorf(`db: validator failed for field "ScreeningResult.trace_id": %w`, err)}
		}
	}
	if _, ok := src.mutation.MatchedAt(); !ok {
		return &ValidationError{Name: "matched_at", err: errors.New(`db: missing required field "ScreeningResult.matched_at"`)}
	}
	if _, ok := src.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ScreeningResult.created_at"`)}
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "ScreeningResult.updated_at"`)}
	}
	if len(src.mutation.TaskIDs()) == 0 {
		return &ValidationError{Name: "task", err: errors.New(`db: missing required edge "ScreeningResult.task"`)}
	}
	if len(src.mutation.JobPositionIDs()) == 0 {
		return &ValidationError{Name: "job_position", err: errors.New(`db: missing required edge "ScreeningResult.job_position"`)}
	}
	if len(src.mutation.ResumeIDs()) == 0 {
		return &ValidationError{Name: "resume", err: errors.New(`db: missing required edge "ScreeningResult.resume"`)}
	}
	return nil
}

func (src *ScreeningResultCreate) sqlSave(ctx context.Context) (*ScreeningResult, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *ScreeningResultCreate) createSpec() (*ScreeningResult, *sqlgraph.CreateSpec) {
	var (
		_node = &ScreeningResult{config: src.config}
		_spec = sqlgraph.NewCreateSpec(screeningresult.Table, sqlgraph.NewFieldSpec(screeningresult.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = src.conflict
	if id, ok := src.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := src.mutation.DeletedAt(); ok {
		_spec.SetField(screeningresult.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := src.mutation.OverallScore(); ok {
		_spec.SetField(screeningresult.FieldOverallScore, field.TypeFloat64, value)
		_node.OverallScore = value
	}
	if value, ok := src.mutation.MatchLevel(); ok {
		_spec.SetField(screeningresult.FieldMatchLevel, field.TypeEnum, value)
		_node.MatchLevel = value
	}
	if value, ok := src.mutation.DimensionScores(); ok {
		_spec.SetField(screeningresult.FieldDimensionScores, field.TypeJSON, value)
		_node.DimensionScores = value
	}
	if value, ok := src.mutation.SkillDetail(); ok {
		_spec.SetField(screeningresult.FieldSkillDetail, field.TypeJSON, value)
		_node.SkillDetail = value
	}
	if value, ok := src.mutation.ResponsibilityDetail(); ok {
		_spec.SetField(screeningresult.FieldResponsibilityDetail, field.TypeJSON, value)
		_node.ResponsibilityDetail = value
	}
	if value, ok := src.mutation.ExperienceDetail(); ok {
		_spec.SetField(screeningresult.FieldExperienceDetail, field.TypeJSON, value)
		_node.ExperienceDetail = value
	}
	if value, ok := src.mutation.EducationDetail(); ok {
		_spec.SetField(screeningresult.FieldEducationDetail, field.TypeJSON, value)
		_node.EducationDetail = value
	}
	if value, ok := src.mutation.IndustryDetail(); ok {
		_spec.SetField(screeningresult.FieldIndustryDetail, field.TypeJSON, value)
		_node.IndustryDetail = value
	}
	if value, ok := src.mutation.BasicDetail(); ok {
		_spec.SetField(screeningresult.FieldBasicDetail, field.TypeJSON, value)
		_node.BasicDetail = value
	}
	if value, ok := src.mutation.Recommendations(); ok {
		_spec.SetField(screeningresult.FieldRecommendations, field.TypeJSON, value)
		_node.Recommendations = value
	}
	if value, ok := src.mutation.TraceID(); ok {
		_spec.SetField(screeningresult.FieldTraceID, field.TypeString, value)
		_node.TraceID = value
	}
	if value, ok := src.mutation.RuntimeMetadata(); ok {
		_spec.SetField(screeningresult.FieldRuntimeMetadata, field.TypeJSON, value)
		_node.RuntimeMetadata = value
	}
	if value, ok := src.mutation.SubAgentVersions(); ok {
		_spec.SetField(screeningresult.FieldSubAgentVersions, field.TypeJSON, value)
		_node.SubAgentVersions = value
	}
	if value, ok := src.mutation.MatchedAt(); ok {
		_spec.SetField(screeningresult.FieldMatchedAt, field.TypeTime, value)
		_node.MatchedAt = value
	}
	if value, ok := src.mutation.CreatedAt(); ok {
		_spec.SetField(screeningresult.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := src.mutation.UpdatedAt(); ok {
		_spec.SetField(screeningresult.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := src.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningresult.TaskTable,
			Columns: []string{screeningresult.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.JobPositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningresult.JobPositionTable,
			Columns: []string{screeningresult.JobPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.JobPositionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningresult.ResumeTable,
			Columns: []string{screeningresult.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResumeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScreeningResult.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScreeningResultUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (src *ScreeningResultCreate) OnConflict(opts ...sql.ConflictOption) *ScreeningResultUpsertOne {
	src.conflict = opts
	return &ScreeningResultUpsertOne{
		create: src,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScreeningResult.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (src *ScreeningResultCreate) OnConflictColumns(columns ...string) *ScreeningResultUpsertOne {
	src.conflict = append(src.conflict, sql.ConflictColumns(columns...))
	return &ScreeningResultUpsertOne{
		create: src,
	}
}

type (
	// ScreeningResultUpsertOne is the builder for "upsert"-ing
	//  one ScreeningResult node.
	ScreeningResultUpsertOne struct {
		create *ScreeningResultCreate
	}

	// ScreeningResultUpsert is the "OnConflict" setter.
	ScreeningResultUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *ScreeningResultUpsert) SetDeletedAt(v time.Time) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateDeletedAt() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScreeningResultUpsert) ClearDeletedAt() *ScreeningResultUpsert {
	u.SetNull(screeningresult.FieldDeletedAt)
	return u
}

// SetTaskID sets the "task_id" field.
func (u *ScreeningResultUpsert) SetTaskID(v uuid.UUID) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateTaskID() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldTaskID)
	return u
}

// SetJobPositionID sets the "job_position_id" field.
func (u *ScreeningResultUpsert) SetJobPositionID(v uuid.UUID) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldJobPositionID, v)
	return u
}

// UpdateJobPositionID sets the "job_position_id" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateJobPositionID() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldJobPositionID)
	return u
}

// SetResumeID sets the "resume_id" field.
func (u *ScreeningResultUpsert) SetResumeID(v uuid.UUID) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldResumeID, v)
	return u
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateResumeID() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldResumeID)
	return u
}

// SetOverallScore sets the "overall_score" field.
func (u *ScreeningResultUpsert) SetOverallScore(v float64) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldOverallScore, v)
	return u
}

// UpdateOverallScore sets the "overall_score" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateOverallScore() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldOverallScore)
	return u
}

// AddOverallScore adds v to the "overall_score" field.
func (u *ScreeningResultUpsert) AddOverallScore(v float64) *ScreeningResultUpsert {
	u.Add(screeningresult.FieldOverallScore, v)
	return u
}

// SetMatchLevel sets the "match_level" field.
func (u *ScreeningResultUpsert) SetMatchLevel(v screeningresult.MatchLevel) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldMatchLevel, v)
	return u
}

// UpdateMatchLevel sets the "match_level" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateMatchLevel() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldMatchLevel)
	return u
}

// ClearMatchLevel clears the value of the "match_level" field.
func (u *ScreeningResultUpsert) ClearMatchLevel() *ScreeningResultUpsert {
	u.SetNull(screeningresult.FieldMatchLevel)
	return u
}

// SetDimensionScores sets the "dimension_scores" field.
func (u *ScreeningResultUpsert) SetDimensionScores(v map[string]interface{}) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldDimensionScores, v)
	return u
}

// UpdateDimensionScores sets the "dimension_scores" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateDimensionScores() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldDimensionScores)
	return u
}

// ClearDimensionScores clears the value of the "dimension_scores" field.
func (u *ScreeningResultUpsert) ClearDimensionScores() *ScreeningResultUpsert {
	u.SetNull(screeningresult.FieldDimensionScores)
	return u
}

// SetSkillDetail sets the "skill_detail" field.
func (u *ScreeningResultUpsert) SetSkillDetail(v map[string]interface{}) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldSkillDetail, v)
	return u
}

// UpdateSkillDetail sets the "skill_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateSkillDetail() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldSkillDetail)
	return u
}

// ClearSkillDetail clears the value of the "skill_detail" field.
func (u *ScreeningResultUpsert) ClearSkillDetail() *ScreeningResultUpsert {
	u.SetNull(screeningresult.FieldSkillDetail)
	return u
}

// SetResponsibilityDetail sets the "responsibility_detail" field.
func (u *ScreeningResultUpsert) SetResponsibilityDetail(v map[string]interface{}) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldResponsibilityDetail, v)
	return u
}

// UpdateResponsibilityDetail sets the "responsibility_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateResponsibilityDetail() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldResponsibilityDetail)
	return u
}

// ClearResponsibilityDetail clears the value of the "responsibility_detail" field.
func (u *ScreeningResultUpsert) ClearResponsibilityDetail() *ScreeningResultUpsert {
	u.SetNull(screeningresult.FieldResponsibilityDetail)
	return u
}

// SetExperienceDetail sets the "experience_detail" field.
func (u *ScreeningResultUpsert) SetExperienceDetail(v map[string]interface{}) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldExperienceDetail, v)
	return u
}

// UpdateExperienceDetail sets the "experience_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateExperienceDetail() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldExperienceDetail)
	return u
}

// ClearExperienceDetail clears the value of the "experience_detail" field.
func (u *ScreeningResultUpsert) ClearExperienceDetail() *ScreeningResultUpsert {
	u.SetNull(screeningresult.FieldExperienceDetail)
	return u
}

// SetEducationDetail sets the "education_detail" field.
func (u *ScreeningResultUpsert) SetEducationDetail(v map[string]interface{}) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldEducationDetail, v)
	return u
}

// UpdateEducationDetail sets the "education_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateEducationDetail() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldEducationDetail)
	return u
}

// ClearEducationDetail clears the value of the "education_detail" field.
func (u *ScreeningResultUpsert) ClearEducationDetail() *ScreeningResultUpsert {
	u.SetNull(screeningresult.FieldEducationDetail)
	return u
}

// SetIndustryDetail sets the "industry_detail" field.
func (u *ScreeningResultUpsert) SetIndustryDetail(v map[string]interface{}) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldIndustryDetail, v)
	return u
}

// UpdateIndustryDetail sets the "industry_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateIndustryDetail() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldIndustryDetail)
	return u
}

// ClearIndustryDetail clears the value of the "industry_detail" field.
func (u *ScreeningResultUpsert) ClearIndustryDetail() *ScreeningResultUpsert {
	u.SetNull(screeningresult.FieldIndustryDetail)
	return u
}

// SetBasicDetail sets the "basic_detail" field.
func (u *ScreeningResultUpsert) SetBasicDetail(v map[string]interface{}) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldBasicDetail, v)
	return u
}

// UpdateBasicDetail sets the "basic_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateBasicDetail() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldBasicDetail)
	return u
}

// ClearBasicDetail clears the value of the "basic_detail" field.
func (u *ScreeningResultUpsert) ClearBasicDetail() *ScreeningResultUpsert {
	u.SetNull(screeningresult.FieldBasicDetail)
	return u
}

// SetRecommendations sets the "recommendations" field.
func (u *ScreeningResultUpsert) SetRecommendations(v []string) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldRecommendations, v)
	return u
}

// UpdateRecommendations sets the "recommendations" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateRecommendations() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldRecommendations)
	return u
}

// ClearRecommendations clears the value of the "recommendations" field.
func (u *ScreeningResultUpsert) ClearRecommendations() *ScreeningResultUpsert {
	u.SetNull(screeningresult.FieldRecommendations)
	return u
}

// SetTraceID sets the "trace_id" field.
func (u *ScreeningResultUpsert) SetTraceID(v string) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldTraceID, v)
	return u
}

// UpdateTraceID sets the "trace_id" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateTraceID() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldTraceID)
	return u
}

// ClearTraceID clears the value of the "trace_id" field.
func (u *ScreeningResultUpsert) ClearTraceID() *ScreeningResultUpsert {
	u.SetNull(screeningresult.FieldTraceID)
	return u
}

// SetRuntimeMetadata sets the "runtime_metadata" field.
func (u *ScreeningResultUpsert) SetRuntimeMetadata(v map[string]interface{}) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldRuntimeMetadata, v)
	return u
}

// UpdateRuntimeMetadata sets the "runtime_metadata" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateRuntimeMetadata() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldRuntimeMetadata)
	return u
}

// ClearRuntimeMetadata clears the value of the "runtime_metadata" field.
func (u *ScreeningResultUpsert) ClearRuntimeMetadata() *ScreeningResultUpsert {
	u.SetNull(screeningresult.FieldRuntimeMetadata)
	return u
}

// SetSubAgentVersions sets the "sub_agent_versions" field.
func (u *ScreeningResultUpsert) SetSubAgentVersions(v map[string]interface{}) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldSubAgentVersions, v)
	return u
}

// UpdateSubAgentVersions sets the "sub_agent_versions" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateSubAgentVersions() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldSubAgentVersions)
	return u
}

// ClearSubAgentVersions clears the value of the "sub_agent_versions" field.
func (u *ScreeningResultUpsert) ClearSubAgentVersions() *ScreeningResultUpsert {
	u.SetNull(screeningresult.FieldSubAgentVersions)
	return u
}

// SetMatchedAt sets the "matched_at" field.
func (u *ScreeningResultUpsert) SetMatchedAt(v time.Time) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldMatchedAt, v)
	return u
}

// UpdateMatchedAt sets the "matched_at" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateMatchedAt() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldMatchedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningResultUpsert) SetUpdatedAt(v time.Time) *ScreeningResultUpsert {
	u.Set(screeningresult.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningResultUpsert) UpdateUpdatedAt() *ScreeningResultUpsert {
	u.SetExcluded(screeningresult.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ScreeningResult.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(screeningresult.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScreeningResultUpsertOne) UpdateNewValues() *ScreeningResultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(screeningresult.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(screeningresult.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScreeningResult.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ScreeningResultUpsertOne) Ignore() *ScreeningResultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScreeningResultUpsertOne) DoNothing() *ScreeningResultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScreeningResultCreate.OnConflict
// documentation for more info.
func (u *ScreeningResultUpsertOne) Update(set func(*ScreeningResultUpsert)) *ScreeningResultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScreeningResultUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ScreeningResultUpsertOne) SetDeletedAt(v time.Time) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateDeletedAt() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScreeningResultUpsertOne) ClearDeletedAt() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTaskID sets the "task_id" field.
func (u *ScreeningResultUpsertOne) SetTaskID(v uuid.UUID) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateTaskID() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateTaskID()
	})
}

// SetJobPositionID sets the "job_position_id" field.
func (u *ScreeningResultUpsertOne) SetJobPositionID(v uuid.UUID) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetJobPositionID(v)
	})
}

// UpdateJobPositionID sets the "job_position_id" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateJobPositionID() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateJobPositionID()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ScreeningResultUpsertOne) SetResumeID(v uuid.UUID) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateResumeID() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateResumeID()
	})
}

// SetOverallScore sets the "overall_score" field.
func (u *ScreeningResultUpsertOne) SetOverallScore(v float64) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetOverallScore(v)
	})
}

// AddOverallScore adds v to the "overall_score" field.
func (u *ScreeningResultUpsertOne) AddOverallScore(v float64) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.AddOverallScore(v)
	})
}

// UpdateOverallScore sets the "overall_score" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateOverallScore() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateOverallScore()
	})
}

// SetMatchLevel sets the "match_level" field.
func (u *ScreeningResultUpsertOne) SetMatchLevel(v screeningresult.MatchLevel) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetMatchLevel(v)
	})
}

// UpdateMatchLevel sets the "match_level" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateMatchLevel() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateMatchLevel()
	})
}

// ClearMatchLevel clears the value of the "match_level" field.
func (u *ScreeningResultUpsertOne) ClearMatchLevel() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearMatchLevel()
	})
}

// SetDimensionScores sets the "dimension_scores" field.
func (u *ScreeningResultUpsertOne) SetDimensionScores(v map[string]interface{}) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetDimensionScores(v)
	})
}

// UpdateDimensionScores sets the "dimension_scores" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateDimensionScores() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateDimensionScores()
	})
}

// ClearDimensionScores clears the value of the "dimension_scores" field.
func (u *ScreeningResultUpsertOne) ClearDimensionScores() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearDimensionScores()
	})
}

// SetSkillDetail sets the "skill_detail" field.
func (u *ScreeningResultUpsertOne) SetSkillDetail(v map[string]interface{}) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetSkillDetail(v)
	})
}

// UpdateSkillDetail sets the "skill_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateSkillDetail() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateSkillDetail()
	})
}

// ClearSkillDetail clears the value of the "skill_detail" field.
func (u *ScreeningResultUpsertOne) ClearSkillDetail() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearSkillDetail()
	})
}

// SetResponsibilityDetail sets the "responsibility_detail" field.
func (u *ScreeningResultUpsertOne) SetResponsibilityDetail(v map[string]interface{}) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetResponsibilityDetail(v)
	})
}

// UpdateResponsibilityDetail sets the "responsibility_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateResponsibilityDetail() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateResponsibilityDetail()
	})
}

// ClearResponsibilityDetail clears the value of the "responsibility_detail" field.
func (u *ScreeningResultUpsertOne) ClearResponsibilityDetail() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearResponsibilityDetail()
	})
}

// SetExperienceDetail sets the "experience_detail" field.
func (u *ScreeningResultUpsertOne) SetExperienceDetail(v map[string]interface{}) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetExperienceDetail(v)
	})
}

// UpdateExperienceDetail sets the "experience_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateExperienceDetail() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateExperienceDetail()
	})
}

// ClearExperienceDetail clears the value of the "experience_detail" field.
func (u *ScreeningResultUpsertOne) ClearExperienceDetail() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearExperienceDetail()
	})
}

// SetEducationDetail sets the "education_detail" field.
func (u *ScreeningResultUpsertOne) SetEducationDetail(v map[string]interface{}) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetEducationDetail(v)
	})
}

// UpdateEducationDetail sets the "education_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateEducationDetail() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateEducationDetail()
	})
}

// ClearEducationDetail clears the value of the "education_detail" field.
func (u *ScreeningResultUpsertOne) ClearEducationDetail() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearEducationDetail()
	})
}

// SetIndustryDetail sets the "industry_detail" field.
func (u *ScreeningResultUpsertOne) SetIndustryDetail(v map[string]interface{}) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetIndustryDetail(v)
	})
}

// UpdateIndustryDetail sets the "industry_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateIndustryDetail() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateIndustryDetail()
	})
}

// ClearIndustryDetail clears the value of the "industry_detail" field.
func (u *ScreeningResultUpsertOne) ClearIndustryDetail() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearIndustryDetail()
	})
}

// SetBasicDetail sets the "basic_detail" field.
func (u *ScreeningResultUpsertOne) SetBasicDetail(v map[string]interface{}) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetBasicDetail(v)
	})
}

// UpdateBasicDetail sets the "basic_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateBasicDetail() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateBasicDetail()
	})
}

// ClearBasicDetail clears the value of the "basic_detail" field.
func (u *ScreeningResultUpsertOne) ClearBasicDetail() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearBasicDetail()
	})
}

// SetRecommendations sets the "recommendations" field.
func (u *ScreeningResultUpsertOne) SetRecommendations(v []string) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetRecommendations(v)
	})
}

// UpdateRecommendations sets the "recommendations" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateRecommendations() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateRecommendations()
	})
}

// ClearRecommendations clears the value of the "recommendations" field.
func (u *ScreeningResultUpsertOne) ClearRecommendations() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearRecommendations()
	})
}

// SetTraceID sets the "trace_id" field.
func (u *ScreeningResultUpsertOne) SetTraceID(v string) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetTraceID(v)
	})
}

// UpdateTraceID sets the "trace_id" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateTraceID() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateTraceID()
	})
}

// ClearTraceID clears the value of the "trace_id" field.
func (u *ScreeningResultUpsertOne) ClearTraceID() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearTraceID()
	})
}

// SetRuntimeMetadata sets the "runtime_metadata" field.
func (u *ScreeningResultUpsertOne) SetRuntimeMetadata(v map[string]interface{}) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetRuntimeMetadata(v)
	})
}

// UpdateRuntimeMetadata sets the "runtime_metadata" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateRuntimeMetadata() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateRuntimeMetadata()
	})
}

// ClearRuntimeMetadata clears the value of the "runtime_metadata" field.
func (u *ScreeningResultUpsertOne) ClearRuntimeMetadata() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearRuntimeMetadata()
	})
}

// SetSubAgentVersions sets the "sub_agent_versions" field.
func (u *ScreeningResultUpsertOne) SetSubAgentVersions(v map[string]interface{}) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetSubAgentVersions(v)
	})
}

// UpdateSubAgentVersions sets the "sub_agent_versions" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateSubAgentVersions() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateSubAgentVersions()
	})
}

// ClearSubAgentVersions clears the value of the "sub_agent_versions" field.
func (u *ScreeningResultUpsertOne) ClearSubAgentVersions() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearSubAgentVersions()
	})
}

// SetMatchedAt sets the "matched_at" field.
func (u *ScreeningResultUpsertOne) SetMatchedAt(v time.Time) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetMatchedAt(v)
	})
}

// UpdateMatchedAt sets the "matched_at" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateMatchedAt() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateMatchedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningResultUpsertOne) SetUpdatedAt(v time.Time) *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningResultUpsertOne) UpdateUpdatedAt() *ScreeningResultUpsertOne {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ScreeningResultUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ScreeningResultCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScreeningResultUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScreeningResultUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ScreeningResultUpsertOne.ID is not supported by MySQL driver. Use ScreeningResultUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScreeningResultUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScreeningResultCreateBulk is the builder for creating many ScreeningResult entities in bulk.
type ScreeningResultCreateBulk struct {
	config
	err      error
	builders []*ScreeningResultCreate
	conflict []sql.ConflictOption
}

// Save creates the ScreeningResult entities in the database.
func (srcb *ScreeningResultCreateBulk) Save(ctx context.Context) ([]*ScreeningResult, error) {
	if srcb.err != nil {
		return nil, srcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*ScreeningResult, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScreeningResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = srcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *ScreeningResultCreateBulk) SaveX(ctx context.Context) []*ScreeningResult {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *ScreeningResultCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *ScreeningResultCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScreeningResult.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScreeningResultUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (srcb *ScreeningResultCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScreeningResultUpsertBulk {
	srcb.conflict = opts
	return &ScreeningResultUpsertBulk{
		create: srcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScreeningResult.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (srcb *ScreeningResultCreateBulk) OnConflictColumns(columns ...string) *ScreeningResultUpsertBulk {
	srcb.conflict = append(srcb.conflict, sql.ConflictColumns(columns...))
	return &ScreeningResultUpsertBulk{
		create: srcb,
	}
}

// ScreeningResultUpsertBulk is the builder for "upsert"-ing
// a bulk of ScreeningResult nodes.
type ScreeningResultUpsertBulk struct {
	create *ScreeningResultCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ScreeningResult.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(screeningresult.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScreeningResultUpsertBulk) UpdateNewValues() *ScreeningResultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(screeningresult.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(screeningresult.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScreeningResult.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ScreeningResultUpsertBulk) Ignore() *ScreeningResultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScreeningResultUpsertBulk) DoNothing() *ScreeningResultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScreeningResultCreateBulk.OnConflict
// documentation for more info.
func (u *ScreeningResultUpsertBulk) Update(set func(*ScreeningResultUpsert)) *ScreeningResultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScreeningResultUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ScreeningResultUpsertBulk) SetDeletedAt(v time.Time) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateDeletedAt() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ScreeningResultUpsertBulk) ClearDeletedAt() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTaskID sets the "task_id" field.
func (u *ScreeningResultUpsertBulk) SetTaskID(v uuid.UUID) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateTaskID() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateTaskID()
	})
}

// SetJobPositionID sets the "job_position_id" field.
func (u *ScreeningResultUpsertBulk) SetJobPositionID(v uuid.UUID) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetJobPositionID(v)
	})
}

// UpdateJobPositionID sets the "job_position_id" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateJobPositionID() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateJobPositionID()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ScreeningResultUpsertBulk) SetResumeID(v uuid.UUID) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateResumeID() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateResumeID()
	})
}

// SetOverallScore sets the "overall_score" field.
func (u *ScreeningResultUpsertBulk) SetOverallScore(v float64) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetOverallScore(v)
	})
}

// AddOverallScore adds v to the "overall_score" field.
func (u *ScreeningResultUpsertBulk) AddOverallScore(v float64) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.AddOverallScore(v)
	})
}

// UpdateOverallScore sets the "overall_score" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateOverallScore() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateOverallScore()
	})
}

// SetMatchLevel sets the "match_level" field.
func (u *ScreeningResultUpsertBulk) SetMatchLevel(v screeningresult.MatchLevel) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetMatchLevel(v)
	})
}

// UpdateMatchLevel sets the "match_level" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateMatchLevel() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateMatchLevel()
	})
}

// ClearMatchLevel clears the value of the "match_level" field.
func (u *ScreeningResultUpsertBulk) ClearMatchLevel() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearMatchLevel()
	})
}

// SetDimensionScores sets the "dimension_scores" field.
func (u *ScreeningResultUpsertBulk) SetDimensionScores(v map[string]interface{}) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetDimensionScores(v)
	})
}

// UpdateDimensionScores sets the "dimension_scores" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateDimensionScores() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateDimensionScores()
	})
}

// ClearDimensionScores clears the value of the "dimension_scores" field.
func (u *ScreeningResultUpsertBulk) ClearDimensionScores() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearDimensionScores()
	})
}

// SetSkillDetail sets the "skill_detail" field.
func (u *ScreeningResultUpsertBulk) SetSkillDetail(v map[string]interface{}) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetSkillDetail(v)
	})
}

// UpdateSkillDetail sets the "skill_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateSkillDetail() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateSkillDetail()
	})
}

// ClearSkillDetail clears the value of the "skill_detail" field.
func (u *ScreeningResultUpsertBulk) ClearSkillDetail() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearSkillDetail()
	})
}

// SetResponsibilityDetail sets the "responsibility_detail" field.
func (u *ScreeningResultUpsertBulk) SetResponsibilityDetail(v map[string]interface{}) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetResponsibilityDetail(v)
	})
}

// UpdateResponsibilityDetail sets the "responsibility_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateResponsibilityDetail() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateResponsibilityDetail()
	})
}

// ClearResponsibilityDetail clears the value of the "responsibility_detail" field.
func (u *ScreeningResultUpsertBulk) ClearResponsibilityDetail() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearResponsibilityDetail()
	})
}

// SetExperienceDetail sets the "experience_detail" field.
func (u *ScreeningResultUpsertBulk) SetExperienceDetail(v map[string]interface{}) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetExperienceDetail(v)
	})
}

// UpdateExperienceDetail sets the "experience_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateExperienceDetail() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateExperienceDetail()
	})
}

// ClearExperienceDetail clears the value of the "experience_detail" field.
func (u *ScreeningResultUpsertBulk) ClearExperienceDetail() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearExperienceDetail()
	})
}

// SetEducationDetail sets the "education_detail" field.
func (u *ScreeningResultUpsertBulk) SetEducationDetail(v map[string]interface{}) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetEducationDetail(v)
	})
}

// UpdateEducationDetail sets the "education_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateEducationDetail() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateEducationDetail()
	})
}

// ClearEducationDetail clears the value of the "education_detail" field.
func (u *ScreeningResultUpsertBulk) ClearEducationDetail() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearEducationDetail()
	})
}

// SetIndustryDetail sets the "industry_detail" field.
func (u *ScreeningResultUpsertBulk) SetIndustryDetail(v map[string]interface{}) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetIndustryDetail(v)
	})
}

// UpdateIndustryDetail sets the "industry_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateIndustryDetail() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateIndustryDetail()
	})
}

// ClearIndustryDetail clears the value of the "industry_detail" field.
func (u *ScreeningResultUpsertBulk) ClearIndustryDetail() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearIndustryDetail()
	})
}

// SetBasicDetail sets the "basic_detail" field.
func (u *ScreeningResultUpsertBulk) SetBasicDetail(v map[string]interface{}) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetBasicDetail(v)
	})
}

// UpdateBasicDetail sets the "basic_detail" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateBasicDetail() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateBasicDetail()
	})
}

// ClearBasicDetail clears the value of the "basic_detail" field.
func (u *ScreeningResultUpsertBulk) ClearBasicDetail() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearBasicDetail()
	})
}

// SetRecommendations sets the "recommendations" field.
func (u *ScreeningResultUpsertBulk) SetRecommendations(v []string) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetRecommendations(v)
	})
}

// UpdateRecommendations sets the "recommendations" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateRecommendations() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateRecommendations()
	})
}

// ClearRecommendations clears the value of the "recommendations" field.
func (u *ScreeningResultUpsertBulk) ClearRecommendations() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearRecommendations()
	})
}

// SetTraceID sets the "trace_id" field.
func (u *ScreeningResultUpsertBulk) SetTraceID(v string) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetTraceID(v)
	})
}

// UpdateTraceID sets the "trace_id" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateTraceID() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateTraceID()
	})
}

// ClearTraceID clears the value of the "trace_id" field.
func (u *ScreeningResultUpsertBulk) ClearTraceID() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearTraceID()
	})
}

// SetRuntimeMetadata sets the "runtime_metadata" field.
func (u *ScreeningResultUpsertBulk) SetRuntimeMetadata(v map[string]interface{}) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetRuntimeMetadata(v)
	})
}

// UpdateRuntimeMetadata sets the "runtime_metadata" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateRuntimeMetadata() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateRuntimeMetadata()
	})
}

// ClearRuntimeMetadata clears the value of the "runtime_metadata" field.
func (u *ScreeningResultUpsertBulk) ClearRuntimeMetadata() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearRuntimeMetadata()
	})
}

// SetSubAgentVersions sets the "sub_agent_versions" field.
func (u *ScreeningResultUpsertBulk) SetSubAgentVersions(v map[string]interface{}) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetSubAgentVersions(v)
	})
}

// UpdateSubAgentVersions sets the "sub_agent_versions" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateSubAgentVersions() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateSubAgentVersions()
	})
}

// ClearSubAgentVersions clears the value of the "sub_agent_versions" field.
func (u *ScreeningResultUpsertBulk) ClearSubAgentVersions() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.ClearSubAgentVersions()
	})
}

// SetMatchedAt sets the "matched_at" field.
func (u *ScreeningResultUpsertBulk) SetMatchedAt(v time.Time) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetMatchedAt(v)
	})
}

// UpdateMatchedAt sets the "matched_at" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateMatchedAt() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateMatchedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningResultUpsertBulk) SetUpdatedAt(v time.Time) *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningResultUpsertBulk) UpdateUpdatedAt() *ScreeningResultUpsertBulk {
	return u.Update(func(s *ScreeningResultUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ScreeningResultUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ScreeningResultCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ScreeningResultCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScreeningResultUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
