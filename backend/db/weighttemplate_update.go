// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/chaitin/WhaleHire/backend/db/weighttemplate"
	"github.com/google/uuid"
)

// WeightTemplateUpdate is the builder for updating WeightTemplate entities.
type WeightTemplateUpdate struct {
	config
	hooks     []Hook
	mutation  *WeightTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WeightTemplateUpdate builder.
func (wtu *WeightTemplateUpdate) Where(ps ...predicate.WeightTemplate) *WeightTemplateUpdate {
	wtu.mutation.Where(ps...)
	return wtu
}

// SetDeletedAt sets the "deleted_at" field.
func (wtu *WeightTemplateUpdate) SetDeletedAt(t time.Time) *WeightTemplateUpdate {
	wtu.mutation.SetDeletedAt(t)
	return wtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wtu *WeightTemplateUpdate) SetNillableDeletedAt(t *time.Time) *WeightTemplateUpdate {
	if t != nil {
		wtu.SetDeletedAt(*t)
	}
	return wtu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wtu *WeightTemplateUpdate) ClearDeletedAt() *WeightTemplateUpdate {
	wtu.mutation.ClearDeletedAt()
	return wtu
}

// SetName sets the "name" field.
func (wtu *WeightTemplateUpdate) SetName(s string) *WeightTemplateUpdate {
	wtu.mutation.SetName(s)
	return wtu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wtu *WeightTemplateUpdate) SetNillableName(s *string) *WeightTemplateUpdate {
	if s != nil {
		wtu.SetName(*s)
	}
	return wtu
}

// SetDescription sets the "description" field.
func (wtu *WeightTemplateUpdate) SetDescription(s string) *WeightTemplateUpdate {
	wtu.mutation.SetDescription(s)
	return wtu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wtu *WeightTemplateUpdate) SetNillableDescription(s *string) *WeightTemplateUpdate {
	if s != nil {
		wtu.SetDescription(*s)
	}
	return wtu
}

// ClearDescription clears the value of the "description" field.
func (wtu *WeightTemplateUpdate) ClearDescription() *WeightTemplateUpdate {
	wtu.mutation.ClearDescription()
	return wtu
}

// SetWeights sets the "weights" field.
func (wtu *WeightTemplateUpdate) SetWeights(m map[string]interface{}) *WeightTemplateUpdate {
	wtu.mutation.SetWeights(m)
	return wtu
}

// SetCreatedBy sets the "created_by" field.
func (wtu *WeightTemplateUpdate) SetCreatedBy(u uuid.UUID) *WeightTemplateUpdate {
	wtu.mutation.SetCreatedBy(u)
	return wtu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (wtu *WeightTemplateUpdate) SetNillableCreatedBy(u *uuid.UUID) *WeightTemplateUpdate {
	if u != nil {
		wtu.SetCreatedBy(*u)
	}
	return wtu
}

// SetUpdatedAt sets the "updated_at" field.
func (wtu *WeightTemplateUpdate) SetUpdatedAt(t time.Time) *WeightTemplateUpdate {
	wtu.mutation.SetUpdatedAt(t)
	return wtu
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (wtu *WeightTemplateUpdate) SetCreatorID(id uuid.UUID) *WeightTemplateUpdate {
	wtu.mutation.SetCreatorID(id)
	return wtu
}

// SetCreator sets the "creator" edge to the User entity.
func (wtu *WeightTemplateUpdate) SetCreator(u *User) *WeightTemplateUpdate {
	return wtu.SetCreatorID(u.ID)
}

// Mutation returns the WeightTemplateMutation object of the builder.
func (wtu *WeightTemplateUpdate) Mutation() *WeightTemplateMutation {
	return wtu.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (wtu *WeightTemplateUpdate) ClearCreator() *WeightTemplateUpdate {
	wtu.mutation.ClearCreator()
	return wtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wtu *WeightTemplateUpdate) Save(ctx context.Context) (int, error) {
	if err := wtu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, wtu.sqlSave, wtu.mutation, wtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wtu *WeightTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := wtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wtu *WeightTemplateUpdate) Exec(ctx context.Context) error {
	_, err := wtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtu *WeightTemplateUpdate) ExecX(ctx context.Context) {
	if err := wtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wtu *WeightTemplateUpdate) defaults() error {
	if _, ok := wtu.mutation.UpdatedAt(); !ok {
		if weighttemplate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized weighttemplate.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := weighttemplate.UpdateDefaultUpdatedAt()
		wtu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wtu *WeightTemplateUpdate) check() error {
	if v, ok := wtu.mutation.Name(); ok {
		if err := weighttemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "WeightTemplate.name": %w`, err)}
		}
	}
	if v, ok := wtu.mutation.Description(); ok {
		if err := weighttemplate.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`db: validator failed for field "WeightTemplate.description": %w`, err)}
		}
	}
	if wtu.mutation.CreatorCleared() && len(wtu.mutation.CreatorIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "WeightTemplate.creator"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wtu *WeightTemplateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WeightTemplateUpdate {
	wtu.modifiers = append(wtu.modifiers, modifiers...)
	return wtu
}

func (wtu *WeightTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(weighttemplate.Table, weighttemplate.Columns, sqlgraph.NewFieldSpec(weighttemplate.FieldID, field.TypeUUID))
	if ps := wtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wtu.mutation.DeletedAt(); ok {
		_spec.SetField(weighttemplate.FieldDeletedAt, field.TypeTime, value)
	}
	if wtu.mutation.DeletedAtCleared() {
		_spec.ClearField(weighttemplate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wtu.mutation.Name(); ok {
		_spec.SetField(weighttemplate.FieldName, field.TypeString, value)
	}
	if value, ok := wtu.mutation.Description(); ok {
		_spec.SetField(weighttemplate.FieldDescription, field.TypeString, value)
	}
	if wtu.mutation.DescriptionCleared() {
		_spec.ClearField(weighttemplate.FieldDescription, field.TypeString)
	}
	if value, ok := wtu.mutation.Weights(); ok {
		_spec.SetField(weighttemplate.FieldWeights, field.TypeJSON, value)
	}
	if value, ok := wtu.mutation.UpdatedAt(); ok {
		_spec.SetField(weighttemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if wtu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   weighttemplate.CreatorTable,
			Columns: []string{weighttemplate.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wtu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   weighttemplate.CreatorTable,
			Columns: []string{weighttemplate.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wtu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weighttemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wtu.mutation.done = true
	return n, nil
}

// WeightTemplateUpdateOne is the builder for updating a single WeightTemplate entity.
type WeightTemplateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WeightTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (wtuo *WeightTemplateUpdateOne) SetDeletedAt(t time.Time) *WeightTemplateUpdateOne {
	wtuo.mutation.SetDeletedAt(t)
	return wtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wtuo *WeightTemplateUpdateOne) SetNillableDeletedAt(t *time.Time) *WeightTemplateUpdateOne {
	if t != nil {
		wtuo.SetDeletedAt(*t)
	}
	return wtuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wtuo *WeightTemplateUpdateOne) ClearDeletedAt() *WeightTemplateUpdateOne {
	wtuo.mutation.ClearDeletedAt()
	return wtuo
}

// SetName sets the "name" field.
func (wtuo *WeightTemplateUpdateOne) SetName(s string) *WeightTemplateUpdateOne {
	wtuo.mutation.SetName(s)
	return wtuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wtuo *WeightTemplateUpdateOne) SetNillableName(s *string) *WeightTemplateUpdateOne {
	if s != nil {
		wtuo.SetName(*s)
	}
	return wtuo
}

// SetDescription sets the "description" field.
func (wtuo *WeightTemplateUpdateOne) SetDescription(s string) *WeightTemplateUpdateOne {
	wtuo.mutation.SetDescription(s)
	return wtuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wtuo *WeightTemplateUpdateOne) SetNillableDescription(s *string) *WeightTemplateUpdateOne {
	if s != nil {
		wtuo.SetDescription(*s)
	}
	return wtuo
}

// ClearDescription clears the value of the "description" field.
func (wtuo *WeightTemplateUpdateOne) ClearDescription() *WeightTemplateUpdateOne {
	wtuo.mutation.ClearDescription()
	return wtuo
}

// SetWeights sets the "weights" field.
func (wtuo *WeightTemplateUpdateOne) SetWeights(m map[string]interface{}) *WeightTemplateUpdateOne {
	wtuo.mutation.SetWeights(m)
	return wtuo
}

// SetCreatedBy sets the "created_by" field.
func (wtuo *WeightTemplateUpdateOne) SetCreatedBy(u uuid.UUID) *WeightTemplateUpdateOne {
	wtuo.mutation.SetCreatedBy(u)
	return wtuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (wtuo *WeightTemplateUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *WeightTemplateUpdateOne {
	if u != nil {
		wtuo.SetCreatedBy(*u)
	}
	return wtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wtuo *WeightTemplateUpdateOne) SetUpdatedAt(t time.Time) *WeightTemplateUpdateOne {
	wtuo.mutation.SetUpdatedAt(t)
	return wtuo
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (wtuo *WeightTemplateUpdateOne) SetCreatorID(id uuid.UUID) *WeightTemplateUpdateOne {
	wtuo.mutation.SetCreatorID(id)
	return wtuo
}

// SetCreator sets the "creator" edge to the User entity.
func (wtuo *WeightTemplateUpdateOne) SetCreator(u *User) *WeightTemplateUpdateOne {
	return wtuo.SetCreatorID(u.ID)
}

// Mutation returns the WeightTemplateMutation object of the builder.
func (wtuo *WeightTemplateUpdateOne) Mutation() *WeightTemplateMutation {
	return wtuo.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (wtuo *WeightTemplateUpdateOne) ClearCreator() *WeightTemplateUpdateOne {
	wtuo.mutation.ClearCreator()
	return wtuo
}

// Where appends a list predicates to the WeightTemplateUpdate builder.
func (wtuo *WeightTemplateUpdateOne) Where(ps ...predicate.WeightTemplate) *WeightTemplateUpdateOne {
	wtuo.mutation.Where(ps...)
	return wtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wtuo *WeightTemplateUpdateOne) Select(field string, fields ...string) *WeightTemplateUpdateOne {
	wtuo.fields = append([]string{field}, fields...)
	return wtuo
}

// Save executes the query and returns the updated WeightTemplate entity.
func (wtuo *WeightTemplateUpdateOne) Save(ctx context.Context) (*WeightTemplate, error) {
	if err := wtuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wtuo.sqlSave, wtuo.mutation, wtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wtuo *WeightTemplateUpdateOne) SaveX(ctx context.Context) *WeightTemplate {
	node, err := wtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wtuo *WeightTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := wtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtuo *WeightTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := wtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wtuo *WeightTemplateUpdateOne) defaults() error {
	if _, ok := wtuo.mutation.UpdatedAt(); !ok {
		if weighttemplate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized weighttemplate.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := weighttemplate.UpdateDefaultUpdatedAt()
		wtuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wtuo *WeightTemplateUpdateOne) check() error {
	if v, ok := wtuo.mutation.Name(); ok {
		if err := weighttemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "WeightTemplate.name": %w`, err)}
		}
	}
	if v, ok := wtuo.mutation.Description(); ok {
		if err := weighttemplate.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`db: validator failed for field "WeightTemplate.description": %w`, err)}
		}
	}
	if wtuo.mutation.CreatorCleared() && len(wtuo.mutation.CreatorIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "WeightTemplate.creator"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wtuo *WeightTemplateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WeightTemplateUpdateOne {
	wtuo.modifiers = append(wtuo.modifiers, modifiers...)
	return wtuo
}

func (wtuo *WeightTemplateUpdateOne) sqlSave(ctx context.Context) (_node *WeightTemplate, err error) {
	if err := wtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(weighttemplate.Table, weighttemplate.Columns, sqlgraph.NewFieldSpec(weighttemplate.FieldID, field.TypeUUID))
	id, ok := wtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "WeightTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, weighttemplate.FieldID)
		for _, f := range fields {
			if !weighttemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != weighttemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wtuo.mutation.DeletedAt(); ok {
		_spec.SetField(weighttemplate.FieldDeletedAt, field.TypeTime, value)
	}
	if wtuo.mutation.DeletedAtCleared() {
		_spec.ClearField(weighttemplate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wtuo.mutation.Name(); ok {
		_spec.SetField(weighttemplate.FieldName, field.TypeString, value)
	}
	if value, ok := wtuo.mutation.Description(); ok {
		_spec.SetField(weighttemplate.FieldDescription, field.TypeString, value)
	}
	if wtuo.mutation.DescriptionCleared() {
		_spec.ClearField(weighttemplate.FieldDescription, field.TypeString)
	}
	if value, ok := wtuo.mutation.Weights(); ok {
		_spec.SetField(weighttemplate.FieldWeights, field.TypeJSON, value)
	}
	if value, ok := wtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(weighttemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if wtuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   weighttemplate.CreatorTable,
			Columns: []string{weighttemplate.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wtuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   weighttemplate.CreatorTable,
			Columns: []string{weighttemplate.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wtuo.modifiers...)
	_node = &WeightTemplate{config: wtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weighttemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wtuo.mutation.done = true
	return _node, nil
}
