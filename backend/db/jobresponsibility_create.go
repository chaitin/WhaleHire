// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/jobresponsibility"
	"github.com/google/uuid"
)

// JobResponsibilityCreate is the builder for creating a JobResponsibility entity.
type JobResponsibilityCreate struct {
	config
	mutation *JobResponsibilityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (jrc *JobResponsibilityCreate) SetDeletedAt(t time.Time) *JobResponsibilityCreate {
	jrc.mutation.SetDeletedAt(t)
	return jrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jrc *JobResponsibilityCreate) SetNillableDeletedAt(t *time.Time) *JobResponsibilityCreate {
	if t != nil {
		jrc.SetDeletedAt(*t)
	}
	return jrc
}

// SetJobID sets the "job_id" field.
func (jrc *JobResponsibilityCreate) SetJobID(u uuid.UUID) *JobResponsibilityCreate {
	jrc.mutation.SetJobID(u)
	return jrc
}

// SetResponsibility sets the "responsibility" field.
func (jrc *JobResponsibilityCreate) SetResponsibility(s string) *JobResponsibilityCreate {
	jrc.mutation.SetResponsibility(s)
	return jrc
}

// SetWeight sets the "weight" field.
func (jrc *JobResponsibilityCreate) SetWeight(i int) *JobResponsibilityCreate {
	jrc.mutation.SetWeight(i)
	return jrc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (jrc *JobResponsibilityCreate) SetNillableWeight(i *int) *JobResponsibilityCreate {
	if i != nil {
		jrc.SetWeight(*i)
	}
	return jrc
}

// SetCreatedAt sets the "created_at" field.
func (jrc *JobResponsibilityCreate) SetCreatedAt(t time.Time) *JobResponsibilityCreate {
	jrc.mutation.SetCreatedAt(t)
	return jrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jrc *JobResponsibilityCreate) SetNillableCreatedAt(t *time.Time) *JobResponsibilityCreate {
	if t != nil {
		jrc.SetCreatedAt(*t)
	}
	return jrc
}

// SetUpdatedAt sets the "updated_at" field.
func (jrc *JobResponsibilityCreate) SetUpdatedAt(t time.Time) *JobResponsibilityCreate {
	jrc.mutation.SetUpdatedAt(t)
	return jrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jrc *JobResponsibilityCreate) SetNillableUpdatedAt(t *time.Time) *JobResponsibilityCreate {
	if t != nil {
		jrc.SetUpdatedAt(*t)
	}
	return jrc
}

// SetID sets the "id" field.
func (jrc *JobResponsibilityCreate) SetID(u uuid.UUID) *JobResponsibilityCreate {
	jrc.mutation.SetID(u)
	return jrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jrc *JobResponsibilityCreate) SetNillableID(u *uuid.UUID) *JobResponsibilityCreate {
	if u != nil {
		jrc.SetID(*u)
	}
	return jrc
}

// SetJob sets the "job" edge to the JobPosition entity.
func (jrc *JobResponsibilityCreate) SetJob(j *JobPosition) *JobResponsibilityCreate {
	return jrc.SetJobID(j.ID)
}

// Mutation returns the JobResponsibilityMutation object of the builder.
func (jrc *JobResponsibilityCreate) Mutation() *JobResponsibilityMutation {
	return jrc.mutation
}

// Save creates the JobResponsibility in the database.
func (jrc *JobResponsibilityCreate) Save(ctx context.Context) (*JobResponsibility, error) {
	if err := jrc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jrc.sqlSave, jrc.mutation, jrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jrc *JobResponsibilityCreate) SaveX(ctx context.Context) *JobResponsibility {
	v, err := jrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jrc *JobResponsibilityCreate) Exec(ctx context.Context) error {
	_, err := jrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrc *JobResponsibilityCreate) ExecX(ctx context.Context) {
	if err := jrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jrc *JobResponsibilityCreate) defaults() error {
	if _, ok := jrc.mutation.CreatedAt(); !ok {
		if jobresponsibility.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized jobresponsibility.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := jobresponsibility.DefaultCreatedAt()
		jrc.mutation.SetCreatedAt(v)
	}
	if _, ok := jrc.mutation.UpdatedAt(); !ok {
		if jobresponsibility.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized jobresponsibility.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := jobresponsibility.DefaultUpdatedAt()
		jrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jrc.mutation.ID(); !ok {
		if jobresponsibility.DefaultID == nil {
			return fmt.Errorf("db: uninitialized jobresponsibility.DefaultID (forgotten import db/runtime?)")
		}
		v := jobresponsibility.DefaultID()
		jrc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jrc *JobResponsibilityCreate) check() error {
	if _, ok := jrc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job_id", err: errors.New(`db: missing required field "JobResponsibility.job_id"`)}
	}
	if _, ok := jrc.mutation.Responsibility(); !ok {
		return &ValidationError{Name: "responsibility", err: errors.New(`db: missing required field "JobResponsibility.responsibility"`)}
	}
	if v, ok := jrc.mutation.Weight(); ok {
		if err := jobresponsibility.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`db: validator failed for field "JobResponsibility.weight": %w`, err)}
		}
	}
	if _, ok := jrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "JobResponsibility.created_at"`)}
	}
	if _, ok := jrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "JobResponsibility.updated_at"`)}
	}
	if len(jrc.mutation.JobIDs()) == 0 {
		return &ValidationError{Name: "job", err: errors.New(`db: missing required edge "JobResponsibility.job"`)}
	}
	return nil
}

func (jrc *JobResponsibilityCreate) sqlSave(ctx context.Context) (*JobResponsibility, error) {
	if err := jrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	jrc.mutation.id = &_node.ID
	jrc.mutation.done = true
	return _node, nil
}

func (jrc *JobResponsibilityCreate) createSpec() (*JobResponsibility, *sqlgraph.CreateSpec) {
	var (
		_node = &JobResponsibility{config: jrc.config}
		_spec = sqlgraph.NewCreateSpec(jobresponsibility.Table, sqlgraph.NewFieldSpec(jobresponsibility.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = jrc.conflict
	if id, ok := jrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := jrc.mutation.DeletedAt(); ok {
		_spec.SetField(jobresponsibility.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := jrc.mutation.Responsibility(); ok {
		_spec.SetField(jobresponsibility.FieldResponsibility, field.TypeString, value)
		_node.Responsibility = value
	}
	if value, ok := jrc.mutation.Weight(); ok {
		_spec.SetField(jobresponsibility.FieldWeight, field.TypeInt, value)
		_node.Weight = value
	}
	if value, ok := jrc.mutation.CreatedAt(); ok {
		_spec.SetField(jobresponsibility.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jrc.mutation.UpdatedAt(); ok {
		_spec.SetField(jobresponsibility.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := jrc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobresponsibility.JobTable,
			Columns: []string{jobresponsibility.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.JobID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobResponsibility.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobResponsibilityUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (jrc *JobResponsibilityCreate) OnConflict(opts ...sql.ConflictOption) *JobResponsibilityUpsertOne {
	jrc.conflict = opts
	return &JobResponsibilityUpsertOne{
		create: jrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobResponsibility.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jrc *JobResponsibilityCreate) OnConflictColumns(columns ...string) *JobResponsibilityUpsertOne {
	jrc.conflict = append(jrc.conflict, sql.ConflictColumns(columns...))
	return &JobResponsibilityUpsertOne{
		create: jrc,
	}
}

type (
	// JobResponsibilityUpsertOne is the builder for "upsert"-ing
	//  one JobResponsibility node.
	JobResponsibilityUpsertOne struct {
		create *JobResponsibilityCreate
	}

	// JobResponsibilityUpsert is the "OnConflict" setter.
	JobResponsibilityUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *JobResponsibilityUpsert) SetDeletedAt(v time.Time) *JobResponsibilityUpsert {
	u.Set(jobresponsibility.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobResponsibilityUpsert) UpdateDeletedAt() *JobResponsibilityUpsert {
	u.SetExcluded(jobresponsibility.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobResponsibilityUpsert) ClearDeletedAt() *JobResponsibilityUpsert {
	u.SetNull(jobresponsibility.FieldDeletedAt)
	return u
}

// SetJobID sets the "job_id" field.
func (u *JobResponsibilityUpsert) SetJobID(v uuid.UUID) *JobResponsibilityUpsert {
	u.Set(jobresponsibility.FieldJobID, v)
	return u
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *JobResponsibilityUpsert) UpdateJobID() *JobResponsibilityUpsert {
	u.SetExcluded(jobresponsibility.FieldJobID)
	return u
}

// SetResponsibility sets the "responsibility" field.
func (u *JobResponsibilityUpsert) SetResponsibility(v string) *JobResponsibilityUpsert {
	u.Set(jobresponsibility.FieldResponsibility, v)
	return u
}

// UpdateResponsibility sets the "responsibility" field to the value that was provided on create.
func (u *JobResponsibilityUpsert) UpdateResponsibility() *JobResponsibilityUpsert {
	u.SetExcluded(jobresponsibility.FieldResponsibility)
	return u
}

// SetWeight sets the "weight" field.
func (u *JobResponsibilityUpsert) SetWeight(v int) *JobResponsibilityUpsert {
	u.Set(jobresponsibility.FieldWeight, v)
	return u
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *JobResponsibilityUpsert) UpdateWeight() *JobResponsibilityUpsert {
	u.SetExcluded(jobresponsibility.FieldWeight)
	return u
}

// AddWeight adds v to the "weight" field.
func (u *JobResponsibilityUpsert) AddWeight(v int) *JobResponsibilityUpsert {
	u.Add(jobresponsibility.FieldWeight, v)
	return u
}

// ClearWeight clears the value of the "weight" field.
func (u *JobResponsibilityUpsert) ClearWeight() *JobResponsibilityUpsert {
	u.SetNull(jobresponsibility.FieldWeight)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobResponsibilityUpsert) SetUpdatedAt(v time.Time) *JobResponsibilityUpsert {
	u.Set(jobresponsibility.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobResponsibilityUpsert) UpdateUpdatedAt() *JobResponsibilityUpsert {
	u.SetExcluded(jobresponsibility.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.JobResponsibility.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobresponsibility.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobResponsibilityUpsertOne) UpdateNewValues() *JobResponsibilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(jobresponsibility.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(jobresponsibility.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobResponsibility.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *JobResponsibilityUpsertOne) Ignore() *JobResponsibilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobResponsibilityUpsertOne) DoNothing() *JobResponsibilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobResponsibilityCreate.OnConflict
// documentation for more info.
func (u *JobResponsibilityUpsertOne) Update(set func(*JobResponsibilityUpsert)) *JobResponsibilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobResponsibilityUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *JobResponsibilityUpsertOne) SetDeletedAt(v time.Time) *JobResponsibilityUpsertOne {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobResponsibilityUpsertOne) UpdateDeletedAt() *JobResponsibilityUpsertOne {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobResponsibilityUpsertOne) ClearDeletedAt() *JobResponsibilityUpsertOne {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.ClearDeletedAt()
	})
}

// SetJobID sets the "job_id" field.
func (u *JobResponsibilityUpsertOne) SetJobID(v uuid.UUID) *JobResponsibilityUpsertOne {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.SetJobID(v)
	})
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *JobResponsibilityUpsertOne) UpdateJobID() *JobResponsibilityUpsertOne {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.UpdateJobID()
	})
}

// SetResponsibility sets the "responsibility" field.
func (u *JobResponsibilityUpsertOne) SetResponsibility(v string) *JobResponsibilityUpsertOne {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.SetResponsibility(v)
	})
}

// UpdateResponsibility sets the "responsibility" field to the value that was provided on create.
func (u *JobResponsibilityUpsertOne) UpdateResponsibility() *JobResponsibilityUpsertOne {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.UpdateResponsibility()
	})
}

// SetWeight sets the "weight" field.
func (u *JobResponsibilityUpsertOne) SetWeight(v int) *JobResponsibilityUpsertOne {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *JobResponsibilityUpsertOne) AddWeight(v int) *JobResponsibilityUpsertOne {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *JobResponsibilityUpsertOne) UpdateWeight() *JobResponsibilityUpsertOne {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.UpdateWeight()
	})
}

// ClearWeight clears the value of the "weight" field.
func (u *JobResponsibilityUpsertOne) ClearWeight() *JobResponsibilityUpsertOne {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.ClearWeight()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobResponsibilityUpsertOne) SetUpdatedAt(v time.Time) *JobResponsibilityUpsertOne {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobResponsibilityUpsertOne) UpdateUpdatedAt() *JobResponsibilityUpsertOne {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *JobResponsibilityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for JobResponsibilityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobResponsibilityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *JobResponsibilityUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: JobResponsibilityUpsertOne.ID is not supported by MySQL driver. Use JobResponsibilityUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *JobResponsibilityUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// JobResponsibilityCreateBulk is the builder for creating many JobResponsibility entities in bulk.
type JobResponsibilityCreateBulk struct {
	config
	err      error
	builders []*JobResponsibilityCreate
	conflict []sql.ConflictOption
}

// Save creates the JobResponsibility entities in the database.
func (jrcb *JobResponsibilityCreateBulk) Save(ctx context.Context) ([]*JobResponsibility, error) {
	if jrcb.err != nil {
		return nil, jrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jrcb.builders))
	nodes := make([]*JobResponsibility, len(jrcb.builders))
	mutators := make([]Mutator, len(jrcb.builders))
	for i := range jrcb.builders {
		func(i int, root context.Context) {
			builder := jrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobResponsibilityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = jrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jrcb *JobResponsibilityCreateBulk) SaveX(ctx context.Context) []*JobResponsibility {
	v, err := jrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jrcb *JobResponsibilityCreateBulk) Exec(ctx context.Context) error {
	_, err := jrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrcb *JobResponsibilityCreateBulk) ExecX(ctx context.Context) {
	if err := jrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobResponsibility.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobResponsibilityUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (jrcb *JobResponsibilityCreateBulk) OnConflict(opts ...sql.ConflictOption) *JobResponsibilityUpsertBulk {
	jrcb.conflict = opts
	return &JobResponsibilityUpsertBulk{
		create: jrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobResponsibility.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jrcb *JobResponsibilityCreateBulk) OnConflictColumns(columns ...string) *JobResponsibilityUpsertBulk {
	jrcb.conflict = append(jrcb.conflict, sql.ConflictColumns(columns...))
	return &JobResponsibilityUpsertBulk{
		create: jrcb,
	}
}

// JobResponsibilityUpsertBulk is the builder for "upsert"-ing
// a bulk of JobResponsibility nodes.
type JobResponsibilityUpsertBulk struct {
	create *JobResponsibilityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.JobResponsibility.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobresponsibility.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobResponsibilityUpsertBulk) UpdateNewValues() *JobResponsibilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(jobresponsibility.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(jobresponsibility.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobResponsibility.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *JobResponsibilityUpsertBulk) Ignore() *JobResponsibilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobResponsibilityUpsertBulk) DoNothing() *JobResponsibilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobResponsibilityCreateBulk.OnConflict
// documentation for more info.
func (u *JobResponsibilityUpsertBulk) Update(set func(*JobResponsibilityUpsert)) *JobResponsibilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobResponsibilityUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *JobResponsibilityUpsertBulk) SetDeletedAt(v time.Time) *JobResponsibilityUpsertBulk {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobResponsibilityUpsertBulk) UpdateDeletedAt() *JobResponsibilityUpsertBulk {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobResponsibilityUpsertBulk) ClearDeletedAt() *JobResponsibilityUpsertBulk {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.ClearDeletedAt()
	})
}

// SetJobID sets the "job_id" field.
func (u *JobResponsibilityUpsertBulk) SetJobID(v uuid.UUID) *JobResponsibilityUpsertBulk {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.SetJobID(v)
	})
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *JobResponsibilityUpsertBulk) UpdateJobID() *JobResponsibilityUpsertBulk {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.UpdateJobID()
	})
}

// SetResponsibility sets the "responsibility" field.
func (u *JobResponsibilityUpsertBulk) SetResponsibility(v string) *JobResponsibilityUpsertBulk {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.SetResponsibility(v)
	})
}

// UpdateResponsibility sets the "responsibility" field to the value that was provided on create.
func (u *JobResponsibilityUpsertBulk) UpdateResponsibility() *JobResponsibilityUpsertBulk {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.UpdateResponsibility()
	})
}

// SetWeight sets the "weight" field.
func (u *JobResponsibilityUpsertBulk) SetWeight(v int) *JobResponsibilityUpsertBulk {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *JobResponsibilityUpsertBulk) AddWeight(v int) *JobResponsibilityUpsertBulk {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *JobResponsibilityUpsertBulk) UpdateWeight() *JobResponsibilityUpsertBulk {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.UpdateWeight()
	})
}

// ClearWeight clears the value of the "weight" field.
func (u *JobResponsibilityUpsertBulk) ClearWeight() *JobResponsibilityUpsertBulk {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.ClearWeight()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobResponsibilityUpsertBulk) SetUpdatedAt(v time.Time) *JobResponsibilityUpsertBulk {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobResponsibilityUpsertBulk) UpdateUpdatedAt() *JobResponsibilityUpsertBulk {
	return u.Update(func(s *JobResponsibilityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *JobResponsibilityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the JobResponsibilityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for JobResponsibilityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobResponsibilityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
