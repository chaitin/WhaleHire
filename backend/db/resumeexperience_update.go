// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumeexperience"
	"github.com/google/uuid"
)

// ResumeExperienceUpdate is the builder for updating ResumeExperience entities.
type ResumeExperienceUpdate struct {
	config
	hooks     []Hook
	mutation  *ResumeExperienceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ResumeExperienceUpdate builder.
func (reu *ResumeExperienceUpdate) Where(ps ...predicate.ResumeExperience) *ResumeExperienceUpdate {
	reu.mutation.Where(ps...)
	return reu
}

// SetDeletedAt sets the "deleted_at" field.
func (reu *ResumeExperienceUpdate) SetDeletedAt(t time.Time) *ResumeExperienceUpdate {
	reu.mutation.SetDeletedAt(t)
	return reu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (reu *ResumeExperienceUpdate) SetNillableDeletedAt(t *time.Time) *ResumeExperienceUpdate {
	if t != nil {
		reu.SetDeletedAt(*t)
	}
	return reu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (reu *ResumeExperienceUpdate) ClearDeletedAt() *ResumeExperienceUpdate {
	reu.mutation.ClearDeletedAt()
	return reu
}

// SetResumeID sets the "resume_id" field.
func (reu *ResumeExperienceUpdate) SetResumeID(u uuid.UUID) *ResumeExperienceUpdate {
	reu.mutation.SetResumeID(u)
	return reu
}

// SetNillableResumeID sets the "resume_id" field if the given value is not nil.
func (reu *ResumeExperienceUpdate) SetNillableResumeID(u *uuid.UUID) *ResumeExperienceUpdate {
	if u != nil {
		reu.SetResumeID(*u)
	}
	return reu
}

// SetCompany sets the "company" field.
func (reu *ResumeExperienceUpdate) SetCompany(s string) *ResumeExperienceUpdate {
	reu.mutation.SetCompany(s)
	return reu
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (reu *ResumeExperienceUpdate) SetNillableCompany(s *string) *ResumeExperienceUpdate {
	if s != nil {
		reu.SetCompany(*s)
	}
	return reu
}

// ClearCompany clears the value of the "company" field.
func (reu *ResumeExperienceUpdate) ClearCompany() *ResumeExperienceUpdate {
	reu.mutation.ClearCompany()
	return reu
}

// SetPosition sets the "position" field.
func (reu *ResumeExperienceUpdate) SetPosition(s string) *ResumeExperienceUpdate {
	reu.mutation.SetPosition(s)
	return reu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (reu *ResumeExperienceUpdate) SetNillablePosition(s *string) *ResumeExperienceUpdate {
	if s != nil {
		reu.SetPosition(*s)
	}
	return reu
}

// ClearPosition clears the value of the "position" field.
func (reu *ResumeExperienceUpdate) ClearPosition() *ResumeExperienceUpdate {
	reu.mutation.ClearPosition()
	return reu
}

// SetTitle sets the "title" field.
func (reu *ResumeExperienceUpdate) SetTitle(s string) *ResumeExperienceUpdate {
	reu.mutation.SetTitle(s)
	return reu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (reu *ResumeExperienceUpdate) SetNillableTitle(s *string) *ResumeExperienceUpdate {
	if s != nil {
		reu.SetTitle(*s)
	}
	return reu
}

// ClearTitle clears the value of the "title" field.
func (reu *ResumeExperienceUpdate) ClearTitle() *ResumeExperienceUpdate {
	reu.mutation.ClearTitle()
	return reu
}

// SetStartDate sets the "start_date" field.
func (reu *ResumeExperienceUpdate) SetStartDate(t time.Time) *ResumeExperienceUpdate {
	reu.mutation.SetStartDate(t)
	return reu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (reu *ResumeExperienceUpdate) SetNillableStartDate(t *time.Time) *ResumeExperienceUpdate {
	if t != nil {
		reu.SetStartDate(*t)
	}
	return reu
}

// ClearStartDate clears the value of the "start_date" field.
func (reu *ResumeExperienceUpdate) ClearStartDate() *ResumeExperienceUpdate {
	reu.mutation.ClearStartDate()
	return reu
}

// SetEndDate sets the "end_date" field.
func (reu *ResumeExperienceUpdate) SetEndDate(t time.Time) *ResumeExperienceUpdate {
	reu.mutation.SetEndDate(t)
	return reu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (reu *ResumeExperienceUpdate) SetNillableEndDate(t *time.Time) *ResumeExperienceUpdate {
	if t != nil {
		reu.SetEndDate(*t)
	}
	return reu
}

// ClearEndDate clears the value of the "end_date" field.
func (reu *ResumeExperienceUpdate) ClearEndDate() *ResumeExperienceUpdate {
	reu.mutation.ClearEndDate()
	return reu
}

// SetDescription sets the "description" field.
func (reu *ResumeExperienceUpdate) SetDescription(s string) *ResumeExperienceUpdate {
	reu.mutation.SetDescription(s)
	return reu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (reu *ResumeExperienceUpdate) SetNillableDescription(s *string) *ResumeExperienceUpdate {
	if s != nil {
		reu.SetDescription(*s)
	}
	return reu
}

// ClearDescription clears the value of the "description" field.
func (reu *ResumeExperienceUpdate) ClearDescription() *ResumeExperienceUpdate {
	reu.mutation.ClearDescription()
	return reu
}

// SetExperienceType sets the "experience_type" field.
func (reu *ResumeExperienceUpdate) SetExperienceType(ct consts.ExperienceType) *ResumeExperienceUpdate {
	reu.mutation.SetExperienceType(ct)
	return reu
}

// SetNillableExperienceType sets the "experience_type" field if the given value is not nil.
func (reu *ResumeExperienceUpdate) SetNillableExperienceType(ct *consts.ExperienceType) *ResumeExperienceUpdate {
	if ct != nil {
		reu.SetExperienceType(*ct)
	}
	return reu
}

// ClearExperienceType clears the value of the "experience_type" field.
func (reu *ResumeExperienceUpdate) ClearExperienceType() *ResumeExperienceUpdate {
	reu.mutation.ClearExperienceType()
	return reu
}

// SetCreatedAt sets the "created_at" field.
func (reu *ResumeExperienceUpdate) SetCreatedAt(t time.Time) *ResumeExperienceUpdate {
	reu.mutation.SetCreatedAt(t)
	return reu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (reu *ResumeExperienceUpdate) SetNillableCreatedAt(t *time.Time) *ResumeExperienceUpdate {
	if t != nil {
		reu.SetCreatedAt(*t)
	}
	return reu
}

// SetUpdatedAt sets the "updated_at" field.
func (reu *ResumeExperienceUpdate) SetUpdatedAt(t time.Time) *ResumeExperienceUpdate {
	reu.mutation.SetUpdatedAt(t)
	return reu
}

// SetResume sets the "resume" edge to the Resume entity.
func (reu *ResumeExperienceUpdate) SetResume(r *Resume) *ResumeExperienceUpdate {
	return reu.SetResumeID(r.ID)
}

// Mutation returns the ResumeExperienceMutation object of the builder.
func (reu *ResumeExperienceUpdate) Mutation() *ResumeExperienceMutation {
	return reu.mutation
}

// ClearResume clears the "resume" edge to the Resume entity.
func (reu *ResumeExperienceUpdate) ClearResume() *ResumeExperienceUpdate {
	reu.mutation.ClearResume()
	return reu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (reu *ResumeExperienceUpdate) Save(ctx context.Context) (int, error) {
	if err := reu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, reu.sqlSave, reu.mutation, reu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (reu *ResumeExperienceUpdate) SaveX(ctx context.Context) int {
	affected, err := reu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (reu *ResumeExperienceUpdate) Exec(ctx context.Context) error {
	_, err := reu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reu *ResumeExperienceUpdate) ExecX(ctx context.Context) {
	if err := reu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (reu *ResumeExperienceUpdate) defaults() error {
	if _, ok := reu.mutation.UpdatedAt(); !ok {
		if resumeexperience.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumeexperience.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumeexperience.UpdateDefaultUpdatedAt()
		reu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (reu *ResumeExperienceUpdate) check() error {
	if reu.mutation.ResumeCleared() && len(reu.mutation.ResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeExperience.resume"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (reu *ResumeExperienceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeExperienceUpdate {
	reu.modifiers = append(reu.modifiers, modifiers...)
	return reu
}

func (reu *ResumeExperienceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := reu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumeexperience.Table, resumeexperience.Columns, sqlgraph.NewFieldSpec(resumeexperience.FieldID, field.TypeUUID))
	if ps := reu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := reu.mutation.DeletedAt(); ok {
		_spec.SetField(resumeexperience.FieldDeletedAt, field.TypeTime, value)
	}
	if reu.mutation.DeletedAtCleared() {
		_spec.ClearField(resumeexperience.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := reu.mutation.Company(); ok {
		_spec.SetField(resumeexperience.FieldCompany, field.TypeString, value)
	}
	if reu.mutation.CompanyCleared() {
		_spec.ClearField(resumeexperience.FieldCompany, field.TypeString)
	}
	if value, ok := reu.mutation.Position(); ok {
		_spec.SetField(resumeexperience.FieldPosition, field.TypeString, value)
	}
	if reu.mutation.PositionCleared() {
		_spec.ClearField(resumeexperience.FieldPosition, field.TypeString)
	}
	if value, ok := reu.mutation.Title(); ok {
		_spec.SetField(resumeexperience.FieldTitle, field.TypeString, value)
	}
	if reu.mutation.TitleCleared() {
		_spec.ClearField(resumeexperience.FieldTitle, field.TypeString)
	}
	if value, ok := reu.mutation.StartDate(); ok {
		_spec.SetField(resumeexperience.FieldStartDate, field.TypeTime, value)
	}
	if reu.mutation.StartDateCleared() {
		_spec.ClearField(resumeexperience.FieldStartDate, field.TypeTime)
	}
	if value, ok := reu.mutation.EndDate(); ok {
		_spec.SetField(resumeexperience.FieldEndDate, field.TypeTime, value)
	}
	if reu.mutation.EndDateCleared() {
		_spec.ClearField(resumeexperience.FieldEndDate, field.TypeTime)
	}
	if value, ok := reu.mutation.Description(); ok {
		_spec.SetField(resumeexperience.FieldDescription, field.TypeString, value)
	}
	if reu.mutation.DescriptionCleared() {
		_spec.ClearField(resumeexperience.FieldDescription, field.TypeString)
	}
	if value, ok := reu.mutation.ExperienceType(); ok {
		_spec.SetField(resumeexperience.FieldExperienceType, field.TypeString, value)
	}
	if reu.mutation.ExperienceTypeCleared() {
		_spec.ClearField(resumeexperience.FieldExperienceType, field.TypeString)
	}
	if value, ok := reu.mutation.CreatedAt(); ok {
		_spec.SetField(resumeexperience.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := reu.mutation.UpdatedAt(); ok {
		_spec.SetField(resumeexperience.FieldUpdatedAt, field.TypeTime, value)
	}
	if reu.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeexperience.ResumeTable,
			Columns: []string{resumeexperience.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reu.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeexperience.ResumeTable,
			Columns: []string{resumeexperience.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(reu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, reu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumeexperience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	reu.mutation.done = true
	return n, nil
}

// ResumeExperienceUpdateOne is the builder for updating a single ResumeExperience entity.
type ResumeExperienceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ResumeExperienceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (reuo *ResumeExperienceUpdateOne) SetDeletedAt(t time.Time) *ResumeExperienceUpdateOne {
	reuo.mutation.SetDeletedAt(t)
	return reuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (reuo *ResumeExperienceUpdateOne) SetNillableDeletedAt(t *time.Time) *ResumeExperienceUpdateOne {
	if t != nil {
		reuo.SetDeletedAt(*t)
	}
	return reuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (reuo *ResumeExperienceUpdateOne) ClearDeletedAt() *ResumeExperienceUpdateOne {
	reuo.mutation.ClearDeletedAt()
	return reuo
}

// SetResumeID sets the "resume_id" field.
func (reuo *ResumeExperienceUpdateOne) SetResumeID(u uuid.UUID) *ResumeExperienceUpdateOne {
	reuo.mutation.SetResumeID(u)
	return reuo
}

// SetNillableResumeID sets the "resume_id" field if the given value is not nil.
func (reuo *ResumeExperienceUpdateOne) SetNillableResumeID(u *uuid.UUID) *ResumeExperienceUpdateOne {
	if u != nil {
		reuo.SetResumeID(*u)
	}
	return reuo
}

// SetCompany sets the "company" field.
func (reuo *ResumeExperienceUpdateOne) SetCompany(s string) *ResumeExperienceUpdateOne {
	reuo.mutation.SetCompany(s)
	return reuo
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (reuo *ResumeExperienceUpdateOne) SetNillableCompany(s *string) *ResumeExperienceUpdateOne {
	if s != nil {
		reuo.SetCompany(*s)
	}
	return reuo
}

// ClearCompany clears the value of the "company" field.
func (reuo *ResumeExperienceUpdateOne) ClearCompany() *ResumeExperienceUpdateOne {
	reuo.mutation.ClearCompany()
	return reuo
}

// SetPosition sets the "position" field.
func (reuo *ResumeExperienceUpdateOne) SetPosition(s string) *ResumeExperienceUpdateOne {
	reuo.mutation.SetPosition(s)
	return reuo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (reuo *ResumeExperienceUpdateOne) SetNillablePosition(s *string) *ResumeExperienceUpdateOne {
	if s != nil {
		reuo.SetPosition(*s)
	}
	return reuo
}

// ClearPosition clears the value of the "position" field.
func (reuo *ResumeExperienceUpdateOne) ClearPosition() *ResumeExperienceUpdateOne {
	reuo.mutation.ClearPosition()
	return reuo
}

// SetTitle sets the "title" field.
func (reuo *ResumeExperienceUpdateOne) SetTitle(s string) *ResumeExperienceUpdateOne {
	reuo.mutation.SetTitle(s)
	return reuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (reuo *ResumeExperienceUpdateOne) SetNillableTitle(s *string) *ResumeExperienceUpdateOne {
	if s != nil {
		reuo.SetTitle(*s)
	}
	return reuo
}

// ClearTitle clears the value of the "title" field.
func (reuo *ResumeExperienceUpdateOne) ClearTitle() *ResumeExperienceUpdateOne {
	reuo.mutation.ClearTitle()
	return reuo
}

// SetStartDate sets the "start_date" field.
func (reuo *ResumeExperienceUpdateOne) SetStartDate(t time.Time) *ResumeExperienceUpdateOne {
	reuo.mutation.SetStartDate(t)
	return reuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (reuo *ResumeExperienceUpdateOne) SetNillableStartDate(t *time.Time) *ResumeExperienceUpdateOne {
	if t != nil {
		reuo.SetStartDate(*t)
	}
	return reuo
}

// ClearStartDate clears the value of the "start_date" field.
func (reuo *ResumeExperienceUpdateOne) ClearStartDate() *ResumeExperienceUpdateOne {
	reuo.mutation.ClearStartDate()
	return reuo
}

// SetEndDate sets the "end_date" field.
func (reuo *ResumeExperienceUpdateOne) SetEndDate(t time.Time) *ResumeExperienceUpdateOne {
	reuo.mutation.SetEndDate(t)
	return reuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (reuo *ResumeExperienceUpdateOne) SetNillableEndDate(t *time.Time) *ResumeExperienceUpdateOne {
	if t != nil {
		reuo.SetEndDate(*t)
	}
	return reuo
}

// ClearEndDate clears the value of the "end_date" field.
func (reuo *ResumeExperienceUpdateOne) ClearEndDate() *ResumeExperienceUpdateOne {
	reuo.mutation.ClearEndDate()
	return reuo
}

// SetDescription sets the "description" field.
func (reuo *ResumeExperienceUpdateOne) SetDescription(s string) *ResumeExperienceUpdateOne {
	reuo.mutation.SetDescription(s)
	return reuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (reuo *ResumeExperienceUpdateOne) SetNillableDescription(s *string) *ResumeExperienceUpdateOne {
	if s != nil {
		reuo.SetDescription(*s)
	}
	return reuo
}

// ClearDescription clears the value of the "description" field.
func (reuo *ResumeExperienceUpdateOne) ClearDescription() *ResumeExperienceUpdateOne {
	reuo.mutation.ClearDescription()
	return reuo
}

// SetExperienceType sets the "experience_type" field.
func (reuo *ResumeExperienceUpdateOne) SetExperienceType(ct consts.ExperienceType) *ResumeExperienceUpdateOne {
	reuo.mutation.SetExperienceType(ct)
	return reuo
}

// SetNillableExperienceType sets the "experience_type" field if the given value is not nil.
func (reuo *ResumeExperienceUpdateOne) SetNillableExperienceType(ct *consts.ExperienceType) *ResumeExperienceUpdateOne {
	if ct != nil {
		reuo.SetExperienceType(*ct)
	}
	return reuo
}

// ClearExperienceType clears the value of the "experience_type" field.
func (reuo *ResumeExperienceUpdateOne) ClearExperienceType() *ResumeExperienceUpdateOne {
	reuo.mutation.ClearExperienceType()
	return reuo
}

// SetCreatedAt sets the "created_at" field.
func (reuo *ResumeExperienceUpdateOne) SetCreatedAt(t time.Time) *ResumeExperienceUpdateOne {
	reuo.mutation.SetCreatedAt(t)
	return reuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (reuo *ResumeExperienceUpdateOne) SetNillableCreatedAt(t *time.Time) *ResumeExperienceUpdateOne {
	if t != nil {
		reuo.SetCreatedAt(*t)
	}
	return reuo
}

// SetUpdatedAt sets the "updated_at" field.
func (reuo *ResumeExperienceUpdateOne) SetUpdatedAt(t time.Time) *ResumeExperienceUpdateOne {
	reuo.mutation.SetUpdatedAt(t)
	return reuo
}

// SetResume sets the "resume" edge to the Resume entity.
func (reuo *ResumeExperienceUpdateOne) SetResume(r *Resume) *ResumeExperienceUpdateOne {
	return reuo.SetResumeID(r.ID)
}

// Mutation returns the ResumeExperienceMutation object of the builder.
func (reuo *ResumeExperienceUpdateOne) Mutation() *ResumeExperienceMutation {
	return reuo.mutation
}

// ClearResume clears the "resume" edge to the Resume entity.
func (reuo *ResumeExperienceUpdateOne) ClearResume() *ResumeExperienceUpdateOne {
	reuo.mutation.ClearResume()
	return reuo
}

// Where appends a list predicates to the ResumeExperienceUpdate builder.
func (reuo *ResumeExperienceUpdateOne) Where(ps ...predicate.ResumeExperience) *ResumeExperienceUpdateOne {
	reuo.mutation.Where(ps...)
	return reuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (reuo *ResumeExperienceUpdateOne) Select(field string, fields ...string) *ResumeExperienceUpdateOne {
	reuo.fields = append([]string{field}, fields...)
	return reuo
}

// Save executes the query and returns the updated ResumeExperience entity.
func (reuo *ResumeExperienceUpdateOne) Save(ctx context.Context) (*ResumeExperience, error) {
	if err := reuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, reuo.sqlSave, reuo.mutation, reuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (reuo *ResumeExperienceUpdateOne) SaveX(ctx context.Context) *ResumeExperience {
	node, err := reuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (reuo *ResumeExperienceUpdateOne) Exec(ctx context.Context) error {
	_, err := reuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reuo *ResumeExperienceUpdateOne) ExecX(ctx context.Context) {
	if err := reuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (reuo *ResumeExperienceUpdateOne) defaults() error {
	if _, ok := reuo.mutation.UpdatedAt(); !ok {
		if resumeexperience.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumeexperience.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumeexperience.UpdateDefaultUpdatedAt()
		reuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (reuo *ResumeExperienceUpdateOne) check() error {
	if reuo.mutation.ResumeCleared() && len(reuo.mutation.ResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeExperience.resume"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (reuo *ResumeExperienceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeExperienceUpdateOne {
	reuo.modifiers = append(reuo.modifiers, modifiers...)
	return reuo
}

func (reuo *ResumeExperienceUpdateOne) sqlSave(ctx context.Context) (_node *ResumeExperience, err error) {
	if err := reuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumeexperience.Table, resumeexperience.Columns, sqlgraph.NewFieldSpec(resumeexperience.FieldID, field.TypeUUID))
	id, ok := reuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ResumeExperience.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := reuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resumeexperience.FieldID)
		for _, f := range fields {
			if !resumeexperience.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != resumeexperience.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := reuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := reuo.mutation.DeletedAt(); ok {
		_spec.SetField(resumeexperience.FieldDeletedAt, field.TypeTime, value)
	}
	if reuo.mutation.DeletedAtCleared() {
		_spec.ClearField(resumeexperience.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := reuo.mutation.Company(); ok {
		_spec.SetField(resumeexperience.FieldCompany, field.TypeString, value)
	}
	if reuo.mutation.CompanyCleared() {
		_spec.ClearField(resumeexperience.FieldCompany, field.TypeString)
	}
	if value, ok := reuo.mutation.Position(); ok {
		_spec.SetField(resumeexperience.FieldPosition, field.TypeString, value)
	}
	if reuo.mutation.PositionCleared() {
		_spec.ClearField(resumeexperience.FieldPosition, field.TypeString)
	}
	if value, ok := reuo.mutation.Title(); ok {
		_spec.SetField(resumeexperience.FieldTitle, field.TypeString, value)
	}
	if reuo.mutation.TitleCleared() {
		_spec.ClearField(resumeexperience.FieldTitle, field.TypeString)
	}
	if value, ok := reuo.mutation.StartDate(); ok {
		_spec.SetField(resumeexperience.FieldStartDate, field.TypeTime, value)
	}
	if reuo.mutation.StartDateCleared() {
		_spec.ClearField(resumeexperience.FieldStartDate, field.TypeTime)
	}
	if value, ok := reuo.mutation.EndDate(); ok {
		_spec.SetField(resumeexperience.FieldEndDate, field.TypeTime, value)
	}
	if reuo.mutation.EndDateCleared() {
		_spec.ClearField(resumeexperience.FieldEndDate, field.TypeTime)
	}
	if value, ok := reuo.mutation.Description(); ok {
		_spec.SetField(resumeexperience.FieldDescription, field.TypeString, value)
	}
	if reuo.mutation.DescriptionCleared() {
		_spec.ClearField(resumeexperience.FieldDescription, field.TypeString)
	}
	if value, ok := reuo.mutation.ExperienceType(); ok {
		_spec.SetField(resumeexperience.FieldExperienceType, field.TypeString, value)
	}
	if reuo.mutation.ExperienceTypeCleared() {
		_spec.ClearField(resumeexperience.FieldExperienceType, field.TypeString)
	}
	if value, ok := reuo.mutation.CreatedAt(); ok {
		_spec.SetField(resumeexperience.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := reuo.mutation.UpdatedAt(); ok {
		_spec.SetField(resumeexperience.FieldUpdatedAt, field.TypeTime, value)
	}
	if reuo.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeexperience.ResumeTable,
			Columns: []string{resumeexperience.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reuo.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeexperience.ResumeTable,
			Columns: []string{resumeexperience.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(reuo.modifiers...)
	_node = &ResumeExperience{config: reuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, reuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumeexperience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	reuo.mutation.done = true
	return _node, nil
}
