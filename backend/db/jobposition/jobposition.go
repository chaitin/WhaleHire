// Code generated by ent, DO NOT EDIT.

package jobposition

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the jobposition type in the database.
	Label = "job_position"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDepartmentID holds the string denoting the department_id field in the database.
	FieldDepartmentID = "department_id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldWorkType holds the string denoting the work_type field in the database.
	FieldWorkType = "work_type"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldSalaryMin holds the string denoting the salary_min field in the database.
	FieldSalaryMin = "salary_min"
	// FieldSalaryMax holds the string denoting the salary_max field in the database.
	FieldSalaryMax = "salary_max"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeDepartment holds the string denoting the department edge name in mutations.
	EdgeDepartment = "department"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeResponsibilities holds the string denoting the responsibilities edge name in mutations.
	EdgeResponsibilities = "responsibilities"
	// EdgeSkills holds the string denoting the skills edge name in mutations.
	EdgeSkills = "skills"
	// EdgeEducationRequirements holds the string denoting the education_requirements edge name in mutations.
	EdgeEducationRequirements = "education_requirements"
	// EdgeExperienceRequirements holds the string denoting the experience_requirements edge name in mutations.
	EdgeExperienceRequirements = "experience_requirements"
	// EdgeIndustryRequirements holds the string denoting the industry_requirements edge name in mutations.
	EdgeIndustryRequirements = "industry_requirements"
	// EdgeResumeApplications holds the string denoting the resume_applications edge name in mutations.
	EdgeResumeApplications = "resume_applications"
	// Table holds the table name of the jobposition in the database.
	Table = "job_position"
	// DepartmentTable is the table that holds the department relation/edge.
	DepartmentTable = "job_position"
	// DepartmentInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentInverseTable = "department"
	// DepartmentColumn is the table column denoting the department relation/edge.
	DepartmentColumn = "department_id"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "job_position"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "created_by"
	// ResponsibilitiesTable is the table that holds the responsibilities relation/edge.
	ResponsibilitiesTable = "job_responsibility"
	// ResponsibilitiesInverseTable is the table name for the JobResponsibility entity.
	// It exists in this package in order to avoid circular dependency with the "jobresponsibility" package.
	ResponsibilitiesInverseTable = "job_responsibility"
	// ResponsibilitiesColumn is the table column denoting the responsibilities relation/edge.
	ResponsibilitiesColumn = "job_id"
	// SkillsTable is the table that holds the skills relation/edge.
	SkillsTable = "job_skill"
	// SkillsInverseTable is the table name for the JobSkill entity.
	// It exists in this package in order to avoid circular dependency with the "jobskill" package.
	SkillsInverseTable = "job_skill"
	// SkillsColumn is the table column denoting the skills relation/edge.
	SkillsColumn = "job_id"
	// EducationRequirementsTable is the table that holds the education_requirements relation/edge.
	EducationRequirementsTable = "job_education_requirement"
	// EducationRequirementsInverseTable is the table name for the JobEducationRequirement entity.
	// It exists in this package in order to avoid circular dependency with the "jobeducationrequirement" package.
	EducationRequirementsInverseTable = "job_education_requirement"
	// EducationRequirementsColumn is the table column denoting the education_requirements relation/edge.
	EducationRequirementsColumn = "job_id"
	// ExperienceRequirementsTable is the table that holds the experience_requirements relation/edge.
	ExperienceRequirementsTable = "job_experience_requirement"
	// ExperienceRequirementsInverseTable is the table name for the JobExperienceRequirement entity.
	// It exists in this package in order to avoid circular dependency with the "jobexperiencerequirement" package.
	ExperienceRequirementsInverseTable = "job_experience_requirement"
	// ExperienceRequirementsColumn is the table column denoting the experience_requirements relation/edge.
	ExperienceRequirementsColumn = "job_id"
	// IndustryRequirementsTable is the table that holds the industry_requirements relation/edge.
	IndustryRequirementsTable = "job_industry_requirement"
	// IndustryRequirementsInverseTable is the table name for the JobIndustryRequirement entity.
	// It exists in this package in order to avoid circular dependency with the "jobindustryrequirement" package.
	IndustryRequirementsInverseTable = "job_industry_requirement"
	// IndustryRequirementsColumn is the table column denoting the industry_requirements relation/edge.
	IndustryRequirementsColumn = "job_id"
	// ResumeApplicationsTable is the table that holds the resume_applications relation/edge.
	ResumeApplicationsTable = "resume_job_applications"
	// ResumeApplicationsInverseTable is the table name for the ResumeJobApplication entity.
	// It exists in this package in order to avoid circular dependency with the "resumejobapplication" package.
	ResumeApplicationsInverseTable = "resume_job_applications"
	// ResumeApplicationsColumn is the table column denoting the resume_applications relation/edge.
	ResumeApplicationsColumn = "job_position_id"
)

// Columns holds all SQL columns for jobposition fields.
var Columns = []string{
	FieldID,
	FieldDeletedAt,
	FieldName,
	FieldDepartmentID,
	FieldCreatedBy,
	FieldStatus,
	FieldWorkType,
	FieldLocation,
	FieldSalaryMin,
	FieldSalaryMax,
	FieldDescription,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/chaitin/WhaleHire/backend/db/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus consts.JobPositionStatus
	// LocationValidator is a validator for the "location" field. It is called by the builders before save.
	LocationValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the JobPosition queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDepartmentID orders the results by the department_id field.
func ByDepartmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartmentID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByWorkType orders the results by the work_type field.
func ByWorkType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkType, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// BySalaryMin orders the results by the salary_min field.
func BySalaryMin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalaryMin, opts...).ToFunc()
}

// BySalaryMax orders the results by the salary_max field.
func BySalaryMax(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalaryMax, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDepartmentField orders the results by department field.
func ByDepartmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDepartmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByResponsibilitiesCount orders the results by responsibilities count.
func ByResponsibilitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newResponsibilitiesStep(), opts...)
	}
}

// ByResponsibilities orders the results by responsibilities terms.
func ByResponsibilities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResponsibilitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySkillsCount orders the results by skills count.
func BySkillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSkillsStep(), opts...)
	}
}

// BySkills orders the results by skills terms.
func BySkills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSkillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEducationRequirementsCount orders the results by education_requirements count.
func ByEducationRequirementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEducationRequirementsStep(), opts...)
	}
}

// ByEducationRequirements orders the results by education_requirements terms.
func ByEducationRequirements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEducationRequirementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExperienceRequirementsCount orders the results by experience_requirements count.
func ByExperienceRequirementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExperienceRequirementsStep(), opts...)
	}
}

// ByExperienceRequirements orders the results by experience_requirements terms.
func ByExperienceRequirements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExperienceRequirementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIndustryRequirementsCount orders the results by industry_requirements count.
func ByIndustryRequirementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIndustryRequirementsStep(), opts...)
	}
}

// ByIndustryRequirements orders the results by industry_requirements terms.
func ByIndustryRequirements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIndustryRequirementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByResumeApplicationsCount orders the results by resume_applications count.
func ByResumeApplicationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newResumeApplicationsStep(), opts...)
	}
}

// ByResumeApplications orders the results by resume_applications terms.
func ByResumeApplications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResumeApplicationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDepartmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DepartmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
	)
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
func newResponsibilitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResponsibilitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ResponsibilitiesTable, ResponsibilitiesColumn),
	)
}
func newSkillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SkillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SkillsTable, SkillsColumn),
	)
}
func newEducationRequirementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EducationRequirementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EducationRequirementsTable, EducationRequirementsColumn),
	)
}
func newExperienceRequirementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExperienceRequirementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExperienceRequirementsTable, ExperienceRequirementsColumn),
	)
}
func newIndustryRequirementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IndustryRequirementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IndustryRequirementsTable, IndustryRequirementsColumn),
	)
}
func newResumeApplicationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResumeApplicationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ResumeApplicationsTable, ResumeApplicationsColumn),
	)
}
