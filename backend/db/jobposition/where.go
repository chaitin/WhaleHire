// Code generated by ent, DO NOT EDIT.

package jobposition

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldName, v))
}

// DepartmentID applies equality check predicate on the "department_id" field. It's identical to DepartmentIDEQ.
func DepartmentID(v uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldDepartmentID, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldCreatedBy, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v consts.JobPositionStatus) predicate.JobPosition {
	vc := string(v)
	return predicate.JobPosition(sql.FieldEQ(FieldStatus, vc))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldLocation, v))
}

// SalaryMin applies equality check predicate on the "salary_min" field. It's identical to SalaryMinEQ.
func SalaryMin(v float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldSalaryMin, v))
}

// SalaryMax applies equality check predicate on the "salary_max" field. It's identical to SalaryMaxEQ.
func SalaryMax(v float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldSalaryMax, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.JobPosition {
	return predicate.JobPosition(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldContainsFold(FieldName, v))
}

// DepartmentIDEQ applies the EQ predicate on the "department_id" field.
func DepartmentIDEQ(v uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldDepartmentID, v))
}

// DepartmentIDNEQ applies the NEQ predicate on the "department_id" field.
func DepartmentIDNEQ(v uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNEQ(FieldDepartmentID, v))
}

// DepartmentIDIn applies the In predicate on the "department_id" field.
func DepartmentIDIn(vs ...uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldIn(FieldDepartmentID, vs...))
}

// DepartmentIDNotIn applies the NotIn predicate on the "department_id" field.
func DepartmentIDNotIn(vs ...uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNotIn(FieldDepartmentID, vs...))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uuid.UUID) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.JobPosition {
	return predicate.JobPosition(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNotNull(FieldCreatedBy))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v consts.JobPositionStatus) predicate.JobPosition {
	vc := string(v)
	return predicate.JobPosition(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v consts.JobPositionStatus) predicate.JobPosition {
	vc := string(v)
	return predicate.JobPosition(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...consts.JobPositionStatus) predicate.JobPosition {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.JobPosition(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...consts.JobPositionStatus) predicate.JobPosition {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.JobPosition(sql.FieldNotIn(FieldStatus, v...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v consts.JobPositionStatus) predicate.JobPosition {
	vc := string(v)
	return predicate.JobPosition(sql.FieldGT(FieldStatus, vc))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v consts.JobPositionStatus) predicate.JobPosition {
	vc := string(v)
	return predicate.JobPosition(sql.FieldGTE(FieldStatus, vc))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v consts.JobPositionStatus) predicate.JobPosition {
	vc := string(v)
	return predicate.JobPosition(sql.FieldLT(FieldStatus, vc))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v consts.JobPositionStatus) predicate.JobPosition {
	vc := string(v)
	return predicate.JobPosition(sql.FieldLTE(FieldStatus, vc))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v consts.JobPositionStatus) predicate.JobPosition {
	vc := string(v)
	return predicate.JobPosition(sql.FieldContains(FieldStatus, vc))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v consts.JobPositionStatus) predicate.JobPosition {
	vc := string(v)
	return predicate.JobPosition(sql.FieldHasPrefix(FieldStatus, vc))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v consts.JobPositionStatus) predicate.JobPosition {
	vc := string(v)
	return predicate.JobPosition(sql.FieldHasSuffix(FieldStatus, vc))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v consts.JobPositionStatus) predicate.JobPosition {
	vc := string(v)
	return predicate.JobPosition(sql.FieldEqualFold(FieldStatus, vc))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v consts.JobPositionStatus) predicate.JobPosition {
	vc := string(v)
	return predicate.JobPosition(sql.FieldContainsFold(FieldStatus, vc))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.JobPosition {
	return predicate.JobPosition(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldContainsFold(FieldLocation, v))
}

// SalaryMinEQ applies the EQ predicate on the "salary_min" field.
func SalaryMinEQ(v float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldSalaryMin, v))
}

// SalaryMinNEQ applies the NEQ predicate on the "salary_min" field.
func SalaryMinNEQ(v float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNEQ(FieldSalaryMin, v))
}

// SalaryMinIn applies the In predicate on the "salary_min" field.
func SalaryMinIn(vs ...float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldIn(FieldSalaryMin, vs...))
}

// SalaryMinNotIn applies the NotIn predicate on the "salary_min" field.
func SalaryMinNotIn(vs ...float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNotIn(FieldSalaryMin, vs...))
}

// SalaryMinGT applies the GT predicate on the "salary_min" field.
func SalaryMinGT(v float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGT(FieldSalaryMin, v))
}

// SalaryMinGTE applies the GTE predicate on the "salary_min" field.
func SalaryMinGTE(v float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGTE(FieldSalaryMin, v))
}

// SalaryMinLT applies the LT predicate on the "salary_min" field.
func SalaryMinLT(v float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLT(FieldSalaryMin, v))
}

// SalaryMinLTE applies the LTE predicate on the "salary_min" field.
func SalaryMinLTE(v float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLTE(FieldSalaryMin, v))
}

// SalaryMinIsNil applies the IsNil predicate on the "salary_min" field.
func SalaryMinIsNil() predicate.JobPosition {
	return predicate.JobPosition(sql.FieldIsNull(FieldSalaryMin))
}

// SalaryMinNotNil applies the NotNil predicate on the "salary_min" field.
func SalaryMinNotNil() predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNotNull(FieldSalaryMin))
}

// SalaryMaxEQ applies the EQ predicate on the "salary_max" field.
func SalaryMaxEQ(v float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldSalaryMax, v))
}

// SalaryMaxNEQ applies the NEQ predicate on the "salary_max" field.
func SalaryMaxNEQ(v float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNEQ(FieldSalaryMax, v))
}

// SalaryMaxIn applies the In predicate on the "salary_max" field.
func SalaryMaxIn(vs ...float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldIn(FieldSalaryMax, vs...))
}

// SalaryMaxNotIn applies the NotIn predicate on the "salary_max" field.
func SalaryMaxNotIn(vs ...float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNotIn(FieldSalaryMax, vs...))
}

// SalaryMaxGT applies the GT predicate on the "salary_max" field.
func SalaryMaxGT(v float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGT(FieldSalaryMax, v))
}

// SalaryMaxGTE applies the GTE predicate on the "salary_max" field.
func SalaryMaxGTE(v float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGTE(FieldSalaryMax, v))
}

// SalaryMaxLT applies the LT predicate on the "salary_max" field.
func SalaryMaxLT(v float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLT(FieldSalaryMax, v))
}

// SalaryMaxLTE applies the LTE predicate on the "salary_max" field.
func SalaryMaxLTE(v float64) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLTE(FieldSalaryMax, v))
}

// SalaryMaxIsNil applies the IsNil predicate on the "salary_max" field.
func SalaryMaxIsNil() predicate.JobPosition {
	return predicate.JobPosition(sql.FieldIsNull(FieldSalaryMax))
}

// SalaryMaxNotNil applies the NotNil predicate on the "salary_max" field.
func SalaryMaxNotNil() predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNotNull(FieldSalaryMax))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.JobPosition {
	return predicate.JobPosition(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldContainsFold(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.JobPosition {
	return predicate.JobPosition(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasDepartment applies the HasEdge predicate on the "department" edge.
func HasDepartment() predicate.JobPosition {
	return predicate.JobPosition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDepartmentWith applies the HasEdge predicate on the "department" edge with a given conditions (other predicates).
func HasDepartmentWith(preds ...predicate.Department) predicate.JobPosition {
	return predicate.JobPosition(func(s *sql.Selector) {
		step := newDepartmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.JobPosition {
	return predicate.JobPosition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.User) predicate.JobPosition {
	return predicate.JobPosition(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasResponsibilities applies the HasEdge predicate on the "responsibilities" edge.
func HasResponsibilities() predicate.JobPosition {
	return predicate.JobPosition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ResponsibilitiesTable, ResponsibilitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResponsibilitiesWith applies the HasEdge predicate on the "responsibilities" edge with a given conditions (other predicates).
func HasResponsibilitiesWith(preds ...predicate.JobResponsibility) predicate.JobPosition {
	return predicate.JobPosition(func(s *sql.Selector) {
		step := newResponsibilitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSkills applies the HasEdge predicate on the "skills" edge.
func HasSkills() predicate.JobPosition {
	return predicate.JobPosition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SkillsTable, SkillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSkillsWith applies the HasEdge predicate on the "skills" edge with a given conditions (other predicates).
func HasSkillsWith(preds ...predicate.JobSkill) predicate.JobPosition {
	return predicate.JobPosition(func(s *sql.Selector) {
		step := newSkillsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEducationRequirements applies the HasEdge predicate on the "education_requirements" edge.
func HasEducationRequirements() predicate.JobPosition {
	return predicate.JobPosition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EducationRequirementsTable, EducationRequirementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEducationRequirementsWith applies the HasEdge predicate on the "education_requirements" edge with a given conditions (other predicates).
func HasEducationRequirementsWith(preds ...predicate.JobEducationRequirement) predicate.JobPosition {
	return predicate.JobPosition(func(s *sql.Selector) {
		step := newEducationRequirementsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExperienceRequirements applies the HasEdge predicate on the "experience_requirements" edge.
func HasExperienceRequirements() predicate.JobPosition {
	return predicate.JobPosition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExperienceRequirementsTable, ExperienceRequirementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExperienceRequirementsWith applies the HasEdge predicate on the "experience_requirements" edge with a given conditions (other predicates).
func HasExperienceRequirementsWith(preds ...predicate.JobExperienceRequirement) predicate.JobPosition {
	return predicate.JobPosition(func(s *sql.Selector) {
		step := newExperienceRequirementsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIndustryRequirements applies the HasEdge predicate on the "industry_requirements" edge.
func HasIndustryRequirements() predicate.JobPosition {
	return predicate.JobPosition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IndustryRequirementsTable, IndustryRequirementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIndustryRequirementsWith applies the HasEdge predicate on the "industry_requirements" edge with a given conditions (other predicates).
func HasIndustryRequirementsWith(preds ...predicate.JobIndustryRequirement) predicate.JobPosition {
	return predicate.JobPosition(func(s *sql.Selector) {
		step := newIndustryRequirementsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JobPosition) predicate.JobPosition {
	return predicate.JobPosition(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JobPosition) predicate.JobPosition {
	return predicate.JobPosition(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JobPosition) predicate.JobPosition {
	return predicate.JobPosition(sql.NotPredicates(p))
}
