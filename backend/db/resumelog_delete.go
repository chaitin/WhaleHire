// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resumelog"
)

// ResumeLogDelete is the builder for deleting a ResumeLog entity.
type ResumeLogDelete struct {
	config
	hooks    []Hook
	mutation *ResumeLogMutation
}

// Where appends a list predicates to the ResumeLogDelete builder.
func (rld *ResumeLogDelete) Where(ps ...predicate.ResumeLog) *ResumeLogDelete {
	rld.mutation.Where(ps...)
	return rld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rld *ResumeLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rld.sqlExec, rld.mutation, rld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rld *ResumeLogDelete) ExecX(ctx context.Context) int {
	n, err := rld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rld *ResumeLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(resumelog.Table, sqlgraph.NewFieldSpec(resumelog.FieldID, field.TypeUUID))
	if ps := rld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rld.mutation.done = true
	return affected, err
}

// ResumeLogDeleteOne is the builder for deleting a single ResumeLog entity.
type ResumeLogDeleteOne struct {
	rld *ResumeLogDelete
}

// Where appends a list predicates to the ResumeLogDelete builder.
func (rldo *ResumeLogDeleteOne) Where(ps ...predicate.ResumeLog) *ResumeLogDeleteOne {
	rldo.rld.mutation.Where(ps...)
	return rldo
}

// Exec executes the deletion query.
func (rldo *ResumeLogDeleteOne) Exec(ctx context.Context) error {
	n, err := rldo.rld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{resumelog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rldo *ResumeLogDeleteOne) ExecX(ctx context.Context) {
	if err := rldo.Exec(ctx); err != nil {
		panic(err)
	}
}
