// Code generated by ent, DO NOT EDIT.

package resumeproject

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldDeletedAt, v))
}

// ResumeID applies equality check predicate on the "resume_id" field. It's identical to ResumeIDEQ.
func ResumeID(v uuid.UUID) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldResumeID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldName, v))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldRole, v))
}

// Company applies equality check predicate on the "company" field. It's identical to CompanyEQ.
func Company(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldCompany, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldEndDate, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldDescription, v))
}

// Responsibilities applies equality check predicate on the "responsibilities" field. It's identical to ResponsibilitiesEQ.
func Responsibilities(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldResponsibilities, v))
}

// Achievements applies equality check predicate on the "achievements" field. It's identical to AchievementsEQ.
func Achievements(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldAchievements, v))
}

// Technologies applies equality check predicate on the "technologies" field. It's identical to TechnologiesEQ.
func Technologies(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldTechnologies, v))
}

// ProjectURL applies equality check predicate on the "project_url" field. It's identical to ProjectURLEQ.
func ProjectURL(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldProjectURL, v))
}

// ProjectType applies equality check predicate on the "project_type" field. It's identical to ProjectTypeEQ.
func ProjectType(v consts.ProjectType) predicate.ResumeProject {
	vc := string(v)
	return predicate.ResumeProject(sql.FieldEQ(FieldProjectType, vc))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotNull(FieldDeletedAt))
}

// ResumeIDEQ applies the EQ predicate on the "resume_id" field.
func ResumeIDEQ(v uuid.UUID) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldResumeID, v))
}

// ResumeIDNEQ applies the NEQ predicate on the "resume_id" field.
func ResumeIDNEQ(v uuid.UUID) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNEQ(FieldResumeID, v))
}

// ResumeIDIn applies the In predicate on the "resume_id" field.
func ResumeIDIn(vs ...uuid.UUID) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIn(FieldResumeID, vs...))
}

// ResumeIDNotIn applies the NotIn predicate on the "resume_id" field.
func ResumeIDNotIn(vs ...uuid.UUID) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotIn(FieldResumeID, vs...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldContainsFold(FieldName, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLTE(FieldRole, v))
}

// RoleContains applies the Contains predicate on the "role" field.
func RoleContains(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldContains(FieldRole, v))
}

// RoleHasPrefix applies the HasPrefix predicate on the "role" field.
func RoleHasPrefix(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldHasPrefix(FieldRole, v))
}

// RoleHasSuffix applies the HasSuffix predicate on the "role" field.
func RoleHasSuffix(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldHasSuffix(FieldRole, v))
}

// RoleIsNil applies the IsNil predicate on the "role" field.
func RoleIsNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIsNull(FieldRole))
}

// RoleNotNil applies the NotNil predicate on the "role" field.
func RoleNotNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotNull(FieldRole))
}

// RoleEqualFold applies the EqualFold predicate on the "role" field.
func RoleEqualFold(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEqualFold(FieldRole, v))
}

// RoleContainsFold applies the ContainsFold predicate on the "role" field.
func RoleContainsFold(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldContainsFold(FieldRole, v))
}

// CompanyEQ applies the EQ predicate on the "company" field.
func CompanyEQ(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldCompany, v))
}

// CompanyNEQ applies the NEQ predicate on the "company" field.
func CompanyNEQ(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNEQ(FieldCompany, v))
}

// CompanyIn applies the In predicate on the "company" field.
func CompanyIn(vs ...string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIn(FieldCompany, vs...))
}

// CompanyNotIn applies the NotIn predicate on the "company" field.
func CompanyNotIn(vs ...string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotIn(FieldCompany, vs...))
}

// CompanyGT applies the GT predicate on the "company" field.
func CompanyGT(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGT(FieldCompany, v))
}

// CompanyGTE applies the GTE predicate on the "company" field.
func CompanyGTE(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGTE(FieldCompany, v))
}

// CompanyLT applies the LT predicate on the "company" field.
func CompanyLT(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLT(FieldCompany, v))
}

// CompanyLTE applies the LTE predicate on the "company" field.
func CompanyLTE(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLTE(FieldCompany, v))
}

// CompanyContains applies the Contains predicate on the "company" field.
func CompanyContains(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldContains(FieldCompany, v))
}

// CompanyHasPrefix applies the HasPrefix predicate on the "company" field.
func CompanyHasPrefix(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldHasPrefix(FieldCompany, v))
}

// CompanyHasSuffix applies the HasSuffix predicate on the "company" field.
func CompanyHasSuffix(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldHasSuffix(FieldCompany, v))
}

// CompanyIsNil applies the IsNil predicate on the "company" field.
func CompanyIsNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIsNull(FieldCompany))
}

// CompanyNotNil applies the NotNil predicate on the "company" field.
func CompanyNotNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotNull(FieldCompany))
}

// CompanyEqualFold applies the EqualFold predicate on the "company" field.
func CompanyEqualFold(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEqualFold(FieldCompany, v))
}

// CompanyContainsFold applies the ContainsFold predicate on the "company" field.
func CompanyContainsFold(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldContainsFold(FieldCompany, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLTE(FieldStartDate, v))
}

// StartDateIsNil applies the IsNil predicate on the "start_date" field.
func StartDateIsNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIsNull(FieldStartDate))
}

// StartDateNotNil applies the NotNil predicate on the "start_date" field.
func StartDateNotNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotNull(FieldStartDate))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotNull(FieldEndDate))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldContainsFold(FieldDescription, v))
}

// ResponsibilitiesEQ applies the EQ predicate on the "responsibilities" field.
func ResponsibilitiesEQ(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldResponsibilities, v))
}

// ResponsibilitiesNEQ applies the NEQ predicate on the "responsibilities" field.
func ResponsibilitiesNEQ(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNEQ(FieldResponsibilities, v))
}

// ResponsibilitiesIn applies the In predicate on the "responsibilities" field.
func ResponsibilitiesIn(vs ...string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIn(FieldResponsibilities, vs...))
}

// ResponsibilitiesNotIn applies the NotIn predicate on the "responsibilities" field.
func ResponsibilitiesNotIn(vs ...string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotIn(FieldResponsibilities, vs...))
}

// ResponsibilitiesGT applies the GT predicate on the "responsibilities" field.
func ResponsibilitiesGT(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGT(FieldResponsibilities, v))
}

// ResponsibilitiesGTE applies the GTE predicate on the "responsibilities" field.
func ResponsibilitiesGTE(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGTE(FieldResponsibilities, v))
}

// ResponsibilitiesLT applies the LT predicate on the "responsibilities" field.
func ResponsibilitiesLT(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLT(FieldResponsibilities, v))
}

// ResponsibilitiesLTE applies the LTE predicate on the "responsibilities" field.
func ResponsibilitiesLTE(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLTE(FieldResponsibilities, v))
}

// ResponsibilitiesContains applies the Contains predicate on the "responsibilities" field.
func ResponsibilitiesContains(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldContains(FieldResponsibilities, v))
}

// ResponsibilitiesHasPrefix applies the HasPrefix predicate on the "responsibilities" field.
func ResponsibilitiesHasPrefix(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldHasPrefix(FieldResponsibilities, v))
}

// ResponsibilitiesHasSuffix applies the HasSuffix predicate on the "responsibilities" field.
func ResponsibilitiesHasSuffix(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldHasSuffix(FieldResponsibilities, v))
}

// ResponsibilitiesIsNil applies the IsNil predicate on the "responsibilities" field.
func ResponsibilitiesIsNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIsNull(FieldResponsibilities))
}

// ResponsibilitiesNotNil applies the NotNil predicate on the "responsibilities" field.
func ResponsibilitiesNotNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotNull(FieldResponsibilities))
}

// ResponsibilitiesEqualFold applies the EqualFold predicate on the "responsibilities" field.
func ResponsibilitiesEqualFold(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEqualFold(FieldResponsibilities, v))
}

// ResponsibilitiesContainsFold applies the ContainsFold predicate on the "responsibilities" field.
func ResponsibilitiesContainsFold(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldContainsFold(FieldResponsibilities, v))
}

// AchievementsEQ applies the EQ predicate on the "achievements" field.
func AchievementsEQ(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldAchievements, v))
}

// AchievementsNEQ applies the NEQ predicate on the "achievements" field.
func AchievementsNEQ(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNEQ(FieldAchievements, v))
}

// AchievementsIn applies the In predicate on the "achievements" field.
func AchievementsIn(vs ...string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIn(FieldAchievements, vs...))
}

// AchievementsNotIn applies the NotIn predicate on the "achievements" field.
func AchievementsNotIn(vs ...string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotIn(FieldAchievements, vs...))
}

// AchievementsGT applies the GT predicate on the "achievements" field.
func AchievementsGT(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGT(FieldAchievements, v))
}

// AchievementsGTE applies the GTE predicate on the "achievements" field.
func AchievementsGTE(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGTE(FieldAchievements, v))
}

// AchievementsLT applies the LT predicate on the "achievements" field.
func AchievementsLT(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLT(FieldAchievements, v))
}

// AchievementsLTE applies the LTE predicate on the "achievements" field.
func AchievementsLTE(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLTE(FieldAchievements, v))
}

// AchievementsContains applies the Contains predicate on the "achievements" field.
func AchievementsContains(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldContains(FieldAchievements, v))
}

// AchievementsHasPrefix applies the HasPrefix predicate on the "achievements" field.
func AchievementsHasPrefix(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldHasPrefix(FieldAchievements, v))
}

// AchievementsHasSuffix applies the HasSuffix predicate on the "achievements" field.
func AchievementsHasSuffix(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldHasSuffix(FieldAchievements, v))
}

// AchievementsIsNil applies the IsNil predicate on the "achievements" field.
func AchievementsIsNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIsNull(FieldAchievements))
}

// AchievementsNotNil applies the NotNil predicate on the "achievements" field.
func AchievementsNotNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotNull(FieldAchievements))
}

// AchievementsEqualFold applies the EqualFold predicate on the "achievements" field.
func AchievementsEqualFold(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEqualFold(FieldAchievements, v))
}

// AchievementsContainsFold applies the ContainsFold predicate on the "achievements" field.
func AchievementsContainsFold(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldContainsFold(FieldAchievements, v))
}

// TechnologiesEQ applies the EQ predicate on the "technologies" field.
func TechnologiesEQ(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldTechnologies, v))
}

// TechnologiesNEQ applies the NEQ predicate on the "technologies" field.
func TechnologiesNEQ(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNEQ(FieldTechnologies, v))
}

// TechnologiesIn applies the In predicate on the "technologies" field.
func TechnologiesIn(vs ...string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIn(FieldTechnologies, vs...))
}

// TechnologiesNotIn applies the NotIn predicate on the "technologies" field.
func TechnologiesNotIn(vs ...string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotIn(FieldTechnologies, vs...))
}

// TechnologiesGT applies the GT predicate on the "technologies" field.
func TechnologiesGT(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGT(FieldTechnologies, v))
}

// TechnologiesGTE applies the GTE predicate on the "technologies" field.
func TechnologiesGTE(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGTE(FieldTechnologies, v))
}

// TechnologiesLT applies the LT predicate on the "technologies" field.
func TechnologiesLT(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLT(FieldTechnologies, v))
}

// TechnologiesLTE applies the LTE predicate on the "technologies" field.
func TechnologiesLTE(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLTE(FieldTechnologies, v))
}

// TechnologiesContains applies the Contains predicate on the "technologies" field.
func TechnologiesContains(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldContains(FieldTechnologies, v))
}

// TechnologiesHasPrefix applies the HasPrefix predicate on the "technologies" field.
func TechnologiesHasPrefix(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldHasPrefix(FieldTechnologies, v))
}

// TechnologiesHasSuffix applies the HasSuffix predicate on the "technologies" field.
func TechnologiesHasSuffix(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldHasSuffix(FieldTechnologies, v))
}

// TechnologiesIsNil applies the IsNil predicate on the "technologies" field.
func TechnologiesIsNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIsNull(FieldTechnologies))
}

// TechnologiesNotNil applies the NotNil predicate on the "technologies" field.
func TechnologiesNotNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotNull(FieldTechnologies))
}

// TechnologiesEqualFold applies the EqualFold predicate on the "technologies" field.
func TechnologiesEqualFold(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEqualFold(FieldTechnologies, v))
}

// TechnologiesContainsFold applies the ContainsFold predicate on the "technologies" field.
func TechnologiesContainsFold(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldContainsFold(FieldTechnologies, v))
}

// ProjectURLEQ applies the EQ predicate on the "project_url" field.
func ProjectURLEQ(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldProjectURL, v))
}

// ProjectURLNEQ applies the NEQ predicate on the "project_url" field.
func ProjectURLNEQ(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNEQ(FieldProjectURL, v))
}

// ProjectURLIn applies the In predicate on the "project_url" field.
func ProjectURLIn(vs ...string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIn(FieldProjectURL, vs...))
}

// ProjectURLNotIn applies the NotIn predicate on the "project_url" field.
func ProjectURLNotIn(vs ...string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotIn(FieldProjectURL, vs...))
}

// ProjectURLGT applies the GT predicate on the "project_url" field.
func ProjectURLGT(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGT(FieldProjectURL, v))
}

// ProjectURLGTE applies the GTE predicate on the "project_url" field.
func ProjectURLGTE(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGTE(FieldProjectURL, v))
}

// ProjectURLLT applies the LT predicate on the "project_url" field.
func ProjectURLLT(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLT(FieldProjectURL, v))
}

// ProjectURLLTE applies the LTE predicate on the "project_url" field.
func ProjectURLLTE(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLTE(FieldProjectURL, v))
}

// ProjectURLContains applies the Contains predicate on the "project_url" field.
func ProjectURLContains(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldContains(FieldProjectURL, v))
}

// ProjectURLHasPrefix applies the HasPrefix predicate on the "project_url" field.
func ProjectURLHasPrefix(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldHasPrefix(FieldProjectURL, v))
}

// ProjectURLHasSuffix applies the HasSuffix predicate on the "project_url" field.
func ProjectURLHasSuffix(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldHasSuffix(FieldProjectURL, v))
}

// ProjectURLIsNil applies the IsNil predicate on the "project_url" field.
func ProjectURLIsNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIsNull(FieldProjectURL))
}

// ProjectURLNotNil applies the NotNil predicate on the "project_url" field.
func ProjectURLNotNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotNull(FieldProjectURL))
}

// ProjectURLEqualFold applies the EqualFold predicate on the "project_url" field.
func ProjectURLEqualFold(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEqualFold(FieldProjectURL, v))
}

// ProjectURLContainsFold applies the ContainsFold predicate on the "project_url" field.
func ProjectURLContainsFold(v string) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldContainsFold(FieldProjectURL, v))
}

// ProjectTypeEQ applies the EQ predicate on the "project_type" field.
func ProjectTypeEQ(v consts.ProjectType) predicate.ResumeProject {
	vc := string(v)
	return predicate.ResumeProject(sql.FieldEQ(FieldProjectType, vc))
}

// ProjectTypeNEQ applies the NEQ predicate on the "project_type" field.
func ProjectTypeNEQ(v consts.ProjectType) predicate.ResumeProject {
	vc := string(v)
	return predicate.ResumeProject(sql.FieldNEQ(FieldProjectType, vc))
}

// ProjectTypeIn applies the In predicate on the "project_type" field.
func ProjectTypeIn(vs ...consts.ProjectType) predicate.ResumeProject {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.ResumeProject(sql.FieldIn(FieldProjectType, v...))
}

// ProjectTypeNotIn applies the NotIn predicate on the "project_type" field.
func ProjectTypeNotIn(vs ...consts.ProjectType) predicate.ResumeProject {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.ResumeProject(sql.FieldNotIn(FieldProjectType, v...))
}

// ProjectTypeGT applies the GT predicate on the "project_type" field.
func ProjectTypeGT(v consts.ProjectType) predicate.ResumeProject {
	vc := string(v)
	return predicate.ResumeProject(sql.FieldGT(FieldProjectType, vc))
}

// ProjectTypeGTE applies the GTE predicate on the "project_type" field.
func ProjectTypeGTE(v consts.ProjectType) predicate.ResumeProject {
	vc := string(v)
	return predicate.ResumeProject(sql.FieldGTE(FieldProjectType, vc))
}

// ProjectTypeLT applies the LT predicate on the "project_type" field.
func ProjectTypeLT(v consts.ProjectType) predicate.ResumeProject {
	vc := string(v)
	return predicate.ResumeProject(sql.FieldLT(FieldProjectType, vc))
}

// ProjectTypeLTE applies the LTE predicate on the "project_type" field.
func ProjectTypeLTE(v consts.ProjectType) predicate.ResumeProject {
	vc := string(v)
	return predicate.ResumeProject(sql.FieldLTE(FieldProjectType, vc))
}

// ProjectTypeContains applies the Contains predicate on the "project_type" field.
func ProjectTypeContains(v consts.ProjectType) predicate.ResumeProject {
	vc := string(v)
	return predicate.ResumeProject(sql.FieldContains(FieldProjectType, vc))
}

// ProjectTypeHasPrefix applies the HasPrefix predicate on the "project_type" field.
func ProjectTypeHasPrefix(v consts.ProjectType) predicate.ResumeProject {
	vc := string(v)
	return predicate.ResumeProject(sql.FieldHasPrefix(FieldProjectType, vc))
}

// ProjectTypeHasSuffix applies the HasSuffix predicate on the "project_type" field.
func ProjectTypeHasSuffix(v consts.ProjectType) predicate.ResumeProject {
	vc := string(v)
	return predicate.ResumeProject(sql.FieldHasSuffix(FieldProjectType, vc))
}

// ProjectTypeIsNil applies the IsNil predicate on the "project_type" field.
func ProjectTypeIsNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIsNull(FieldProjectType))
}

// ProjectTypeNotNil applies the NotNil predicate on the "project_type" field.
func ProjectTypeNotNil() predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotNull(FieldProjectType))
}

// ProjectTypeEqualFold applies the EqualFold predicate on the "project_type" field.
func ProjectTypeEqualFold(v consts.ProjectType) predicate.ResumeProject {
	vc := string(v)
	return predicate.ResumeProject(sql.FieldEqualFold(FieldProjectType, vc))
}

// ProjectTypeContainsFold applies the ContainsFold predicate on the "project_type" field.
func ProjectTypeContainsFold(v consts.ProjectType) predicate.ResumeProject {
	vc := string(v)
	return predicate.ResumeProject(sql.FieldContainsFold(FieldProjectType, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ResumeProject {
	return predicate.ResumeProject(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasResume applies the HasEdge predicate on the "resume" edge.
func HasResume() predicate.ResumeProject {
	return predicate.ResumeProject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ResumeTable, ResumeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResumeWith applies the HasEdge predicate on the "resume" edge with a given conditions (other predicates).
func HasResumeWith(preds ...predicate.Resume) predicate.ResumeProject {
	return predicate.ResumeProject(func(s *sql.Selector) {
		step := newResumeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ResumeProject) predicate.ResumeProject {
	return predicate.ResumeProject(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ResumeProject) predicate.ResumeProject {
	return predicate.ResumeProject(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ResumeProject) predicate.ResumeProject {
	return predicate.ResumeProject(sql.NotPredicates(p))
}
