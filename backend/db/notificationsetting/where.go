// Code generated by ent, DO NOT EDIT.

package notificationsetting

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldDeletedAt, v))
}

// Channel applies equality check predicate on the "channel" field. It's identical to ChannelEQ.
func Channel(v consts.NotificationChannel) predicate.NotificationSetting {
	vc := string(v)
	return predicate.NotificationSetting(sql.FieldEQ(FieldChannel, vc))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldEnabled, v))
}

// MaxRetry applies equality check predicate on the "max_retry" field. It's identical to MaxRetryEQ.
func MaxRetry(v int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldMaxRetry, v))
}

// Timeout applies equality check predicate on the "timeout" field. It's identical to TimeoutEQ.
func Timeout(v int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldTimeout, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotNull(FieldDeletedAt))
}

// ChannelEQ applies the EQ predicate on the "channel" field.
func ChannelEQ(v consts.NotificationChannel) predicate.NotificationSetting {
	vc := string(v)
	return predicate.NotificationSetting(sql.FieldEQ(FieldChannel, vc))
}

// ChannelNEQ applies the NEQ predicate on the "channel" field.
func ChannelNEQ(v consts.NotificationChannel) predicate.NotificationSetting {
	vc := string(v)
	return predicate.NotificationSetting(sql.FieldNEQ(FieldChannel, vc))
}

// ChannelIn applies the In predicate on the "channel" field.
func ChannelIn(vs ...consts.NotificationChannel) predicate.NotificationSetting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.NotificationSetting(sql.FieldIn(FieldChannel, v...))
}

// ChannelNotIn applies the NotIn predicate on the "channel" field.
func ChannelNotIn(vs ...consts.NotificationChannel) predicate.NotificationSetting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.NotificationSetting(sql.FieldNotIn(FieldChannel, v...))
}

// ChannelGT applies the GT predicate on the "channel" field.
func ChannelGT(v consts.NotificationChannel) predicate.NotificationSetting {
	vc := string(v)
	return predicate.NotificationSetting(sql.FieldGT(FieldChannel, vc))
}

// ChannelGTE applies the GTE predicate on the "channel" field.
func ChannelGTE(v consts.NotificationChannel) predicate.NotificationSetting {
	vc := string(v)
	return predicate.NotificationSetting(sql.FieldGTE(FieldChannel, vc))
}

// ChannelLT applies the LT predicate on the "channel" field.
func ChannelLT(v consts.NotificationChannel) predicate.NotificationSetting {
	vc := string(v)
	return predicate.NotificationSetting(sql.FieldLT(FieldChannel, vc))
}

// ChannelLTE applies the LTE predicate on the "channel" field.
func ChannelLTE(v consts.NotificationChannel) predicate.NotificationSetting {
	vc := string(v)
	return predicate.NotificationSetting(sql.FieldLTE(FieldChannel, vc))
}

// ChannelContains applies the Contains predicate on the "channel" field.
func ChannelContains(v consts.NotificationChannel) predicate.NotificationSetting {
	vc := string(v)
	return predicate.NotificationSetting(sql.FieldContains(FieldChannel, vc))
}

// ChannelHasPrefix applies the HasPrefix predicate on the "channel" field.
func ChannelHasPrefix(v consts.NotificationChannel) predicate.NotificationSetting {
	vc := string(v)
	return predicate.NotificationSetting(sql.FieldHasPrefix(FieldChannel, vc))
}

// ChannelHasSuffix applies the HasSuffix predicate on the "channel" field.
func ChannelHasSuffix(v consts.NotificationChannel) predicate.NotificationSetting {
	vc := string(v)
	return predicate.NotificationSetting(sql.FieldHasSuffix(FieldChannel, vc))
}

// ChannelEqualFold applies the EqualFold predicate on the "channel" field.
func ChannelEqualFold(v consts.NotificationChannel) predicate.NotificationSetting {
	vc := string(v)
	return predicate.NotificationSetting(sql.FieldEqualFold(FieldChannel, vc))
}

// ChannelContainsFold applies the ContainsFold predicate on the "channel" field.
func ChannelContainsFold(v consts.NotificationChannel) predicate.NotificationSetting {
	vc := string(v)
	return predicate.NotificationSetting(sql.FieldContainsFold(FieldChannel, vc))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldEnabled, v))
}

// DingtalkConfigIsNil applies the IsNil predicate on the "dingtalk_config" field.
func DingtalkConfigIsNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIsNull(FieldDingtalkConfig))
}

// DingtalkConfigNotNil applies the NotNil predicate on the "dingtalk_config" field.
func DingtalkConfigNotNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotNull(FieldDingtalkConfig))
}

// MaxRetryEQ applies the EQ predicate on the "max_retry" field.
func MaxRetryEQ(v int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldMaxRetry, v))
}

// MaxRetryNEQ applies the NEQ predicate on the "max_retry" field.
func MaxRetryNEQ(v int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldMaxRetry, v))
}

// MaxRetryIn applies the In predicate on the "max_retry" field.
func MaxRetryIn(vs ...int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIn(FieldMaxRetry, vs...))
}

// MaxRetryNotIn applies the NotIn predicate on the "max_retry" field.
func MaxRetryNotIn(vs ...int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotIn(FieldMaxRetry, vs...))
}

// MaxRetryGT applies the GT predicate on the "max_retry" field.
func MaxRetryGT(v int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGT(FieldMaxRetry, v))
}

// MaxRetryGTE applies the GTE predicate on the "max_retry" field.
func MaxRetryGTE(v int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGTE(FieldMaxRetry, v))
}

// MaxRetryLT applies the LT predicate on the "max_retry" field.
func MaxRetryLT(v int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLT(FieldMaxRetry, v))
}

// MaxRetryLTE applies the LTE predicate on the "max_retry" field.
func MaxRetryLTE(v int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLTE(FieldMaxRetry, v))
}

// TimeoutEQ applies the EQ predicate on the "timeout" field.
func TimeoutEQ(v int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldTimeout, v))
}

// TimeoutNEQ applies the NEQ predicate on the "timeout" field.
func TimeoutNEQ(v int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldTimeout, v))
}

// TimeoutIn applies the In predicate on the "timeout" field.
func TimeoutIn(vs ...int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIn(FieldTimeout, vs...))
}

// TimeoutNotIn applies the NotIn predicate on the "timeout" field.
func TimeoutNotIn(vs ...int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotIn(FieldTimeout, vs...))
}

// TimeoutGT applies the GT predicate on the "timeout" field.
func TimeoutGT(v int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGT(FieldTimeout, v))
}

// TimeoutGTE applies the GTE predicate on the "timeout" field.
func TimeoutGTE(v int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGTE(FieldTimeout, v))
}

// TimeoutLT applies the LT predicate on the "timeout" field.
func TimeoutLT(v int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLT(FieldTimeout, v))
}

// TimeoutLTE applies the LTE predicate on the "timeout" field.
func TimeoutLTE(v int) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLTE(FieldTimeout, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldContainsFold(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NotificationSetting) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NotificationSetting) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NotificationSetting) predicate.NotificationSetting {
	return predicate.NotificationSetting(sql.NotPredicates(p))
}
