// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/jobskillmeta"
	"github.com/google/uuid"
)

// JobSkillMeta is the model entity for the JobSkillMeta schema.
type JobSkillMeta struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobSkillMetaQuery when eager-loading is set.
	Edges        JobSkillMetaEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JobSkillMetaEdges holds the relations/edges for other nodes in the graph.
type JobSkillMetaEdges struct {
	// JobLinks holds the value of the job_links edge.
	JobLinks []*JobSkill `json:"job_links,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// JobLinksOrErr returns the JobLinks value or an error if the edge
// was not loaded in eager-loading.
func (e JobSkillMetaEdges) JobLinksOrErr() ([]*JobSkill, error) {
	if e.loadedTypes[0] {
		return e.JobLinks, nil
	}
	return nil, &NotLoadedError{edge: "job_links"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobSkillMeta) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobskillmeta.FieldName:
			values[i] = new(sql.NullString)
		case jobskillmeta.FieldDeletedAt, jobskillmeta.FieldUpdatedAt, jobskillmeta.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case jobskillmeta.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobSkillMeta fields.
func (jsm *JobSkillMeta) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobskillmeta.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				jsm.ID = *value
			}
		case jobskillmeta.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				jsm.DeletedAt = value.Time
			}
		case jobskillmeta.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				jsm.Name = value.String
			}
		case jobskillmeta.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				jsm.UpdatedAt = value.Time
			}
		case jobskillmeta.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				jsm.CreatedAt = value.Time
			}
		default:
			jsm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobSkillMeta.
// This includes values selected through modifiers, order, etc.
func (jsm *JobSkillMeta) Value(name string) (ent.Value, error) {
	return jsm.selectValues.Get(name)
}

// QueryJobLinks queries the "job_links" edge of the JobSkillMeta entity.
func (jsm *JobSkillMeta) QueryJobLinks() *JobSkillQuery {
	return NewJobSkillMetaClient(jsm.config).QueryJobLinks(jsm)
}

// Update returns a builder for updating this JobSkillMeta.
// Note that you need to call JobSkillMeta.Unwrap() before calling this method if this JobSkillMeta
// was returned from a transaction, and the transaction was committed or rolled back.
func (jsm *JobSkillMeta) Update() *JobSkillMetaUpdateOne {
	return NewJobSkillMetaClient(jsm.config).UpdateOne(jsm)
}

// Unwrap unwraps the JobSkillMeta entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jsm *JobSkillMeta) Unwrap() *JobSkillMeta {
	_tx, ok := jsm.config.driver.(*txDriver)
	if !ok {
		panic("db: JobSkillMeta is not a transactional entity")
	}
	jsm.config.driver = _tx.drv
	return jsm
}

// String implements the fmt.Stringer.
func (jsm *JobSkillMeta) String() string {
	var builder strings.Builder
	builder.WriteString("JobSkillMeta(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jsm.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(jsm.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(jsm.Name)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(jsm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(jsm.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// JobSkillMetaSlice is a parsable slice of JobSkillMeta.
type JobSkillMetaSlice []*JobSkillMeta
