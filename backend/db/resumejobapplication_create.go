// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumejobapplication"
	"github.com/google/uuid"
)

// ResumeJobApplicationCreate is the builder for creating a ResumeJobApplication entity.
type ResumeJobApplicationCreate struct {
	config
	mutation *ResumeJobApplicationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (rjac *ResumeJobApplicationCreate) SetDeletedAt(t time.Time) *ResumeJobApplicationCreate {
	rjac.mutation.SetDeletedAt(t)
	return rjac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rjac *ResumeJobApplicationCreate) SetNillableDeletedAt(t *time.Time) *ResumeJobApplicationCreate {
	if t != nil {
		rjac.SetDeletedAt(*t)
	}
	return rjac
}

// SetResumeID sets the "resume_id" field.
func (rjac *ResumeJobApplicationCreate) SetResumeID(u uuid.UUID) *ResumeJobApplicationCreate {
	rjac.mutation.SetResumeID(u)
	return rjac
}

// SetJobPositionID sets the "job_position_id" field.
func (rjac *ResumeJobApplicationCreate) SetJobPositionID(u uuid.UUID) *ResumeJobApplicationCreate {
	rjac.mutation.SetJobPositionID(u)
	return rjac
}

// SetStatus sets the "status" field.
func (rjac *ResumeJobApplicationCreate) SetStatus(s string) *ResumeJobApplicationCreate {
	rjac.mutation.SetStatus(s)
	return rjac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rjac *ResumeJobApplicationCreate) SetNillableStatus(s *string) *ResumeJobApplicationCreate {
	if s != nil {
		rjac.SetStatus(*s)
	}
	return rjac
}

// SetSource sets the "source" field.
func (rjac *ResumeJobApplicationCreate) SetSource(s string) *ResumeJobApplicationCreate {
	rjac.mutation.SetSource(s)
	return rjac
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (rjac *ResumeJobApplicationCreate) SetNillableSource(s *string) *ResumeJobApplicationCreate {
	if s != nil {
		rjac.SetSource(*s)
	}
	return rjac
}

// SetNotes sets the "notes" field.
func (rjac *ResumeJobApplicationCreate) SetNotes(s string) *ResumeJobApplicationCreate {
	rjac.mutation.SetNotes(s)
	return rjac
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (rjac *ResumeJobApplicationCreate) SetNillableNotes(s *string) *ResumeJobApplicationCreate {
	if s != nil {
		rjac.SetNotes(*s)
	}
	return rjac
}

// SetAppliedAt sets the "applied_at" field.
func (rjac *ResumeJobApplicationCreate) SetAppliedAt(t time.Time) *ResumeJobApplicationCreate {
	rjac.mutation.SetAppliedAt(t)
	return rjac
}

// SetNillableAppliedAt sets the "applied_at" field if the given value is not nil.
func (rjac *ResumeJobApplicationCreate) SetNillableAppliedAt(t *time.Time) *ResumeJobApplicationCreate {
	if t != nil {
		rjac.SetAppliedAt(*t)
	}
	return rjac
}

// SetCreatedAt sets the "created_at" field.
func (rjac *ResumeJobApplicationCreate) SetCreatedAt(t time.Time) *ResumeJobApplicationCreate {
	rjac.mutation.SetCreatedAt(t)
	return rjac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rjac *ResumeJobApplicationCreate) SetNillableCreatedAt(t *time.Time) *ResumeJobApplicationCreate {
	if t != nil {
		rjac.SetCreatedAt(*t)
	}
	return rjac
}

// SetUpdatedAt sets the "updated_at" field.
func (rjac *ResumeJobApplicationCreate) SetUpdatedAt(t time.Time) *ResumeJobApplicationCreate {
	rjac.mutation.SetUpdatedAt(t)
	return rjac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rjac *ResumeJobApplicationCreate) SetNillableUpdatedAt(t *time.Time) *ResumeJobApplicationCreate {
	if t != nil {
		rjac.SetUpdatedAt(*t)
	}
	return rjac
}

// SetID sets the "id" field.
func (rjac *ResumeJobApplicationCreate) SetID(u uuid.UUID) *ResumeJobApplicationCreate {
	rjac.mutation.SetID(u)
	return rjac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rjac *ResumeJobApplicationCreate) SetNillableID(u *uuid.UUID) *ResumeJobApplicationCreate {
	if u != nil {
		rjac.SetID(*u)
	}
	return rjac
}

// SetResume sets the "resume" edge to the Resume entity.
func (rjac *ResumeJobApplicationCreate) SetResume(r *Resume) *ResumeJobApplicationCreate {
	return rjac.SetResumeID(r.ID)
}

// SetJobPosition sets the "job_position" edge to the JobPosition entity.
func (rjac *ResumeJobApplicationCreate) SetJobPosition(j *JobPosition) *ResumeJobApplicationCreate {
	return rjac.SetJobPositionID(j.ID)
}

// Mutation returns the ResumeJobApplicationMutation object of the builder.
func (rjac *ResumeJobApplicationCreate) Mutation() *ResumeJobApplicationMutation {
	return rjac.mutation
}

// Save creates the ResumeJobApplication in the database.
func (rjac *ResumeJobApplicationCreate) Save(ctx context.Context) (*ResumeJobApplication, error) {
	if err := rjac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rjac.sqlSave, rjac.mutation, rjac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rjac *ResumeJobApplicationCreate) SaveX(ctx context.Context) *ResumeJobApplication {
	v, err := rjac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rjac *ResumeJobApplicationCreate) Exec(ctx context.Context) error {
	_, err := rjac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rjac *ResumeJobApplicationCreate) ExecX(ctx context.Context) {
	if err := rjac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rjac *ResumeJobApplicationCreate) defaults() error {
	if _, ok := rjac.mutation.Status(); !ok {
		v := resumejobapplication.DefaultStatus
		rjac.mutation.SetStatus(v)
	}
	if _, ok := rjac.mutation.AppliedAt(); !ok {
		if resumejobapplication.DefaultAppliedAt == nil {
			return fmt.Errorf("db: uninitialized resumejobapplication.DefaultAppliedAt (forgotten import db/runtime?)")
		}
		v := resumejobapplication.DefaultAppliedAt()
		rjac.mutation.SetAppliedAt(v)
	}
	if _, ok := rjac.mutation.CreatedAt(); !ok {
		if resumejobapplication.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized resumejobapplication.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := resumejobapplication.DefaultCreatedAt()
		rjac.mutation.SetCreatedAt(v)
	}
	if _, ok := rjac.mutation.UpdatedAt(); !ok {
		if resumejobapplication.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumejobapplication.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumejobapplication.DefaultUpdatedAt()
		rjac.mutation.SetUpdatedAt(v)
	}
	if _, ok := rjac.mutation.ID(); !ok {
		if resumejobapplication.DefaultID == nil {
			return fmt.Errorf("db: uninitialized resumejobapplication.DefaultID (forgotten import db/runtime?)")
		}
		v := resumejobapplication.DefaultID()
		rjac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rjac *ResumeJobApplicationCreate) check() error {
	if _, ok := rjac.mutation.ResumeID(); !ok {
		return &ValidationError{Name: "resume_id", err: errors.New(`db: missing required field "ResumeJobApplication.resume_id"`)}
	}
	if _, ok := rjac.mutation.JobPositionID(); !ok {
		return &ValidationError{Name: "job_position_id", err: errors.New(`db: missing required field "ResumeJobApplication.job_position_id"`)}
	}
	if _, ok := rjac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "ResumeJobApplication.status"`)}
	}
	if _, ok := rjac.mutation.AppliedAt(); !ok {
		return &ValidationError{Name: "applied_at", err: errors.New(`db: missing required field "ResumeJobApplication.applied_at"`)}
	}
	if _, ok := rjac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ResumeJobApplication.created_at"`)}
	}
	if _, ok := rjac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "ResumeJobApplication.updated_at"`)}
	}
	if len(rjac.mutation.ResumeIDs()) == 0 {
		return &ValidationError{Name: "resume", err: errors.New(`db: missing required edge "ResumeJobApplication.resume"`)}
	}
	if len(rjac.mutation.JobPositionIDs()) == 0 {
		return &ValidationError{Name: "job_position", err: errors.New(`db: missing required edge "ResumeJobApplication.job_position"`)}
	}
	return nil
}

func (rjac *ResumeJobApplicationCreate) sqlSave(ctx context.Context) (*ResumeJobApplication, error) {
	if err := rjac.check(); err != nil {
		return nil, err
	}
	_node, _spec := rjac.createSpec()
	if err := sqlgraph.CreateNode(ctx, rjac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rjac.mutation.id = &_node.ID
	rjac.mutation.done = true
	return _node, nil
}

func (rjac *ResumeJobApplicationCreate) createSpec() (*ResumeJobApplication, *sqlgraph.CreateSpec) {
	var (
		_node = &ResumeJobApplication{config: rjac.config}
		_spec = sqlgraph.NewCreateSpec(resumejobapplication.Table, sqlgraph.NewFieldSpec(resumejobapplication.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rjac.conflict
	if id, ok := rjac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rjac.mutation.DeletedAt(); ok {
		_spec.SetField(resumejobapplication.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rjac.mutation.Status(); ok {
		_spec.SetField(resumejobapplication.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := rjac.mutation.Source(); ok {
		_spec.SetField(resumejobapplication.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := rjac.mutation.Notes(); ok {
		_spec.SetField(resumejobapplication.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := rjac.mutation.AppliedAt(); ok {
		_spec.SetField(resumejobapplication.FieldAppliedAt, field.TypeTime, value)
		_node.AppliedAt = value
	}
	if value, ok := rjac.mutation.CreatedAt(); ok {
		_spec.SetField(resumejobapplication.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rjac.mutation.UpdatedAt(); ok {
		_spec.SetField(resumejobapplication.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rjac.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumejobapplication.ResumeTable,
			Columns: []string{resumejobapplication.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResumeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rjac.mutation.JobPositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumejobapplication.JobPositionTable,
			Columns: []string{resumejobapplication.JobPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.JobPositionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeJobApplication.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeJobApplicationUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rjac *ResumeJobApplicationCreate) OnConflict(opts ...sql.ConflictOption) *ResumeJobApplicationUpsertOne {
	rjac.conflict = opts
	return &ResumeJobApplicationUpsertOne{
		create: rjac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeJobApplication.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rjac *ResumeJobApplicationCreate) OnConflictColumns(columns ...string) *ResumeJobApplicationUpsertOne {
	rjac.conflict = append(rjac.conflict, sql.ConflictColumns(columns...))
	return &ResumeJobApplicationUpsertOne{
		create: rjac,
	}
}

type (
	// ResumeJobApplicationUpsertOne is the builder for "upsert"-ing
	//  one ResumeJobApplication node.
	ResumeJobApplicationUpsertOne struct {
		create *ResumeJobApplicationCreate
	}

	// ResumeJobApplicationUpsert is the "OnConflict" setter.
	ResumeJobApplicationUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeJobApplicationUpsert) SetDeletedAt(v time.Time) *ResumeJobApplicationUpsert {
	u.Set(resumejobapplication.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsert) UpdateDeletedAt() *ResumeJobApplicationUpsert {
	u.SetExcluded(resumejobapplication.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeJobApplicationUpsert) ClearDeletedAt() *ResumeJobApplicationUpsert {
	u.SetNull(resumejobapplication.FieldDeletedAt)
	return u
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeJobApplicationUpsert) SetResumeID(v uuid.UUID) *ResumeJobApplicationUpsert {
	u.Set(resumejobapplication.FieldResumeID, v)
	return u
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsert) UpdateResumeID() *ResumeJobApplicationUpsert {
	u.SetExcluded(resumejobapplication.FieldResumeID)
	return u
}

// SetJobPositionID sets the "job_position_id" field.
func (u *ResumeJobApplicationUpsert) SetJobPositionID(v uuid.UUID) *ResumeJobApplicationUpsert {
	u.Set(resumejobapplication.FieldJobPositionID, v)
	return u
}

// UpdateJobPositionID sets the "job_position_id" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsert) UpdateJobPositionID() *ResumeJobApplicationUpsert {
	u.SetExcluded(resumejobapplication.FieldJobPositionID)
	return u
}

// SetStatus sets the "status" field.
func (u *ResumeJobApplicationUpsert) SetStatus(v string) *ResumeJobApplicationUpsert {
	u.Set(resumejobapplication.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsert) UpdateStatus() *ResumeJobApplicationUpsert {
	u.SetExcluded(resumejobapplication.FieldStatus)
	return u
}

// SetSource sets the "source" field.
func (u *ResumeJobApplicationUpsert) SetSource(v string) *ResumeJobApplicationUpsert {
	u.Set(resumejobapplication.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsert) UpdateSource() *ResumeJobApplicationUpsert {
	u.SetExcluded(resumejobapplication.FieldSource)
	return u
}

// ClearSource clears the value of the "source" field.
func (u *ResumeJobApplicationUpsert) ClearSource() *ResumeJobApplicationUpsert {
	u.SetNull(resumejobapplication.FieldSource)
	return u
}

// SetNotes sets the "notes" field.
func (u *ResumeJobApplicationUpsert) SetNotes(v string) *ResumeJobApplicationUpsert {
	u.Set(resumejobapplication.FieldNotes, v)
	return u
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsert) UpdateNotes() *ResumeJobApplicationUpsert {
	u.SetExcluded(resumejobapplication.FieldNotes)
	return u
}

// ClearNotes clears the value of the "notes" field.
func (u *ResumeJobApplicationUpsert) ClearNotes() *ResumeJobApplicationUpsert {
	u.SetNull(resumejobapplication.FieldNotes)
	return u
}

// SetAppliedAt sets the "applied_at" field.
func (u *ResumeJobApplicationUpsert) SetAppliedAt(v time.Time) *ResumeJobApplicationUpsert {
	u.Set(resumejobapplication.FieldAppliedAt, v)
	return u
}

// UpdateAppliedAt sets the "applied_at" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsert) UpdateAppliedAt() *ResumeJobApplicationUpsert {
	u.SetExcluded(resumejobapplication.FieldAppliedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeJobApplicationUpsert) SetCreatedAt(v time.Time) *ResumeJobApplicationUpsert {
	u.Set(resumejobapplication.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsert) UpdateCreatedAt() *ResumeJobApplicationUpsert {
	u.SetExcluded(resumejobapplication.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeJobApplicationUpsert) SetUpdatedAt(v time.Time) *ResumeJobApplicationUpsert {
	u.Set(resumejobapplication.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsert) UpdateUpdatedAt() *ResumeJobApplicationUpsert {
	u.SetExcluded(resumejobapplication.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ResumeJobApplication.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumejobapplication.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeJobApplicationUpsertOne) UpdateNewValues() *ResumeJobApplicationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resumejobapplication.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeJobApplication.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResumeJobApplicationUpsertOne) Ignore() *ResumeJobApplicationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeJobApplicationUpsertOne) DoNothing() *ResumeJobApplicationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeJobApplicationCreate.OnConflict
// documentation for more info.
func (u *ResumeJobApplicationUpsertOne) Update(set func(*ResumeJobApplicationUpsert)) *ResumeJobApplicationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeJobApplicationUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeJobApplicationUpsertOne) SetDeletedAt(v time.Time) *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertOne) UpdateDeletedAt() *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeJobApplicationUpsertOne) ClearDeletedAt() *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.ClearDeletedAt()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeJobApplicationUpsertOne) SetResumeID(v uuid.UUID) *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertOne) UpdateResumeID() *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateResumeID()
	})
}

// SetJobPositionID sets the "job_position_id" field.
func (u *ResumeJobApplicationUpsertOne) SetJobPositionID(v uuid.UUID) *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetJobPositionID(v)
	})
}

// UpdateJobPositionID sets the "job_position_id" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertOne) UpdateJobPositionID() *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateJobPositionID()
	})
}

// SetStatus sets the "status" field.
func (u *ResumeJobApplicationUpsertOne) SetStatus(v string) *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertOne) UpdateStatus() *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateStatus()
	})
}

// SetSource sets the "source" field.
func (u *ResumeJobApplicationUpsertOne) SetSource(v string) *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertOne) UpdateSource() *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateSource()
	})
}

// ClearSource clears the value of the "source" field.
func (u *ResumeJobApplicationUpsertOne) ClearSource() *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.ClearSource()
	})
}

// SetNotes sets the "notes" field.
func (u *ResumeJobApplicationUpsertOne) SetNotes(v string) *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertOne) UpdateNotes() *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *ResumeJobApplicationUpsertOne) ClearNotes() *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.ClearNotes()
	})
}

// SetAppliedAt sets the "applied_at" field.
func (u *ResumeJobApplicationUpsertOne) SetAppliedAt(v time.Time) *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetAppliedAt(v)
	})
}

// UpdateAppliedAt sets the "applied_at" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertOne) UpdateAppliedAt() *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateAppliedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeJobApplicationUpsertOne) SetCreatedAt(v time.Time) *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertOne) UpdateCreatedAt() *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeJobApplicationUpsertOne) SetUpdatedAt(v time.Time) *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertOne) UpdateUpdatedAt() *ResumeJobApplicationUpsertOne {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeJobApplicationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeJobApplicationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeJobApplicationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResumeJobApplicationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ResumeJobApplicationUpsertOne.ID is not supported by MySQL driver. Use ResumeJobApplicationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResumeJobApplicationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResumeJobApplicationCreateBulk is the builder for creating many ResumeJobApplication entities in bulk.
type ResumeJobApplicationCreateBulk struct {
	config
	err      error
	builders []*ResumeJobApplicationCreate
	conflict []sql.ConflictOption
}

// Save creates the ResumeJobApplication entities in the database.
func (rjacb *ResumeJobApplicationCreateBulk) Save(ctx context.Context) ([]*ResumeJobApplication, error) {
	if rjacb.err != nil {
		return nil, rjacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rjacb.builders))
	nodes := make([]*ResumeJobApplication, len(rjacb.builders))
	mutators := make([]Mutator, len(rjacb.builders))
	for i := range rjacb.builders {
		func(i int, root context.Context) {
			builder := rjacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResumeJobApplicationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rjacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rjacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rjacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rjacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rjacb *ResumeJobApplicationCreateBulk) SaveX(ctx context.Context) []*ResumeJobApplication {
	v, err := rjacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rjacb *ResumeJobApplicationCreateBulk) Exec(ctx context.Context) error {
	_, err := rjacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rjacb *ResumeJobApplicationCreateBulk) ExecX(ctx context.Context) {
	if err := rjacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeJobApplication.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeJobApplicationUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rjacb *ResumeJobApplicationCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResumeJobApplicationUpsertBulk {
	rjacb.conflict = opts
	return &ResumeJobApplicationUpsertBulk{
		create: rjacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeJobApplication.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rjacb *ResumeJobApplicationCreateBulk) OnConflictColumns(columns ...string) *ResumeJobApplicationUpsertBulk {
	rjacb.conflict = append(rjacb.conflict, sql.ConflictColumns(columns...))
	return &ResumeJobApplicationUpsertBulk{
		create: rjacb,
	}
}

// ResumeJobApplicationUpsertBulk is the builder for "upsert"-ing
// a bulk of ResumeJobApplication nodes.
type ResumeJobApplicationUpsertBulk struct {
	create *ResumeJobApplicationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ResumeJobApplication.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumejobapplication.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeJobApplicationUpsertBulk) UpdateNewValues() *ResumeJobApplicationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resumejobapplication.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeJobApplication.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResumeJobApplicationUpsertBulk) Ignore() *ResumeJobApplicationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeJobApplicationUpsertBulk) DoNothing() *ResumeJobApplicationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeJobApplicationCreateBulk.OnConflict
// documentation for more info.
func (u *ResumeJobApplicationUpsertBulk) Update(set func(*ResumeJobApplicationUpsert)) *ResumeJobApplicationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeJobApplicationUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeJobApplicationUpsertBulk) SetDeletedAt(v time.Time) *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertBulk) UpdateDeletedAt() *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeJobApplicationUpsertBulk) ClearDeletedAt() *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.ClearDeletedAt()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeJobApplicationUpsertBulk) SetResumeID(v uuid.UUID) *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertBulk) UpdateResumeID() *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateResumeID()
	})
}

// SetJobPositionID sets the "job_position_id" field.
func (u *ResumeJobApplicationUpsertBulk) SetJobPositionID(v uuid.UUID) *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetJobPositionID(v)
	})
}

// UpdateJobPositionID sets the "job_position_id" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertBulk) UpdateJobPositionID() *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateJobPositionID()
	})
}

// SetStatus sets the "status" field.
func (u *ResumeJobApplicationUpsertBulk) SetStatus(v string) *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertBulk) UpdateStatus() *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateStatus()
	})
}

// SetSource sets the "source" field.
func (u *ResumeJobApplicationUpsertBulk) SetSource(v string) *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertBulk) UpdateSource() *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateSource()
	})
}

// ClearSource clears the value of the "source" field.
func (u *ResumeJobApplicationUpsertBulk) ClearSource() *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.ClearSource()
	})
}

// SetNotes sets the "notes" field.
func (u *ResumeJobApplicationUpsertBulk) SetNotes(v string) *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertBulk) UpdateNotes() *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *ResumeJobApplicationUpsertBulk) ClearNotes() *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.ClearNotes()
	})
}

// SetAppliedAt sets the "applied_at" field.
func (u *ResumeJobApplicationUpsertBulk) SetAppliedAt(v time.Time) *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetAppliedAt(v)
	})
}

// UpdateAppliedAt sets the "applied_at" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertBulk) UpdateAppliedAt() *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateAppliedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeJobApplicationUpsertBulk) SetCreatedAt(v time.Time) *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertBulk) UpdateCreatedAt() *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeJobApplicationUpsertBulk) SetUpdatedAt(v time.Time) *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeJobApplicationUpsertBulk) UpdateUpdatedAt() *ResumeJobApplicationUpsertBulk {
	return u.Update(func(s *ResumeJobApplicationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeJobApplicationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ResumeJobApplicationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeJobApplicationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeJobApplicationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
