// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/department"
	"github.com/chaitin/WhaleHire/backend/db/jobeducationrequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobexperiencerequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobindustryrequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/jobresponsibility"
	"github.com/chaitin/WhaleHire/backend/db/jobskill"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resumejobapplication"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/google/uuid"
)

// JobPositionQuery is the builder for querying JobPosition entities.
type JobPositionQuery struct {
	config
	ctx                        *QueryContext
	order                      []jobposition.OrderOption
	inters                     []Interceptor
	predicates                 []predicate.JobPosition
	withDepartment             *DepartmentQuery
	withCreator                *UserQuery
	withResponsibilities       *JobResponsibilityQuery
	withSkills                 *JobSkillQuery
	withEducationRequirements  *JobEducationRequirementQuery
	withExperienceRequirements *JobExperienceRequirementQuery
	withIndustryRequirements   *JobIndustryRequirementQuery
	withResumeApplications     *ResumeJobApplicationQuery
	modifiers                  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JobPositionQuery builder.
func (jpq *JobPositionQuery) Where(ps ...predicate.JobPosition) *JobPositionQuery {
	jpq.predicates = append(jpq.predicates, ps...)
	return jpq
}

// Limit the number of records to be returned by this query.
func (jpq *JobPositionQuery) Limit(limit int) *JobPositionQuery {
	jpq.ctx.Limit = &limit
	return jpq
}

// Offset to start from.
func (jpq *JobPositionQuery) Offset(offset int) *JobPositionQuery {
	jpq.ctx.Offset = &offset
	return jpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (jpq *JobPositionQuery) Unique(unique bool) *JobPositionQuery {
	jpq.ctx.Unique = &unique
	return jpq
}

// Order specifies how the records should be ordered.
func (jpq *JobPositionQuery) Order(o ...jobposition.OrderOption) *JobPositionQuery {
	jpq.order = append(jpq.order, o...)
	return jpq
}

// QueryDepartment chains the current query on the "department" edge.
func (jpq *JobPositionQuery) QueryDepartment() *DepartmentQuery {
	query := (&DepartmentClient{config: jpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, selector),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobposition.DepartmentTable, jobposition.DepartmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(jpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreator chains the current query on the "creator" edge.
func (jpq *JobPositionQuery) QueryCreator() *UserQuery {
	query := (&UserClient{config: jpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobposition.CreatorTable, jobposition.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(jpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResponsibilities chains the current query on the "responsibilities" edge.
func (jpq *JobPositionQuery) QueryResponsibilities() *JobResponsibilityQuery {
	query := (&JobResponsibilityClient{config: jpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, selector),
			sqlgraph.To(jobresponsibility.Table, jobresponsibility.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobposition.ResponsibilitiesTable, jobposition.ResponsibilitiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(jpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySkills chains the current query on the "skills" edge.
func (jpq *JobPositionQuery) QuerySkills() *JobSkillQuery {
	query := (&JobSkillClient{config: jpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, selector),
			sqlgraph.To(jobskill.Table, jobskill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobposition.SkillsTable, jobposition.SkillsColumn),
		)
		fromU = sqlgraph.SetNeighbors(jpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEducationRequirements chains the current query on the "education_requirements" edge.
func (jpq *JobPositionQuery) QueryEducationRequirements() *JobEducationRequirementQuery {
	query := (&JobEducationRequirementClient{config: jpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, selector),
			sqlgraph.To(jobeducationrequirement.Table, jobeducationrequirement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobposition.EducationRequirementsTable, jobposition.EducationRequirementsColumn),
		)
		fromU = sqlgraph.SetNeighbors(jpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExperienceRequirements chains the current query on the "experience_requirements" edge.
func (jpq *JobPositionQuery) QueryExperienceRequirements() *JobExperienceRequirementQuery {
	query := (&JobExperienceRequirementClient{config: jpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, selector),
			sqlgraph.To(jobexperiencerequirement.Table, jobexperiencerequirement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobposition.ExperienceRequirementsTable, jobposition.ExperienceRequirementsColumn),
		)
		fromU = sqlgraph.SetNeighbors(jpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIndustryRequirements chains the current query on the "industry_requirements" edge.
func (jpq *JobPositionQuery) QueryIndustryRequirements() *JobIndustryRequirementQuery {
	query := (&JobIndustryRequirementClient{config: jpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, selector),
			sqlgraph.To(jobindustryrequirement.Table, jobindustryrequirement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobposition.IndustryRequirementsTable, jobposition.IndustryRequirementsColumn),
		)
		fromU = sqlgraph.SetNeighbors(jpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResumeApplications chains the current query on the "resume_applications" edge.
func (jpq *JobPositionQuery) QueryResumeApplications() *ResumeJobApplicationQuery {
	query := (&ResumeJobApplicationClient{config: jpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, selector),
			sqlgraph.To(resumejobapplication.Table, resumejobapplication.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobposition.ResumeApplicationsTable, jobposition.ResumeApplicationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(jpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first JobPosition entity from the query.
// Returns a *NotFoundError when no JobPosition was found.
func (jpq *JobPositionQuery) First(ctx context.Context) (*JobPosition, error) {
	nodes, err := jpq.Limit(1).All(setContextOp(ctx, jpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{jobposition.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jpq *JobPositionQuery) FirstX(ctx context.Context) *JobPosition {
	node, err := jpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first JobPosition ID from the query.
// Returns a *NotFoundError when no JobPosition ID was found.
func (jpq *JobPositionQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = jpq.Limit(1).IDs(setContextOp(ctx, jpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{jobposition.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (jpq *JobPositionQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := jpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single JobPosition entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one JobPosition entity is found.
// Returns a *NotFoundError when no JobPosition entities are found.
func (jpq *JobPositionQuery) Only(ctx context.Context) (*JobPosition, error) {
	nodes, err := jpq.Limit(2).All(setContextOp(ctx, jpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{jobposition.Label}
	default:
		return nil, &NotSingularError{jobposition.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jpq *JobPositionQuery) OnlyX(ctx context.Context) *JobPosition {
	node, err := jpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only JobPosition ID in the query.
// Returns a *NotSingularError when more than one JobPosition ID is found.
// Returns a *NotFoundError when no entities are found.
func (jpq *JobPositionQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = jpq.Limit(2).IDs(setContextOp(ctx, jpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{jobposition.Label}
	default:
		err = &NotSingularError{jobposition.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (jpq *JobPositionQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := jpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of JobPositions.
func (jpq *JobPositionQuery) All(ctx context.Context) ([]*JobPosition, error) {
	ctx = setContextOp(ctx, jpq.ctx, ent.OpQueryAll)
	if err := jpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*JobPosition, *JobPositionQuery]()
	return withInterceptors[[]*JobPosition](ctx, jpq, qr, jpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (jpq *JobPositionQuery) AllX(ctx context.Context) []*JobPosition {
	nodes, err := jpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of JobPosition IDs.
func (jpq *JobPositionQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if jpq.ctx.Unique == nil && jpq.path != nil {
		jpq.Unique(true)
	}
	ctx = setContextOp(ctx, jpq.ctx, ent.OpQueryIDs)
	if err = jpq.Select(jobposition.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jpq *JobPositionQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := jpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jpq *JobPositionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jpq.ctx, ent.OpQueryCount)
	if err := jpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, jpq, querierCount[*JobPositionQuery](), jpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (jpq *JobPositionQuery) CountX(ctx context.Context) int {
	count, err := jpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jpq *JobPositionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, jpq.ctx, ent.OpQueryExist)
	switch _, err := jpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (jpq *JobPositionQuery) ExistX(ctx context.Context) bool {
	exist, err := jpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JobPositionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jpq *JobPositionQuery) Clone() *JobPositionQuery {
	if jpq == nil {
		return nil
	}
	return &JobPositionQuery{
		config:                     jpq.config,
		ctx:                        jpq.ctx.Clone(),
		order:                      append([]jobposition.OrderOption{}, jpq.order...),
		inters:                     append([]Interceptor{}, jpq.inters...),
		predicates:                 append([]predicate.JobPosition{}, jpq.predicates...),
		withDepartment:             jpq.withDepartment.Clone(),
		withCreator:                jpq.withCreator.Clone(),
		withResponsibilities:       jpq.withResponsibilities.Clone(),
		withSkills:                 jpq.withSkills.Clone(),
		withEducationRequirements:  jpq.withEducationRequirements.Clone(),
		withExperienceRequirements: jpq.withExperienceRequirements.Clone(),
		withIndustryRequirements:   jpq.withIndustryRequirements.Clone(),
		withResumeApplications:     jpq.withResumeApplications.Clone(),
		// clone intermediate query.
		sql:       jpq.sql.Clone(),
		path:      jpq.path,
		modifiers: append([]func(*sql.Selector){}, jpq.modifiers...),
	}
}

// WithDepartment tells the query-builder to eager-load the nodes that are connected to
// the "department" edge. The optional arguments are used to configure the query builder of the edge.
func (jpq *JobPositionQuery) WithDepartment(opts ...func(*DepartmentQuery)) *JobPositionQuery {
	query := (&DepartmentClient{config: jpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jpq.withDepartment = query
	return jpq
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (jpq *JobPositionQuery) WithCreator(opts ...func(*UserQuery)) *JobPositionQuery {
	query := (&UserClient{config: jpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jpq.withCreator = query
	return jpq
}

// WithResponsibilities tells the query-builder to eager-load the nodes that are connected to
// the "responsibilities" edge. The optional arguments are used to configure the query builder of the edge.
func (jpq *JobPositionQuery) WithResponsibilities(opts ...func(*JobResponsibilityQuery)) *JobPositionQuery {
	query := (&JobResponsibilityClient{config: jpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jpq.withResponsibilities = query
	return jpq
}

// WithSkills tells the query-builder to eager-load the nodes that are connected to
// the "skills" edge. The optional arguments are used to configure the query builder of the edge.
func (jpq *JobPositionQuery) WithSkills(opts ...func(*JobSkillQuery)) *JobPositionQuery {
	query := (&JobSkillClient{config: jpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jpq.withSkills = query
	return jpq
}

// WithEducationRequirements tells the query-builder to eager-load the nodes that are connected to
// the "education_requirements" edge. The optional arguments are used to configure the query builder of the edge.
func (jpq *JobPositionQuery) WithEducationRequirements(opts ...func(*JobEducationRequirementQuery)) *JobPositionQuery {
	query := (&JobEducationRequirementClient{config: jpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jpq.withEducationRequirements = query
	return jpq
}

// WithExperienceRequirements tells the query-builder to eager-load the nodes that are connected to
// the "experience_requirements" edge. The optional arguments are used to configure the query builder of the edge.
func (jpq *JobPositionQuery) WithExperienceRequirements(opts ...func(*JobExperienceRequirementQuery)) *JobPositionQuery {
	query := (&JobExperienceRequirementClient{config: jpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jpq.withExperienceRequirements = query
	return jpq
}

// WithIndustryRequirements tells the query-builder to eager-load the nodes that are connected to
// the "industry_requirements" edge. The optional arguments are used to configure the query builder of the edge.
func (jpq *JobPositionQuery) WithIndustryRequirements(opts ...func(*JobIndustryRequirementQuery)) *JobPositionQuery {
	query := (&JobIndustryRequirementClient{config: jpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jpq.withIndustryRequirements = query
	return jpq
}

// WithResumeApplications tells the query-builder to eager-load the nodes that are connected to
// the "resume_applications" edge. The optional arguments are used to configure the query builder of the edge.
func (jpq *JobPositionQuery) WithResumeApplications(opts ...func(*ResumeJobApplicationQuery)) *JobPositionQuery {
	query := (&ResumeJobApplicationClient{config: jpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jpq.withResumeApplications = query
	return jpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.JobPosition.Query().
//		GroupBy(jobposition.FieldDeletedAt).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (jpq *JobPositionQuery) GroupBy(field string, fields ...string) *JobPositionGroupBy {
	jpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &JobPositionGroupBy{build: jpq}
	grbuild.flds = &jpq.ctx.Fields
	grbuild.label = jobposition.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//	}
//
//	client.JobPosition.Query().
//		Select(jobposition.FieldDeletedAt).
//		Scan(ctx, &v)
func (jpq *JobPositionQuery) Select(fields ...string) *JobPositionSelect {
	jpq.ctx.Fields = append(jpq.ctx.Fields, fields...)
	sbuild := &JobPositionSelect{JobPositionQuery: jpq}
	sbuild.label = jobposition.Label
	sbuild.flds, sbuild.scan = &jpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a JobPositionSelect configured with the given aggregations.
func (jpq *JobPositionQuery) Aggregate(fns ...AggregateFunc) *JobPositionSelect {
	return jpq.Select().Aggregate(fns...)
}

func (jpq *JobPositionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range jpq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, jpq); err != nil {
				return err
			}
		}
	}
	for _, f := range jpq.ctx.Fields {
		if !jobposition.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if jpq.path != nil {
		prev, err := jpq.path(ctx)
		if err != nil {
			return err
		}
		jpq.sql = prev
	}
	return nil
}

func (jpq *JobPositionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*JobPosition, error) {
	var (
		nodes       = []*JobPosition{}
		_spec       = jpq.querySpec()
		loadedTypes = [8]bool{
			jpq.withDepartment != nil,
			jpq.withCreator != nil,
			jpq.withResponsibilities != nil,
			jpq.withSkills != nil,
			jpq.withEducationRequirements != nil,
			jpq.withExperienceRequirements != nil,
			jpq.withIndustryRequirements != nil,
			jpq.withResumeApplications != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*JobPosition).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &JobPosition{config: jpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(jpq.modifiers) > 0 {
		_spec.Modifiers = jpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, jpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := jpq.withDepartment; query != nil {
		if err := jpq.loadDepartment(ctx, query, nodes, nil,
			func(n *JobPosition, e *Department) { n.Edges.Department = e }); err != nil {
			return nil, err
		}
	}
	if query := jpq.withCreator; query != nil {
		if err := jpq.loadCreator(ctx, query, nodes, nil,
			func(n *JobPosition, e *User) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	if query := jpq.withResponsibilities; query != nil {
		if err := jpq.loadResponsibilities(ctx, query, nodes,
			func(n *JobPosition) { n.Edges.Responsibilities = []*JobResponsibility{} },
			func(n *JobPosition, e *JobResponsibility) {
				n.Edges.Responsibilities = append(n.Edges.Responsibilities, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := jpq.withSkills; query != nil {
		if err := jpq.loadSkills(ctx, query, nodes,
			func(n *JobPosition) { n.Edges.Skills = []*JobSkill{} },
			func(n *JobPosition, e *JobSkill) { n.Edges.Skills = append(n.Edges.Skills, e) }); err != nil {
			return nil, err
		}
	}
	if query := jpq.withEducationRequirements; query != nil {
		if err := jpq.loadEducationRequirements(ctx, query, nodes,
			func(n *JobPosition) { n.Edges.EducationRequirements = []*JobEducationRequirement{} },
			func(n *JobPosition, e *JobEducationRequirement) {
				n.Edges.EducationRequirements = append(n.Edges.EducationRequirements, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := jpq.withExperienceRequirements; query != nil {
		if err := jpq.loadExperienceRequirements(ctx, query, nodes,
			func(n *JobPosition) { n.Edges.ExperienceRequirements = []*JobExperienceRequirement{} },
			func(n *JobPosition, e *JobExperienceRequirement) {
				n.Edges.ExperienceRequirements = append(n.Edges.ExperienceRequirements, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := jpq.withIndustryRequirements; query != nil {
		if err := jpq.loadIndustryRequirements(ctx, query, nodes,
			func(n *JobPosition) { n.Edges.IndustryRequirements = []*JobIndustryRequirement{} },
			func(n *JobPosition, e *JobIndustryRequirement) {
				n.Edges.IndustryRequirements = append(n.Edges.IndustryRequirements, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := jpq.withResumeApplications; query != nil {
		if err := jpq.loadResumeApplications(ctx, query, nodes,
			func(n *JobPosition) { n.Edges.ResumeApplications = []*ResumeJobApplication{} },
			func(n *JobPosition, e *ResumeJobApplication) {
				n.Edges.ResumeApplications = append(n.Edges.ResumeApplications, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (jpq *JobPositionQuery) loadDepartment(ctx context.Context, query *DepartmentQuery, nodes []*JobPosition, init func(*JobPosition), assign func(*JobPosition, *Department)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*JobPosition)
	for i := range nodes {
		fk := nodes[i].DepartmentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(department.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "department_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jpq *JobPositionQuery) loadCreator(ctx context.Context, query *UserQuery, nodes []*JobPosition, init func(*JobPosition), assign func(*JobPosition, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*JobPosition)
	for i := range nodes {
		if nodes[i].CreatedBy == nil {
			continue
		}
		fk := *nodes[i].CreatedBy
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "created_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jpq *JobPositionQuery) loadResponsibilities(ctx context.Context, query *JobResponsibilityQuery, nodes []*JobPosition, init func(*JobPosition), assign func(*JobPosition, *JobResponsibility)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*JobPosition)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(jobresponsibility.FieldJobID)
	}
	query.Where(predicate.JobResponsibility(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(jobposition.ResponsibilitiesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.JobID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "job_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (jpq *JobPositionQuery) loadSkills(ctx context.Context, query *JobSkillQuery, nodes []*JobPosition, init func(*JobPosition), assign func(*JobPosition, *JobSkill)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*JobPosition)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(jobskill.FieldJobID)
	}
	query.Where(predicate.JobSkill(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(jobposition.SkillsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.JobID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "job_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (jpq *JobPositionQuery) loadEducationRequirements(ctx context.Context, query *JobEducationRequirementQuery, nodes []*JobPosition, init func(*JobPosition), assign func(*JobPosition, *JobEducationRequirement)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*JobPosition)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(jobeducationrequirement.FieldJobID)
	}
	query.Where(predicate.JobEducationRequirement(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(jobposition.EducationRequirementsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.JobID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "job_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (jpq *JobPositionQuery) loadExperienceRequirements(ctx context.Context, query *JobExperienceRequirementQuery, nodes []*JobPosition, init func(*JobPosition), assign func(*JobPosition, *JobExperienceRequirement)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*JobPosition)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(jobexperiencerequirement.FieldJobID)
	}
	query.Where(predicate.JobExperienceRequirement(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(jobposition.ExperienceRequirementsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.JobID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "job_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (jpq *JobPositionQuery) loadIndustryRequirements(ctx context.Context, query *JobIndustryRequirementQuery, nodes []*JobPosition, init func(*JobPosition), assign func(*JobPosition, *JobIndustryRequirement)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*JobPosition)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(jobindustryrequirement.FieldJobID)
	}
	query.Where(predicate.JobIndustryRequirement(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(jobposition.IndustryRequirementsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.JobID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "job_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (jpq *JobPositionQuery) loadResumeApplications(ctx context.Context, query *ResumeJobApplicationQuery, nodes []*JobPosition, init func(*JobPosition), assign func(*JobPosition, *ResumeJobApplication)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*JobPosition)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(resumejobapplication.FieldJobPositionID)
	}
	query.Where(predicate.ResumeJobApplication(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(jobposition.ResumeApplicationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.JobPositionID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "job_position_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (jpq *JobPositionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jpq.querySpec()
	if len(jpq.modifiers) > 0 {
		_spec.Modifiers = jpq.modifiers
	}
	_spec.Node.Columns = jpq.ctx.Fields
	if len(jpq.ctx.Fields) > 0 {
		_spec.Unique = jpq.ctx.Unique != nil && *jpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, jpq.driver, _spec)
}

func (jpq *JobPositionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(jobposition.Table, jobposition.Columns, sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID))
	_spec.From = jpq.sql
	if unique := jpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if jpq.path != nil {
		_spec.Unique = true
	}
	if fields := jpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobposition.FieldID)
		for i := range fields {
			if fields[i] != jobposition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if jpq.withDepartment != nil {
			_spec.Node.AddColumnOnce(jobposition.FieldDepartmentID)
		}
		if jpq.withCreator != nil {
			_spec.Node.AddColumnOnce(jobposition.FieldCreatedBy)
		}
	}
	if ps := jpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jpq *JobPositionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(jpq.driver.Dialect())
	t1 := builder.Table(jobposition.Table)
	columns := jpq.ctx.Fields
	if len(columns) == 0 {
		columns = jobposition.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if jpq.sql != nil {
		selector = jpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if jpq.ctx.Unique != nil && *jpq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range jpq.modifiers {
		m(selector)
	}
	for _, p := range jpq.predicates {
		p(selector)
	}
	for _, p := range jpq.order {
		p(selector)
	}
	if offset := jpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (jpq *JobPositionQuery) ForUpdate(opts ...sql.LockOption) *JobPositionQuery {
	if jpq.driver.Dialect() == dialect.Postgres {
		jpq.Unique(false)
	}
	jpq.modifiers = append(jpq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return jpq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (jpq *JobPositionQuery) ForShare(opts ...sql.LockOption) *JobPositionQuery {
	if jpq.driver.Dialect() == dialect.Postgres {
		jpq.Unique(false)
	}
	jpq.modifiers = append(jpq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return jpq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (jpq *JobPositionQuery) Modify(modifiers ...func(s *sql.Selector)) *JobPositionSelect {
	jpq.modifiers = append(jpq.modifiers, modifiers...)
	return jpq.Select()
}

// JobPositionGroupBy is the group-by builder for JobPosition entities.
type JobPositionGroupBy struct {
	selector
	build *JobPositionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jpgb *JobPositionGroupBy) Aggregate(fns ...AggregateFunc) *JobPositionGroupBy {
	jpgb.fns = append(jpgb.fns, fns...)
	return jpgb
}

// Scan applies the selector query and scans the result into the given value.
func (jpgb *JobPositionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jpgb.build.ctx, ent.OpQueryGroupBy)
	if err := jpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobPositionQuery, *JobPositionGroupBy](ctx, jpgb.build, jpgb, jpgb.build.inters, v)
}

func (jpgb *JobPositionGroupBy) sqlScan(ctx context.Context, root *JobPositionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(jpgb.fns))
	for _, fn := range jpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*jpgb.flds)+len(jpgb.fns))
		for _, f := range *jpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*jpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// JobPositionSelect is the builder for selecting fields of JobPosition entities.
type JobPositionSelect struct {
	*JobPositionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (jps *JobPositionSelect) Aggregate(fns ...AggregateFunc) *JobPositionSelect {
	jps.fns = append(jps.fns, fns...)
	return jps
}

// Scan applies the selector query and scans the result into the given value.
func (jps *JobPositionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jps.ctx, ent.OpQuerySelect)
	if err := jps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobPositionQuery, *JobPositionSelect](ctx, jps.JobPositionQuery, jps, jps.inters, v)
}

func (jps *JobPositionSelect) sqlScan(ctx context.Context, root *JobPositionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(jps.fns))
	for _, fn := range jps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*jps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (jps *JobPositionSelect) Modify(modifiers ...func(s *sql.Selector)) *JobPositionSelect {
	jps.modifiers = append(jps.modifiers, modifiers...)
	return jps
}
