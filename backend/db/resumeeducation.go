// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumeeducation"
	"github.com/google/uuid"
)

// ResumeEducation is the model entity for the ResumeEducation schema.
type ResumeEducation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// ResumeID holds the value of the "resume_id" field.
	ResumeID uuid.UUID `json:"resume_id,omitempty"`
	// School holds the value of the "school" field.
	School string `json:"school,omitempty"`
	// Degree holds the value of the "degree" field.
	Degree string `json:"degree,omitempty"`
	// Major holds the value of the "major" field.
	Major string `json:"major,omitempty"`
	// Gpa holds the value of the "gpa" field.
	Gpa float64 `json:"gpa,omitempty"`
	// UniversityTypes holds the value of the "university_types" field.
	UniversityTypes []consts.UniversityType `json:"university_types,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResumeEducationQuery when eager-loading is set.
	Edges        ResumeEducationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ResumeEducationEdges holds the relations/edges for other nodes in the graph.
type ResumeEducationEdges struct {
	// Resume holds the value of the resume edge.
	Resume *Resume `json:"resume,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ResumeOrErr returns the Resume value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResumeEducationEdges) ResumeOrErr() (*Resume, error) {
	if e.Resume != nil {
		return e.Resume, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: resume.Label}
	}
	return nil, &NotLoadedError{edge: "resume"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResumeEducation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resumeeducation.FieldUniversityTypes:
			values[i] = new([]byte)
		case resumeeducation.FieldGpa:
			values[i] = new(sql.NullFloat64)
		case resumeeducation.FieldSchool, resumeeducation.FieldDegree, resumeeducation.FieldMajor:
			values[i] = new(sql.NullString)
		case resumeeducation.FieldDeletedAt, resumeeducation.FieldStartDate, resumeeducation.FieldEndDate, resumeeducation.FieldCreatedAt, resumeeducation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case resumeeducation.FieldID, resumeeducation.FieldResumeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResumeEducation fields.
func (re *ResumeEducation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resumeeducation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				re.ID = *value
			}
		case resumeeducation.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				re.DeletedAt = value.Time
			}
		case resumeeducation.FieldResumeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field resume_id", values[i])
			} else if value != nil {
				re.ResumeID = *value
			}
		case resumeeducation.FieldSchool:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field school", values[i])
			} else if value.Valid {
				re.School = value.String
			}
		case resumeeducation.FieldDegree:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field degree", values[i])
			} else if value.Valid {
				re.Degree = value.String
			}
		case resumeeducation.FieldMajor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field major", values[i])
			} else if value.Valid {
				re.Major = value.String
			}
		case resumeeducation.FieldGpa:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field gpa", values[i])
			} else if value.Valid {
				re.Gpa = value.Float64
			}
		case resumeeducation.FieldUniversityTypes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field university_types", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &re.UniversityTypes); err != nil {
					return fmt.Errorf("unmarshal field university_types: %w", err)
				}
			}
		case resumeeducation.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				re.StartDate = value.Time
			}
		case resumeeducation.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				re.EndDate = value.Time
			}
		case resumeeducation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				re.CreatedAt = value.Time
			}
		case resumeeducation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				re.UpdatedAt = value.Time
			}
		default:
			re.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ResumeEducation.
// This includes values selected through modifiers, order, etc.
func (re *ResumeEducation) Value(name string) (ent.Value, error) {
	return re.selectValues.Get(name)
}

// QueryResume queries the "resume" edge of the ResumeEducation entity.
func (re *ResumeEducation) QueryResume() *ResumeQuery {
	return NewResumeEducationClient(re.config).QueryResume(re)
}

// Update returns a builder for updating this ResumeEducation.
// Note that you need to call ResumeEducation.Unwrap() before calling this method if this ResumeEducation
// was returned from a transaction, and the transaction was committed or rolled back.
func (re *ResumeEducation) Update() *ResumeEducationUpdateOne {
	return NewResumeEducationClient(re.config).UpdateOne(re)
}

// Unwrap unwraps the ResumeEducation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (re *ResumeEducation) Unwrap() *ResumeEducation {
	_tx, ok := re.config.driver.(*txDriver)
	if !ok {
		panic("db: ResumeEducation is not a transactional entity")
	}
	re.config.driver = _tx.drv
	return re
}

// String implements the fmt.Stringer.
func (re *ResumeEducation) String() string {
	var builder strings.Builder
	builder.WriteString("ResumeEducation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", re.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(re.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("resume_id=")
	builder.WriteString(fmt.Sprintf("%v", re.ResumeID))
	builder.WriteString(", ")
	builder.WriteString("school=")
	builder.WriteString(re.School)
	builder.WriteString(", ")
	builder.WriteString("degree=")
	builder.WriteString(re.Degree)
	builder.WriteString(", ")
	builder.WriteString("major=")
	builder.WriteString(re.Major)
	builder.WriteString(", ")
	builder.WriteString("gpa=")
	builder.WriteString(fmt.Sprintf("%v", re.Gpa))
	builder.WriteString(", ")
	builder.WriteString("university_types=")
	builder.WriteString(fmt.Sprintf("%v", re.UniversityTypes))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(re.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(re.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(re.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(re.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ResumeEducations is a parsable slice of ResumeEducation.
type ResumeEducations []*ResumeEducation
