// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/chaitin/WhaleHire/backend/db/weighttemplate"
	"github.com/google/uuid"
)

// WeightTemplateCreate is the builder for creating a WeightTemplate entity.
type WeightTemplateCreate struct {
	config
	mutation *WeightTemplateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (wtc *WeightTemplateCreate) SetDeletedAt(t time.Time) *WeightTemplateCreate {
	wtc.mutation.SetDeletedAt(t)
	return wtc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wtc *WeightTemplateCreate) SetNillableDeletedAt(t *time.Time) *WeightTemplateCreate {
	if t != nil {
		wtc.SetDeletedAt(*t)
	}
	return wtc
}

// SetName sets the "name" field.
func (wtc *WeightTemplateCreate) SetName(s string) *WeightTemplateCreate {
	wtc.mutation.SetName(s)
	return wtc
}

// SetDescription sets the "description" field.
func (wtc *WeightTemplateCreate) SetDescription(s string) *WeightTemplateCreate {
	wtc.mutation.SetDescription(s)
	return wtc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wtc *WeightTemplateCreate) SetNillableDescription(s *string) *WeightTemplateCreate {
	if s != nil {
		wtc.SetDescription(*s)
	}
	return wtc
}

// SetWeights sets the "weights" field.
func (wtc *WeightTemplateCreate) SetWeights(m map[string]interface{}) *WeightTemplateCreate {
	wtc.mutation.SetWeights(m)
	return wtc
}

// SetCreatedBy sets the "created_by" field.
func (wtc *WeightTemplateCreate) SetCreatedBy(u uuid.UUID) *WeightTemplateCreate {
	wtc.mutation.SetCreatedBy(u)
	return wtc
}

// SetCreatedAt sets the "created_at" field.
func (wtc *WeightTemplateCreate) SetCreatedAt(t time.Time) *WeightTemplateCreate {
	wtc.mutation.SetCreatedAt(t)
	return wtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wtc *WeightTemplateCreate) SetNillableCreatedAt(t *time.Time) *WeightTemplateCreate {
	if t != nil {
		wtc.SetCreatedAt(*t)
	}
	return wtc
}

// SetUpdatedAt sets the "updated_at" field.
func (wtc *WeightTemplateCreate) SetUpdatedAt(t time.Time) *WeightTemplateCreate {
	wtc.mutation.SetUpdatedAt(t)
	return wtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wtc *WeightTemplateCreate) SetNillableUpdatedAt(t *time.Time) *WeightTemplateCreate {
	if t != nil {
		wtc.SetUpdatedAt(*t)
	}
	return wtc
}

// SetID sets the "id" field.
func (wtc *WeightTemplateCreate) SetID(u uuid.UUID) *WeightTemplateCreate {
	wtc.mutation.SetID(u)
	return wtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wtc *WeightTemplateCreate) SetNillableID(u *uuid.UUID) *WeightTemplateCreate {
	if u != nil {
		wtc.SetID(*u)
	}
	return wtc
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (wtc *WeightTemplateCreate) SetCreatorID(id uuid.UUID) *WeightTemplateCreate {
	wtc.mutation.SetCreatorID(id)
	return wtc
}

// SetCreator sets the "creator" edge to the User entity.
func (wtc *WeightTemplateCreate) SetCreator(u *User) *WeightTemplateCreate {
	return wtc.SetCreatorID(u.ID)
}

// Mutation returns the WeightTemplateMutation object of the builder.
func (wtc *WeightTemplateCreate) Mutation() *WeightTemplateMutation {
	return wtc.mutation
}

// Save creates the WeightTemplate in the database.
func (wtc *WeightTemplateCreate) Save(ctx context.Context) (*WeightTemplate, error) {
	if err := wtc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wtc.sqlSave, wtc.mutation, wtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wtc *WeightTemplateCreate) SaveX(ctx context.Context) *WeightTemplate {
	v, err := wtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wtc *WeightTemplateCreate) Exec(ctx context.Context) error {
	_, err := wtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtc *WeightTemplateCreate) ExecX(ctx context.Context) {
	if err := wtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wtc *WeightTemplateCreate) defaults() error {
	if _, ok := wtc.mutation.CreatedAt(); !ok {
		if weighttemplate.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized weighttemplate.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := weighttemplate.DefaultCreatedAt()
		wtc.mutation.SetCreatedAt(v)
	}
	if _, ok := wtc.mutation.UpdatedAt(); !ok {
		if weighttemplate.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized weighttemplate.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := weighttemplate.DefaultUpdatedAt()
		wtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wtc.mutation.ID(); !ok {
		if weighttemplate.DefaultID == nil {
			return fmt.Errorf("db: uninitialized weighttemplate.DefaultID (forgotten import db/runtime?)")
		}
		v := weighttemplate.DefaultID()
		wtc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wtc *WeightTemplateCreate) check() error {
	if _, ok := wtc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "WeightTemplate.name"`)}
	}
	if v, ok := wtc.mutation.Name(); ok {
		if err := weighttemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "WeightTemplate.name": %w`, err)}
		}
	}
	if v, ok := wtc.mutation.Description(); ok {
		if err := weighttemplate.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`db: validator failed for field "WeightTemplate.description": %w`, err)}
		}
	}
	if _, ok := wtc.mutation.Weights(); !ok {
		return &ValidationError{Name: "weights", err: errors.New(`db: missing required field "WeightTemplate.weights"`)}
	}
	if _, ok := wtc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`db: missing required field "WeightTemplate.created_by"`)}
	}
	if _, ok := wtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "WeightTemplate.created_at"`)}
	}
	if _, ok := wtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "WeightTemplate.updated_at"`)}
	}
	if len(wtc.mutation.CreatorIDs()) == 0 {
		return &ValidationError{Name: "creator", err: errors.New(`db: missing required edge "WeightTemplate.creator"`)}
	}
	return nil
}

func (wtc *WeightTemplateCreate) sqlSave(ctx context.Context) (*WeightTemplate, error) {
	if err := wtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wtc.mutation.id = &_node.ID
	wtc.mutation.done = true
	return _node, nil
}

func (wtc *WeightTemplateCreate) createSpec() (*WeightTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &WeightTemplate{config: wtc.config}
		_spec = sqlgraph.NewCreateSpec(weighttemplate.Table, sqlgraph.NewFieldSpec(weighttemplate.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = wtc.conflict
	if id, ok := wtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wtc.mutation.DeletedAt(); ok {
		_spec.SetField(weighttemplate.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := wtc.mutation.Name(); ok {
		_spec.SetField(weighttemplate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wtc.mutation.Description(); ok {
		_spec.SetField(weighttemplate.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := wtc.mutation.Weights(); ok {
		_spec.SetField(weighttemplate.FieldWeights, field.TypeJSON, value)
		_node.Weights = value
	}
	if value, ok := wtc.mutation.CreatedAt(); ok {
		_spec.SetField(weighttemplate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wtc.mutation.UpdatedAt(); ok {
		_spec.SetField(weighttemplate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := wtc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   weighttemplate.CreatorTable,
			Columns: []string{weighttemplate.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WeightTemplate.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WeightTemplateUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (wtc *WeightTemplateCreate) OnConflict(opts ...sql.ConflictOption) *WeightTemplateUpsertOne {
	wtc.conflict = opts
	return &WeightTemplateUpsertOne{
		create: wtc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WeightTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wtc *WeightTemplateCreate) OnConflictColumns(columns ...string) *WeightTemplateUpsertOne {
	wtc.conflict = append(wtc.conflict, sql.ConflictColumns(columns...))
	return &WeightTemplateUpsertOne{
		create: wtc,
	}
}

type (
	// WeightTemplateUpsertOne is the builder for "upsert"-ing
	//  one WeightTemplate node.
	WeightTemplateUpsertOne struct {
		create *WeightTemplateCreate
	}

	// WeightTemplateUpsert is the "OnConflict" setter.
	WeightTemplateUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *WeightTemplateUpsert) SetDeletedAt(v time.Time) *WeightTemplateUpsert {
	u.Set(weighttemplate.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WeightTemplateUpsert) UpdateDeletedAt() *WeightTemplateUpsert {
	u.SetExcluded(weighttemplate.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WeightTemplateUpsert) ClearDeletedAt() *WeightTemplateUpsert {
	u.SetNull(weighttemplate.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *WeightTemplateUpsert) SetName(v string) *WeightTemplateUpsert {
	u.Set(weighttemplate.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WeightTemplateUpsert) UpdateName() *WeightTemplateUpsert {
	u.SetExcluded(weighttemplate.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *WeightTemplateUpsert) SetDescription(v string) *WeightTemplateUpsert {
	u.Set(weighttemplate.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WeightTemplateUpsert) UpdateDescription() *WeightTemplateUpsert {
	u.SetExcluded(weighttemplate.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *WeightTemplateUpsert) ClearDescription() *WeightTemplateUpsert {
	u.SetNull(weighttemplate.FieldDescription)
	return u
}

// SetWeights sets the "weights" field.
func (u *WeightTemplateUpsert) SetWeights(v map[string]interface{}) *WeightTemplateUpsert {
	u.Set(weighttemplate.FieldWeights, v)
	return u
}

// UpdateWeights sets the "weights" field to the value that was provided on create.
func (u *WeightTemplateUpsert) UpdateWeights() *WeightTemplateUpsert {
	u.SetExcluded(weighttemplate.FieldWeights)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *WeightTemplateUpsert) SetCreatedBy(v uuid.UUID) *WeightTemplateUpsert {
	u.Set(weighttemplate.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *WeightTemplateUpsert) UpdateCreatedBy() *WeightTemplateUpsert {
	u.SetExcluded(weighttemplate.FieldCreatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WeightTemplateUpsert) SetUpdatedAt(v time.Time) *WeightTemplateUpsert {
	u.Set(weighttemplate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WeightTemplateUpsert) UpdateUpdatedAt() *WeightTemplateUpsert {
	u.SetExcluded(weighttemplate.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WeightTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(weighttemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WeightTemplateUpsertOne) UpdateNewValues() *WeightTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(weighttemplate.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(weighttemplate.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WeightTemplate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WeightTemplateUpsertOne) Ignore() *WeightTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WeightTemplateUpsertOne) DoNothing() *WeightTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WeightTemplateCreate.OnConflict
// documentation for more info.
func (u *WeightTemplateUpsertOne) Update(set func(*WeightTemplateUpsert)) *WeightTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WeightTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WeightTemplateUpsertOne) SetDeletedAt(v time.Time) *WeightTemplateUpsertOne {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WeightTemplateUpsertOne) UpdateDeletedAt() *WeightTemplateUpsertOne {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WeightTemplateUpsertOne) ClearDeletedAt() *WeightTemplateUpsertOne {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *WeightTemplateUpsertOne) SetName(v string) *WeightTemplateUpsertOne {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WeightTemplateUpsertOne) UpdateName() *WeightTemplateUpsertOne {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *WeightTemplateUpsertOne) SetDescription(v string) *WeightTemplateUpsertOne {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WeightTemplateUpsertOne) UpdateDescription() *WeightTemplateUpsertOne {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *WeightTemplateUpsertOne) ClearDescription() *WeightTemplateUpsertOne {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.ClearDescription()
	})
}

// SetWeights sets the "weights" field.
func (u *WeightTemplateUpsertOne) SetWeights(v map[string]interface{}) *WeightTemplateUpsertOne {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.SetWeights(v)
	})
}

// UpdateWeights sets the "weights" field to the value that was provided on create.
func (u *WeightTemplateUpsertOne) UpdateWeights() *WeightTemplateUpsertOne {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.UpdateWeights()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *WeightTemplateUpsertOne) SetCreatedBy(v uuid.UUID) *WeightTemplateUpsertOne {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *WeightTemplateUpsertOne) UpdateCreatedBy() *WeightTemplateUpsertOne {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WeightTemplateUpsertOne) SetUpdatedAt(v time.Time) *WeightTemplateUpsertOne {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WeightTemplateUpsertOne) UpdateUpdatedAt() *WeightTemplateUpsertOne {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *WeightTemplateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for WeightTemplateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WeightTemplateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WeightTemplateUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: WeightTemplateUpsertOne.ID is not supported by MySQL driver. Use WeightTemplateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WeightTemplateUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WeightTemplateCreateBulk is the builder for creating many WeightTemplate entities in bulk.
type WeightTemplateCreateBulk struct {
	config
	err      error
	builders []*WeightTemplateCreate
	conflict []sql.ConflictOption
}

// Save creates the WeightTemplate entities in the database.
func (wtcb *WeightTemplateCreateBulk) Save(ctx context.Context) ([]*WeightTemplate, error) {
	if wtcb.err != nil {
		return nil, wtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wtcb.builders))
	nodes := make([]*WeightTemplate, len(wtcb.builders))
	mutators := make([]Mutator, len(wtcb.builders))
	for i := range wtcb.builders {
		func(i int, root context.Context) {
			builder := wtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WeightTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wtcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wtcb *WeightTemplateCreateBulk) SaveX(ctx context.Context) []*WeightTemplate {
	v, err := wtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wtcb *WeightTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := wtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtcb *WeightTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := wtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WeightTemplate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WeightTemplateUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (wtcb *WeightTemplateCreateBulk) OnConflict(opts ...sql.ConflictOption) *WeightTemplateUpsertBulk {
	wtcb.conflict = opts
	return &WeightTemplateUpsertBulk{
		create: wtcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WeightTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wtcb *WeightTemplateCreateBulk) OnConflictColumns(columns ...string) *WeightTemplateUpsertBulk {
	wtcb.conflict = append(wtcb.conflict, sql.ConflictColumns(columns...))
	return &WeightTemplateUpsertBulk{
		create: wtcb,
	}
}

// WeightTemplateUpsertBulk is the builder for "upsert"-ing
// a bulk of WeightTemplate nodes.
type WeightTemplateUpsertBulk struct {
	create *WeightTemplateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WeightTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(weighttemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WeightTemplateUpsertBulk) UpdateNewValues() *WeightTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(weighttemplate.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(weighttemplate.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WeightTemplate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WeightTemplateUpsertBulk) Ignore() *WeightTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WeightTemplateUpsertBulk) DoNothing() *WeightTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WeightTemplateCreateBulk.OnConflict
// documentation for more info.
func (u *WeightTemplateUpsertBulk) Update(set func(*WeightTemplateUpsert)) *WeightTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WeightTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WeightTemplateUpsertBulk) SetDeletedAt(v time.Time) *WeightTemplateUpsertBulk {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WeightTemplateUpsertBulk) UpdateDeletedAt() *WeightTemplateUpsertBulk {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WeightTemplateUpsertBulk) ClearDeletedAt() *WeightTemplateUpsertBulk {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *WeightTemplateUpsertBulk) SetName(v string) *WeightTemplateUpsertBulk {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WeightTemplateUpsertBulk) UpdateName() *WeightTemplateUpsertBulk {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *WeightTemplateUpsertBulk) SetDescription(v string) *WeightTemplateUpsertBulk {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WeightTemplateUpsertBulk) UpdateDescription() *WeightTemplateUpsertBulk {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *WeightTemplateUpsertBulk) ClearDescription() *WeightTemplateUpsertBulk {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.ClearDescription()
	})
}

// SetWeights sets the "weights" field.
func (u *WeightTemplateUpsertBulk) SetWeights(v map[string]interface{}) *WeightTemplateUpsertBulk {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.SetWeights(v)
	})
}

// UpdateWeights sets the "weights" field to the value that was provided on create.
func (u *WeightTemplateUpsertBulk) UpdateWeights() *WeightTemplateUpsertBulk {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.UpdateWeights()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *WeightTemplateUpsertBulk) SetCreatedBy(v uuid.UUID) *WeightTemplateUpsertBulk {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *WeightTemplateUpsertBulk) UpdateCreatedBy() *WeightTemplateUpsertBulk {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WeightTemplateUpsertBulk) SetUpdatedAt(v time.Time) *WeightTemplateUpsertBulk {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WeightTemplateUpsertBulk) UpdateUpdatedAt() *WeightTemplateUpsertBulk {
	return u.Update(func(s *WeightTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *WeightTemplateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the WeightTemplateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for WeightTemplateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WeightTemplateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
