// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/jobeducationrequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/google/uuid"
)

// JobEducationRequirementCreate is the builder for creating a JobEducationRequirement entity.
type JobEducationRequirementCreate struct {
	config
	mutation *JobEducationRequirementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (jerc *JobEducationRequirementCreate) SetDeletedAt(t time.Time) *JobEducationRequirementCreate {
	jerc.mutation.SetDeletedAt(t)
	return jerc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jerc *JobEducationRequirementCreate) SetNillableDeletedAt(t *time.Time) *JobEducationRequirementCreate {
	if t != nil {
		jerc.SetDeletedAt(*t)
	}
	return jerc
}

// SetJobID sets the "job_id" field.
func (jerc *JobEducationRequirementCreate) SetJobID(u uuid.UUID) *JobEducationRequirementCreate {
	jerc.mutation.SetJobID(u)
	return jerc
}

// SetEducationType sets the "education_type" field.
func (jerc *JobEducationRequirementCreate) SetEducationType(cet consts.JobEducationType) *JobEducationRequirementCreate {
	jerc.mutation.SetEducationType(cet)
	return jerc
}

// SetNillableEducationType sets the "education_type" field if the given value is not nil.
func (jerc *JobEducationRequirementCreate) SetNillableEducationType(cet *consts.JobEducationType) *JobEducationRequirementCreate {
	if cet != nil {
		jerc.SetEducationType(*cet)
	}
	return jerc
}

// SetCreatedAt sets the "created_at" field.
func (jerc *JobEducationRequirementCreate) SetCreatedAt(t time.Time) *JobEducationRequirementCreate {
	jerc.mutation.SetCreatedAt(t)
	return jerc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jerc *JobEducationRequirementCreate) SetNillableCreatedAt(t *time.Time) *JobEducationRequirementCreate {
	if t != nil {
		jerc.SetCreatedAt(*t)
	}
	return jerc
}

// SetUpdatedAt sets the "updated_at" field.
func (jerc *JobEducationRequirementCreate) SetUpdatedAt(t time.Time) *JobEducationRequirementCreate {
	jerc.mutation.SetUpdatedAt(t)
	return jerc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jerc *JobEducationRequirementCreate) SetNillableUpdatedAt(t *time.Time) *JobEducationRequirementCreate {
	if t != nil {
		jerc.SetUpdatedAt(*t)
	}
	return jerc
}

// SetID sets the "id" field.
func (jerc *JobEducationRequirementCreate) SetID(u uuid.UUID) *JobEducationRequirementCreate {
	jerc.mutation.SetID(u)
	return jerc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jerc *JobEducationRequirementCreate) SetNillableID(u *uuid.UUID) *JobEducationRequirementCreate {
	if u != nil {
		jerc.SetID(*u)
	}
	return jerc
}

// SetJob sets the "job" edge to the JobPosition entity.
func (jerc *JobEducationRequirementCreate) SetJob(j *JobPosition) *JobEducationRequirementCreate {
	return jerc.SetJobID(j.ID)
}

// Mutation returns the JobEducationRequirementMutation object of the builder.
func (jerc *JobEducationRequirementCreate) Mutation() *JobEducationRequirementMutation {
	return jerc.mutation
}

// Save creates the JobEducationRequirement in the database.
func (jerc *JobEducationRequirementCreate) Save(ctx context.Context) (*JobEducationRequirement, error) {
	if err := jerc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jerc.sqlSave, jerc.mutation, jerc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jerc *JobEducationRequirementCreate) SaveX(ctx context.Context) *JobEducationRequirement {
	v, err := jerc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jerc *JobEducationRequirementCreate) Exec(ctx context.Context) error {
	_, err := jerc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jerc *JobEducationRequirementCreate) ExecX(ctx context.Context) {
	if err := jerc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jerc *JobEducationRequirementCreate) defaults() error {
	if _, ok := jerc.mutation.CreatedAt(); !ok {
		if jobeducationrequirement.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized jobeducationrequirement.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := jobeducationrequirement.DefaultCreatedAt()
		jerc.mutation.SetCreatedAt(v)
	}
	if _, ok := jerc.mutation.UpdatedAt(); !ok {
		if jobeducationrequirement.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized jobeducationrequirement.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := jobeducationrequirement.DefaultUpdatedAt()
		jerc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jerc.mutation.ID(); !ok {
		if jobeducationrequirement.DefaultID == nil {
			return fmt.Errorf("db: uninitialized jobeducationrequirement.DefaultID (forgotten import db/runtime?)")
		}
		v := jobeducationrequirement.DefaultID()
		jerc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jerc *JobEducationRequirementCreate) check() error {
	if _, ok := jerc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job_id", err: errors.New(`db: missing required field "JobEducationRequirement.job_id"`)}
	}
	if _, ok := jerc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "JobEducationRequirement.created_at"`)}
	}
	if _, ok := jerc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "JobEducationRequirement.updated_at"`)}
	}
	if len(jerc.mutation.JobIDs()) == 0 {
		return &ValidationError{Name: "job", err: errors.New(`db: missing required edge "JobEducationRequirement.job"`)}
	}
	return nil
}

func (jerc *JobEducationRequirementCreate) sqlSave(ctx context.Context) (*JobEducationRequirement, error) {
	if err := jerc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jerc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jerc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	jerc.mutation.id = &_node.ID
	jerc.mutation.done = true
	return _node, nil
}

func (jerc *JobEducationRequirementCreate) createSpec() (*JobEducationRequirement, *sqlgraph.CreateSpec) {
	var (
		_node = &JobEducationRequirement{config: jerc.config}
		_spec = sqlgraph.NewCreateSpec(jobeducationrequirement.Table, sqlgraph.NewFieldSpec(jobeducationrequirement.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = jerc.conflict
	if id, ok := jerc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := jerc.mutation.DeletedAt(); ok {
		_spec.SetField(jobeducationrequirement.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := jerc.mutation.EducationType(); ok {
		_spec.SetField(jobeducationrequirement.FieldEducationType, field.TypeString, value)
		_node.EducationType = value
	}
	if value, ok := jerc.mutation.CreatedAt(); ok {
		_spec.SetField(jobeducationrequirement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jerc.mutation.UpdatedAt(); ok {
		_spec.SetField(jobeducationrequirement.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := jerc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobeducationrequirement.JobTable,
			Columns: []string{jobeducationrequirement.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.JobID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobEducationRequirement.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobEducationRequirementUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (jerc *JobEducationRequirementCreate) OnConflict(opts ...sql.ConflictOption) *JobEducationRequirementUpsertOne {
	jerc.conflict = opts
	return &JobEducationRequirementUpsertOne{
		create: jerc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobEducationRequirement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jerc *JobEducationRequirementCreate) OnConflictColumns(columns ...string) *JobEducationRequirementUpsertOne {
	jerc.conflict = append(jerc.conflict, sql.ConflictColumns(columns...))
	return &JobEducationRequirementUpsertOne{
		create: jerc,
	}
}

type (
	// JobEducationRequirementUpsertOne is the builder for "upsert"-ing
	//  one JobEducationRequirement node.
	JobEducationRequirementUpsertOne struct {
		create *JobEducationRequirementCreate
	}

	// JobEducationRequirementUpsert is the "OnConflict" setter.
	JobEducationRequirementUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *JobEducationRequirementUpsert) SetDeletedAt(v time.Time) *JobEducationRequirementUpsert {
	u.Set(jobeducationrequirement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobEducationRequirementUpsert) UpdateDeletedAt() *JobEducationRequirementUpsert {
	u.SetExcluded(jobeducationrequirement.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobEducationRequirementUpsert) ClearDeletedAt() *JobEducationRequirementUpsert {
	u.SetNull(jobeducationrequirement.FieldDeletedAt)
	return u
}

// SetJobID sets the "job_id" field.
func (u *JobEducationRequirementUpsert) SetJobID(v uuid.UUID) *JobEducationRequirementUpsert {
	u.Set(jobeducationrequirement.FieldJobID, v)
	return u
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *JobEducationRequirementUpsert) UpdateJobID() *JobEducationRequirementUpsert {
	u.SetExcluded(jobeducationrequirement.FieldJobID)
	return u
}

// SetEducationType sets the "education_type" field.
func (u *JobEducationRequirementUpsert) SetEducationType(v consts.JobEducationType) *JobEducationRequirementUpsert {
	u.Set(jobeducationrequirement.FieldEducationType, v)
	return u
}

// UpdateEducationType sets the "education_type" field to the value that was provided on create.
func (u *JobEducationRequirementUpsert) UpdateEducationType() *JobEducationRequirementUpsert {
	u.SetExcluded(jobeducationrequirement.FieldEducationType)
	return u
}

// ClearEducationType clears the value of the "education_type" field.
func (u *JobEducationRequirementUpsert) ClearEducationType() *JobEducationRequirementUpsert {
	u.SetNull(jobeducationrequirement.FieldEducationType)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobEducationRequirementUpsert) SetUpdatedAt(v time.Time) *JobEducationRequirementUpsert {
	u.Set(jobeducationrequirement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobEducationRequirementUpsert) UpdateUpdatedAt() *JobEducationRequirementUpsert {
	u.SetExcluded(jobeducationrequirement.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.JobEducationRequirement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobeducationrequirement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobEducationRequirementUpsertOne) UpdateNewValues() *JobEducationRequirementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(jobeducationrequirement.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(jobeducationrequirement.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobEducationRequirement.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *JobEducationRequirementUpsertOne) Ignore() *JobEducationRequirementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobEducationRequirementUpsertOne) DoNothing() *JobEducationRequirementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobEducationRequirementCreate.OnConflict
// documentation for more info.
func (u *JobEducationRequirementUpsertOne) Update(set func(*JobEducationRequirementUpsert)) *JobEducationRequirementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobEducationRequirementUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *JobEducationRequirementUpsertOne) SetDeletedAt(v time.Time) *JobEducationRequirementUpsertOne {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobEducationRequirementUpsertOne) UpdateDeletedAt() *JobEducationRequirementUpsertOne {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobEducationRequirementUpsertOne) ClearDeletedAt() *JobEducationRequirementUpsertOne {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.ClearDeletedAt()
	})
}

// SetJobID sets the "job_id" field.
func (u *JobEducationRequirementUpsertOne) SetJobID(v uuid.UUID) *JobEducationRequirementUpsertOne {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.SetJobID(v)
	})
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *JobEducationRequirementUpsertOne) UpdateJobID() *JobEducationRequirementUpsertOne {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.UpdateJobID()
	})
}

// SetEducationType sets the "education_type" field.
func (u *JobEducationRequirementUpsertOne) SetEducationType(v consts.JobEducationType) *JobEducationRequirementUpsertOne {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.SetEducationType(v)
	})
}

// UpdateEducationType sets the "education_type" field to the value that was provided on create.
func (u *JobEducationRequirementUpsertOne) UpdateEducationType() *JobEducationRequirementUpsertOne {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.UpdateEducationType()
	})
}

// ClearEducationType clears the value of the "education_type" field.
func (u *JobEducationRequirementUpsertOne) ClearEducationType() *JobEducationRequirementUpsertOne {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.ClearEducationType()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobEducationRequirementUpsertOne) SetUpdatedAt(v time.Time) *JobEducationRequirementUpsertOne {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobEducationRequirementUpsertOne) UpdateUpdatedAt() *JobEducationRequirementUpsertOne {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *JobEducationRequirementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for JobEducationRequirementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobEducationRequirementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *JobEducationRequirementUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: JobEducationRequirementUpsertOne.ID is not supported by MySQL driver. Use JobEducationRequirementUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *JobEducationRequirementUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// JobEducationRequirementCreateBulk is the builder for creating many JobEducationRequirement entities in bulk.
type JobEducationRequirementCreateBulk struct {
	config
	err      error
	builders []*JobEducationRequirementCreate
	conflict []sql.ConflictOption
}

// Save creates the JobEducationRequirement entities in the database.
func (jercb *JobEducationRequirementCreateBulk) Save(ctx context.Context) ([]*JobEducationRequirement, error) {
	if jercb.err != nil {
		return nil, jercb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jercb.builders))
	nodes := make([]*JobEducationRequirement, len(jercb.builders))
	mutators := make([]Mutator, len(jercb.builders))
	for i := range jercb.builders {
		func(i int, root context.Context) {
			builder := jercb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobEducationRequirementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jercb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = jercb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jercb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jercb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jercb *JobEducationRequirementCreateBulk) SaveX(ctx context.Context) []*JobEducationRequirement {
	v, err := jercb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jercb *JobEducationRequirementCreateBulk) Exec(ctx context.Context) error {
	_, err := jercb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jercb *JobEducationRequirementCreateBulk) ExecX(ctx context.Context) {
	if err := jercb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobEducationRequirement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobEducationRequirementUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (jercb *JobEducationRequirementCreateBulk) OnConflict(opts ...sql.ConflictOption) *JobEducationRequirementUpsertBulk {
	jercb.conflict = opts
	return &JobEducationRequirementUpsertBulk{
		create: jercb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobEducationRequirement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jercb *JobEducationRequirementCreateBulk) OnConflictColumns(columns ...string) *JobEducationRequirementUpsertBulk {
	jercb.conflict = append(jercb.conflict, sql.ConflictColumns(columns...))
	return &JobEducationRequirementUpsertBulk{
		create: jercb,
	}
}

// JobEducationRequirementUpsertBulk is the builder for "upsert"-ing
// a bulk of JobEducationRequirement nodes.
type JobEducationRequirementUpsertBulk struct {
	create *JobEducationRequirementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.JobEducationRequirement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobeducationrequirement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobEducationRequirementUpsertBulk) UpdateNewValues() *JobEducationRequirementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(jobeducationrequirement.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(jobeducationrequirement.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobEducationRequirement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *JobEducationRequirementUpsertBulk) Ignore() *JobEducationRequirementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobEducationRequirementUpsertBulk) DoNothing() *JobEducationRequirementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobEducationRequirementCreateBulk.OnConflict
// documentation for more info.
func (u *JobEducationRequirementUpsertBulk) Update(set func(*JobEducationRequirementUpsert)) *JobEducationRequirementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobEducationRequirementUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *JobEducationRequirementUpsertBulk) SetDeletedAt(v time.Time) *JobEducationRequirementUpsertBulk {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobEducationRequirementUpsertBulk) UpdateDeletedAt() *JobEducationRequirementUpsertBulk {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobEducationRequirementUpsertBulk) ClearDeletedAt() *JobEducationRequirementUpsertBulk {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.ClearDeletedAt()
	})
}

// SetJobID sets the "job_id" field.
func (u *JobEducationRequirementUpsertBulk) SetJobID(v uuid.UUID) *JobEducationRequirementUpsertBulk {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.SetJobID(v)
	})
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *JobEducationRequirementUpsertBulk) UpdateJobID() *JobEducationRequirementUpsertBulk {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.UpdateJobID()
	})
}

// SetEducationType sets the "education_type" field.
func (u *JobEducationRequirementUpsertBulk) SetEducationType(v consts.JobEducationType) *JobEducationRequirementUpsertBulk {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.SetEducationType(v)
	})
}

// UpdateEducationType sets the "education_type" field to the value that was provided on create.
func (u *JobEducationRequirementUpsertBulk) UpdateEducationType() *JobEducationRequirementUpsertBulk {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.UpdateEducationType()
	})
}

// ClearEducationType clears the value of the "education_type" field.
func (u *JobEducationRequirementUpsertBulk) ClearEducationType() *JobEducationRequirementUpsertBulk {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.ClearEducationType()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobEducationRequirementUpsertBulk) SetUpdatedAt(v time.Time) *JobEducationRequirementUpsertBulk {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobEducationRequirementUpsertBulk) UpdateUpdatedAt() *JobEducationRequirementUpsertBulk {
	return u.Update(func(s *JobEducationRequirementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *JobEducationRequirementUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the JobEducationRequirementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for JobEducationRequirementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobEducationRequirementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
