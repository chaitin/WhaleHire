// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/screeningtask"
	"github.com/chaitin/WhaleHire/backend/db/screeningtaskresume"
	"github.com/google/uuid"
)

// ScreeningTaskResume is the model entity for the ScreeningTaskResume schema.
type ScreeningTaskResume struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID uuid.UUID `json:"task_id,omitempty"`
	// ResumeID holds the value of the "resume_id" field.
	ResumeID uuid.UUID `json:"resume_id,omitempty"`
	// pending/running/completed/failed
	Status string `json:"status,omitempty"`
	// 错误信息
	ErrorMessage string `json:"error_message,omitempty"`
	// 排名（任务内）
	Ranking int `json:"ranking,omitempty"`
	// 综合分快照（任务维度）
	Score float64 `json:"score,omitempty"`
	// 处理完成时间
	ProcessedAt time.Time `json:"processed_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScreeningTaskResumeQuery when eager-loading is set.
	Edges        ScreeningTaskResumeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScreeningTaskResumeEdges holds the relations/edges for other nodes in the graph.
type ScreeningTaskResumeEdges struct {
	// Task holds the value of the task edge.
	Task *ScreeningTask `json:"task,omitempty"`
	// Resume holds the value of the resume edge.
	Resume *Resume `json:"resume,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScreeningTaskResumeEdges) TaskOrErr() (*ScreeningTask, error) {
	if e.Task != nil {
		return e.Task, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: screeningtask.Label}
	}
	return nil, &NotLoadedError{edge: "task"}
}

// ResumeOrErr returns the Resume value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScreeningTaskResumeEdges) ResumeOrErr() (*Resume, error) {
	if e.Resume != nil {
		return e.Resume, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: resume.Label}
	}
	return nil, &NotLoadedError{edge: "resume"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScreeningTaskResume) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case screeningtaskresume.FieldScore:
			values[i] = new(sql.NullFloat64)
		case screeningtaskresume.FieldRanking:
			values[i] = new(sql.NullInt64)
		case screeningtaskresume.FieldStatus, screeningtaskresume.FieldErrorMessage:
			values[i] = new(sql.NullString)
		case screeningtaskresume.FieldDeletedAt, screeningtaskresume.FieldProcessedAt, screeningtaskresume.FieldCreatedAt, screeningtaskresume.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case screeningtaskresume.FieldID, screeningtaskresume.FieldTaskID, screeningtaskresume.FieldResumeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScreeningTaskResume fields.
func (str *ScreeningTaskResume) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case screeningtaskresume.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				str.ID = *value
			}
		case screeningtaskresume.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				str.DeletedAt = value.Time
			}
		case screeningtaskresume.FieldTaskID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value != nil {
				str.TaskID = *value
			}
		case screeningtaskresume.FieldResumeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field resume_id", values[i])
			} else if value != nil {
				str.ResumeID = *value
			}
		case screeningtaskresume.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				str.Status = value.String
			}
		case screeningtaskresume.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				str.ErrorMessage = value.String
			}
		case screeningtaskresume.FieldRanking:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ranking", values[i])
			} else if value.Valid {
				str.Ranking = int(value.Int64)
			}
		case screeningtaskresume.FieldScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				str.Score = value.Float64
			}
		case screeningtaskresume.FieldProcessedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field processed_at", values[i])
			} else if value.Valid {
				str.ProcessedAt = value.Time
			}
		case screeningtaskresume.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				str.CreatedAt = value.Time
			}
		case screeningtaskresume.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				str.UpdatedAt = value.Time
			}
		default:
			str.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScreeningTaskResume.
// This includes values selected through modifiers, order, etc.
func (str *ScreeningTaskResume) Value(name string) (ent.Value, error) {
	return str.selectValues.Get(name)
}

// QueryTask queries the "task" edge of the ScreeningTaskResume entity.
func (str *ScreeningTaskResume) QueryTask() *ScreeningTaskQuery {
	return NewScreeningTaskResumeClient(str.config).QueryTask(str)
}

// QueryResume queries the "resume" edge of the ScreeningTaskResume entity.
func (str *ScreeningTaskResume) QueryResume() *ResumeQuery {
	return NewScreeningTaskResumeClient(str.config).QueryResume(str)
}

// Update returns a builder for updating this ScreeningTaskResume.
// Note that you need to call ScreeningTaskResume.Unwrap() before calling this method if this ScreeningTaskResume
// was returned from a transaction, and the transaction was committed or rolled back.
func (str *ScreeningTaskResume) Update() *ScreeningTaskResumeUpdateOne {
	return NewScreeningTaskResumeClient(str.config).UpdateOne(str)
}

// Unwrap unwraps the ScreeningTaskResume entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (str *ScreeningTaskResume) Unwrap() *ScreeningTaskResume {
	_tx, ok := str.config.driver.(*txDriver)
	if !ok {
		panic("db: ScreeningTaskResume is not a transactional entity")
	}
	str.config.driver = _tx.drv
	return str
}

// String implements the fmt.Stringer.
func (str *ScreeningTaskResume) String() string {
	var builder strings.Builder
	builder.WriteString("ScreeningTaskResume(")
	builder.WriteString(fmt.Sprintf("id=%v, ", str.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(str.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", str.TaskID))
	builder.WriteString(", ")
	builder.WriteString("resume_id=")
	builder.WriteString(fmt.Sprintf("%v", str.ResumeID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(str.Status)
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(str.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("ranking=")
	builder.WriteString(fmt.Sprintf("%v", str.Ranking))
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", str.Score))
	builder.WriteString(", ")
	builder.WriteString("processed_at=")
	builder.WriteString(str.ProcessedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(str.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(str.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ScreeningTaskResumes is a parsable slice of ScreeningTaskResume.
type ScreeningTaskResumes []*ScreeningTaskResume
