// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/chaitin/WhaleHire/backend/db"
)

// The AdminFunc type is an adapter to allow the use of ordinary
// function as Admin mutator.
type AdminFunc func(context.Context, *db.AdminMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f AdminFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.AdminMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.AdminMutation", m)
}

// The AdminLoginHistoryFunc type is an adapter to allow the use of ordinary
// function as AdminLoginHistory mutator.
type AdminLoginHistoryFunc func(context.Context, *db.AdminLoginHistoryMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f AdminLoginHistoryFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.AdminLoginHistoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.AdminLoginHistoryMutation", m)
}

// The AdminRoleFunc type is an adapter to allow the use of ordinary
// function as AdminRole mutator.
type AdminRoleFunc func(context.Context, *db.AdminRoleMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f AdminRoleFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.AdminRoleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.AdminRoleMutation", m)
}

// The AttachmentFunc type is an adapter to allow the use of ordinary
// function as Attachment mutator.
type AttachmentFunc func(context.Context, *db.AttachmentMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f AttachmentFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.AttachmentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.AttachmentMutation", m)
}

// The AuditLogFunc type is an adapter to allow the use of ordinary
// function as AuditLog mutator.
type AuditLogFunc func(context.Context, *db.AuditLogMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f AuditLogFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.AuditLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.AuditLogMutation", m)
}

// The ConversationFunc type is an adapter to allow the use of ordinary
// function as Conversation mutator.
type ConversationFunc func(context.Context, *db.ConversationMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ConversationFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ConversationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ConversationMutation", m)
}

// The DepartmentFunc type is an adapter to allow the use of ordinary
// function as Department mutator.
type DepartmentFunc func(context.Context, *db.DepartmentMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f DepartmentFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.DepartmentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.DepartmentMutation", m)
}

// The JobEducationRequirementFunc type is an adapter to allow the use of ordinary
// function as JobEducationRequirement mutator.
type JobEducationRequirementFunc func(context.Context, *db.JobEducationRequirementMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f JobEducationRequirementFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.JobEducationRequirementMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.JobEducationRequirementMutation", m)
}

// The JobExperienceRequirementFunc type is an adapter to allow the use of ordinary
// function as JobExperienceRequirement mutator.
type JobExperienceRequirementFunc func(context.Context, *db.JobExperienceRequirementMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f JobExperienceRequirementFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.JobExperienceRequirementMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.JobExperienceRequirementMutation", m)
}

// The JobIndustryRequirementFunc type is an adapter to allow the use of ordinary
// function as JobIndustryRequirement mutator.
type JobIndustryRequirementFunc func(context.Context, *db.JobIndustryRequirementMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f JobIndustryRequirementFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.JobIndustryRequirementMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.JobIndustryRequirementMutation", m)
}

// The JobPositionFunc type is an adapter to allow the use of ordinary
// function as JobPosition mutator.
type JobPositionFunc func(context.Context, *db.JobPositionMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f JobPositionFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.JobPositionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.JobPositionMutation", m)
}

// The JobResponsibilityFunc type is an adapter to allow the use of ordinary
// function as JobResponsibility mutator.
type JobResponsibilityFunc func(context.Context, *db.JobResponsibilityMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f JobResponsibilityFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.JobResponsibilityMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.JobResponsibilityMutation", m)
}

// The JobSkillFunc type is an adapter to allow the use of ordinary
// function as JobSkill mutator.
type JobSkillFunc func(context.Context, *db.JobSkillMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f JobSkillFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.JobSkillMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.JobSkillMutation", m)
}

// The JobSkillMetaFunc type is an adapter to allow the use of ordinary
// function as JobSkillMeta mutator.
type JobSkillMetaFunc func(context.Context, *db.JobSkillMetaMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f JobSkillMetaFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.JobSkillMetaMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.JobSkillMetaMutation", m)
}

// The MessageFunc type is an adapter to allow the use of ordinary
// function as Message mutator.
type MessageFunc func(context.Context, *db.MessageMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f MessageFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.MessageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.MessageMutation", m)
}

// The ResumeFunc type is an adapter to allow the use of ordinary
// function as Resume mutator.
type ResumeFunc func(context.Context, *db.ResumeMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ResumeFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ResumeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ResumeMutation", m)
}

// The ResumeDocumentParseFunc type is an adapter to allow the use of ordinary
// function as ResumeDocumentParse mutator.
type ResumeDocumentParseFunc func(context.Context, *db.ResumeDocumentParseMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ResumeDocumentParseFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ResumeDocumentParseMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ResumeDocumentParseMutation", m)
}

// The ResumeEducationFunc type is an adapter to allow the use of ordinary
// function as ResumeEducation mutator.
type ResumeEducationFunc func(context.Context, *db.ResumeEducationMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ResumeEducationFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ResumeEducationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ResumeEducationMutation", m)
}

// The ResumeExperienceFunc type is an adapter to allow the use of ordinary
// function as ResumeExperience mutator.
type ResumeExperienceFunc func(context.Context, *db.ResumeExperienceMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ResumeExperienceFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ResumeExperienceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ResumeExperienceMutation", m)
}

// The ResumeJobApplicationFunc type is an adapter to allow the use of ordinary
// function as ResumeJobApplication mutator.
type ResumeJobApplicationFunc func(context.Context, *db.ResumeJobApplicationMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ResumeJobApplicationFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ResumeJobApplicationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ResumeJobApplicationMutation", m)
}

// The ResumeLogFunc type is an adapter to allow the use of ordinary
// function as ResumeLog mutator.
type ResumeLogFunc func(context.Context, *db.ResumeLogMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ResumeLogFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ResumeLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ResumeLogMutation", m)
}

// The ResumeProjectFunc type is an adapter to allow the use of ordinary
// function as ResumeProject mutator.
type ResumeProjectFunc func(context.Context, *db.ResumeProjectMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ResumeProjectFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ResumeProjectMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ResumeProjectMutation", m)
}

// The ResumeSkillFunc type is an adapter to allow the use of ordinary
// function as ResumeSkill mutator.
type ResumeSkillFunc func(context.Context, *db.ResumeSkillMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ResumeSkillFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ResumeSkillMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ResumeSkillMutation", m)
}

// The RoleFunc type is an adapter to allow the use of ordinary
// function as Role mutator.
type RoleFunc func(context.Context, *db.RoleMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f RoleFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.RoleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.RoleMutation", m)
}

// The ScreeningNodeRunFunc type is an adapter to allow the use of ordinary
// function as ScreeningNodeRun mutator.
type ScreeningNodeRunFunc func(context.Context, *db.ScreeningNodeRunMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ScreeningNodeRunFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ScreeningNodeRunMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ScreeningNodeRunMutation", m)
}

// The ScreeningResultFunc type is an adapter to allow the use of ordinary
// function as ScreeningResult mutator.
type ScreeningResultFunc func(context.Context, *db.ScreeningResultMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ScreeningResultFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ScreeningResultMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ScreeningResultMutation", m)
}

// The ScreeningRunMetricFunc type is an adapter to allow the use of ordinary
// function as ScreeningRunMetric mutator.
type ScreeningRunMetricFunc func(context.Context, *db.ScreeningRunMetricMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ScreeningRunMetricFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ScreeningRunMetricMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ScreeningRunMetricMutation", m)
}

// The ScreeningTaskFunc type is an adapter to allow the use of ordinary
// function as ScreeningTask mutator.
type ScreeningTaskFunc func(context.Context, *db.ScreeningTaskMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ScreeningTaskFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ScreeningTaskMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ScreeningTaskMutation", m)
}

// The ScreeningTaskResumeFunc type is an adapter to allow the use of ordinary
// function as ScreeningTaskResume mutator.
type ScreeningTaskResumeFunc func(context.Context, *db.ScreeningTaskResumeMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ScreeningTaskResumeFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ScreeningTaskResumeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ScreeningTaskResumeMutation", m)
}

// The SettingFunc type is an adapter to allow the use of ordinary
// function as Setting mutator.
type SettingFunc func(context.Context, *db.SettingMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f SettingFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.SettingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.SettingMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *db.UserMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.UserMutation", m)
}

// The UserIdentityFunc type is an adapter to allow the use of ordinary
// function as UserIdentity mutator.
type UserIdentityFunc func(context.Context, *db.UserIdentityMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f UserIdentityFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.UserIdentityMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.UserIdentityMutation", m)
}

// The UserLoginHistoryFunc type is an adapter to allow the use of ordinary
// function as UserLoginHistory mutator.
type UserLoginHistoryFunc func(context.Context, *db.UserLoginHistoryMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f UserLoginHistoryFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.UserLoginHistoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.UserLoginHistoryMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, db.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m db.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m db.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m db.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op db.Op) Condition {
	return func(_ context.Context, m db.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m db.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m db.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m db.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk db.Hook, cond Condition) db.Hook {
	return func(next db.Mutator) db.Mutator {
		return db.MutateFunc(func(ctx context.Context, m db.Mutation) (db.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, db.Delete|db.Create)
func On(hk db.Hook, op db.Op) db.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, db.Update|db.UpdateOne)
func Unless(hk db.Hook, op db.Op) db.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) db.Hook {
	return func(db.Mutator) db.Mutator {
		return db.MutateFunc(func(context.Context, db.Mutation) (db.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []db.Hook {
//		return []db.Hook{
//			Reject(db.Delete|db.Update),
//		}
//	}
func Reject(op db.Op) db.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []db.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...db.Hook) Chain {
	return Chain{append([]db.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() db.Hook {
	return func(mutator db.Mutator) db.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...db.Hook) Chain {
	newHooks := make([]db.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
