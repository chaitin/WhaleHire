// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxcursor"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxsetting"
	"github.com/google/uuid"
)

// ResumeMailboxCursor is the model entity for the ResumeMailboxCursor schema.
type ResumeMailboxCursor struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 邮箱配置ID
	MailboxID uuid.UUID `json:"mailbox_id,omitempty"`
	// 协议游标信息(IMAP UIDVALIDITY+UID 或 POP3 UIDL列表摘要)
	ProtocolCursor string `json:"protocol_cursor,omitempty"`
	// 最后处理的邮件ID，用于排查
	LastMessageID string `json:"last_message_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResumeMailboxCursorQuery when eager-loading is set.
	Edges        ResumeMailboxCursorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ResumeMailboxCursorEdges holds the relations/edges for other nodes in the graph.
type ResumeMailboxCursorEdges struct {
	// Mailbox holds the value of the mailbox edge.
	Mailbox *ResumeMailboxSetting `json:"mailbox,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MailboxOrErr returns the Mailbox value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResumeMailboxCursorEdges) MailboxOrErr() (*ResumeMailboxSetting, error) {
	if e.Mailbox != nil {
		return e.Mailbox, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: resumemailboxsetting.Label}
	}
	return nil, &NotLoadedError{edge: "mailbox"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResumeMailboxCursor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resumemailboxcursor.FieldProtocolCursor, resumemailboxcursor.FieldLastMessageID:
			values[i] = new(sql.NullString)
		case resumemailboxcursor.FieldDeletedAt, resumemailboxcursor.FieldCreatedAt, resumemailboxcursor.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case resumemailboxcursor.FieldID, resumemailboxcursor.FieldMailboxID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResumeMailboxCursor fields.
func (rmc *ResumeMailboxCursor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resumemailboxcursor.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rmc.ID = *value
			}
		case resumemailboxcursor.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rmc.DeletedAt = value.Time
			}
		case resumemailboxcursor.FieldMailboxID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field mailbox_id", values[i])
			} else if value != nil {
				rmc.MailboxID = *value
			}
		case resumemailboxcursor.FieldProtocolCursor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field protocol_cursor", values[i])
			} else if value.Valid {
				rmc.ProtocolCursor = value.String
			}
		case resumemailboxcursor.FieldLastMessageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_message_id", values[i])
			} else if value.Valid {
				rmc.LastMessageID = value.String
			}
		case resumemailboxcursor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rmc.CreatedAt = value.Time
			}
		case resumemailboxcursor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rmc.UpdatedAt = value.Time
			}
		default:
			rmc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ResumeMailboxCursor.
// This includes values selected through modifiers, order, etc.
func (rmc *ResumeMailboxCursor) Value(name string) (ent.Value, error) {
	return rmc.selectValues.Get(name)
}

// QueryMailbox queries the "mailbox" edge of the ResumeMailboxCursor entity.
func (rmc *ResumeMailboxCursor) QueryMailbox() *ResumeMailboxSettingQuery {
	return NewResumeMailboxCursorClient(rmc.config).QueryMailbox(rmc)
}

// Update returns a builder for updating this ResumeMailboxCursor.
// Note that you need to call ResumeMailboxCursor.Unwrap() before calling this method if this ResumeMailboxCursor
// was returned from a transaction, and the transaction was committed or rolled back.
func (rmc *ResumeMailboxCursor) Update() *ResumeMailboxCursorUpdateOne {
	return NewResumeMailboxCursorClient(rmc.config).UpdateOne(rmc)
}

// Unwrap unwraps the ResumeMailboxCursor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rmc *ResumeMailboxCursor) Unwrap() *ResumeMailboxCursor {
	_tx, ok := rmc.config.driver.(*txDriver)
	if !ok {
		panic("db: ResumeMailboxCursor is not a transactional entity")
	}
	rmc.config.driver = _tx.drv
	return rmc
}

// String implements the fmt.Stringer.
func (rmc *ResumeMailboxCursor) String() string {
	var builder strings.Builder
	builder.WriteString("ResumeMailboxCursor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rmc.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(rmc.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mailbox_id=")
	builder.WriteString(fmt.Sprintf("%v", rmc.MailboxID))
	builder.WriteString(", ")
	builder.WriteString("protocol_cursor=")
	builder.WriteString(rmc.ProtocolCursor)
	builder.WriteString(", ")
	builder.WriteString("last_message_id=")
	builder.WriteString(rmc.LastMessageID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rmc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rmc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ResumeMailboxCursors is a parsable slice of ResumeMailboxCursor.
type ResumeMailboxCursors []*ResumeMailboxCursor
