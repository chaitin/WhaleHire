// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxcursor"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxsetting"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxstatistic"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/google/uuid"
)

// ResumeMailboxSettingUpdate is the builder for updating ResumeMailboxSetting entities.
type ResumeMailboxSettingUpdate struct {
	config
	hooks     []Hook
	mutation  *ResumeMailboxSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ResumeMailboxSettingUpdate builder.
func (rmsu *ResumeMailboxSettingUpdate) Where(ps ...predicate.ResumeMailboxSetting) *ResumeMailboxSettingUpdate {
	rmsu.mutation.Where(ps...)
	return rmsu
}

// SetDeletedAt sets the "deleted_at" field.
func (rmsu *ResumeMailboxSettingUpdate) SetDeletedAt(t time.Time) *ResumeMailboxSettingUpdate {
	rmsu.mutation.SetDeletedAt(t)
	return rmsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rmsu *ResumeMailboxSettingUpdate) SetNillableDeletedAt(t *time.Time) *ResumeMailboxSettingUpdate {
	if t != nil {
		rmsu.SetDeletedAt(*t)
	}
	return rmsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rmsu *ResumeMailboxSettingUpdate) ClearDeletedAt() *ResumeMailboxSettingUpdate {
	rmsu.mutation.ClearDeletedAt()
	return rmsu
}

// SetName sets the "name" field.
func (rmsu *ResumeMailboxSettingUpdate) SetName(s string) *ResumeMailboxSettingUpdate {
	rmsu.mutation.SetName(s)
	return rmsu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rmsu *ResumeMailboxSettingUpdate) SetNillableName(s *string) *ResumeMailboxSettingUpdate {
	if s != nil {
		rmsu.SetName(*s)
	}
	return rmsu
}

// SetEmailAddress sets the "email_address" field.
func (rmsu *ResumeMailboxSettingUpdate) SetEmailAddress(s string) *ResumeMailboxSettingUpdate {
	rmsu.mutation.SetEmailAddress(s)
	return rmsu
}

// SetNillableEmailAddress sets the "email_address" field if the given value is not nil.
func (rmsu *ResumeMailboxSettingUpdate) SetNillableEmailAddress(s *string) *ResumeMailboxSettingUpdate {
	if s != nil {
		rmsu.SetEmailAddress(*s)
	}
	return rmsu
}

// SetProtocol sets the "protocol" field.
func (rmsu *ResumeMailboxSettingUpdate) SetProtocol(r resumemailboxsetting.Protocol) *ResumeMailboxSettingUpdate {
	rmsu.mutation.SetProtocol(r)
	return rmsu
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (rmsu *ResumeMailboxSettingUpdate) SetNillableProtocol(r *resumemailboxsetting.Protocol) *ResumeMailboxSettingUpdate {
	if r != nil {
		rmsu.SetProtocol(*r)
	}
	return rmsu
}

// SetHost sets the "host" field.
func (rmsu *ResumeMailboxSettingUpdate) SetHost(s string) *ResumeMailboxSettingUpdate {
	rmsu.mutation.SetHost(s)
	return rmsu
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (rmsu *ResumeMailboxSettingUpdate) SetNillableHost(s *string) *ResumeMailboxSettingUpdate {
	if s != nil {
		rmsu.SetHost(*s)
	}
	return rmsu
}

// SetPort sets the "port" field.
func (rmsu *ResumeMailboxSettingUpdate) SetPort(i int) *ResumeMailboxSettingUpdate {
	rmsu.mutation.ResetPort()
	rmsu.mutation.SetPort(i)
	return rmsu
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (rmsu *ResumeMailboxSettingUpdate) SetNillablePort(i *int) *ResumeMailboxSettingUpdate {
	if i != nil {
		rmsu.SetPort(*i)
	}
	return rmsu
}

// AddPort adds i to the "port" field.
func (rmsu *ResumeMailboxSettingUpdate) AddPort(i int) *ResumeMailboxSettingUpdate {
	rmsu.mutation.AddPort(i)
	return rmsu
}

// SetUseSsl sets the "use_ssl" field.
func (rmsu *ResumeMailboxSettingUpdate) SetUseSsl(b bool) *ResumeMailboxSettingUpdate {
	rmsu.mutation.SetUseSsl(b)
	return rmsu
}

// SetNillableUseSsl sets the "use_ssl" field if the given value is not nil.
func (rmsu *ResumeMailboxSettingUpdate) SetNillableUseSsl(b *bool) *ResumeMailboxSettingUpdate {
	if b != nil {
		rmsu.SetUseSsl(*b)
	}
	return rmsu
}

// SetFolder sets the "folder" field.
func (rmsu *ResumeMailboxSettingUpdate) SetFolder(s string) *ResumeMailboxSettingUpdate {
	rmsu.mutation.SetFolder(s)
	return rmsu
}

// SetNillableFolder sets the "folder" field if the given value is not nil.
func (rmsu *ResumeMailboxSettingUpdate) SetNillableFolder(s *string) *ResumeMailboxSettingUpdate {
	if s != nil {
		rmsu.SetFolder(*s)
	}
	return rmsu
}

// ClearFolder clears the value of the "folder" field.
func (rmsu *ResumeMailboxSettingUpdate) ClearFolder() *ResumeMailboxSettingUpdate {
	rmsu.mutation.ClearFolder()
	return rmsu
}

// SetAuthType sets the "auth_type" field.
func (rmsu *ResumeMailboxSettingUpdate) SetAuthType(rt resumemailboxsetting.AuthType) *ResumeMailboxSettingUpdate {
	rmsu.mutation.SetAuthType(rt)
	return rmsu
}

// SetNillableAuthType sets the "auth_type" field if the given value is not nil.
func (rmsu *ResumeMailboxSettingUpdate) SetNillableAuthType(rt *resumemailboxsetting.AuthType) *ResumeMailboxSettingUpdate {
	if rt != nil {
		rmsu.SetAuthType(*rt)
	}
	return rmsu
}

// SetEncryptedCredential sets the "encrypted_credential" field.
func (rmsu *ResumeMailboxSettingUpdate) SetEncryptedCredential(m map[string]interface{}) *ResumeMailboxSettingUpdate {
	rmsu.mutation.SetEncryptedCredential(m)
	return rmsu
}

// SetUploaderID sets the "uploader_id" field.
func (rmsu *ResumeMailboxSettingUpdate) SetUploaderID(u uuid.UUID) *ResumeMailboxSettingUpdate {
	rmsu.mutation.SetUploaderID(u)
	return rmsu
}

// SetNillableUploaderID sets the "uploader_id" field if the given value is not nil.
func (rmsu *ResumeMailboxSettingUpdate) SetNillableUploaderID(u *uuid.UUID) *ResumeMailboxSettingUpdate {
	if u != nil {
		rmsu.SetUploaderID(*u)
	}
	return rmsu
}

// SetJobProfileID sets the "job_profile_id" field.
func (rmsu *ResumeMailboxSettingUpdate) SetJobProfileID(u uuid.UUID) *ResumeMailboxSettingUpdate {
	rmsu.mutation.SetJobProfileID(u)
	return rmsu
}

// SetNillableJobProfileID sets the "job_profile_id" field if the given value is not nil.
func (rmsu *ResumeMailboxSettingUpdate) SetNillableJobProfileID(u *uuid.UUID) *ResumeMailboxSettingUpdate {
	if u != nil {
		rmsu.SetJobProfileID(*u)
	}
	return rmsu
}

// ClearJobProfileID clears the value of the "job_profile_id" field.
func (rmsu *ResumeMailboxSettingUpdate) ClearJobProfileID() *ResumeMailboxSettingUpdate {
	rmsu.mutation.ClearJobProfileID()
	return rmsu
}

// SetSyncIntervalMinutes sets the "sync_interval_minutes" field.
func (rmsu *ResumeMailboxSettingUpdate) SetSyncIntervalMinutes(i int) *ResumeMailboxSettingUpdate {
	rmsu.mutation.ResetSyncIntervalMinutes()
	rmsu.mutation.SetSyncIntervalMinutes(i)
	return rmsu
}

// SetNillableSyncIntervalMinutes sets the "sync_interval_minutes" field if the given value is not nil.
func (rmsu *ResumeMailboxSettingUpdate) SetNillableSyncIntervalMinutes(i *int) *ResumeMailboxSettingUpdate {
	if i != nil {
		rmsu.SetSyncIntervalMinutes(*i)
	}
	return rmsu
}

// AddSyncIntervalMinutes adds i to the "sync_interval_minutes" field.
func (rmsu *ResumeMailboxSettingUpdate) AddSyncIntervalMinutes(i int) *ResumeMailboxSettingUpdate {
	rmsu.mutation.AddSyncIntervalMinutes(i)
	return rmsu
}

// ClearSyncIntervalMinutes clears the value of the "sync_interval_minutes" field.
func (rmsu *ResumeMailboxSettingUpdate) ClearSyncIntervalMinutes() *ResumeMailboxSettingUpdate {
	rmsu.mutation.ClearSyncIntervalMinutes()
	return rmsu
}

// SetStatus sets the "status" field.
func (rmsu *ResumeMailboxSettingUpdate) SetStatus(r resumemailboxsetting.Status) *ResumeMailboxSettingUpdate {
	rmsu.mutation.SetStatus(r)
	return rmsu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rmsu *ResumeMailboxSettingUpdate) SetNillableStatus(r *resumemailboxsetting.Status) *ResumeMailboxSettingUpdate {
	if r != nil {
		rmsu.SetStatus(*r)
	}
	return rmsu
}

// SetLastSyncedAt sets the "last_synced_at" field.
func (rmsu *ResumeMailboxSettingUpdate) SetLastSyncedAt(t time.Time) *ResumeMailboxSettingUpdate {
	rmsu.mutation.SetLastSyncedAt(t)
	return rmsu
}

// SetNillableLastSyncedAt sets the "last_synced_at" field if the given value is not nil.
func (rmsu *ResumeMailboxSettingUpdate) SetNillableLastSyncedAt(t *time.Time) *ResumeMailboxSettingUpdate {
	if t != nil {
		rmsu.SetLastSyncedAt(*t)
	}
	return rmsu
}

// ClearLastSyncedAt clears the value of the "last_synced_at" field.
func (rmsu *ResumeMailboxSettingUpdate) ClearLastSyncedAt() *ResumeMailboxSettingUpdate {
	rmsu.mutation.ClearLastSyncedAt()
	return rmsu
}

// SetLastError sets the "last_error" field.
func (rmsu *ResumeMailboxSettingUpdate) SetLastError(s string) *ResumeMailboxSettingUpdate {
	rmsu.mutation.SetLastError(s)
	return rmsu
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (rmsu *ResumeMailboxSettingUpdate) SetNillableLastError(s *string) *ResumeMailboxSettingUpdate {
	if s != nil {
		rmsu.SetLastError(*s)
	}
	return rmsu
}

// ClearLastError clears the value of the "last_error" field.
func (rmsu *ResumeMailboxSettingUpdate) ClearLastError() *ResumeMailboxSettingUpdate {
	rmsu.mutation.ClearLastError()
	return rmsu
}

// SetRetryCount sets the "retry_count" field.
func (rmsu *ResumeMailboxSettingUpdate) SetRetryCount(i int) *ResumeMailboxSettingUpdate {
	rmsu.mutation.ResetRetryCount()
	rmsu.mutation.SetRetryCount(i)
	return rmsu
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (rmsu *ResumeMailboxSettingUpdate) SetNillableRetryCount(i *int) *ResumeMailboxSettingUpdate {
	if i != nil {
		rmsu.SetRetryCount(*i)
	}
	return rmsu
}

// AddRetryCount adds i to the "retry_count" field.
func (rmsu *ResumeMailboxSettingUpdate) AddRetryCount(i int) *ResumeMailboxSettingUpdate {
	rmsu.mutation.AddRetryCount(i)
	return rmsu
}

// SetUpdatedAt sets the "updated_at" field.
func (rmsu *ResumeMailboxSettingUpdate) SetUpdatedAt(t time.Time) *ResumeMailboxSettingUpdate {
	rmsu.mutation.SetUpdatedAt(t)
	return rmsu
}

// SetUploader sets the "uploader" edge to the User entity.
func (rmsu *ResumeMailboxSettingUpdate) SetUploader(u *User) *ResumeMailboxSettingUpdate {
	return rmsu.SetUploaderID(u.ID)
}

// SetJobProfile sets the "job_profile" edge to the JobPosition entity.
func (rmsu *ResumeMailboxSettingUpdate) SetJobProfile(j *JobPosition) *ResumeMailboxSettingUpdate {
	return rmsu.SetJobProfileID(j.ID)
}

// AddCursorIDs adds the "cursors" edge to the ResumeMailboxCursor entity by IDs.
func (rmsu *ResumeMailboxSettingUpdate) AddCursorIDs(ids ...uuid.UUID) *ResumeMailboxSettingUpdate {
	rmsu.mutation.AddCursorIDs(ids...)
	return rmsu
}

// AddCursors adds the "cursors" edges to the ResumeMailboxCursor entity.
func (rmsu *ResumeMailboxSettingUpdate) AddCursors(r ...*ResumeMailboxCursor) *ResumeMailboxSettingUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rmsu.AddCursorIDs(ids...)
}

// AddStatisticIDs adds the "statistics" edge to the ResumeMailboxStatistic entity by IDs.
func (rmsu *ResumeMailboxSettingUpdate) AddStatisticIDs(ids ...uuid.UUID) *ResumeMailboxSettingUpdate {
	rmsu.mutation.AddStatisticIDs(ids...)
	return rmsu
}

// AddStatistics adds the "statistics" edges to the ResumeMailboxStatistic entity.
func (rmsu *ResumeMailboxSettingUpdate) AddStatistics(r ...*ResumeMailboxStatistic) *ResumeMailboxSettingUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rmsu.AddStatisticIDs(ids...)
}

// Mutation returns the ResumeMailboxSettingMutation object of the builder.
func (rmsu *ResumeMailboxSettingUpdate) Mutation() *ResumeMailboxSettingMutation {
	return rmsu.mutation
}

// ClearUploader clears the "uploader" edge to the User entity.
func (rmsu *ResumeMailboxSettingUpdate) ClearUploader() *ResumeMailboxSettingUpdate {
	rmsu.mutation.ClearUploader()
	return rmsu
}

// ClearJobProfile clears the "job_profile" edge to the JobPosition entity.
func (rmsu *ResumeMailboxSettingUpdate) ClearJobProfile() *ResumeMailboxSettingUpdate {
	rmsu.mutation.ClearJobProfile()
	return rmsu
}

// ClearCursors clears all "cursors" edges to the ResumeMailboxCursor entity.
func (rmsu *ResumeMailboxSettingUpdate) ClearCursors() *ResumeMailboxSettingUpdate {
	rmsu.mutation.ClearCursors()
	return rmsu
}

// RemoveCursorIDs removes the "cursors" edge to ResumeMailboxCursor entities by IDs.
func (rmsu *ResumeMailboxSettingUpdate) RemoveCursorIDs(ids ...uuid.UUID) *ResumeMailboxSettingUpdate {
	rmsu.mutation.RemoveCursorIDs(ids...)
	return rmsu
}

// RemoveCursors removes "cursors" edges to ResumeMailboxCursor entities.
func (rmsu *ResumeMailboxSettingUpdate) RemoveCursors(r ...*ResumeMailboxCursor) *ResumeMailboxSettingUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rmsu.RemoveCursorIDs(ids...)
}

// ClearStatistics clears all "statistics" edges to the ResumeMailboxStatistic entity.
func (rmsu *ResumeMailboxSettingUpdate) ClearStatistics() *ResumeMailboxSettingUpdate {
	rmsu.mutation.ClearStatistics()
	return rmsu
}

// RemoveStatisticIDs removes the "statistics" edge to ResumeMailboxStatistic entities by IDs.
func (rmsu *ResumeMailboxSettingUpdate) RemoveStatisticIDs(ids ...uuid.UUID) *ResumeMailboxSettingUpdate {
	rmsu.mutation.RemoveStatisticIDs(ids...)
	return rmsu
}

// RemoveStatistics removes "statistics" edges to ResumeMailboxStatistic entities.
func (rmsu *ResumeMailboxSettingUpdate) RemoveStatistics(r ...*ResumeMailboxStatistic) *ResumeMailboxSettingUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rmsu.RemoveStatisticIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rmsu *ResumeMailboxSettingUpdate) Save(ctx context.Context) (int, error) {
	if err := rmsu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, rmsu.sqlSave, rmsu.mutation, rmsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmsu *ResumeMailboxSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := rmsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rmsu *ResumeMailboxSettingUpdate) Exec(ctx context.Context) error {
	_, err := rmsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmsu *ResumeMailboxSettingUpdate) ExecX(ctx context.Context) {
	if err := rmsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmsu *ResumeMailboxSettingUpdate) defaults() error {
	if _, ok := rmsu.mutation.UpdatedAt(); !ok {
		if resumemailboxsetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumemailboxsetting.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumemailboxsetting.UpdateDefaultUpdatedAt()
		rmsu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rmsu *ResumeMailboxSettingUpdate) check() error {
	if v, ok := rmsu.mutation.Name(); ok {
		if err := resumemailboxsetting.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.name": %w`, err)}
		}
	}
	if v, ok := rmsu.mutation.EmailAddress(); ok {
		if err := resumemailboxsetting.EmailAddressValidator(v); err != nil {
			return &ValidationError{Name: "email_address", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.email_address": %w`, err)}
		}
	}
	if v, ok := rmsu.mutation.Protocol(); ok {
		if err := resumemailboxsetting.ProtocolValidator(v); err != nil {
			return &ValidationError{Name: "protocol", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.protocol": %w`, err)}
		}
	}
	if v, ok := rmsu.mutation.Host(); ok {
		if err := resumemailboxsetting.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.host": %w`, err)}
		}
	}
	if v, ok := rmsu.mutation.Folder(); ok {
		if err := resumemailboxsetting.FolderValidator(v); err != nil {
			return &ValidationError{Name: "folder", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.folder": %w`, err)}
		}
	}
	if v, ok := rmsu.mutation.AuthType(); ok {
		if err := resumemailboxsetting.AuthTypeValidator(v); err != nil {
			return &ValidationError{Name: "auth_type", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.auth_type": %w`, err)}
		}
	}
	if v, ok := rmsu.mutation.Status(); ok {
		if err := resumemailboxsetting.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.status": %w`, err)}
		}
	}
	if rmsu.mutation.UploaderCleared() && len(rmsu.mutation.UploaderIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeMailboxSetting.uploader"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rmsu *ResumeMailboxSettingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeMailboxSettingUpdate {
	rmsu.modifiers = append(rmsu.modifiers, modifiers...)
	return rmsu
}

func (rmsu *ResumeMailboxSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rmsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumemailboxsetting.Table, resumemailboxsetting.Columns, sqlgraph.NewFieldSpec(resumemailboxsetting.FieldID, field.TypeUUID))
	if ps := rmsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmsu.mutation.DeletedAt(); ok {
		_spec.SetField(resumemailboxsetting.FieldDeletedAt, field.TypeTime, value)
	}
	if rmsu.mutation.DeletedAtCleared() {
		_spec.ClearField(resumemailboxsetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rmsu.mutation.Name(); ok {
		_spec.SetField(resumemailboxsetting.FieldName, field.TypeString, value)
	}
	if value, ok := rmsu.mutation.EmailAddress(); ok {
		_spec.SetField(resumemailboxsetting.FieldEmailAddress, field.TypeString, value)
	}
	if value, ok := rmsu.mutation.Protocol(); ok {
		_spec.SetField(resumemailboxsetting.FieldProtocol, field.TypeEnum, value)
	}
	if value, ok := rmsu.mutation.Host(); ok {
		_spec.SetField(resumemailboxsetting.FieldHost, field.TypeString, value)
	}
	if value, ok := rmsu.mutation.Port(); ok {
		_spec.SetField(resumemailboxsetting.FieldPort, field.TypeInt, value)
	}
	if value, ok := rmsu.mutation.AddedPort(); ok {
		_spec.AddField(resumemailboxsetting.FieldPort, field.TypeInt, value)
	}
	if value, ok := rmsu.mutation.UseSsl(); ok {
		_spec.SetField(resumemailboxsetting.FieldUseSsl, field.TypeBool, value)
	}
	if value, ok := rmsu.mutation.Folder(); ok {
		_spec.SetField(resumemailboxsetting.FieldFolder, field.TypeString, value)
	}
	if rmsu.mutation.FolderCleared() {
		_spec.ClearField(resumemailboxsetting.FieldFolder, field.TypeString)
	}
	if value, ok := rmsu.mutation.AuthType(); ok {
		_spec.SetField(resumemailboxsetting.FieldAuthType, field.TypeEnum, value)
	}
	if value, ok := rmsu.mutation.EncryptedCredential(); ok {
		_spec.SetField(resumemailboxsetting.FieldEncryptedCredential, field.TypeJSON, value)
	}
	if value, ok := rmsu.mutation.SyncIntervalMinutes(); ok {
		_spec.SetField(resumemailboxsetting.FieldSyncIntervalMinutes, field.TypeInt, value)
	}
	if value, ok := rmsu.mutation.AddedSyncIntervalMinutes(); ok {
		_spec.AddField(resumemailboxsetting.FieldSyncIntervalMinutes, field.TypeInt, value)
	}
	if rmsu.mutation.SyncIntervalMinutesCleared() {
		_spec.ClearField(resumemailboxsetting.FieldSyncIntervalMinutes, field.TypeInt)
	}
	if value, ok := rmsu.mutation.Status(); ok {
		_spec.SetField(resumemailboxsetting.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := rmsu.mutation.LastSyncedAt(); ok {
		_spec.SetField(resumemailboxsetting.FieldLastSyncedAt, field.TypeTime, value)
	}
	if rmsu.mutation.LastSyncedAtCleared() {
		_spec.ClearField(resumemailboxsetting.FieldLastSyncedAt, field.TypeTime)
	}
	if value, ok := rmsu.mutation.LastError(); ok {
		_spec.SetField(resumemailboxsetting.FieldLastError, field.TypeString, value)
	}
	if rmsu.mutation.LastErrorCleared() {
		_spec.ClearField(resumemailboxsetting.FieldLastError, field.TypeString)
	}
	if value, ok := rmsu.mutation.RetryCount(); ok {
		_spec.SetField(resumemailboxsetting.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := rmsu.mutation.AddedRetryCount(); ok {
		_spec.AddField(resumemailboxsetting.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := rmsu.mutation.UpdatedAt(); ok {
		_spec.SetField(resumemailboxsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if rmsu.mutation.UploaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resumemailboxsetting.UploaderTable,
			Columns: []string{resumemailboxsetting.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmsu.mutation.UploaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resumemailboxsetting.UploaderTable,
			Columns: []string{resumemailboxsetting.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rmsu.mutation.JobProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resumemailboxsetting.JobProfileTable,
			Columns: []string{resumemailboxsetting.JobProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmsu.mutation.JobProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resumemailboxsetting.JobProfileTable,
			Columns: []string{resumemailboxsetting.JobProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rmsu.mutation.CursorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resumemailboxsetting.CursorsTable,
			Columns: []string{resumemailboxsetting.CursorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxcursor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmsu.mutation.RemovedCursorsIDs(); len(nodes) > 0 && !rmsu.mutation.CursorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resumemailboxsetting.CursorsTable,
			Columns: []string{resumemailboxsetting.CursorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxcursor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmsu.mutation.CursorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resumemailboxsetting.CursorsTable,
			Columns: []string{resumemailboxsetting.CursorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxcursor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rmsu.mutation.StatisticsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resumemailboxsetting.StatisticsTable,
			Columns: []string{resumemailboxsetting.StatisticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxstatistic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmsu.mutation.RemovedStatisticsIDs(); len(nodes) > 0 && !rmsu.mutation.StatisticsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resumemailboxsetting.StatisticsTable,
			Columns: []string{resumemailboxsetting.StatisticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxstatistic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmsu.mutation.StatisticsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resumemailboxsetting.StatisticsTable,
			Columns: []string{resumemailboxsetting.StatisticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxstatistic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rmsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rmsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumemailboxsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rmsu.mutation.done = true
	return n, nil
}

// ResumeMailboxSettingUpdateOne is the builder for updating a single ResumeMailboxSetting entity.
type ResumeMailboxSettingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ResumeMailboxSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetDeletedAt(t time.Time) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.SetDeletedAt(t)
	return rmsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetNillableDeletedAt(t *time.Time) *ResumeMailboxSettingUpdateOne {
	if t != nil {
		rmsuo.SetDeletedAt(*t)
	}
	return rmsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) ClearDeletedAt() *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.ClearDeletedAt()
	return rmsuo
}

// SetName sets the "name" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetName(s string) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.SetName(s)
	return rmsuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetNillableName(s *string) *ResumeMailboxSettingUpdateOne {
	if s != nil {
		rmsuo.SetName(*s)
	}
	return rmsuo
}

// SetEmailAddress sets the "email_address" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetEmailAddress(s string) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.SetEmailAddress(s)
	return rmsuo
}

// SetNillableEmailAddress sets the "email_address" field if the given value is not nil.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetNillableEmailAddress(s *string) *ResumeMailboxSettingUpdateOne {
	if s != nil {
		rmsuo.SetEmailAddress(*s)
	}
	return rmsuo
}

// SetProtocol sets the "protocol" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetProtocol(r resumemailboxsetting.Protocol) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.SetProtocol(r)
	return rmsuo
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetNillableProtocol(r *resumemailboxsetting.Protocol) *ResumeMailboxSettingUpdateOne {
	if r != nil {
		rmsuo.SetProtocol(*r)
	}
	return rmsuo
}

// SetHost sets the "host" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetHost(s string) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.SetHost(s)
	return rmsuo
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetNillableHost(s *string) *ResumeMailboxSettingUpdateOne {
	if s != nil {
		rmsuo.SetHost(*s)
	}
	return rmsuo
}

// SetPort sets the "port" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetPort(i int) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.ResetPort()
	rmsuo.mutation.SetPort(i)
	return rmsuo
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetNillablePort(i *int) *ResumeMailboxSettingUpdateOne {
	if i != nil {
		rmsuo.SetPort(*i)
	}
	return rmsuo
}

// AddPort adds i to the "port" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) AddPort(i int) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.AddPort(i)
	return rmsuo
}

// SetUseSsl sets the "use_ssl" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetUseSsl(b bool) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.SetUseSsl(b)
	return rmsuo
}

// SetNillableUseSsl sets the "use_ssl" field if the given value is not nil.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetNillableUseSsl(b *bool) *ResumeMailboxSettingUpdateOne {
	if b != nil {
		rmsuo.SetUseSsl(*b)
	}
	return rmsuo
}

// SetFolder sets the "folder" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetFolder(s string) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.SetFolder(s)
	return rmsuo
}

// SetNillableFolder sets the "folder" field if the given value is not nil.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetNillableFolder(s *string) *ResumeMailboxSettingUpdateOne {
	if s != nil {
		rmsuo.SetFolder(*s)
	}
	return rmsuo
}

// ClearFolder clears the value of the "folder" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) ClearFolder() *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.ClearFolder()
	return rmsuo
}

// SetAuthType sets the "auth_type" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetAuthType(rt resumemailboxsetting.AuthType) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.SetAuthType(rt)
	return rmsuo
}

// SetNillableAuthType sets the "auth_type" field if the given value is not nil.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetNillableAuthType(rt *resumemailboxsetting.AuthType) *ResumeMailboxSettingUpdateOne {
	if rt != nil {
		rmsuo.SetAuthType(*rt)
	}
	return rmsuo
}

// SetEncryptedCredential sets the "encrypted_credential" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetEncryptedCredential(m map[string]interface{}) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.SetEncryptedCredential(m)
	return rmsuo
}

// SetUploaderID sets the "uploader_id" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetUploaderID(u uuid.UUID) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.SetUploaderID(u)
	return rmsuo
}

// SetNillableUploaderID sets the "uploader_id" field if the given value is not nil.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetNillableUploaderID(u *uuid.UUID) *ResumeMailboxSettingUpdateOne {
	if u != nil {
		rmsuo.SetUploaderID(*u)
	}
	return rmsuo
}

// SetJobProfileID sets the "job_profile_id" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetJobProfileID(u uuid.UUID) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.SetJobProfileID(u)
	return rmsuo
}

// SetNillableJobProfileID sets the "job_profile_id" field if the given value is not nil.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetNillableJobProfileID(u *uuid.UUID) *ResumeMailboxSettingUpdateOne {
	if u != nil {
		rmsuo.SetJobProfileID(*u)
	}
	return rmsuo
}

// ClearJobProfileID clears the value of the "job_profile_id" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) ClearJobProfileID() *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.ClearJobProfileID()
	return rmsuo
}

// SetSyncIntervalMinutes sets the "sync_interval_minutes" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetSyncIntervalMinutes(i int) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.ResetSyncIntervalMinutes()
	rmsuo.mutation.SetSyncIntervalMinutes(i)
	return rmsuo
}

// SetNillableSyncIntervalMinutes sets the "sync_interval_minutes" field if the given value is not nil.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetNillableSyncIntervalMinutes(i *int) *ResumeMailboxSettingUpdateOne {
	if i != nil {
		rmsuo.SetSyncIntervalMinutes(*i)
	}
	return rmsuo
}

// AddSyncIntervalMinutes adds i to the "sync_interval_minutes" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) AddSyncIntervalMinutes(i int) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.AddSyncIntervalMinutes(i)
	return rmsuo
}

// ClearSyncIntervalMinutes clears the value of the "sync_interval_minutes" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) ClearSyncIntervalMinutes() *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.ClearSyncIntervalMinutes()
	return rmsuo
}

// SetStatus sets the "status" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetStatus(r resumemailboxsetting.Status) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.SetStatus(r)
	return rmsuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetNillableStatus(r *resumemailboxsetting.Status) *ResumeMailboxSettingUpdateOne {
	if r != nil {
		rmsuo.SetStatus(*r)
	}
	return rmsuo
}

// SetLastSyncedAt sets the "last_synced_at" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetLastSyncedAt(t time.Time) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.SetLastSyncedAt(t)
	return rmsuo
}

// SetNillableLastSyncedAt sets the "last_synced_at" field if the given value is not nil.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetNillableLastSyncedAt(t *time.Time) *ResumeMailboxSettingUpdateOne {
	if t != nil {
		rmsuo.SetLastSyncedAt(*t)
	}
	return rmsuo
}

// ClearLastSyncedAt clears the value of the "last_synced_at" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) ClearLastSyncedAt() *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.ClearLastSyncedAt()
	return rmsuo
}

// SetLastError sets the "last_error" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetLastError(s string) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.SetLastError(s)
	return rmsuo
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetNillableLastError(s *string) *ResumeMailboxSettingUpdateOne {
	if s != nil {
		rmsuo.SetLastError(*s)
	}
	return rmsuo
}

// ClearLastError clears the value of the "last_error" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) ClearLastError() *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.ClearLastError()
	return rmsuo
}

// SetRetryCount sets the "retry_count" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetRetryCount(i int) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.ResetRetryCount()
	rmsuo.mutation.SetRetryCount(i)
	return rmsuo
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetNillableRetryCount(i *int) *ResumeMailboxSettingUpdateOne {
	if i != nil {
		rmsuo.SetRetryCount(*i)
	}
	return rmsuo
}

// AddRetryCount adds i to the "retry_count" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) AddRetryCount(i int) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.AddRetryCount(i)
	return rmsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetUpdatedAt(t time.Time) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.SetUpdatedAt(t)
	return rmsuo
}

// SetUploader sets the "uploader" edge to the User entity.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetUploader(u *User) *ResumeMailboxSettingUpdateOne {
	return rmsuo.SetUploaderID(u.ID)
}

// SetJobProfile sets the "job_profile" edge to the JobPosition entity.
func (rmsuo *ResumeMailboxSettingUpdateOne) SetJobProfile(j *JobPosition) *ResumeMailboxSettingUpdateOne {
	return rmsuo.SetJobProfileID(j.ID)
}

// AddCursorIDs adds the "cursors" edge to the ResumeMailboxCursor entity by IDs.
func (rmsuo *ResumeMailboxSettingUpdateOne) AddCursorIDs(ids ...uuid.UUID) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.AddCursorIDs(ids...)
	return rmsuo
}

// AddCursors adds the "cursors" edges to the ResumeMailboxCursor entity.
func (rmsuo *ResumeMailboxSettingUpdateOne) AddCursors(r ...*ResumeMailboxCursor) *ResumeMailboxSettingUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rmsuo.AddCursorIDs(ids...)
}

// AddStatisticIDs adds the "statistics" edge to the ResumeMailboxStatistic entity by IDs.
func (rmsuo *ResumeMailboxSettingUpdateOne) AddStatisticIDs(ids ...uuid.UUID) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.AddStatisticIDs(ids...)
	return rmsuo
}

// AddStatistics adds the "statistics" edges to the ResumeMailboxStatistic entity.
func (rmsuo *ResumeMailboxSettingUpdateOne) AddStatistics(r ...*ResumeMailboxStatistic) *ResumeMailboxSettingUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rmsuo.AddStatisticIDs(ids...)
}

// Mutation returns the ResumeMailboxSettingMutation object of the builder.
func (rmsuo *ResumeMailboxSettingUpdateOne) Mutation() *ResumeMailboxSettingMutation {
	return rmsuo.mutation
}

// ClearUploader clears the "uploader" edge to the User entity.
func (rmsuo *ResumeMailboxSettingUpdateOne) ClearUploader() *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.ClearUploader()
	return rmsuo
}

// ClearJobProfile clears the "job_profile" edge to the JobPosition entity.
func (rmsuo *ResumeMailboxSettingUpdateOne) ClearJobProfile() *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.ClearJobProfile()
	return rmsuo
}

// ClearCursors clears all "cursors" edges to the ResumeMailboxCursor entity.
func (rmsuo *ResumeMailboxSettingUpdateOne) ClearCursors() *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.ClearCursors()
	return rmsuo
}

// RemoveCursorIDs removes the "cursors" edge to ResumeMailboxCursor entities by IDs.
func (rmsuo *ResumeMailboxSettingUpdateOne) RemoveCursorIDs(ids ...uuid.UUID) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.RemoveCursorIDs(ids...)
	return rmsuo
}

// RemoveCursors removes "cursors" edges to ResumeMailboxCursor entities.
func (rmsuo *ResumeMailboxSettingUpdateOne) RemoveCursors(r ...*ResumeMailboxCursor) *ResumeMailboxSettingUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rmsuo.RemoveCursorIDs(ids...)
}

// ClearStatistics clears all "statistics" edges to the ResumeMailboxStatistic entity.
func (rmsuo *ResumeMailboxSettingUpdateOne) ClearStatistics() *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.ClearStatistics()
	return rmsuo
}

// RemoveStatisticIDs removes the "statistics" edge to ResumeMailboxStatistic entities by IDs.
func (rmsuo *ResumeMailboxSettingUpdateOne) RemoveStatisticIDs(ids ...uuid.UUID) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.RemoveStatisticIDs(ids...)
	return rmsuo
}

// RemoveStatistics removes "statistics" edges to ResumeMailboxStatistic entities.
func (rmsuo *ResumeMailboxSettingUpdateOne) RemoveStatistics(r ...*ResumeMailboxStatistic) *ResumeMailboxSettingUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rmsuo.RemoveStatisticIDs(ids...)
}

// Where appends a list predicates to the ResumeMailboxSettingUpdate builder.
func (rmsuo *ResumeMailboxSettingUpdateOne) Where(ps ...predicate.ResumeMailboxSetting) *ResumeMailboxSettingUpdateOne {
	rmsuo.mutation.Where(ps...)
	return rmsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rmsuo *ResumeMailboxSettingUpdateOne) Select(field string, fields ...string) *ResumeMailboxSettingUpdateOne {
	rmsuo.fields = append([]string{field}, fields...)
	return rmsuo
}

// Save executes the query and returns the updated ResumeMailboxSetting entity.
func (rmsuo *ResumeMailboxSettingUpdateOne) Save(ctx context.Context) (*ResumeMailboxSetting, error) {
	if err := rmsuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rmsuo.sqlSave, rmsuo.mutation, rmsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmsuo *ResumeMailboxSettingUpdateOne) SaveX(ctx context.Context) *ResumeMailboxSetting {
	node, err := rmsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rmsuo *ResumeMailboxSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := rmsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmsuo *ResumeMailboxSettingUpdateOne) ExecX(ctx context.Context) {
	if err := rmsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmsuo *ResumeMailboxSettingUpdateOne) defaults() error {
	if _, ok := rmsuo.mutation.UpdatedAt(); !ok {
		if resumemailboxsetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumemailboxsetting.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumemailboxsetting.UpdateDefaultUpdatedAt()
		rmsuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rmsuo *ResumeMailboxSettingUpdateOne) check() error {
	if v, ok := rmsuo.mutation.Name(); ok {
		if err := resumemailboxsetting.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.name": %w`, err)}
		}
	}
	if v, ok := rmsuo.mutation.EmailAddress(); ok {
		if err := resumemailboxsetting.EmailAddressValidator(v); err != nil {
			return &ValidationError{Name: "email_address", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.email_address": %w`, err)}
		}
	}
	if v, ok := rmsuo.mutation.Protocol(); ok {
		if err := resumemailboxsetting.ProtocolValidator(v); err != nil {
			return &ValidationError{Name: "protocol", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.protocol": %w`, err)}
		}
	}
	if v, ok := rmsuo.mutation.Host(); ok {
		if err := resumemailboxsetting.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.host": %w`, err)}
		}
	}
	if v, ok := rmsuo.mutation.Folder(); ok {
		if err := resumemailboxsetting.FolderValidator(v); err != nil {
			return &ValidationError{Name: "folder", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.folder": %w`, err)}
		}
	}
	if v, ok := rmsuo.mutation.AuthType(); ok {
		if err := resumemailboxsetting.AuthTypeValidator(v); err != nil {
			return &ValidationError{Name: "auth_type", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.auth_type": %w`, err)}
		}
	}
	if v, ok := rmsuo.mutation.Status(); ok {
		if err := resumemailboxsetting.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.status": %w`, err)}
		}
	}
	if rmsuo.mutation.UploaderCleared() && len(rmsuo.mutation.UploaderIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeMailboxSetting.uploader"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rmsuo *ResumeMailboxSettingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeMailboxSettingUpdateOne {
	rmsuo.modifiers = append(rmsuo.modifiers, modifiers...)
	return rmsuo
}

func (rmsuo *ResumeMailboxSettingUpdateOne) sqlSave(ctx context.Context) (_node *ResumeMailboxSetting, err error) {
	if err := rmsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumemailboxsetting.Table, resumemailboxsetting.Columns, sqlgraph.NewFieldSpec(resumemailboxsetting.FieldID, field.TypeUUID))
	id, ok := rmsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ResumeMailboxSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rmsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resumemailboxsetting.FieldID)
		for _, f := range fields {
			if !resumemailboxsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != resumemailboxsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rmsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmsuo.mutation.DeletedAt(); ok {
		_spec.SetField(resumemailboxsetting.FieldDeletedAt, field.TypeTime, value)
	}
	if rmsuo.mutation.DeletedAtCleared() {
		_spec.ClearField(resumemailboxsetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rmsuo.mutation.Name(); ok {
		_spec.SetField(resumemailboxsetting.FieldName, field.TypeString, value)
	}
	if value, ok := rmsuo.mutation.EmailAddress(); ok {
		_spec.SetField(resumemailboxsetting.FieldEmailAddress, field.TypeString, value)
	}
	if value, ok := rmsuo.mutation.Protocol(); ok {
		_spec.SetField(resumemailboxsetting.FieldProtocol, field.TypeEnum, value)
	}
	if value, ok := rmsuo.mutation.Host(); ok {
		_spec.SetField(resumemailboxsetting.FieldHost, field.TypeString, value)
	}
	if value, ok := rmsuo.mutation.Port(); ok {
		_spec.SetField(resumemailboxsetting.FieldPort, field.TypeInt, value)
	}
	if value, ok := rmsuo.mutation.AddedPort(); ok {
		_spec.AddField(resumemailboxsetting.FieldPort, field.TypeInt, value)
	}
	if value, ok := rmsuo.mutation.UseSsl(); ok {
		_spec.SetField(resumemailboxsetting.FieldUseSsl, field.TypeBool, value)
	}
	if value, ok := rmsuo.mutation.Folder(); ok {
		_spec.SetField(resumemailboxsetting.FieldFolder, field.TypeString, value)
	}
	if rmsuo.mutation.FolderCleared() {
		_spec.ClearField(resumemailboxsetting.FieldFolder, field.TypeString)
	}
	if value, ok := rmsuo.mutation.AuthType(); ok {
		_spec.SetField(resumemailboxsetting.FieldAuthType, field.TypeEnum, value)
	}
	if value, ok := rmsuo.mutation.EncryptedCredential(); ok {
		_spec.SetField(resumemailboxsetting.FieldEncryptedCredential, field.TypeJSON, value)
	}
	if value, ok := rmsuo.mutation.SyncIntervalMinutes(); ok {
		_spec.SetField(resumemailboxsetting.FieldSyncIntervalMinutes, field.TypeInt, value)
	}
	if value, ok := rmsuo.mutation.AddedSyncIntervalMinutes(); ok {
		_spec.AddField(resumemailboxsetting.FieldSyncIntervalMinutes, field.TypeInt, value)
	}
	if rmsuo.mutation.SyncIntervalMinutesCleared() {
		_spec.ClearField(resumemailboxsetting.FieldSyncIntervalMinutes, field.TypeInt)
	}
	if value, ok := rmsuo.mutation.Status(); ok {
		_spec.SetField(resumemailboxsetting.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := rmsuo.mutation.LastSyncedAt(); ok {
		_spec.SetField(resumemailboxsetting.FieldLastSyncedAt, field.TypeTime, value)
	}
	if rmsuo.mutation.LastSyncedAtCleared() {
		_spec.ClearField(resumemailboxsetting.FieldLastSyncedAt, field.TypeTime)
	}
	if value, ok := rmsuo.mutation.LastError(); ok {
		_spec.SetField(resumemailboxsetting.FieldLastError, field.TypeString, value)
	}
	if rmsuo.mutation.LastErrorCleared() {
		_spec.ClearField(resumemailboxsetting.FieldLastError, field.TypeString)
	}
	if value, ok := rmsuo.mutation.RetryCount(); ok {
		_spec.SetField(resumemailboxsetting.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := rmsuo.mutation.AddedRetryCount(); ok {
		_spec.AddField(resumemailboxsetting.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := rmsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(resumemailboxsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if rmsuo.mutation.UploaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resumemailboxsetting.UploaderTable,
			Columns: []string{resumemailboxsetting.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmsuo.mutation.UploaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resumemailboxsetting.UploaderTable,
			Columns: []string{resumemailboxsetting.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rmsuo.mutation.JobProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resumemailboxsetting.JobProfileTable,
			Columns: []string{resumemailboxsetting.JobProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmsuo.mutation.JobProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resumemailboxsetting.JobProfileTable,
			Columns: []string{resumemailboxsetting.JobProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rmsuo.mutation.CursorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resumemailboxsetting.CursorsTable,
			Columns: []string{resumemailboxsetting.CursorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxcursor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmsuo.mutation.RemovedCursorsIDs(); len(nodes) > 0 && !rmsuo.mutation.CursorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resumemailboxsetting.CursorsTable,
			Columns: []string{resumemailboxsetting.CursorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxcursor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmsuo.mutation.CursorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resumemailboxsetting.CursorsTable,
			Columns: []string{resumemailboxsetting.CursorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxcursor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rmsuo.mutation.StatisticsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resumemailboxsetting.StatisticsTable,
			Columns: []string{resumemailboxsetting.StatisticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxstatistic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmsuo.mutation.RemovedStatisticsIDs(); len(nodes) > 0 && !rmsuo.mutation.StatisticsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resumemailboxsetting.StatisticsTable,
			Columns: []string{resumemailboxsetting.StatisticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxstatistic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmsuo.mutation.StatisticsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resumemailboxsetting.StatisticsTable,
			Columns: []string{resumemailboxsetting.StatisticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxstatistic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rmsuo.modifiers...)
	_node = &ResumeMailboxSetting{config: rmsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rmsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumemailboxsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rmsuo.mutation.done = true
	return _node, nil
}
