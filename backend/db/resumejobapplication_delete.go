// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resumejobapplication"
)

// ResumeJobApplicationDelete is the builder for deleting a ResumeJobApplication entity.
type ResumeJobApplicationDelete struct {
	config
	hooks    []Hook
	mutation *ResumeJobApplicationMutation
}

// Where appends a list predicates to the ResumeJobApplicationDelete builder.
func (rjad *ResumeJobApplicationDelete) Where(ps ...predicate.ResumeJobApplication) *ResumeJobApplicationDelete {
	rjad.mutation.Where(ps...)
	return rjad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rjad *ResumeJobApplicationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rjad.sqlExec, rjad.mutation, rjad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rjad *ResumeJobApplicationDelete) ExecX(ctx context.Context) int {
	n, err := rjad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rjad *ResumeJobApplicationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(resumejobapplication.Table, sqlgraph.NewFieldSpec(resumejobapplication.FieldID, field.TypeUUID))
	if ps := rjad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rjad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rjad.mutation.done = true
	return affected, err
}

// ResumeJobApplicationDeleteOne is the builder for deleting a single ResumeJobApplication entity.
type ResumeJobApplicationDeleteOne struct {
	rjad *ResumeJobApplicationDelete
}

// Where appends a list predicates to the ResumeJobApplicationDelete builder.
func (rjado *ResumeJobApplicationDeleteOne) Where(ps ...predicate.ResumeJobApplication) *ResumeJobApplicationDeleteOne {
	rjado.rjad.mutation.Where(ps...)
	return rjado
}

// Exec executes the deletion query.
func (rjado *ResumeJobApplicationDeleteOne) Exec(ctx context.Context) error {
	n, err := rjado.rjad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{resumejobapplication.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rjado *ResumeJobApplicationDeleteOne) ExecX(ctx context.Context) {
	if err := rjado.Exec(ctx); err != nil {
		panic(err)
	}
}
