// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobskill"
	"github.com/chaitin/WhaleHire/backend/db/jobskillmeta"
	"github.com/google/uuid"
)

// JobSkillMetaCreate is the builder for creating a JobSkillMeta entity.
type JobSkillMetaCreate struct {
	config
	mutation *JobSkillMetaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (jsmc *JobSkillMetaCreate) SetName(s string) *JobSkillMetaCreate {
	jsmc.mutation.SetName(s)
	return jsmc
}

// SetUpdatedAt sets the "updated_at" field.
func (jsmc *JobSkillMetaCreate) SetUpdatedAt(t time.Time) *JobSkillMetaCreate {
	jsmc.mutation.SetUpdatedAt(t)
	return jsmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jsmc *JobSkillMetaCreate) SetNillableUpdatedAt(t *time.Time) *JobSkillMetaCreate {
	if t != nil {
		jsmc.SetUpdatedAt(*t)
	}
	return jsmc
}

// SetCreatedAt sets the "created_at" field.
func (jsmc *JobSkillMetaCreate) SetCreatedAt(t time.Time) *JobSkillMetaCreate {
	jsmc.mutation.SetCreatedAt(t)
	return jsmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jsmc *JobSkillMetaCreate) SetNillableCreatedAt(t *time.Time) *JobSkillMetaCreate {
	if t != nil {
		jsmc.SetCreatedAt(*t)
	}
	return jsmc
}

// SetDeletedAt sets the "deleted_at" field.
func (jsmc *JobSkillMetaCreate) SetDeletedAt(t time.Time) *JobSkillMetaCreate {
	jsmc.mutation.SetDeletedAt(t)
	return jsmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jsmc *JobSkillMetaCreate) SetNillableDeletedAt(t *time.Time) *JobSkillMetaCreate {
	if t != nil {
		jsmc.SetDeletedAt(*t)
	}
	return jsmc
}

// SetID sets the "id" field.
func (jsmc *JobSkillMetaCreate) SetID(u uuid.UUID) *JobSkillMetaCreate {
	jsmc.mutation.SetID(u)
	return jsmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jsmc *JobSkillMetaCreate) SetNillableID(u *uuid.UUID) *JobSkillMetaCreate {
	if u != nil {
		jsmc.SetID(*u)
	}
	return jsmc
}

// AddJobLinkIDs adds the "job_links" edge to the JobSkill entity by IDs.
func (jsmc *JobSkillMetaCreate) AddJobLinkIDs(ids ...uuid.UUID) *JobSkillMetaCreate {
	jsmc.mutation.AddJobLinkIDs(ids...)
	return jsmc
}

// AddJobLinks adds the "job_links" edges to the JobSkill entity.
func (jsmc *JobSkillMetaCreate) AddJobLinks(j ...*JobSkill) *JobSkillMetaCreate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jsmc.AddJobLinkIDs(ids...)
}

// Mutation returns the JobSkillMetaMutation object of the builder.
func (jsmc *JobSkillMetaCreate) Mutation() *JobSkillMetaMutation {
	return jsmc.mutation
}

// Save creates the JobSkillMeta in the database.
func (jsmc *JobSkillMetaCreate) Save(ctx context.Context) (*JobSkillMeta, error) {
	jsmc.defaults()
	return withHooks(ctx, jsmc.sqlSave, jsmc.mutation, jsmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jsmc *JobSkillMetaCreate) SaveX(ctx context.Context) *JobSkillMeta {
	v, err := jsmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jsmc *JobSkillMetaCreate) Exec(ctx context.Context) error {
	_, err := jsmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jsmc *JobSkillMetaCreate) ExecX(ctx context.Context) {
	if err := jsmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jsmc *JobSkillMetaCreate) defaults() {
	if _, ok := jsmc.mutation.UpdatedAt(); !ok {
		v := jobskillmeta.DefaultUpdatedAt()
		jsmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jsmc.mutation.CreatedAt(); !ok {
		v := jobskillmeta.DefaultCreatedAt()
		jsmc.mutation.SetCreatedAt(v)
	}
	if _, ok := jsmc.mutation.ID(); !ok {
		v := jobskillmeta.DefaultID()
		jsmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jsmc *JobSkillMetaCreate) check() error {
	if _, ok := jsmc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "JobSkillMeta.name"`)}
	}
	if v, ok := jsmc.mutation.Name(); ok {
		if err := jobskillmeta.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "JobSkillMeta.name": %w`, err)}
		}
	}
	if _, ok := jsmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "JobSkillMeta.updated_at"`)}
	}
	if _, ok := jsmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "JobSkillMeta.created_at"`)}
	}
	return nil
}

func (jsmc *JobSkillMetaCreate) sqlSave(ctx context.Context) (*JobSkillMeta, error) {
	if err := jsmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jsmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jsmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	jsmc.mutation.id = &_node.ID
	jsmc.mutation.done = true
	return _node, nil
}

func (jsmc *JobSkillMetaCreate) createSpec() (*JobSkillMeta, *sqlgraph.CreateSpec) {
	var (
		_node = &JobSkillMeta{config: jsmc.config}
		_spec = sqlgraph.NewCreateSpec(jobskillmeta.Table, sqlgraph.NewFieldSpec(jobskillmeta.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = jsmc.conflict
	if id, ok := jsmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := jsmc.mutation.Name(); ok {
		_spec.SetField(jobskillmeta.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := jsmc.mutation.UpdatedAt(); ok {
		_spec.SetField(jobskillmeta.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := jsmc.mutation.CreatedAt(); ok {
		_spec.SetField(jobskillmeta.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jsmc.mutation.DeletedAt(); ok {
		_spec.SetField(jobskillmeta.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := jsmc.mutation.JobLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobskillmeta.JobLinksTable,
			Columns: []string{jobskillmeta.JobLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobSkillMeta.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobSkillMetaUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (jsmc *JobSkillMetaCreate) OnConflict(opts ...sql.ConflictOption) *JobSkillMetaUpsertOne {
	jsmc.conflict = opts
	return &JobSkillMetaUpsertOne{
		create: jsmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobSkillMeta.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jsmc *JobSkillMetaCreate) OnConflictColumns(columns ...string) *JobSkillMetaUpsertOne {
	jsmc.conflict = append(jsmc.conflict, sql.ConflictColumns(columns...))
	return &JobSkillMetaUpsertOne{
		create: jsmc,
	}
}

type (
	// JobSkillMetaUpsertOne is the builder for "upsert"-ing
	//  one JobSkillMeta node.
	JobSkillMetaUpsertOne struct {
		create *JobSkillMetaCreate
	}

	// JobSkillMetaUpsert is the "OnConflict" setter.
	JobSkillMetaUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *JobSkillMetaUpsert) SetName(v string) *JobSkillMetaUpsert {
	u.Set(jobskillmeta.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *JobSkillMetaUpsert) UpdateName() *JobSkillMetaUpsert {
	u.SetExcluded(jobskillmeta.FieldName)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobSkillMetaUpsert) SetUpdatedAt(v time.Time) *JobSkillMetaUpsert {
	u.Set(jobskillmeta.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobSkillMetaUpsert) UpdateUpdatedAt() *JobSkillMetaUpsert {
	u.SetExcluded(jobskillmeta.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *JobSkillMetaUpsert) SetDeletedAt(v time.Time) *JobSkillMetaUpsert {
	u.Set(jobskillmeta.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobSkillMetaUpsert) UpdateDeletedAt() *JobSkillMetaUpsert {
	u.SetExcluded(jobskillmeta.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobSkillMetaUpsert) ClearDeletedAt() *JobSkillMetaUpsert {
	u.SetNull(jobskillmeta.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.JobSkillMeta.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobskillmeta.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobSkillMetaUpsertOne) UpdateNewValues() *JobSkillMetaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(jobskillmeta.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(jobskillmeta.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobSkillMeta.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *JobSkillMetaUpsertOne) Ignore() *JobSkillMetaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobSkillMetaUpsertOne) DoNothing() *JobSkillMetaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobSkillMetaCreate.OnConflict
// documentation for more info.
func (u *JobSkillMetaUpsertOne) Update(set func(*JobSkillMetaUpsert)) *JobSkillMetaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobSkillMetaUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *JobSkillMetaUpsertOne) SetName(v string) *JobSkillMetaUpsertOne {
	return u.Update(func(s *JobSkillMetaUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *JobSkillMetaUpsertOne) UpdateName() *JobSkillMetaUpsertOne {
	return u.Update(func(s *JobSkillMetaUpsert) {
		s.UpdateName()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobSkillMetaUpsertOne) SetUpdatedAt(v time.Time) *JobSkillMetaUpsertOne {
	return u.Update(func(s *JobSkillMetaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobSkillMetaUpsertOne) UpdateUpdatedAt() *JobSkillMetaUpsertOne {
	return u.Update(func(s *JobSkillMetaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *JobSkillMetaUpsertOne) SetDeletedAt(v time.Time) *JobSkillMetaUpsertOne {
	return u.Update(func(s *JobSkillMetaUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobSkillMetaUpsertOne) UpdateDeletedAt() *JobSkillMetaUpsertOne {
	return u.Update(func(s *JobSkillMetaUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobSkillMetaUpsertOne) ClearDeletedAt() *JobSkillMetaUpsertOne {
	return u.Update(func(s *JobSkillMetaUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *JobSkillMetaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for JobSkillMetaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobSkillMetaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *JobSkillMetaUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: JobSkillMetaUpsertOne.ID is not supported by MySQL driver. Use JobSkillMetaUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *JobSkillMetaUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// JobSkillMetaCreateBulk is the builder for creating many JobSkillMeta entities in bulk.
type JobSkillMetaCreateBulk struct {
	config
	err      error
	builders []*JobSkillMetaCreate
	conflict []sql.ConflictOption
}

// Save creates the JobSkillMeta entities in the database.
func (jsmcb *JobSkillMetaCreateBulk) Save(ctx context.Context) ([]*JobSkillMeta, error) {
	if jsmcb.err != nil {
		return nil, jsmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jsmcb.builders))
	nodes := make([]*JobSkillMeta, len(jsmcb.builders))
	mutators := make([]Mutator, len(jsmcb.builders))
	for i := range jsmcb.builders {
		func(i int, root context.Context) {
			builder := jsmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobSkillMetaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jsmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = jsmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jsmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jsmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jsmcb *JobSkillMetaCreateBulk) SaveX(ctx context.Context) []*JobSkillMeta {
	v, err := jsmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jsmcb *JobSkillMetaCreateBulk) Exec(ctx context.Context) error {
	_, err := jsmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jsmcb *JobSkillMetaCreateBulk) ExecX(ctx context.Context) {
	if err := jsmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobSkillMeta.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobSkillMetaUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (jsmcb *JobSkillMetaCreateBulk) OnConflict(opts ...sql.ConflictOption) *JobSkillMetaUpsertBulk {
	jsmcb.conflict = opts
	return &JobSkillMetaUpsertBulk{
		create: jsmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobSkillMeta.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jsmcb *JobSkillMetaCreateBulk) OnConflictColumns(columns ...string) *JobSkillMetaUpsertBulk {
	jsmcb.conflict = append(jsmcb.conflict, sql.ConflictColumns(columns...))
	return &JobSkillMetaUpsertBulk{
		create: jsmcb,
	}
}

// JobSkillMetaUpsertBulk is the builder for "upsert"-ing
// a bulk of JobSkillMeta nodes.
type JobSkillMetaUpsertBulk struct {
	create *JobSkillMetaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.JobSkillMeta.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobskillmeta.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobSkillMetaUpsertBulk) UpdateNewValues() *JobSkillMetaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(jobskillmeta.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(jobskillmeta.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobSkillMeta.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *JobSkillMetaUpsertBulk) Ignore() *JobSkillMetaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobSkillMetaUpsertBulk) DoNothing() *JobSkillMetaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobSkillMetaCreateBulk.OnConflict
// documentation for more info.
func (u *JobSkillMetaUpsertBulk) Update(set func(*JobSkillMetaUpsert)) *JobSkillMetaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobSkillMetaUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *JobSkillMetaUpsertBulk) SetName(v string) *JobSkillMetaUpsertBulk {
	return u.Update(func(s *JobSkillMetaUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *JobSkillMetaUpsertBulk) UpdateName() *JobSkillMetaUpsertBulk {
	return u.Update(func(s *JobSkillMetaUpsert) {
		s.UpdateName()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobSkillMetaUpsertBulk) SetUpdatedAt(v time.Time) *JobSkillMetaUpsertBulk {
	return u.Update(func(s *JobSkillMetaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobSkillMetaUpsertBulk) UpdateUpdatedAt() *JobSkillMetaUpsertBulk {
	return u.Update(func(s *JobSkillMetaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *JobSkillMetaUpsertBulk) SetDeletedAt(v time.Time) *JobSkillMetaUpsertBulk {
	return u.Update(func(s *JobSkillMetaUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobSkillMetaUpsertBulk) UpdateDeletedAt() *JobSkillMetaUpsertBulk {
	return u.Update(func(s *JobSkillMetaUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobSkillMetaUpsertBulk) ClearDeletedAt() *JobSkillMetaUpsertBulk {
	return u.Update(func(s *JobSkillMetaUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *JobSkillMetaUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the JobSkillMetaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for JobSkillMetaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobSkillMetaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
