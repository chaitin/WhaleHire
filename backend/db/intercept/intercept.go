// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db"
	"github.com/chaitin/WhaleHire/backend/db/admin"
	"github.com/chaitin/WhaleHire/backend/db/adminloginhistory"
	"github.com/chaitin/WhaleHire/backend/db/adminrole"
	"github.com/chaitin/WhaleHire/backend/db/attachment"
	"github.com/chaitin/WhaleHire/backend/db/conversation"
	"github.com/chaitin/WhaleHire/backend/db/message"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/role"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/chaitin/WhaleHire/backend/db/useridentity"
	"github.com/chaitin/WhaleHire/backend/db/userloginhistory"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next db.Querier) db.Querier {
	return db.QuerierFunc(func(ctx context.Context, q db.Query) (db.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next db.Querier) db.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q db.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The AdminFunc type is an adapter to allow the use of ordinary function as a Querier.
type AdminFunc func(context.Context, *db.AdminQuery) (db.Value, error)

// Query calls f(ctx, q).
func (f AdminFunc) Query(ctx context.Context, q db.Query) (db.Value, error) {
	if q, ok := q.(*db.AdminQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *db.AdminQuery", q)
}

// The TraverseAdmin type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAdmin func(context.Context, *db.AdminQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAdmin) Intercept(next db.Querier) db.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAdmin) Traverse(ctx context.Context, q db.Query) error {
	if q, ok := q.(*db.AdminQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *db.AdminQuery", q)
}

// The AdminLoginHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type AdminLoginHistoryFunc func(context.Context, *db.AdminLoginHistoryQuery) (db.Value, error)

// Query calls f(ctx, q).
func (f AdminLoginHistoryFunc) Query(ctx context.Context, q db.Query) (db.Value, error) {
	if q, ok := q.(*db.AdminLoginHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *db.AdminLoginHistoryQuery", q)
}

// The TraverseAdminLoginHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAdminLoginHistory func(context.Context, *db.AdminLoginHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAdminLoginHistory) Intercept(next db.Querier) db.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAdminLoginHistory) Traverse(ctx context.Context, q db.Query) error {
	if q, ok := q.(*db.AdminLoginHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *db.AdminLoginHistoryQuery", q)
}

// The AdminRoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type AdminRoleFunc func(context.Context, *db.AdminRoleQuery) (db.Value, error)

// Query calls f(ctx, q).
func (f AdminRoleFunc) Query(ctx context.Context, q db.Query) (db.Value, error) {
	if q, ok := q.(*db.AdminRoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *db.AdminRoleQuery", q)
}

// The TraverseAdminRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAdminRole func(context.Context, *db.AdminRoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAdminRole) Intercept(next db.Querier) db.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAdminRole) Traverse(ctx context.Context, q db.Query) error {
	if q, ok := q.(*db.AdminRoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *db.AdminRoleQuery", q)
}

// The AttachmentFunc type is an adapter to allow the use of ordinary function as a Querier.
type AttachmentFunc func(context.Context, *db.AttachmentQuery) (db.Value, error)

// Query calls f(ctx, q).
func (f AttachmentFunc) Query(ctx context.Context, q db.Query) (db.Value, error) {
	if q, ok := q.(*db.AttachmentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *db.AttachmentQuery", q)
}

// The TraverseAttachment type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAttachment func(context.Context, *db.AttachmentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAttachment) Intercept(next db.Querier) db.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAttachment) Traverse(ctx context.Context, q db.Query) error {
	if q, ok := q.(*db.AttachmentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *db.AttachmentQuery", q)
}

// The ConversationFunc type is an adapter to allow the use of ordinary function as a Querier.
type ConversationFunc func(context.Context, *db.ConversationQuery) (db.Value, error)

// Query calls f(ctx, q).
func (f ConversationFunc) Query(ctx context.Context, q db.Query) (db.Value, error) {
	if q, ok := q.(*db.ConversationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *db.ConversationQuery", q)
}

// The TraverseConversation type is an adapter to allow the use of ordinary function as Traverser.
type TraverseConversation func(context.Context, *db.ConversationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseConversation) Intercept(next db.Querier) db.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseConversation) Traverse(ctx context.Context, q db.Query) error {
	if q, ok := q.(*db.ConversationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *db.ConversationQuery", q)
}

// The MessageFunc type is an adapter to allow the use of ordinary function as a Querier.
type MessageFunc func(context.Context, *db.MessageQuery) (db.Value, error)

// Query calls f(ctx, q).
func (f MessageFunc) Query(ctx context.Context, q db.Query) (db.Value, error) {
	if q, ok := q.(*db.MessageQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *db.MessageQuery", q)
}

// The TraverseMessage type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMessage func(context.Context, *db.MessageQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMessage) Intercept(next db.Querier) db.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMessage) Traverse(ctx context.Context, q db.Query) error {
	if q, ok := q.(*db.MessageQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *db.MessageQuery", q)
}

// The RoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type RoleFunc func(context.Context, *db.RoleQuery) (db.Value, error)

// Query calls f(ctx, q).
func (f RoleFunc) Query(ctx context.Context, q db.Query) (db.Value, error) {
	if q, ok := q.(*db.RoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *db.RoleQuery", q)
}

// The TraverseRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRole func(context.Context, *db.RoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRole) Intercept(next db.Querier) db.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRole) Traverse(ctx context.Context, q db.Query) error {
	if q, ok := q.(*db.RoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *db.RoleQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *db.UserQuery) (db.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q db.Query) (db.Value, error) {
	if q, ok := q.(*db.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *db.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *db.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next db.Querier) db.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q db.Query) error {
	if q, ok := q.(*db.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *db.UserQuery", q)
}

// The UserIdentityFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserIdentityFunc func(context.Context, *db.UserIdentityQuery) (db.Value, error)

// Query calls f(ctx, q).
func (f UserIdentityFunc) Query(ctx context.Context, q db.Query) (db.Value, error) {
	if q, ok := q.(*db.UserIdentityQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *db.UserIdentityQuery", q)
}

// The TraverseUserIdentity type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserIdentity func(context.Context, *db.UserIdentityQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserIdentity) Intercept(next db.Querier) db.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserIdentity) Traverse(ctx context.Context, q db.Query) error {
	if q, ok := q.(*db.UserIdentityQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *db.UserIdentityQuery", q)
}

// The UserLoginHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserLoginHistoryFunc func(context.Context, *db.UserLoginHistoryQuery) (db.Value, error)

// Query calls f(ctx, q).
func (f UserLoginHistoryFunc) Query(ctx context.Context, q db.Query) (db.Value, error) {
	if q, ok := q.(*db.UserLoginHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *db.UserLoginHistoryQuery", q)
}

// The TraverseUserLoginHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserLoginHistory func(context.Context, *db.UserLoginHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserLoginHistory) Intercept(next db.Querier) db.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserLoginHistory) Traverse(ctx context.Context, q db.Query) error {
	if q, ok := q.(*db.UserLoginHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *db.UserLoginHistoryQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q db.Query) (Query, error) {
	switch q := q.(type) {
	case *db.AdminQuery:
		return &query[*db.AdminQuery, predicate.Admin, admin.OrderOption]{typ: db.TypeAdmin, tq: q}, nil
	case *db.AdminLoginHistoryQuery:
		return &query[*db.AdminLoginHistoryQuery, predicate.AdminLoginHistory, adminloginhistory.OrderOption]{typ: db.TypeAdminLoginHistory, tq: q}, nil
	case *db.AdminRoleQuery:
		return &query[*db.AdminRoleQuery, predicate.AdminRole, adminrole.OrderOption]{typ: db.TypeAdminRole, tq: q}, nil
	case *db.AttachmentQuery:
		return &query[*db.AttachmentQuery, predicate.Attachment, attachment.OrderOption]{typ: db.TypeAttachment, tq: q}, nil
	case *db.ConversationQuery:
		return &query[*db.ConversationQuery, predicate.Conversation, conversation.OrderOption]{typ: db.TypeConversation, tq: q}, nil
	case *db.MessageQuery:
		return &query[*db.MessageQuery, predicate.Message, message.OrderOption]{typ: db.TypeMessage, tq: q}, nil
	case *db.RoleQuery:
		return &query[*db.RoleQuery, predicate.Role, role.OrderOption]{typ: db.TypeRole, tq: q}, nil
	case *db.UserQuery:
		return &query[*db.UserQuery, predicate.User, user.OrderOption]{typ: db.TypeUser, tq: q}, nil
	case *db.UserIdentityQuery:
		return &query[*db.UserIdentityQuery, predicate.UserIdentity, useridentity.OrderOption]{typ: db.TypeUserIdentity, tq: q}, nil
	case *db.UserLoginHistoryQuery:
		return &query[*db.UserLoginHistoryQuery, predicate.UserLoginHistory, userloginhistory.OrderOption]{typ: db.TypeUserLoginHistory, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
