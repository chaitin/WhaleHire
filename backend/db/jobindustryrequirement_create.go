// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobindustryrequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/google/uuid"
)

// JobIndustryRequirementCreate is the builder for creating a JobIndustryRequirement entity.
type JobIndustryRequirementCreate struct {
	config
	mutation *JobIndustryRequirementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetJobID sets the "job_id" field.
func (jirc *JobIndustryRequirementCreate) SetJobID(u uuid.UUID) *JobIndustryRequirementCreate {
	jirc.mutation.SetJobID(u)
	return jirc
}

// SetIndustry sets the "industry" field.
func (jirc *JobIndustryRequirementCreate) SetIndustry(s string) *JobIndustryRequirementCreate {
	jirc.mutation.SetIndustry(s)
	return jirc
}

// SetCompanyName sets the "company_name" field.
func (jirc *JobIndustryRequirementCreate) SetCompanyName(s string) *JobIndustryRequirementCreate {
	jirc.mutation.SetCompanyName(s)
	return jirc
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (jirc *JobIndustryRequirementCreate) SetNillableCompanyName(s *string) *JobIndustryRequirementCreate {
	if s != nil {
		jirc.SetCompanyName(*s)
	}
	return jirc
}

// SetWeight sets the "weight" field.
func (jirc *JobIndustryRequirementCreate) SetWeight(i int) *JobIndustryRequirementCreate {
	jirc.mutation.SetWeight(i)
	return jirc
}

// SetCreatedAt sets the "created_at" field.
func (jirc *JobIndustryRequirementCreate) SetCreatedAt(t time.Time) *JobIndustryRequirementCreate {
	jirc.mutation.SetCreatedAt(t)
	return jirc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jirc *JobIndustryRequirementCreate) SetNillableCreatedAt(t *time.Time) *JobIndustryRequirementCreate {
	if t != nil {
		jirc.SetCreatedAt(*t)
	}
	return jirc
}

// SetUpdatedAt sets the "updated_at" field.
func (jirc *JobIndustryRequirementCreate) SetUpdatedAt(t time.Time) *JobIndustryRequirementCreate {
	jirc.mutation.SetUpdatedAt(t)
	return jirc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jirc *JobIndustryRequirementCreate) SetNillableUpdatedAt(t *time.Time) *JobIndustryRequirementCreate {
	if t != nil {
		jirc.SetUpdatedAt(*t)
	}
	return jirc
}

// SetDeletedAt sets the "deleted_at" field.
func (jirc *JobIndustryRequirementCreate) SetDeletedAt(t time.Time) *JobIndustryRequirementCreate {
	jirc.mutation.SetDeletedAt(t)
	return jirc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jirc *JobIndustryRequirementCreate) SetNillableDeletedAt(t *time.Time) *JobIndustryRequirementCreate {
	if t != nil {
		jirc.SetDeletedAt(*t)
	}
	return jirc
}

// SetID sets the "id" field.
func (jirc *JobIndustryRequirementCreate) SetID(u uuid.UUID) *JobIndustryRequirementCreate {
	jirc.mutation.SetID(u)
	return jirc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jirc *JobIndustryRequirementCreate) SetNillableID(u *uuid.UUID) *JobIndustryRequirementCreate {
	if u != nil {
		jirc.SetID(*u)
	}
	return jirc
}

// SetJob sets the "job" edge to the JobPosition entity.
func (jirc *JobIndustryRequirementCreate) SetJob(j *JobPosition) *JobIndustryRequirementCreate {
	return jirc.SetJobID(j.ID)
}

// Mutation returns the JobIndustryRequirementMutation object of the builder.
func (jirc *JobIndustryRequirementCreate) Mutation() *JobIndustryRequirementMutation {
	return jirc.mutation
}

// Save creates the JobIndustryRequirement in the database.
func (jirc *JobIndustryRequirementCreate) Save(ctx context.Context) (*JobIndustryRequirement, error) {
	jirc.defaults()
	return withHooks(ctx, jirc.sqlSave, jirc.mutation, jirc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jirc *JobIndustryRequirementCreate) SaveX(ctx context.Context) *JobIndustryRequirement {
	v, err := jirc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jirc *JobIndustryRequirementCreate) Exec(ctx context.Context) error {
	_, err := jirc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jirc *JobIndustryRequirementCreate) ExecX(ctx context.Context) {
	if err := jirc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jirc *JobIndustryRequirementCreate) defaults() {
	if _, ok := jirc.mutation.CreatedAt(); !ok {
		v := jobindustryrequirement.DefaultCreatedAt()
		jirc.mutation.SetCreatedAt(v)
	}
	if _, ok := jirc.mutation.UpdatedAt(); !ok {
		v := jobindustryrequirement.DefaultUpdatedAt()
		jirc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jirc.mutation.ID(); !ok {
		v := jobindustryrequirement.DefaultID()
		jirc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jirc *JobIndustryRequirementCreate) check() error {
	if _, ok := jirc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job_id", err: errors.New(`db: missing required field "JobIndustryRequirement.job_id"`)}
	}
	if _, ok := jirc.mutation.Industry(); !ok {
		return &ValidationError{Name: "industry", err: errors.New(`db: missing required field "JobIndustryRequirement.industry"`)}
	}
	if v, ok := jirc.mutation.Industry(); ok {
		if err := jobindustryrequirement.IndustryValidator(v); err != nil {
			return &ValidationError{Name: "industry", err: fmt.Errorf(`db: validator failed for field "JobIndustryRequirement.industry": %w`, err)}
		}
	}
	if v, ok := jirc.mutation.CompanyName(); ok {
		if err := jobindustryrequirement.CompanyNameValidator(v); err != nil {
			return &ValidationError{Name: "company_name", err: fmt.Errorf(`db: validator failed for field "JobIndustryRequirement.company_name": %w`, err)}
		}
	}
	if _, ok := jirc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`db: missing required field "JobIndustryRequirement.weight"`)}
	}
	if v, ok := jirc.mutation.Weight(); ok {
		if err := jobindustryrequirement.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`db: validator failed for field "JobIndustryRequirement.weight": %w`, err)}
		}
	}
	if _, ok := jirc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "JobIndustryRequirement.created_at"`)}
	}
	if _, ok := jirc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "JobIndustryRequirement.updated_at"`)}
	}
	if len(jirc.mutation.JobIDs()) == 0 {
		return &ValidationError{Name: "job", err: errors.New(`db: missing required edge "JobIndustryRequirement.job"`)}
	}
	return nil
}

func (jirc *JobIndustryRequirementCreate) sqlSave(ctx context.Context) (*JobIndustryRequirement, error) {
	if err := jirc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jirc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jirc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	jirc.mutation.id = &_node.ID
	jirc.mutation.done = true
	return _node, nil
}

func (jirc *JobIndustryRequirementCreate) createSpec() (*JobIndustryRequirement, *sqlgraph.CreateSpec) {
	var (
		_node = &JobIndustryRequirement{config: jirc.config}
		_spec = sqlgraph.NewCreateSpec(jobindustryrequirement.Table, sqlgraph.NewFieldSpec(jobindustryrequirement.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = jirc.conflict
	if id, ok := jirc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := jirc.mutation.Industry(); ok {
		_spec.SetField(jobindustryrequirement.FieldIndustry, field.TypeString, value)
		_node.Industry = value
	}
	if value, ok := jirc.mutation.CompanyName(); ok {
		_spec.SetField(jobindustryrequirement.FieldCompanyName, field.TypeString, value)
		_node.CompanyName = &value
	}
	if value, ok := jirc.mutation.Weight(); ok {
		_spec.SetField(jobindustryrequirement.FieldWeight, field.TypeInt, value)
		_node.Weight = value
	}
	if value, ok := jirc.mutation.CreatedAt(); ok {
		_spec.SetField(jobindustryrequirement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jirc.mutation.UpdatedAt(); ok {
		_spec.SetField(jobindustryrequirement.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := jirc.mutation.DeletedAt(); ok {
		_spec.SetField(jobindustryrequirement.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := jirc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobindustryrequirement.JobTable,
			Columns: []string{jobindustryrequirement.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.JobID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobIndustryRequirement.Create().
//		SetJobID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobIndustryRequirementUpsert) {
//			SetJobID(v+v).
//		}).
//		Exec(ctx)
func (jirc *JobIndustryRequirementCreate) OnConflict(opts ...sql.ConflictOption) *JobIndustryRequirementUpsertOne {
	jirc.conflict = opts
	return &JobIndustryRequirementUpsertOne{
		create: jirc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobIndustryRequirement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jirc *JobIndustryRequirementCreate) OnConflictColumns(columns ...string) *JobIndustryRequirementUpsertOne {
	jirc.conflict = append(jirc.conflict, sql.ConflictColumns(columns...))
	return &JobIndustryRequirementUpsertOne{
		create: jirc,
	}
}

type (
	// JobIndustryRequirementUpsertOne is the builder for "upsert"-ing
	//  one JobIndustryRequirement node.
	JobIndustryRequirementUpsertOne struct {
		create *JobIndustryRequirementCreate
	}

	// JobIndustryRequirementUpsert is the "OnConflict" setter.
	JobIndustryRequirementUpsert struct {
		*sql.UpdateSet
	}
)

// SetJobID sets the "job_id" field.
func (u *JobIndustryRequirementUpsert) SetJobID(v uuid.UUID) *JobIndustryRequirementUpsert {
	u.Set(jobindustryrequirement.FieldJobID, v)
	return u
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsert) UpdateJobID() *JobIndustryRequirementUpsert {
	u.SetExcluded(jobindustryrequirement.FieldJobID)
	return u
}

// SetIndustry sets the "industry" field.
func (u *JobIndustryRequirementUpsert) SetIndustry(v string) *JobIndustryRequirementUpsert {
	u.Set(jobindustryrequirement.FieldIndustry, v)
	return u
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsert) UpdateIndustry() *JobIndustryRequirementUpsert {
	u.SetExcluded(jobindustryrequirement.FieldIndustry)
	return u
}

// SetCompanyName sets the "company_name" field.
func (u *JobIndustryRequirementUpsert) SetCompanyName(v string) *JobIndustryRequirementUpsert {
	u.Set(jobindustryrequirement.FieldCompanyName, v)
	return u
}

// UpdateCompanyName sets the "company_name" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsert) UpdateCompanyName() *JobIndustryRequirementUpsert {
	u.SetExcluded(jobindustryrequirement.FieldCompanyName)
	return u
}

// ClearCompanyName clears the value of the "company_name" field.
func (u *JobIndustryRequirementUpsert) ClearCompanyName() *JobIndustryRequirementUpsert {
	u.SetNull(jobindustryrequirement.FieldCompanyName)
	return u
}

// SetWeight sets the "weight" field.
func (u *JobIndustryRequirementUpsert) SetWeight(v int) *JobIndustryRequirementUpsert {
	u.Set(jobindustryrequirement.FieldWeight, v)
	return u
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsert) UpdateWeight() *JobIndustryRequirementUpsert {
	u.SetExcluded(jobindustryrequirement.FieldWeight)
	return u
}

// AddWeight adds v to the "weight" field.
func (u *JobIndustryRequirementUpsert) AddWeight(v int) *JobIndustryRequirementUpsert {
	u.Add(jobindustryrequirement.FieldWeight, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobIndustryRequirementUpsert) SetUpdatedAt(v time.Time) *JobIndustryRequirementUpsert {
	u.Set(jobindustryrequirement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsert) UpdateUpdatedAt() *JobIndustryRequirementUpsert {
	u.SetExcluded(jobindustryrequirement.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *JobIndustryRequirementUpsert) SetDeletedAt(v time.Time) *JobIndustryRequirementUpsert {
	u.Set(jobindustryrequirement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsert) UpdateDeletedAt() *JobIndustryRequirementUpsert {
	u.SetExcluded(jobindustryrequirement.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobIndustryRequirementUpsert) ClearDeletedAt() *JobIndustryRequirementUpsert {
	u.SetNull(jobindustryrequirement.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.JobIndustryRequirement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobindustryrequirement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobIndustryRequirementUpsertOne) UpdateNewValues() *JobIndustryRequirementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(jobindustryrequirement.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(jobindustryrequirement.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobIndustryRequirement.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *JobIndustryRequirementUpsertOne) Ignore() *JobIndustryRequirementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobIndustryRequirementUpsertOne) DoNothing() *JobIndustryRequirementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobIndustryRequirementCreate.OnConflict
// documentation for more info.
func (u *JobIndustryRequirementUpsertOne) Update(set func(*JobIndustryRequirementUpsert)) *JobIndustryRequirementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobIndustryRequirementUpsert{UpdateSet: update})
	}))
	return u
}

// SetJobID sets the "job_id" field.
func (u *JobIndustryRequirementUpsertOne) SetJobID(v uuid.UUID) *JobIndustryRequirementUpsertOne {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.SetJobID(v)
	})
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsertOne) UpdateJobID() *JobIndustryRequirementUpsertOne {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.UpdateJobID()
	})
}

// SetIndustry sets the "industry" field.
func (u *JobIndustryRequirementUpsertOne) SetIndustry(v string) *JobIndustryRequirementUpsertOne {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.SetIndustry(v)
	})
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsertOne) UpdateIndustry() *JobIndustryRequirementUpsertOne {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.UpdateIndustry()
	})
}

// SetCompanyName sets the "company_name" field.
func (u *JobIndustryRequirementUpsertOne) SetCompanyName(v string) *JobIndustryRequirementUpsertOne {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.SetCompanyName(v)
	})
}

// UpdateCompanyName sets the "company_name" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsertOne) UpdateCompanyName() *JobIndustryRequirementUpsertOne {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.UpdateCompanyName()
	})
}

// ClearCompanyName clears the value of the "company_name" field.
func (u *JobIndustryRequirementUpsertOne) ClearCompanyName() *JobIndustryRequirementUpsertOne {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.ClearCompanyName()
	})
}

// SetWeight sets the "weight" field.
func (u *JobIndustryRequirementUpsertOne) SetWeight(v int) *JobIndustryRequirementUpsertOne {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *JobIndustryRequirementUpsertOne) AddWeight(v int) *JobIndustryRequirementUpsertOne {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsertOne) UpdateWeight() *JobIndustryRequirementUpsertOne {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.UpdateWeight()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobIndustryRequirementUpsertOne) SetUpdatedAt(v time.Time) *JobIndustryRequirementUpsertOne {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsertOne) UpdateUpdatedAt() *JobIndustryRequirementUpsertOne {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *JobIndustryRequirementUpsertOne) SetDeletedAt(v time.Time) *JobIndustryRequirementUpsertOne {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsertOne) UpdateDeletedAt() *JobIndustryRequirementUpsertOne {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobIndustryRequirementUpsertOne) ClearDeletedAt() *JobIndustryRequirementUpsertOne {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *JobIndustryRequirementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for JobIndustryRequirementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobIndustryRequirementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *JobIndustryRequirementUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: JobIndustryRequirementUpsertOne.ID is not supported by MySQL driver. Use JobIndustryRequirementUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *JobIndustryRequirementUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// JobIndustryRequirementCreateBulk is the builder for creating many JobIndustryRequirement entities in bulk.
type JobIndustryRequirementCreateBulk struct {
	config
	err      error
	builders []*JobIndustryRequirementCreate
	conflict []sql.ConflictOption
}

// Save creates the JobIndustryRequirement entities in the database.
func (jircb *JobIndustryRequirementCreateBulk) Save(ctx context.Context) ([]*JobIndustryRequirement, error) {
	if jircb.err != nil {
		return nil, jircb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jircb.builders))
	nodes := make([]*JobIndustryRequirement, len(jircb.builders))
	mutators := make([]Mutator, len(jircb.builders))
	for i := range jircb.builders {
		func(i int, root context.Context) {
			builder := jircb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobIndustryRequirementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jircb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = jircb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jircb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jircb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jircb *JobIndustryRequirementCreateBulk) SaveX(ctx context.Context) []*JobIndustryRequirement {
	v, err := jircb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jircb *JobIndustryRequirementCreateBulk) Exec(ctx context.Context) error {
	_, err := jircb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jircb *JobIndustryRequirementCreateBulk) ExecX(ctx context.Context) {
	if err := jircb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobIndustryRequirement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobIndustryRequirementUpsert) {
//			SetJobID(v+v).
//		}).
//		Exec(ctx)
func (jircb *JobIndustryRequirementCreateBulk) OnConflict(opts ...sql.ConflictOption) *JobIndustryRequirementUpsertBulk {
	jircb.conflict = opts
	return &JobIndustryRequirementUpsertBulk{
		create: jircb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobIndustryRequirement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jircb *JobIndustryRequirementCreateBulk) OnConflictColumns(columns ...string) *JobIndustryRequirementUpsertBulk {
	jircb.conflict = append(jircb.conflict, sql.ConflictColumns(columns...))
	return &JobIndustryRequirementUpsertBulk{
		create: jircb,
	}
}

// JobIndustryRequirementUpsertBulk is the builder for "upsert"-ing
// a bulk of JobIndustryRequirement nodes.
type JobIndustryRequirementUpsertBulk struct {
	create *JobIndustryRequirementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.JobIndustryRequirement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobindustryrequirement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobIndustryRequirementUpsertBulk) UpdateNewValues() *JobIndustryRequirementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(jobindustryrequirement.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(jobindustryrequirement.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobIndustryRequirement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *JobIndustryRequirementUpsertBulk) Ignore() *JobIndustryRequirementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobIndustryRequirementUpsertBulk) DoNothing() *JobIndustryRequirementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobIndustryRequirementCreateBulk.OnConflict
// documentation for more info.
func (u *JobIndustryRequirementUpsertBulk) Update(set func(*JobIndustryRequirementUpsert)) *JobIndustryRequirementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobIndustryRequirementUpsert{UpdateSet: update})
	}))
	return u
}

// SetJobID sets the "job_id" field.
func (u *JobIndustryRequirementUpsertBulk) SetJobID(v uuid.UUID) *JobIndustryRequirementUpsertBulk {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.SetJobID(v)
	})
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsertBulk) UpdateJobID() *JobIndustryRequirementUpsertBulk {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.UpdateJobID()
	})
}

// SetIndustry sets the "industry" field.
func (u *JobIndustryRequirementUpsertBulk) SetIndustry(v string) *JobIndustryRequirementUpsertBulk {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.SetIndustry(v)
	})
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsertBulk) UpdateIndustry() *JobIndustryRequirementUpsertBulk {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.UpdateIndustry()
	})
}

// SetCompanyName sets the "company_name" field.
func (u *JobIndustryRequirementUpsertBulk) SetCompanyName(v string) *JobIndustryRequirementUpsertBulk {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.SetCompanyName(v)
	})
}

// UpdateCompanyName sets the "company_name" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsertBulk) UpdateCompanyName() *JobIndustryRequirementUpsertBulk {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.UpdateCompanyName()
	})
}

// ClearCompanyName clears the value of the "company_name" field.
func (u *JobIndustryRequirementUpsertBulk) ClearCompanyName() *JobIndustryRequirementUpsertBulk {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.ClearCompanyName()
	})
}

// SetWeight sets the "weight" field.
func (u *JobIndustryRequirementUpsertBulk) SetWeight(v int) *JobIndustryRequirementUpsertBulk {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *JobIndustryRequirementUpsertBulk) AddWeight(v int) *JobIndustryRequirementUpsertBulk {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsertBulk) UpdateWeight() *JobIndustryRequirementUpsertBulk {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.UpdateWeight()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobIndustryRequirementUpsertBulk) SetUpdatedAt(v time.Time) *JobIndustryRequirementUpsertBulk {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsertBulk) UpdateUpdatedAt() *JobIndustryRequirementUpsertBulk {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *JobIndustryRequirementUpsertBulk) SetDeletedAt(v time.Time) *JobIndustryRequirementUpsertBulk {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobIndustryRequirementUpsertBulk) UpdateDeletedAt() *JobIndustryRequirementUpsertBulk {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobIndustryRequirementUpsertBulk) ClearDeletedAt() *JobIndustryRequirementUpsertBulk {
	return u.Update(func(s *JobIndustryRequirementUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *JobIndustryRequirementUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the JobIndustryRequirementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for JobIndustryRequirementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobIndustryRequirementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
