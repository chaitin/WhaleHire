// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxcursor"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxsetting"
	"github.com/google/uuid"
)

// ResumeMailboxCursorUpdate is the builder for updating ResumeMailboxCursor entities.
type ResumeMailboxCursorUpdate struct {
	config
	hooks     []Hook
	mutation  *ResumeMailboxCursorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ResumeMailboxCursorUpdate builder.
func (rmcu *ResumeMailboxCursorUpdate) Where(ps ...predicate.ResumeMailboxCursor) *ResumeMailboxCursorUpdate {
	rmcu.mutation.Where(ps...)
	return rmcu
}

// SetDeletedAt sets the "deleted_at" field.
func (rmcu *ResumeMailboxCursorUpdate) SetDeletedAt(t time.Time) *ResumeMailboxCursorUpdate {
	rmcu.mutation.SetDeletedAt(t)
	return rmcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rmcu *ResumeMailboxCursorUpdate) SetNillableDeletedAt(t *time.Time) *ResumeMailboxCursorUpdate {
	if t != nil {
		rmcu.SetDeletedAt(*t)
	}
	return rmcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rmcu *ResumeMailboxCursorUpdate) ClearDeletedAt() *ResumeMailboxCursorUpdate {
	rmcu.mutation.ClearDeletedAt()
	return rmcu
}

// SetMailboxID sets the "mailbox_id" field.
func (rmcu *ResumeMailboxCursorUpdate) SetMailboxID(u uuid.UUID) *ResumeMailboxCursorUpdate {
	rmcu.mutation.SetMailboxID(u)
	return rmcu
}

// SetNillableMailboxID sets the "mailbox_id" field if the given value is not nil.
func (rmcu *ResumeMailboxCursorUpdate) SetNillableMailboxID(u *uuid.UUID) *ResumeMailboxCursorUpdate {
	if u != nil {
		rmcu.SetMailboxID(*u)
	}
	return rmcu
}

// SetProtocolCursor sets the "protocol_cursor" field.
func (rmcu *ResumeMailboxCursorUpdate) SetProtocolCursor(s string) *ResumeMailboxCursorUpdate {
	rmcu.mutation.SetProtocolCursor(s)
	return rmcu
}

// SetNillableProtocolCursor sets the "protocol_cursor" field if the given value is not nil.
func (rmcu *ResumeMailboxCursorUpdate) SetNillableProtocolCursor(s *string) *ResumeMailboxCursorUpdate {
	if s != nil {
		rmcu.SetProtocolCursor(*s)
	}
	return rmcu
}

// SetLastMessageID sets the "last_message_id" field.
func (rmcu *ResumeMailboxCursorUpdate) SetLastMessageID(s string) *ResumeMailboxCursorUpdate {
	rmcu.mutation.SetLastMessageID(s)
	return rmcu
}

// SetNillableLastMessageID sets the "last_message_id" field if the given value is not nil.
func (rmcu *ResumeMailboxCursorUpdate) SetNillableLastMessageID(s *string) *ResumeMailboxCursorUpdate {
	if s != nil {
		rmcu.SetLastMessageID(*s)
	}
	return rmcu
}

// ClearLastMessageID clears the value of the "last_message_id" field.
func (rmcu *ResumeMailboxCursorUpdate) ClearLastMessageID() *ResumeMailboxCursorUpdate {
	rmcu.mutation.ClearLastMessageID()
	return rmcu
}

// SetUpdatedAt sets the "updated_at" field.
func (rmcu *ResumeMailboxCursorUpdate) SetUpdatedAt(t time.Time) *ResumeMailboxCursorUpdate {
	rmcu.mutation.SetUpdatedAt(t)
	return rmcu
}

// SetMailbox sets the "mailbox" edge to the ResumeMailboxSetting entity.
func (rmcu *ResumeMailboxCursorUpdate) SetMailbox(r *ResumeMailboxSetting) *ResumeMailboxCursorUpdate {
	return rmcu.SetMailboxID(r.ID)
}

// Mutation returns the ResumeMailboxCursorMutation object of the builder.
func (rmcu *ResumeMailboxCursorUpdate) Mutation() *ResumeMailboxCursorMutation {
	return rmcu.mutation
}

// ClearMailbox clears the "mailbox" edge to the ResumeMailboxSetting entity.
func (rmcu *ResumeMailboxCursorUpdate) ClearMailbox() *ResumeMailboxCursorUpdate {
	rmcu.mutation.ClearMailbox()
	return rmcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rmcu *ResumeMailboxCursorUpdate) Save(ctx context.Context) (int, error) {
	if err := rmcu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, rmcu.sqlSave, rmcu.mutation, rmcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmcu *ResumeMailboxCursorUpdate) SaveX(ctx context.Context) int {
	affected, err := rmcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rmcu *ResumeMailboxCursorUpdate) Exec(ctx context.Context) error {
	_, err := rmcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmcu *ResumeMailboxCursorUpdate) ExecX(ctx context.Context) {
	if err := rmcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmcu *ResumeMailboxCursorUpdate) defaults() error {
	if _, ok := rmcu.mutation.UpdatedAt(); !ok {
		if resumemailboxcursor.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumemailboxcursor.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumemailboxcursor.UpdateDefaultUpdatedAt()
		rmcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rmcu *ResumeMailboxCursorUpdate) check() error {
	if v, ok := rmcu.mutation.LastMessageID(); ok {
		if err := resumemailboxcursor.LastMessageIDValidator(v); err != nil {
			return &ValidationError{Name: "last_message_id", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxCursor.last_message_id": %w`, err)}
		}
	}
	if rmcu.mutation.MailboxCleared() && len(rmcu.mutation.MailboxIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeMailboxCursor.mailbox"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rmcu *ResumeMailboxCursorUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeMailboxCursorUpdate {
	rmcu.modifiers = append(rmcu.modifiers, modifiers...)
	return rmcu
}

func (rmcu *ResumeMailboxCursorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rmcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumemailboxcursor.Table, resumemailboxcursor.Columns, sqlgraph.NewFieldSpec(resumemailboxcursor.FieldID, field.TypeUUID))
	if ps := rmcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmcu.mutation.DeletedAt(); ok {
		_spec.SetField(resumemailboxcursor.FieldDeletedAt, field.TypeTime, value)
	}
	if rmcu.mutation.DeletedAtCleared() {
		_spec.ClearField(resumemailboxcursor.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rmcu.mutation.ProtocolCursor(); ok {
		_spec.SetField(resumemailboxcursor.FieldProtocolCursor, field.TypeString, value)
	}
	if value, ok := rmcu.mutation.LastMessageID(); ok {
		_spec.SetField(resumemailboxcursor.FieldLastMessageID, field.TypeString, value)
	}
	if rmcu.mutation.LastMessageIDCleared() {
		_spec.ClearField(resumemailboxcursor.FieldLastMessageID, field.TypeString)
	}
	if value, ok := rmcu.mutation.UpdatedAt(); ok {
		_spec.SetField(resumemailboxcursor.FieldUpdatedAt, field.TypeTime, value)
	}
	if rmcu.mutation.MailboxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumemailboxcursor.MailboxTable,
			Columns: []string{resumemailboxcursor.MailboxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxsetting.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmcu.mutation.MailboxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumemailboxcursor.MailboxTable,
			Columns: []string{resumemailboxcursor.MailboxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxsetting.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rmcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rmcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumemailboxcursor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rmcu.mutation.done = true
	return n, nil
}

// ResumeMailboxCursorUpdateOne is the builder for updating a single ResumeMailboxCursor entity.
type ResumeMailboxCursorUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ResumeMailboxCursorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (rmcuo *ResumeMailboxCursorUpdateOne) SetDeletedAt(t time.Time) *ResumeMailboxCursorUpdateOne {
	rmcuo.mutation.SetDeletedAt(t)
	return rmcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rmcuo *ResumeMailboxCursorUpdateOne) SetNillableDeletedAt(t *time.Time) *ResumeMailboxCursorUpdateOne {
	if t != nil {
		rmcuo.SetDeletedAt(*t)
	}
	return rmcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rmcuo *ResumeMailboxCursorUpdateOne) ClearDeletedAt() *ResumeMailboxCursorUpdateOne {
	rmcuo.mutation.ClearDeletedAt()
	return rmcuo
}

// SetMailboxID sets the "mailbox_id" field.
func (rmcuo *ResumeMailboxCursorUpdateOne) SetMailboxID(u uuid.UUID) *ResumeMailboxCursorUpdateOne {
	rmcuo.mutation.SetMailboxID(u)
	return rmcuo
}

// SetNillableMailboxID sets the "mailbox_id" field if the given value is not nil.
func (rmcuo *ResumeMailboxCursorUpdateOne) SetNillableMailboxID(u *uuid.UUID) *ResumeMailboxCursorUpdateOne {
	if u != nil {
		rmcuo.SetMailboxID(*u)
	}
	return rmcuo
}

// SetProtocolCursor sets the "protocol_cursor" field.
func (rmcuo *ResumeMailboxCursorUpdateOne) SetProtocolCursor(s string) *ResumeMailboxCursorUpdateOne {
	rmcuo.mutation.SetProtocolCursor(s)
	return rmcuo
}

// SetNillableProtocolCursor sets the "protocol_cursor" field if the given value is not nil.
func (rmcuo *ResumeMailboxCursorUpdateOne) SetNillableProtocolCursor(s *string) *ResumeMailboxCursorUpdateOne {
	if s != nil {
		rmcuo.SetProtocolCursor(*s)
	}
	return rmcuo
}

// SetLastMessageID sets the "last_message_id" field.
func (rmcuo *ResumeMailboxCursorUpdateOne) SetLastMessageID(s string) *ResumeMailboxCursorUpdateOne {
	rmcuo.mutation.SetLastMessageID(s)
	return rmcuo
}

// SetNillableLastMessageID sets the "last_message_id" field if the given value is not nil.
func (rmcuo *ResumeMailboxCursorUpdateOne) SetNillableLastMessageID(s *string) *ResumeMailboxCursorUpdateOne {
	if s != nil {
		rmcuo.SetLastMessageID(*s)
	}
	return rmcuo
}

// ClearLastMessageID clears the value of the "last_message_id" field.
func (rmcuo *ResumeMailboxCursorUpdateOne) ClearLastMessageID() *ResumeMailboxCursorUpdateOne {
	rmcuo.mutation.ClearLastMessageID()
	return rmcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rmcuo *ResumeMailboxCursorUpdateOne) SetUpdatedAt(t time.Time) *ResumeMailboxCursorUpdateOne {
	rmcuo.mutation.SetUpdatedAt(t)
	return rmcuo
}

// SetMailbox sets the "mailbox" edge to the ResumeMailboxSetting entity.
func (rmcuo *ResumeMailboxCursorUpdateOne) SetMailbox(r *ResumeMailboxSetting) *ResumeMailboxCursorUpdateOne {
	return rmcuo.SetMailboxID(r.ID)
}

// Mutation returns the ResumeMailboxCursorMutation object of the builder.
func (rmcuo *ResumeMailboxCursorUpdateOne) Mutation() *ResumeMailboxCursorMutation {
	return rmcuo.mutation
}

// ClearMailbox clears the "mailbox" edge to the ResumeMailboxSetting entity.
func (rmcuo *ResumeMailboxCursorUpdateOne) ClearMailbox() *ResumeMailboxCursorUpdateOne {
	rmcuo.mutation.ClearMailbox()
	return rmcuo
}

// Where appends a list predicates to the ResumeMailboxCursorUpdate builder.
func (rmcuo *ResumeMailboxCursorUpdateOne) Where(ps ...predicate.ResumeMailboxCursor) *ResumeMailboxCursorUpdateOne {
	rmcuo.mutation.Where(ps...)
	return rmcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rmcuo *ResumeMailboxCursorUpdateOne) Select(field string, fields ...string) *ResumeMailboxCursorUpdateOne {
	rmcuo.fields = append([]string{field}, fields...)
	return rmcuo
}

// Save executes the query and returns the updated ResumeMailboxCursor entity.
func (rmcuo *ResumeMailboxCursorUpdateOne) Save(ctx context.Context) (*ResumeMailboxCursor, error) {
	if err := rmcuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rmcuo.sqlSave, rmcuo.mutation, rmcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmcuo *ResumeMailboxCursorUpdateOne) SaveX(ctx context.Context) *ResumeMailboxCursor {
	node, err := rmcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rmcuo *ResumeMailboxCursorUpdateOne) Exec(ctx context.Context) error {
	_, err := rmcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmcuo *ResumeMailboxCursorUpdateOne) ExecX(ctx context.Context) {
	if err := rmcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmcuo *ResumeMailboxCursorUpdateOne) defaults() error {
	if _, ok := rmcuo.mutation.UpdatedAt(); !ok {
		if resumemailboxcursor.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumemailboxcursor.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumemailboxcursor.UpdateDefaultUpdatedAt()
		rmcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rmcuo *ResumeMailboxCursorUpdateOne) check() error {
	if v, ok := rmcuo.mutation.LastMessageID(); ok {
		if err := resumemailboxcursor.LastMessageIDValidator(v); err != nil {
			return &ValidationError{Name: "last_message_id", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxCursor.last_message_id": %w`, err)}
		}
	}
	if rmcuo.mutation.MailboxCleared() && len(rmcuo.mutation.MailboxIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeMailboxCursor.mailbox"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rmcuo *ResumeMailboxCursorUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeMailboxCursorUpdateOne {
	rmcuo.modifiers = append(rmcuo.modifiers, modifiers...)
	return rmcuo
}

func (rmcuo *ResumeMailboxCursorUpdateOne) sqlSave(ctx context.Context) (_node *ResumeMailboxCursor, err error) {
	if err := rmcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumemailboxcursor.Table, resumemailboxcursor.Columns, sqlgraph.NewFieldSpec(resumemailboxcursor.FieldID, field.TypeUUID))
	id, ok := rmcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ResumeMailboxCursor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rmcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resumemailboxcursor.FieldID)
		for _, f := range fields {
			if !resumemailboxcursor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != resumemailboxcursor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rmcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmcuo.mutation.DeletedAt(); ok {
		_spec.SetField(resumemailboxcursor.FieldDeletedAt, field.TypeTime, value)
	}
	if rmcuo.mutation.DeletedAtCleared() {
		_spec.ClearField(resumemailboxcursor.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rmcuo.mutation.ProtocolCursor(); ok {
		_spec.SetField(resumemailboxcursor.FieldProtocolCursor, field.TypeString, value)
	}
	if value, ok := rmcuo.mutation.LastMessageID(); ok {
		_spec.SetField(resumemailboxcursor.FieldLastMessageID, field.TypeString, value)
	}
	if rmcuo.mutation.LastMessageIDCleared() {
		_spec.ClearField(resumemailboxcursor.FieldLastMessageID, field.TypeString)
	}
	if value, ok := rmcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(resumemailboxcursor.FieldUpdatedAt, field.TypeTime, value)
	}
	if rmcuo.mutation.MailboxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumemailboxcursor.MailboxTable,
			Columns: []string{resumemailboxcursor.MailboxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxsetting.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmcuo.mutation.MailboxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumemailboxcursor.MailboxTable,
			Columns: []string{resumemailboxcursor.MailboxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxsetting.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rmcuo.modifiers...)
	_node = &ResumeMailboxCursor{config: rmcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rmcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumemailboxcursor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rmcuo.mutation.done = true
	return _node, nil
}
