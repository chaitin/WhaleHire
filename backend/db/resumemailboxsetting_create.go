// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxcursor"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxsetting"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxstatistic"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/google/uuid"
)

// ResumeMailboxSettingCreate is the builder for creating a ResumeMailboxSetting entity.
type ResumeMailboxSettingCreate struct {
	config
	mutation *ResumeMailboxSettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (rmsc *ResumeMailboxSettingCreate) SetDeletedAt(t time.Time) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetDeletedAt(t)
	return rmsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rmsc *ResumeMailboxSettingCreate) SetNillableDeletedAt(t *time.Time) *ResumeMailboxSettingCreate {
	if t != nil {
		rmsc.SetDeletedAt(*t)
	}
	return rmsc
}

// SetName sets the "name" field.
func (rmsc *ResumeMailboxSettingCreate) SetName(s string) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetName(s)
	return rmsc
}

// SetEmailAddress sets the "email_address" field.
func (rmsc *ResumeMailboxSettingCreate) SetEmailAddress(s string) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetEmailAddress(s)
	return rmsc
}

// SetProtocol sets the "protocol" field.
func (rmsc *ResumeMailboxSettingCreate) SetProtocol(r resumemailboxsetting.Protocol) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetProtocol(r)
	return rmsc
}

// SetHost sets the "host" field.
func (rmsc *ResumeMailboxSettingCreate) SetHost(s string) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetHost(s)
	return rmsc
}

// SetPort sets the "port" field.
func (rmsc *ResumeMailboxSettingCreate) SetPort(i int) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetPort(i)
	return rmsc
}

// SetUseSsl sets the "use_ssl" field.
func (rmsc *ResumeMailboxSettingCreate) SetUseSsl(b bool) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetUseSsl(b)
	return rmsc
}

// SetNillableUseSsl sets the "use_ssl" field if the given value is not nil.
func (rmsc *ResumeMailboxSettingCreate) SetNillableUseSsl(b *bool) *ResumeMailboxSettingCreate {
	if b != nil {
		rmsc.SetUseSsl(*b)
	}
	return rmsc
}

// SetFolder sets the "folder" field.
func (rmsc *ResumeMailboxSettingCreate) SetFolder(s string) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetFolder(s)
	return rmsc
}

// SetNillableFolder sets the "folder" field if the given value is not nil.
func (rmsc *ResumeMailboxSettingCreate) SetNillableFolder(s *string) *ResumeMailboxSettingCreate {
	if s != nil {
		rmsc.SetFolder(*s)
	}
	return rmsc
}

// SetAuthType sets the "auth_type" field.
func (rmsc *ResumeMailboxSettingCreate) SetAuthType(rt resumemailboxsetting.AuthType) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetAuthType(rt)
	return rmsc
}

// SetNillableAuthType sets the "auth_type" field if the given value is not nil.
func (rmsc *ResumeMailboxSettingCreate) SetNillableAuthType(rt *resumemailboxsetting.AuthType) *ResumeMailboxSettingCreate {
	if rt != nil {
		rmsc.SetAuthType(*rt)
	}
	return rmsc
}

// SetEncryptedCredential sets the "encrypted_credential" field.
func (rmsc *ResumeMailboxSettingCreate) SetEncryptedCredential(m map[string]interface{}) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetEncryptedCredential(m)
	return rmsc
}

// SetUploaderID sets the "uploader_id" field.
func (rmsc *ResumeMailboxSettingCreate) SetUploaderID(u uuid.UUID) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetUploaderID(u)
	return rmsc
}

// SetJobProfileID sets the "job_profile_id" field.
func (rmsc *ResumeMailboxSettingCreate) SetJobProfileID(u uuid.UUID) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetJobProfileID(u)
	return rmsc
}

// SetNillableJobProfileID sets the "job_profile_id" field if the given value is not nil.
func (rmsc *ResumeMailboxSettingCreate) SetNillableJobProfileID(u *uuid.UUID) *ResumeMailboxSettingCreate {
	if u != nil {
		rmsc.SetJobProfileID(*u)
	}
	return rmsc
}

// SetSyncIntervalMinutes sets the "sync_interval_minutes" field.
func (rmsc *ResumeMailboxSettingCreate) SetSyncIntervalMinutes(i int) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetSyncIntervalMinutes(i)
	return rmsc
}

// SetNillableSyncIntervalMinutes sets the "sync_interval_minutes" field if the given value is not nil.
func (rmsc *ResumeMailboxSettingCreate) SetNillableSyncIntervalMinutes(i *int) *ResumeMailboxSettingCreate {
	if i != nil {
		rmsc.SetSyncIntervalMinutes(*i)
	}
	return rmsc
}

// SetStatus sets the "status" field.
func (rmsc *ResumeMailboxSettingCreate) SetStatus(r resumemailboxsetting.Status) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetStatus(r)
	return rmsc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rmsc *ResumeMailboxSettingCreate) SetNillableStatus(r *resumemailboxsetting.Status) *ResumeMailboxSettingCreate {
	if r != nil {
		rmsc.SetStatus(*r)
	}
	return rmsc
}

// SetLastSyncedAt sets the "last_synced_at" field.
func (rmsc *ResumeMailboxSettingCreate) SetLastSyncedAt(t time.Time) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetLastSyncedAt(t)
	return rmsc
}

// SetNillableLastSyncedAt sets the "last_synced_at" field if the given value is not nil.
func (rmsc *ResumeMailboxSettingCreate) SetNillableLastSyncedAt(t *time.Time) *ResumeMailboxSettingCreate {
	if t != nil {
		rmsc.SetLastSyncedAt(*t)
	}
	return rmsc
}

// SetLastError sets the "last_error" field.
func (rmsc *ResumeMailboxSettingCreate) SetLastError(s string) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetLastError(s)
	return rmsc
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (rmsc *ResumeMailboxSettingCreate) SetNillableLastError(s *string) *ResumeMailboxSettingCreate {
	if s != nil {
		rmsc.SetLastError(*s)
	}
	return rmsc
}

// SetRetryCount sets the "retry_count" field.
func (rmsc *ResumeMailboxSettingCreate) SetRetryCount(i int) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetRetryCount(i)
	return rmsc
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (rmsc *ResumeMailboxSettingCreate) SetNillableRetryCount(i *int) *ResumeMailboxSettingCreate {
	if i != nil {
		rmsc.SetRetryCount(*i)
	}
	return rmsc
}

// SetCreatedAt sets the "created_at" field.
func (rmsc *ResumeMailboxSettingCreate) SetCreatedAt(t time.Time) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetCreatedAt(t)
	return rmsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rmsc *ResumeMailboxSettingCreate) SetNillableCreatedAt(t *time.Time) *ResumeMailboxSettingCreate {
	if t != nil {
		rmsc.SetCreatedAt(*t)
	}
	return rmsc
}

// SetUpdatedAt sets the "updated_at" field.
func (rmsc *ResumeMailboxSettingCreate) SetUpdatedAt(t time.Time) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetUpdatedAt(t)
	return rmsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rmsc *ResumeMailboxSettingCreate) SetNillableUpdatedAt(t *time.Time) *ResumeMailboxSettingCreate {
	if t != nil {
		rmsc.SetUpdatedAt(*t)
	}
	return rmsc
}

// SetID sets the "id" field.
func (rmsc *ResumeMailboxSettingCreate) SetID(u uuid.UUID) *ResumeMailboxSettingCreate {
	rmsc.mutation.SetID(u)
	return rmsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rmsc *ResumeMailboxSettingCreate) SetNillableID(u *uuid.UUID) *ResumeMailboxSettingCreate {
	if u != nil {
		rmsc.SetID(*u)
	}
	return rmsc
}

// SetUploader sets the "uploader" edge to the User entity.
func (rmsc *ResumeMailboxSettingCreate) SetUploader(u *User) *ResumeMailboxSettingCreate {
	return rmsc.SetUploaderID(u.ID)
}

// SetJobProfile sets the "job_profile" edge to the JobPosition entity.
func (rmsc *ResumeMailboxSettingCreate) SetJobProfile(j *JobPosition) *ResumeMailboxSettingCreate {
	return rmsc.SetJobProfileID(j.ID)
}

// AddCursorIDs adds the "cursors" edge to the ResumeMailboxCursor entity by IDs.
func (rmsc *ResumeMailboxSettingCreate) AddCursorIDs(ids ...uuid.UUID) *ResumeMailboxSettingCreate {
	rmsc.mutation.AddCursorIDs(ids...)
	return rmsc
}

// AddCursors adds the "cursors" edges to the ResumeMailboxCursor entity.
func (rmsc *ResumeMailboxSettingCreate) AddCursors(r ...*ResumeMailboxCursor) *ResumeMailboxSettingCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rmsc.AddCursorIDs(ids...)
}

// AddStatisticIDs adds the "statistics" edge to the ResumeMailboxStatistic entity by IDs.
func (rmsc *ResumeMailboxSettingCreate) AddStatisticIDs(ids ...uuid.UUID) *ResumeMailboxSettingCreate {
	rmsc.mutation.AddStatisticIDs(ids...)
	return rmsc
}

// AddStatistics adds the "statistics" edges to the ResumeMailboxStatistic entity.
func (rmsc *ResumeMailboxSettingCreate) AddStatistics(r ...*ResumeMailboxStatistic) *ResumeMailboxSettingCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rmsc.AddStatisticIDs(ids...)
}

// Mutation returns the ResumeMailboxSettingMutation object of the builder.
func (rmsc *ResumeMailboxSettingCreate) Mutation() *ResumeMailboxSettingMutation {
	return rmsc.mutation
}

// Save creates the ResumeMailboxSetting in the database.
func (rmsc *ResumeMailboxSettingCreate) Save(ctx context.Context) (*ResumeMailboxSetting, error) {
	if err := rmsc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rmsc.sqlSave, rmsc.mutation, rmsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rmsc *ResumeMailboxSettingCreate) SaveX(ctx context.Context) *ResumeMailboxSetting {
	v, err := rmsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmsc *ResumeMailboxSettingCreate) Exec(ctx context.Context) error {
	_, err := rmsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmsc *ResumeMailboxSettingCreate) ExecX(ctx context.Context) {
	if err := rmsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmsc *ResumeMailboxSettingCreate) defaults() error {
	if _, ok := rmsc.mutation.UseSsl(); !ok {
		v := resumemailboxsetting.DefaultUseSsl
		rmsc.mutation.SetUseSsl(v)
	}
	if _, ok := rmsc.mutation.AuthType(); !ok {
		v := resumemailboxsetting.DefaultAuthType
		rmsc.mutation.SetAuthType(v)
	}
	if _, ok := rmsc.mutation.Status(); !ok {
		v := resumemailboxsetting.DefaultStatus
		rmsc.mutation.SetStatus(v)
	}
	if _, ok := rmsc.mutation.RetryCount(); !ok {
		v := resumemailboxsetting.DefaultRetryCount
		rmsc.mutation.SetRetryCount(v)
	}
	if _, ok := rmsc.mutation.CreatedAt(); !ok {
		if resumemailboxsetting.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized resumemailboxsetting.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := resumemailboxsetting.DefaultCreatedAt()
		rmsc.mutation.SetCreatedAt(v)
	}
	if _, ok := rmsc.mutation.UpdatedAt(); !ok {
		if resumemailboxsetting.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumemailboxsetting.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumemailboxsetting.DefaultUpdatedAt()
		rmsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rmsc.mutation.ID(); !ok {
		if resumemailboxsetting.DefaultID == nil {
			return fmt.Errorf("db: uninitialized resumemailboxsetting.DefaultID (forgotten import db/runtime?)")
		}
		v := resumemailboxsetting.DefaultID()
		rmsc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rmsc *ResumeMailboxSettingCreate) check() error {
	if _, ok := rmsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "ResumeMailboxSetting.name"`)}
	}
	if v, ok := rmsc.mutation.Name(); ok {
		if err := resumemailboxsetting.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.name": %w`, err)}
		}
	}
	if _, ok := rmsc.mutation.EmailAddress(); !ok {
		return &ValidationError{Name: "email_address", err: errors.New(`db: missing required field "ResumeMailboxSetting.email_address"`)}
	}
	if v, ok := rmsc.mutation.EmailAddress(); ok {
		if err := resumemailboxsetting.EmailAddressValidator(v); err != nil {
			return &ValidationError{Name: "email_address", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.email_address": %w`, err)}
		}
	}
	if _, ok := rmsc.mutation.Protocol(); !ok {
		return &ValidationError{Name: "protocol", err: errors.New(`db: missing required field "ResumeMailboxSetting.protocol"`)}
	}
	if v, ok := rmsc.mutation.Protocol(); ok {
		if err := resumemailboxsetting.ProtocolValidator(v); err != nil {
			return &ValidationError{Name: "protocol", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.protocol": %w`, err)}
		}
	}
	if _, ok := rmsc.mutation.Host(); !ok {
		return &ValidationError{Name: "host", err: errors.New(`db: missing required field "ResumeMailboxSetting.host"`)}
	}
	if v, ok := rmsc.mutation.Host(); ok {
		if err := resumemailboxsetting.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.host": %w`, err)}
		}
	}
	if _, ok := rmsc.mutation.Port(); !ok {
		return &ValidationError{Name: "port", err: errors.New(`db: missing required field "ResumeMailboxSetting.port"`)}
	}
	if _, ok := rmsc.mutation.UseSsl(); !ok {
		return &ValidationError{Name: "use_ssl", err: errors.New(`db: missing required field "ResumeMailboxSetting.use_ssl"`)}
	}
	if v, ok := rmsc.mutation.Folder(); ok {
		if err := resumemailboxsetting.FolderValidator(v); err != nil {
			return &ValidationError{Name: "folder", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.folder": %w`, err)}
		}
	}
	if _, ok := rmsc.mutation.AuthType(); !ok {
		return &ValidationError{Name: "auth_type", err: errors.New(`db: missing required field "ResumeMailboxSetting.auth_type"`)}
	}
	if v, ok := rmsc.mutation.AuthType(); ok {
		if err := resumemailboxsetting.AuthTypeValidator(v); err != nil {
			return &ValidationError{Name: "auth_type", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.auth_type": %w`, err)}
		}
	}
	if _, ok := rmsc.mutation.EncryptedCredential(); !ok {
		return &ValidationError{Name: "encrypted_credential", err: errors.New(`db: missing required field "ResumeMailboxSetting.encrypted_credential"`)}
	}
	if _, ok := rmsc.mutation.UploaderID(); !ok {
		return &ValidationError{Name: "uploader_id", err: errors.New(`db: missing required field "ResumeMailboxSetting.uploader_id"`)}
	}
	if _, ok := rmsc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "ResumeMailboxSetting.status"`)}
	}
	if v, ok := rmsc.mutation.Status(); ok {
		if err := resumemailboxsetting.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxSetting.status": %w`, err)}
		}
	}
	if _, ok := rmsc.mutation.RetryCount(); !ok {
		return &ValidationError{Name: "retry_count", err: errors.New(`db: missing required field "ResumeMailboxSetting.retry_count"`)}
	}
	if _, ok := rmsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ResumeMailboxSetting.created_at"`)}
	}
	if _, ok := rmsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "ResumeMailboxSetting.updated_at"`)}
	}
	if len(rmsc.mutation.UploaderIDs()) == 0 {
		return &ValidationError{Name: "uploader", err: errors.New(`db: missing required edge "ResumeMailboxSetting.uploader"`)}
	}
	return nil
}

func (rmsc *ResumeMailboxSettingCreate) sqlSave(ctx context.Context) (*ResumeMailboxSetting, error) {
	if err := rmsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rmsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rmsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rmsc.mutation.id = &_node.ID
	rmsc.mutation.done = true
	return _node, nil
}

func (rmsc *ResumeMailboxSettingCreate) createSpec() (*ResumeMailboxSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &ResumeMailboxSetting{config: rmsc.config}
		_spec = sqlgraph.NewCreateSpec(resumemailboxsetting.Table, sqlgraph.NewFieldSpec(resumemailboxsetting.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rmsc.conflict
	if id, ok := rmsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rmsc.mutation.DeletedAt(); ok {
		_spec.SetField(resumemailboxsetting.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rmsc.mutation.Name(); ok {
		_spec.SetField(resumemailboxsetting.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rmsc.mutation.EmailAddress(); ok {
		_spec.SetField(resumemailboxsetting.FieldEmailAddress, field.TypeString, value)
		_node.EmailAddress = value
	}
	if value, ok := rmsc.mutation.Protocol(); ok {
		_spec.SetField(resumemailboxsetting.FieldProtocol, field.TypeEnum, value)
		_node.Protocol = value
	}
	if value, ok := rmsc.mutation.Host(); ok {
		_spec.SetField(resumemailboxsetting.FieldHost, field.TypeString, value)
		_node.Host = value
	}
	if value, ok := rmsc.mutation.Port(); ok {
		_spec.SetField(resumemailboxsetting.FieldPort, field.TypeInt, value)
		_node.Port = value
	}
	if value, ok := rmsc.mutation.UseSsl(); ok {
		_spec.SetField(resumemailboxsetting.FieldUseSsl, field.TypeBool, value)
		_node.UseSsl = value
	}
	if value, ok := rmsc.mutation.Folder(); ok {
		_spec.SetField(resumemailboxsetting.FieldFolder, field.TypeString, value)
		_node.Folder = value
	}
	if value, ok := rmsc.mutation.AuthType(); ok {
		_spec.SetField(resumemailboxsetting.FieldAuthType, field.TypeEnum, value)
		_node.AuthType = value
	}
	if value, ok := rmsc.mutation.EncryptedCredential(); ok {
		_spec.SetField(resumemailboxsetting.FieldEncryptedCredential, field.TypeJSON, value)
		_node.EncryptedCredential = value
	}
	if value, ok := rmsc.mutation.SyncIntervalMinutes(); ok {
		_spec.SetField(resumemailboxsetting.FieldSyncIntervalMinutes, field.TypeInt, value)
		_node.SyncIntervalMinutes = &value
	}
	if value, ok := rmsc.mutation.Status(); ok {
		_spec.SetField(resumemailboxsetting.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := rmsc.mutation.LastSyncedAt(); ok {
		_spec.SetField(resumemailboxsetting.FieldLastSyncedAt, field.TypeTime, value)
		_node.LastSyncedAt = &value
	}
	if value, ok := rmsc.mutation.LastError(); ok {
		_spec.SetField(resumemailboxsetting.FieldLastError, field.TypeString, value)
		_node.LastError = value
	}
	if value, ok := rmsc.mutation.RetryCount(); ok {
		_spec.SetField(resumemailboxsetting.FieldRetryCount, field.TypeInt, value)
		_node.RetryCount = value
	}
	if value, ok := rmsc.mutation.CreatedAt(); ok {
		_spec.SetField(resumemailboxsetting.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rmsc.mutation.UpdatedAt(); ok {
		_spec.SetField(resumemailboxsetting.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rmsc.mutation.UploaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resumemailboxsetting.UploaderTable,
			Columns: []string{resumemailboxsetting.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UploaderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rmsc.mutation.JobProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resumemailboxsetting.JobProfileTable,
			Columns: []string{resumemailboxsetting.JobProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.JobProfileID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rmsc.mutation.CursorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resumemailboxsetting.CursorsTable,
			Columns: []string{resumemailboxsetting.CursorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxcursor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rmsc.mutation.StatisticsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resumemailboxsetting.StatisticsTable,
			Columns: []string{resumemailboxsetting.StatisticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxstatistic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeMailboxSetting.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeMailboxSettingUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rmsc *ResumeMailboxSettingCreate) OnConflict(opts ...sql.ConflictOption) *ResumeMailboxSettingUpsertOne {
	rmsc.conflict = opts
	return &ResumeMailboxSettingUpsertOne{
		create: rmsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeMailboxSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rmsc *ResumeMailboxSettingCreate) OnConflictColumns(columns ...string) *ResumeMailboxSettingUpsertOne {
	rmsc.conflict = append(rmsc.conflict, sql.ConflictColumns(columns...))
	return &ResumeMailboxSettingUpsertOne{
		create: rmsc,
	}
}

type (
	// ResumeMailboxSettingUpsertOne is the builder for "upsert"-ing
	//  one ResumeMailboxSetting node.
	ResumeMailboxSettingUpsertOne struct {
		create *ResumeMailboxSettingCreate
	}

	// ResumeMailboxSettingUpsert is the "OnConflict" setter.
	ResumeMailboxSettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeMailboxSettingUpsert) SetDeletedAt(v time.Time) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdateDeletedAt() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeMailboxSettingUpsert) ClearDeletedAt() *ResumeMailboxSettingUpsert {
	u.SetNull(resumemailboxsetting.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *ResumeMailboxSettingUpsert) SetName(v string) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdateName() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldName)
	return u
}

// SetEmailAddress sets the "email_address" field.
func (u *ResumeMailboxSettingUpsert) SetEmailAddress(v string) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldEmailAddress, v)
	return u
}

// UpdateEmailAddress sets the "email_address" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdateEmailAddress() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldEmailAddress)
	return u
}

// SetProtocol sets the "protocol" field.
func (u *ResumeMailboxSettingUpsert) SetProtocol(v resumemailboxsetting.Protocol) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldProtocol, v)
	return u
}

// UpdateProtocol sets the "protocol" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdateProtocol() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldProtocol)
	return u
}

// SetHost sets the "host" field.
func (u *ResumeMailboxSettingUpsert) SetHost(v string) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldHost, v)
	return u
}

// UpdateHost sets the "host" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdateHost() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldHost)
	return u
}

// SetPort sets the "port" field.
func (u *ResumeMailboxSettingUpsert) SetPort(v int) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldPort, v)
	return u
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdatePort() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldPort)
	return u
}

// AddPort adds v to the "port" field.
func (u *ResumeMailboxSettingUpsert) AddPort(v int) *ResumeMailboxSettingUpsert {
	u.Add(resumemailboxsetting.FieldPort, v)
	return u
}

// SetUseSsl sets the "use_ssl" field.
func (u *ResumeMailboxSettingUpsert) SetUseSsl(v bool) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldUseSsl, v)
	return u
}

// UpdateUseSsl sets the "use_ssl" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdateUseSsl() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldUseSsl)
	return u
}

// SetFolder sets the "folder" field.
func (u *ResumeMailboxSettingUpsert) SetFolder(v string) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldFolder, v)
	return u
}

// UpdateFolder sets the "folder" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdateFolder() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldFolder)
	return u
}

// ClearFolder clears the value of the "folder" field.
func (u *ResumeMailboxSettingUpsert) ClearFolder() *ResumeMailboxSettingUpsert {
	u.SetNull(resumemailboxsetting.FieldFolder)
	return u
}

// SetAuthType sets the "auth_type" field.
func (u *ResumeMailboxSettingUpsert) SetAuthType(v resumemailboxsetting.AuthType) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldAuthType, v)
	return u
}

// UpdateAuthType sets the "auth_type" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdateAuthType() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldAuthType)
	return u
}

// SetEncryptedCredential sets the "encrypted_credential" field.
func (u *ResumeMailboxSettingUpsert) SetEncryptedCredential(v map[string]interface{}) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldEncryptedCredential, v)
	return u
}

// UpdateEncryptedCredential sets the "encrypted_credential" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdateEncryptedCredential() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldEncryptedCredential)
	return u
}

// SetUploaderID sets the "uploader_id" field.
func (u *ResumeMailboxSettingUpsert) SetUploaderID(v uuid.UUID) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldUploaderID, v)
	return u
}

// UpdateUploaderID sets the "uploader_id" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdateUploaderID() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldUploaderID)
	return u
}

// SetJobProfileID sets the "job_profile_id" field.
func (u *ResumeMailboxSettingUpsert) SetJobProfileID(v uuid.UUID) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldJobProfileID, v)
	return u
}

// UpdateJobProfileID sets the "job_profile_id" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdateJobProfileID() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldJobProfileID)
	return u
}

// ClearJobProfileID clears the value of the "job_profile_id" field.
func (u *ResumeMailboxSettingUpsert) ClearJobProfileID() *ResumeMailboxSettingUpsert {
	u.SetNull(resumemailboxsetting.FieldJobProfileID)
	return u
}

// SetSyncIntervalMinutes sets the "sync_interval_minutes" field.
func (u *ResumeMailboxSettingUpsert) SetSyncIntervalMinutes(v int) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldSyncIntervalMinutes, v)
	return u
}

// UpdateSyncIntervalMinutes sets the "sync_interval_minutes" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdateSyncIntervalMinutes() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldSyncIntervalMinutes)
	return u
}

// AddSyncIntervalMinutes adds v to the "sync_interval_minutes" field.
func (u *ResumeMailboxSettingUpsert) AddSyncIntervalMinutes(v int) *ResumeMailboxSettingUpsert {
	u.Add(resumemailboxsetting.FieldSyncIntervalMinutes, v)
	return u
}

// ClearSyncIntervalMinutes clears the value of the "sync_interval_minutes" field.
func (u *ResumeMailboxSettingUpsert) ClearSyncIntervalMinutes() *ResumeMailboxSettingUpsert {
	u.SetNull(resumemailboxsetting.FieldSyncIntervalMinutes)
	return u
}

// SetStatus sets the "status" field.
func (u *ResumeMailboxSettingUpsert) SetStatus(v resumemailboxsetting.Status) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdateStatus() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldStatus)
	return u
}

// SetLastSyncedAt sets the "last_synced_at" field.
func (u *ResumeMailboxSettingUpsert) SetLastSyncedAt(v time.Time) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldLastSyncedAt, v)
	return u
}

// UpdateLastSyncedAt sets the "last_synced_at" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdateLastSyncedAt() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldLastSyncedAt)
	return u
}

// ClearLastSyncedAt clears the value of the "last_synced_at" field.
func (u *ResumeMailboxSettingUpsert) ClearLastSyncedAt() *ResumeMailboxSettingUpsert {
	u.SetNull(resumemailboxsetting.FieldLastSyncedAt)
	return u
}

// SetLastError sets the "last_error" field.
func (u *ResumeMailboxSettingUpsert) SetLastError(v string) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldLastError, v)
	return u
}

// UpdateLastError sets the "last_error" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdateLastError() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldLastError)
	return u
}

// ClearLastError clears the value of the "last_error" field.
func (u *ResumeMailboxSettingUpsert) ClearLastError() *ResumeMailboxSettingUpsert {
	u.SetNull(resumemailboxsetting.FieldLastError)
	return u
}

// SetRetryCount sets the "retry_count" field.
func (u *ResumeMailboxSettingUpsert) SetRetryCount(v int) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldRetryCount, v)
	return u
}

// UpdateRetryCount sets the "retry_count" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdateRetryCount() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldRetryCount)
	return u
}

// AddRetryCount adds v to the "retry_count" field.
func (u *ResumeMailboxSettingUpsert) AddRetryCount(v int) *ResumeMailboxSettingUpsert {
	u.Add(resumemailboxsetting.FieldRetryCount, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeMailboxSettingUpsert) SetUpdatedAt(v time.Time) *ResumeMailboxSettingUpsert {
	u.Set(resumemailboxsetting.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsert) UpdateUpdatedAt() *ResumeMailboxSettingUpsert {
	u.SetExcluded(resumemailboxsetting.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ResumeMailboxSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumemailboxsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeMailboxSettingUpsertOne) UpdateNewValues() *ResumeMailboxSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resumemailboxsetting.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(resumemailboxsetting.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeMailboxSetting.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResumeMailboxSettingUpsertOne) Ignore() *ResumeMailboxSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeMailboxSettingUpsertOne) DoNothing() *ResumeMailboxSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeMailboxSettingCreate.OnConflict
// documentation for more info.
func (u *ResumeMailboxSettingUpsertOne) Update(set func(*ResumeMailboxSettingUpsert)) *ResumeMailboxSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeMailboxSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeMailboxSettingUpsertOne) SetDeletedAt(v time.Time) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdateDeletedAt() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeMailboxSettingUpsertOne) ClearDeletedAt() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *ResumeMailboxSettingUpsertOne) SetName(v string) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdateName() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateName()
	})
}

// SetEmailAddress sets the "email_address" field.
func (u *ResumeMailboxSettingUpsertOne) SetEmailAddress(v string) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetEmailAddress(v)
	})
}

// UpdateEmailAddress sets the "email_address" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdateEmailAddress() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateEmailAddress()
	})
}

// SetProtocol sets the "protocol" field.
func (u *ResumeMailboxSettingUpsertOne) SetProtocol(v resumemailboxsetting.Protocol) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetProtocol(v)
	})
}

// UpdateProtocol sets the "protocol" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdateProtocol() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateProtocol()
	})
}

// SetHost sets the "host" field.
func (u *ResumeMailboxSettingUpsertOne) SetHost(v string) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetHost(v)
	})
}

// UpdateHost sets the "host" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdateHost() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateHost()
	})
}

// SetPort sets the "port" field.
func (u *ResumeMailboxSettingUpsertOne) SetPort(v int) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetPort(v)
	})
}

// AddPort adds v to the "port" field.
func (u *ResumeMailboxSettingUpsertOne) AddPort(v int) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.AddPort(v)
	})
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdatePort() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdatePort()
	})
}

// SetUseSsl sets the "use_ssl" field.
func (u *ResumeMailboxSettingUpsertOne) SetUseSsl(v bool) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetUseSsl(v)
	})
}

// UpdateUseSsl sets the "use_ssl" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdateUseSsl() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateUseSsl()
	})
}

// SetFolder sets the "folder" field.
func (u *ResumeMailboxSettingUpsertOne) SetFolder(v string) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetFolder(v)
	})
}

// UpdateFolder sets the "folder" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdateFolder() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateFolder()
	})
}

// ClearFolder clears the value of the "folder" field.
func (u *ResumeMailboxSettingUpsertOne) ClearFolder() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.ClearFolder()
	})
}

// SetAuthType sets the "auth_type" field.
func (u *ResumeMailboxSettingUpsertOne) SetAuthType(v resumemailboxsetting.AuthType) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetAuthType(v)
	})
}

// UpdateAuthType sets the "auth_type" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdateAuthType() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateAuthType()
	})
}

// SetEncryptedCredential sets the "encrypted_credential" field.
func (u *ResumeMailboxSettingUpsertOne) SetEncryptedCredential(v map[string]interface{}) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetEncryptedCredential(v)
	})
}

// UpdateEncryptedCredential sets the "encrypted_credential" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdateEncryptedCredential() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateEncryptedCredential()
	})
}

// SetUploaderID sets the "uploader_id" field.
func (u *ResumeMailboxSettingUpsertOne) SetUploaderID(v uuid.UUID) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetUploaderID(v)
	})
}

// UpdateUploaderID sets the "uploader_id" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdateUploaderID() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateUploaderID()
	})
}

// SetJobProfileID sets the "job_profile_id" field.
func (u *ResumeMailboxSettingUpsertOne) SetJobProfileID(v uuid.UUID) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetJobProfileID(v)
	})
}

// UpdateJobProfileID sets the "job_profile_id" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdateJobProfileID() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateJobProfileID()
	})
}

// ClearJobProfileID clears the value of the "job_profile_id" field.
func (u *ResumeMailboxSettingUpsertOne) ClearJobProfileID() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.ClearJobProfileID()
	})
}

// SetSyncIntervalMinutes sets the "sync_interval_minutes" field.
func (u *ResumeMailboxSettingUpsertOne) SetSyncIntervalMinutes(v int) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetSyncIntervalMinutes(v)
	})
}

// AddSyncIntervalMinutes adds v to the "sync_interval_minutes" field.
func (u *ResumeMailboxSettingUpsertOne) AddSyncIntervalMinutes(v int) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.AddSyncIntervalMinutes(v)
	})
}

// UpdateSyncIntervalMinutes sets the "sync_interval_minutes" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdateSyncIntervalMinutes() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateSyncIntervalMinutes()
	})
}

// ClearSyncIntervalMinutes clears the value of the "sync_interval_minutes" field.
func (u *ResumeMailboxSettingUpsertOne) ClearSyncIntervalMinutes() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.ClearSyncIntervalMinutes()
	})
}

// SetStatus sets the "status" field.
func (u *ResumeMailboxSettingUpsertOne) SetStatus(v resumemailboxsetting.Status) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdateStatus() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateStatus()
	})
}

// SetLastSyncedAt sets the "last_synced_at" field.
func (u *ResumeMailboxSettingUpsertOne) SetLastSyncedAt(v time.Time) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetLastSyncedAt(v)
	})
}

// UpdateLastSyncedAt sets the "last_synced_at" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdateLastSyncedAt() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateLastSyncedAt()
	})
}

// ClearLastSyncedAt clears the value of the "last_synced_at" field.
func (u *ResumeMailboxSettingUpsertOne) ClearLastSyncedAt() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.ClearLastSyncedAt()
	})
}

// SetLastError sets the "last_error" field.
func (u *ResumeMailboxSettingUpsertOne) SetLastError(v string) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetLastError(v)
	})
}

// UpdateLastError sets the "last_error" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdateLastError() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateLastError()
	})
}

// ClearLastError clears the value of the "last_error" field.
func (u *ResumeMailboxSettingUpsertOne) ClearLastError() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.ClearLastError()
	})
}

// SetRetryCount sets the "retry_count" field.
func (u *ResumeMailboxSettingUpsertOne) SetRetryCount(v int) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetRetryCount(v)
	})
}

// AddRetryCount adds v to the "retry_count" field.
func (u *ResumeMailboxSettingUpsertOne) AddRetryCount(v int) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.AddRetryCount(v)
	})
}

// UpdateRetryCount sets the "retry_count" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdateRetryCount() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateRetryCount()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeMailboxSettingUpsertOne) SetUpdatedAt(v time.Time) *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertOne) UpdateUpdatedAt() *ResumeMailboxSettingUpsertOne {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeMailboxSettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeMailboxSettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeMailboxSettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResumeMailboxSettingUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ResumeMailboxSettingUpsertOne.ID is not supported by MySQL driver. Use ResumeMailboxSettingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResumeMailboxSettingUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResumeMailboxSettingCreateBulk is the builder for creating many ResumeMailboxSetting entities in bulk.
type ResumeMailboxSettingCreateBulk struct {
	config
	err      error
	builders []*ResumeMailboxSettingCreate
	conflict []sql.ConflictOption
}

// Save creates the ResumeMailboxSetting entities in the database.
func (rmscb *ResumeMailboxSettingCreateBulk) Save(ctx context.Context) ([]*ResumeMailboxSetting, error) {
	if rmscb.err != nil {
		return nil, rmscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rmscb.builders))
	nodes := make([]*ResumeMailboxSetting, len(rmscb.builders))
	mutators := make([]Mutator, len(rmscb.builders))
	for i := range rmscb.builders {
		func(i int, root context.Context) {
			builder := rmscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResumeMailboxSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rmscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rmscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rmscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rmscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rmscb *ResumeMailboxSettingCreateBulk) SaveX(ctx context.Context) []*ResumeMailboxSetting {
	v, err := rmscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmscb *ResumeMailboxSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := rmscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmscb *ResumeMailboxSettingCreateBulk) ExecX(ctx context.Context) {
	if err := rmscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeMailboxSetting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeMailboxSettingUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rmscb *ResumeMailboxSettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResumeMailboxSettingUpsertBulk {
	rmscb.conflict = opts
	return &ResumeMailboxSettingUpsertBulk{
		create: rmscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeMailboxSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rmscb *ResumeMailboxSettingCreateBulk) OnConflictColumns(columns ...string) *ResumeMailboxSettingUpsertBulk {
	rmscb.conflict = append(rmscb.conflict, sql.ConflictColumns(columns...))
	return &ResumeMailboxSettingUpsertBulk{
		create: rmscb,
	}
}

// ResumeMailboxSettingUpsertBulk is the builder for "upsert"-ing
// a bulk of ResumeMailboxSetting nodes.
type ResumeMailboxSettingUpsertBulk struct {
	create *ResumeMailboxSettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ResumeMailboxSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumemailboxsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeMailboxSettingUpsertBulk) UpdateNewValues() *ResumeMailboxSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resumemailboxsetting.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(resumemailboxsetting.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeMailboxSetting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResumeMailboxSettingUpsertBulk) Ignore() *ResumeMailboxSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeMailboxSettingUpsertBulk) DoNothing() *ResumeMailboxSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeMailboxSettingCreateBulk.OnConflict
// documentation for more info.
func (u *ResumeMailboxSettingUpsertBulk) Update(set func(*ResumeMailboxSettingUpsert)) *ResumeMailboxSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeMailboxSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeMailboxSettingUpsertBulk) SetDeletedAt(v time.Time) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdateDeletedAt() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeMailboxSettingUpsertBulk) ClearDeletedAt() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *ResumeMailboxSettingUpsertBulk) SetName(v string) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdateName() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateName()
	})
}

// SetEmailAddress sets the "email_address" field.
func (u *ResumeMailboxSettingUpsertBulk) SetEmailAddress(v string) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetEmailAddress(v)
	})
}

// UpdateEmailAddress sets the "email_address" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdateEmailAddress() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateEmailAddress()
	})
}

// SetProtocol sets the "protocol" field.
func (u *ResumeMailboxSettingUpsertBulk) SetProtocol(v resumemailboxsetting.Protocol) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetProtocol(v)
	})
}

// UpdateProtocol sets the "protocol" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdateProtocol() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateProtocol()
	})
}

// SetHost sets the "host" field.
func (u *ResumeMailboxSettingUpsertBulk) SetHost(v string) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetHost(v)
	})
}

// UpdateHost sets the "host" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdateHost() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateHost()
	})
}

// SetPort sets the "port" field.
func (u *ResumeMailboxSettingUpsertBulk) SetPort(v int) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetPort(v)
	})
}

// AddPort adds v to the "port" field.
func (u *ResumeMailboxSettingUpsertBulk) AddPort(v int) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.AddPort(v)
	})
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdatePort() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdatePort()
	})
}

// SetUseSsl sets the "use_ssl" field.
func (u *ResumeMailboxSettingUpsertBulk) SetUseSsl(v bool) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetUseSsl(v)
	})
}

// UpdateUseSsl sets the "use_ssl" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdateUseSsl() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateUseSsl()
	})
}

// SetFolder sets the "folder" field.
func (u *ResumeMailboxSettingUpsertBulk) SetFolder(v string) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetFolder(v)
	})
}

// UpdateFolder sets the "folder" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdateFolder() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateFolder()
	})
}

// ClearFolder clears the value of the "folder" field.
func (u *ResumeMailboxSettingUpsertBulk) ClearFolder() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.ClearFolder()
	})
}

// SetAuthType sets the "auth_type" field.
func (u *ResumeMailboxSettingUpsertBulk) SetAuthType(v resumemailboxsetting.AuthType) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetAuthType(v)
	})
}

// UpdateAuthType sets the "auth_type" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdateAuthType() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateAuthType()
	})
}

// SetEncryptedCredential sets the "encrypted_credential" field.
func (u *ResumeMailboxSettingUpsertBulk) SetEncryptedCredential(v map[string]interface{}) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetEncryptedCredential(v)
	})
}

// UpdateEncryptedCredential sets the "encrypted_credential" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdateEncryptedCredential() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateEncryptedCredential()
	})
}

// SetUploaderID sets the "uploader_id" field.
func (u *ResumeMailboxSettingUpsertBulk) SetUploaderID(v uuid.UUID) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetUploaderID(v)
	})
}

// UpdateUploaderID sets the "uploader_id" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdateUploaderID() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateUploaderID()
	})
}

// SetJobProfileID sets the "job_profile_id" field.
func (u *ResumeMailboxSettingUpsertBulk) SetJobProfileID(v uuid.UUID) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetJobProfileID(v)
	})
}

// UpdateJobProfileID sets the "job_profile_id" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdateJobProfileID() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateJobProfileID()
	})
}

// ClearJobProfileID clears the value of the "job_profile_id" field.
func (u *ResumeMailboxSettingUpsertBulk) ClearJobProfileID() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.ClearJobProfileID()
	})
}

// SetSyncIntervalMinutes sets the "sync_interval_minutes" field.
func (u *ResumeMailboxSettingUpsertBulk) SetSyncIntervalMinutes(v int) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetSyncIntervalMinutes(v)
	})
}

// AddSyncIntervalMinutes adds v to the "sync_interval_minutes" field.
func (u *ResumeMailboxSettingUpsertBulk) AddSyncIntervalMinutes(v int) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.AddSyncIntervalMinutes(v)
	})
}

// UpdateSyncIntervalMinutes sets the "sync_interval_minutes" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdateSyncIntervalMinutes() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateSyncIntervalMinutes()
	})
}

// ClearSyncIntervalMinutes clears the value of the "sync_interval_minutes" field.
func (u *ResumeMailboxSettingUpsertBulk) ClearSyncIntervalMinutes() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.ClearSyncIntervalMinutes()
	})
}

// SetStatus sets the "status" field.
func (u *ResumeMailboxSettingUpsertBulk) SetStatus(v resumemailboxsetting.Status) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdateStatus() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateStatus()
	})
}

// SetLastSyncedAt sets the "last_synced_at" field.
func (u *ResumeMailboxSettingUpsertBulk) SetLastSyncedAt(v time.Time) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetLastSyncedAt(v)
	})
}

// UpdateLastSyncedAt sets the "last_synced_at" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdateLastSyncedAt() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateLastSyncedAt()
	})
}

// ClearLastSyncedAt clears the value of the "last_synced_at" field.
func (u *ResumeMailboxSettingUpsertBulk) ClearLastSyncedAt() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.ClearLastSyncedAt()
	})
}

// SetLastError sets the "last_error" field.
func (u *ResumeMailboxSettingUpsertBulk) SetLastError(v string) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetLastError(v)
	})
}

// UpdateLastError sets the "last_error" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdateLastError() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateLastError()
	})
}

// ClearLastError clears the value of the "last_error" field.
func (u *ResumeMailboxSettingUpsertBulk) ClearLastError() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.ClearLastError()
	})
}

// SetRetryCount sets the "retry_count" field.
func (u *ResumeMailboxSettingUpsertBulk) SetRetryCount(v int) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetRetryCount(v)
	})
}

// AddRetryCount adds v to the "retry_count" field.
func (u *ResumeMailboxSettingUpsertBulk) AddRetryCount(v int) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.AddRetryCount(v)
	})
}

// UpdateRetryCount sets the "retry_count" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdateRetryCount() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateRetryCount()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeMailboxSettingUpsertBulk) SetUpdatedAt(v time.Time) *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeMailboxSettingUpsertBulk) UpdateUpdatedAt() *ResumeMailboxSettingUpsertBulk {
	return u.Update(func(s *ResumeMailboxSettingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeMailboxSettingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ResumeMailboxSettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeMailboxSettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeMailboxSettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
