// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumeeducation"
	"github.com/google/uuid"
)

// ResumeEducationUpdate is the builder for updating ResumeEducation entities.
type ResumeEducationUpdate struct {
	config
	hooks     []Hook
	mutation  *ResumeEducationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ResumeEducationUpdate builder.
func (reu *ResumeEducationUpdate) Where(ps ...predicate.ResumeEducation) *ResumeEducationUpdate {
	reu.mutation.Where(ps...)
	return reu
}

// SetDeletedAt sets the "deleted_at" field.
func (reu *ResumeEducationUpdate) SetDeletedAt(t time.Time) *ResumeEducationUpdate {
	reu.mutation.SetDeletedAt(t)
	return reu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (reu *ResumeEducationUpdate) SetNillableDeletedAt(t *time.Time) *ResumeEducationUpdate {
	if t != nil {
		reu.SetDeletedAt(*t)
	}
	return reu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (reu *ResumeEducationUpdate) ClearDeletedAt() *ResumeEducationUpdate {
	reu.mutation.ClearDeletedAt()
	return reu
}

// SetResumeID sets the "resume_id" field.
func (reu *ResumeEducationUpdate) SetResumeID(u uuid.UUID) *ResumeEducationUpdate {
	reu.mutation.SetResumeID(u)
	return reu
}

// SetNillableResumeID sets the "resume_id" field if the given value is not nil.
func (reu *ResumeEducationUpdate) SetNillableResumeID(u *uuid.UUID) *ResumeEducationUpdate {
	if u != nil {
		reu.SetResumeID(*u)
	}
	return reu
}

// SetSchool sets the "school" field.
func (reu *ResumeEducationUpdate) SetSchool(s string) *ResumeEducationUpdate {
	reu.mutation.SetSchool(s)
	return reu
}

// SetNillableSchool sets the "school" field if the given value is not nil.
func (reu *ResumeEducationUpdate) SetNillableSchool(s *string) *ResumeEducationUpdate {
	if s != nil {
		reu.SetSchool(*s)
	}
	return reu
}

// ClearSchool clears the value of the "school" field.
func (reu *ResumeEducationUpdate) ClearSchool() *ResumeEducationUpdate {
	reu.mutation.ClearSchool()
	return reu
}

// SetDegree sets the "degree" field.
func (reu *ResumeEducationUpdate) SetDegree(s string) *ResumeEducationUpdate {
	reu.mutation.SetDegree(s)
	return reu
}

// SetNillableDegree sets the "degree" field if the given value is not nil.
func (reu *ResumeEducationUpdate) SetNillableDegree(s *string) *ResumeEducationUpdate {
	if s != nil {
		reu.SetDegree(*s)
	}
	return reu
}

// ClearDegree clears the value of the "degree" field.
func (reu *ResumeEducationUpdate) ClearDegree() *ResumeEducationUpdate {
	reu.mutation.ClearDegree()
	return reu
}

// SetMajor sets the "major" field.
func (reu *ResumeEducationUpdate) SetMajor(s string) *ResumeEducationUpdate {
	reu.mutation.SetMajor(s)
	return reu
}

// SetNillableMajor sets the "major" field if the given value is not nil.
func (reu *ResumeEducationUpdate) SetNillableMajor(s *string) *ResumeEducationUpdate {
	if s != nil {
		reu.SetMajor(*s)
	}
	return reu
}

// ClearMajor clears the value of the "major" field.
func (reu *ResumeEducationUpdate) ClearMajor() *ResumeEducationUpdate {
	reu.mutation.ClearMajor()
	return reu
}

// SetGpa sets the "gpa" field.
func (reu *ResumeEducationUpdate) SetGpa(f float64) *ResumeEducationUpdate {
	reu.mutation.ResetGpa()
	reu.mutation.SetGpa(f)
	return reu
}

// SetNillableGpa sets the "gpa" field if the given value is not nil.
func (reu *ResumeEducationUpdate) SetNillableGpa(f *float64) *ResumeEducationUpdate {
	if f != nil {
		reu.SetGpa(*f)
	}
	return reu
}

// AddGpa adds f to the "gpa" field.
func (reu *ResumeEducationUpdate) AddGpa(f float64) *ResumeEducationUpdate {
	reu.mutation.AddGpa(f)
	return reu
}

// ClearGpa clears the value of the "gpa" field.
func (reu *ResumeEducationUpdate) ClearGpa() *ResumeEducationUpdate {
	reu.mutation.ClearGpa()
	return reu
}

// SetUniversityTypes sets the "university_types" field.
func (reu *ResumeEducationUpdate) SetUniversityTypes(ct []consts.UniversityType) *ResumeEducationUpdate {
	reu.mutation.SetUniversityTypes(ct)
	return reu
}

// AppendUniversityTypes appends ct to the "university_types" field.
func (reu *ResumeEducationUpdate) AppendUniversityTypes(ct []consts.UniversityType) *ResumeEducationUpdate {
	reu.mutation.AppendUniversityTypes(ct)
	return reu
}

// ClearUniversityTypes clears the value of the "university_types" field.
func (reu *ResumeEducationUpdate) ClearUniversityTypes() *ResumeEducationUpdate {
	reu.mutation.ClearUniversityTypes()
	return reu
}

// SetStartDate sets the "start_date" field.
func (reu *ResumeEducationUpdate) SetStartDate(t time.Time) *ResumeEducationUpdate {
	reu.mutation.SetStartDate(t)
	return reu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (reu *ResumeEducationUpdate) SetNillableStartDate(t *time.Time) *ResumeEducationUpdate {
	if t != nil {
		reu.SetStartDate(*t)
	}
	return reu
}

// ClearStartDate clears the value of the "start_date" field.
func (reu *ResumeEducationUpdate) ClearStartDate() *ResumeEducationUpdate {
	reu.mutation.ClearStartDate()
	return reu
}

// SetEndDate sets the "end_date" field.
func (reu *ResumeEducationUpdate) SetEndDate(t time.Time) *ResumeEducationUpdate {
	reu.mutation.SetEndDate(t)
	return reu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (reu *ResumeEducationUpdate) SetNillableEndDate(t *time.Time) *ResumeEducationUpdate {
	if t != nil {
		reu.SetEndDate(*t)
	}
	return reu
}

// ClearEndDate clears the value of the "end_date" field.
func (reu *ResumeEducationUpdate) ClearEndDate() *ResumeEducationUpdate {
	reu.mutation.ClearEndDate()
	return reu
}

// SetCreatedAt sets the "created_at" field.
func (reu *ResumeEducationUpdate) SetCreatedAt(t time.Time) *ResumeEducationUpdate {
	reu.mutation.SetCreatedAt(t)
	return reu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (reu *ResumeEducationUpdate) SetNillableCreatedAt(t *time.Time) *ResumeEducationUpdate {
	if t != nil {
		reu.SetCreatedAt(*t)
	}
	return reu
}

// SetUpdatedAt sets the "updated_at" field.
func (reu *ResumeEducationUpdate) SetUpdatedAt(t time.Time) *ResumeEducationUpdate {
	reu.mutation.SetUpdatedAt(t)
	return reu
}

// SetResume sets the "resume" edge to the Resume entity.
func (reu *ResumeEducationUpdate) SetResume(r *Resume) *ResumeEducationUpdate {
	return reu.SetResumeID(r.ID)
}

// Mutation returns the ResumeEducationMutation object of the builder.
func (reu *ResumeEducationUpdate) Mutation() *ResumeEducationMutation {
	return reu.mutation
}

// ClearResume clears the "resume" edge to the Resume entity.
func (reu *ResumeEducationUpdate) ClearResume() *ResumeEducationUpdate {
	reu.mutation.ClearResume()
	return reu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (reu *ResumeEducationUpdate) Save(ctx context.Context) (int, error) {
	if err := reu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, reu.sqlSave, reu.mutation, reu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (reu *ResumeEducationUpdate) SaveX(ctx context.Context) int {
	affected, err := reu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (reu *ResumeEducationUpdate) Exec(ctx context.Context) error {
	_, err := reu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reu *ResumeEducationUpdate) ExecX(ctx context.Context) {
	if err := reu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (reu *ResumeEducationUpdate) defaults() error {
	if _, ok := reu.mutation.UpdatedAt(); !ok {
		if resumeeducation.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumeeducation.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumeeducation.UpdateDefaultUpdatedAt()
		reu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (reu *ResumeEducationUpdate) check() error {
	if reu.mutation.ResumeCleared() && len(reu.mutation.ResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeEducation.resume"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (reu *ResumeEducationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeEducationUpdate {
	reu.modifiers = append(reu.modifiers, modifiers...)
	return reu
}

func (reu *ResumeEducationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := reu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumeeducation.Table, resumeeducation.Columns, sqlgraph.NewFieldSpec(resumeeducation.FieldID, field.TypeUUID))
	if ps := reu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := reu.mutation.DeletedAt(); ok {
		_spec.SetField(resumeeducation.FieldDeletedAt, field.TypeTime, value)
	}
	if reu.mutation.DeletedAtCleared() {
		_spec.ClearField(resumeeducation.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := reu.mutation.School(); ok {
		_spec.SetField(resumeeducation.FieldSchool, field.TypeString, value)
	}
	if reu.mutation.SchoolCleared() {
		_spec.ClearField(resumeeducation.FieldSchool, field.TypeString)
	}
	if value, ok := reu.mutation.Degree(); ok {
		_spec.SetField(resumeeducation.FieldDegree, field.TypeString, value)
	}
	if reu.mutation.DegreeCleared() {
		_spec.ClearField(resumeeducation.FieldDegree, field.TypeString)
	}
	if value, ok := reu.mutation.Major(); ok {
		_spec.SetField(resumeeducation.FieldMajor, field.TypeString, value)
	}
	if reu.mutation.MajorCleared() {
		_spec.ClearField(resumeeducation.FieldMajor, field.TypeString)
	}
	if value, ok := reu.mutation.Gpa(); ok {
		_spec.SetField(resumeeducation.FieldGpa, field.TypeFloat64, value)
	}
	if value, ok := reu.mutation.AddedGpa(); ok {
		_spec.AddField(resumeeducation.FieldGpa, field.TypeFloat64, value)
	}
	if reu.mutation.GpaCleared() {
		_spec.ClearField(resumeeducation.FieldGpa, field.TypeFloat64)
	}
	if value, ok := reu.mutation.UniversityTypes(); ok {
		_spec.SetField(resumeeducation.FieldUniversityTypes, field.TypeJSON, value)
	}
	if value, ok := reu.mutation.AppendedUniversityTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, resumeeducation.FieldUniversityTypes, value)
		})
	}
	if reu.mutation.UniversityTypesCleared() {
		_spec.ClearField(resumeeducation.FieldUniversityTypes, field.TypeJSON)
	}
	if value, ok := reu.mutation.StartDate(); ok {
		_spec.SetField(resumeeducation.FieldStartDate, field.TypeTime, value)
	}
	if reu.mutation.StartDateCleared() {
		_spec.ClearField(resumeeducation.FieldStartDate, field.TypeTime)
	}
	if value, ok := reu.mutation.EndDate(); ok {
		_spec.SetField(resumeeducation.FieldEndDate, field.TypeTime, value)
	}
	if reu.mutation.EndDateCleared() {
		_spec.ClearField(resumeeducation.FieldEndDate, field.TypeTime)
	}
	if value, ok := reu.mutation.CreatedAt(); ok {
		_spec.SetField(resumeeducation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := reu.mutation.UpdatedAt(); ok {
		_spec.SetField(resumeeducation.FieldUpdatedAt, field.TypeTime, value)
	}
	if reu.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeeducation.ResumeTable,
			Columns: []string{resumeeducation.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reu.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeeducation.ResumeTable,
			Columns: []string{resumeeducation.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(reu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, reu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumeeducation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	reu.mutation.done = true
	return n, nil
}

// ResumeEducationUpdateOne is the builder for updating a single ResumeEducation entity.
type ResumeEducationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ResumeEducationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (reuo *ResumeEducationUpdateOne) SetDeletedAt(t time.Time) *ResumeEducationUpdateOne {
	reuo.mutation.SetDeletedAt(t)
	return reuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (reuo *ResumeEducationUpdateOne) SetNillableDeletedAt(t *time.Time) *ResumeEducationUpdateOne {
	if t != nil {
		reuo.SetDeletedAt(*t)
	}
	return reuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (reuo *ResumeEducationUpdateOne) ClearDeletedAt() *ResumeEducationUpdateOne {
	reuo.mutation.ClearDeletedAt()
	return reuo
}

// SetResumeID sets the "resume_id" field.
func (reuo *ResumeEducationUpdateOne) SetResumeID(u uuid.UUID) *ResumeEducationUpdateOne {
	reuo.mutation.SetResumeID(u)
	return reuo
}

// SetNillableResumeID sets the "resume_id" field if the given value is not nil.
func (reuo *ResumeEducationUpdateOne) SetNillableResumeID(u *uuid.UUID) *ResumeEducationUpdateOne {
	if u != nil {
		reuo.SetResumeID(*u)
	}
	return reuo
}

// SetSchool sets the "school" field.
func (reuo *ResumeEducationUpdateOne) SetSchool(s string) *ResumeEducationUpdateOne {
	reuo.mutation.SetSchool(s)
	return reuo
}

// SetNillableSchool sets the "school" field if the given value is not nil.
func (reuo *ResumeEducationUpdateOne) SetNillableSchool(s *string) *ResumeEducationUpdateOne {
	if s != nil {
		reuo.SetSchool(*s)
	}
	return reuo
}

// ClearSchool clears the value of the "school" field.
func (reuo *ResumeEducationUpdateOne) ClearSchool() *ResumeEducationUpdateOne {
	reuo.mutation.ClearSchool()
	return reuo
}

// SetDegree sets the "degree" field.
func (reuo *ResumeEducationUpdateOne) SetDegree(s string) *ResumeEducationUpdateOne {
	reuo.mutation.SetDegree(s)
	return reuo
}

// SetNillableDegree sets the "degree" field if the given value is not nil.
func (reuo *ResumeEducationUpdateOne) SetNillableDegree(s *string) *ResumeEducationUpdateOne {
	if s != nil {
		reuo.SetDegree(*s)
	}
	return reuo
}

// ClearDegree clears the value of the "degree" field.
func (reuo *ResumeEducationUpdateOne) ClearDegree() *ResumeEducationUpdateOne {
	reuo.mutation.ClearDegree()
	return reuo
}

// SetMajor sets the "major" field.
func (reuo *ResumeEducationUpdateOne) SetMajor(s string) *ResumeEducationUpdateOne {
	reuo.mutation.SetMajor(s)
	return reuo
}

// SetNillableMajor sets the "major" field if the given value is not nil.
func (reuo *ResumeEducationUpdateOne) SetNillableMajor(s *string) *ResumeEducationUpdateOne {
	if s != nil {
		reuo.SetMajor(*s)
	}
	return reuo
}

// ClearMajor clears the value of the "major" field.
func (reuo *ResumeEducationUpdateOne) ClearMajor() *ResumeEducationUpdateOne {
	reuo.mutation.ClearMajor()
	return reuo
}

// SetGpa sets the "gpa" field.
func (reuo *ResumeEducationUpdateOne) SetGpa(f float64) *ResumeEducationUpdateOne {
	reuo.mutation.ResetGpa()
	reuo.mutation.SetGpa(f)
	return reuo
}

// SetNillableGpa sets the "gpa" field if the given value is not nil.
func (reuo *ResumeEducationUpdateOne) SetNillableGpa(f *float64) *ResumeEducationUpdateOne {
	if f != nil {
		reuo.SetGpa(*f)
	}
	return reuo
}

// AddGpa adds f to the "gpa" field.
func (reuo *ResumeEducationUpdateOne) AddGpa(f float64) *ResumeEducationUpdateOne {
	reuo.mutation.AddGpa(f)
	return reuo
}

// ClearGpa clears the value of the "gpa" field.
func (reuo *ResumeEducationUpdateOne) ClearGpa() *ResumeEducationUpdateOne {
	reuo.mutation.ClearGpa()
	return reuo
}

// SetUniversityTypes sets the "university_types" field.
func (reuo *ResumeEducationUpdateOne) SetUniversityTypes(ct []consts.UniversityType) *ResumeEducationUpdateOne {
	reuo.mutation.SetUniversityTypes(ct)
	return reuo
}

// AppendUniversityTypes appends ct to the "university_types" field.
func (reuo *ResumeEducationUpdateOne) AppendUniversityTypes(ct []consts.UniversityType) *ResumeEducationUpdateOne {
	reuo.mutation.AppendUniversityTypes(ct)
	return reuo
}

// ClearUniversityTypes clears the value of the "university_types" field.
func (reuo *ResumeEducationUpdateOne) ClearUniversityTypes() *ResumeEducationUpdateOne {
	reuo.mutation.ClearUniversityTypes()
	return reuo
}

// SetStartDate sets the "start_date" field.
func (reuo *ResumeEducationUpdateOne) SetStartDate(t time.Time) *ResumeEducationUpdateOne {
	reuo.mutation.SetStartDate(t)
	return reuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (reuo *ResumeEducationUpdateOne) SetNillableStartDate(t *time.Time) *ResumeEducationUpdateOne {
	if t != nil {
		reuo.SetStartDate(*t)
	}
	return reuo
}

// ClearStartDate clears the value of the "start_date" field.
func (reuo *ResumeEducationUpdateOne) ClearStartDate() *ResumeEducationUpdateOne {
	reuo.mutation.ClearStartDate()
	return reuo
}

// SetEndDate sets the "end_date" field.
func (reuo *ResumeEducationUpdateOne) SetEndDate(t time.Time) *ResumeEducationUpdateOne {
	reuo.mutation.SetEndDate(t)
	return reuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (reuo *ResumeEducationUpdateOne) SetNillableEndDate(t *time.Time) *ResumeEducationUpdateOne {
	if t != nil {
		reuo.SetEndDate(*t)
	}
	return reuo
}

// ClearEndDate clears the value of the "end_date" field.
func (reuo *ResumeEducationUpdateOne) ClearEndDate() *ResumeEducationUpdateOne {
	reuo.mutation.ClearEndDate()
	return reuo
}

// SetCreatedAt sets the "created_at" field.
func (reuo *ResumeEducationUpdateOne) SetCreatedAt(t time.Time) *ResumeEducationUpdateOne {
	reuo.mutation.SetCreatedAt(t)
	return reuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (reuo *ResumeEducationUpdateOne) SetNillableCreatedAt(t *time.Time) *ResumeEducationUpdateOne {
	if t != nil {
		reuo.SetCreatedAt(*t)
	}
	return reuo
}

// SetUpdatedAt sets the "updated_at" field.
func (reuo *ResumeEducationUpdateOne) SetUpdatedAt(t time.Time) *ResumeEducationUpdateOne {
	reuo.mutation.SetUpdatedAt(t)
	return reuo
}

// SetResume sets the "resume" edge to the Resume entity.
func (reuo *ResumeEducationUpdateOne) SetResume(r *Resume) *ResumeEducationUpdateOne {
	return reuo.SetResumeID(r.ID)
}

// Mutation returns the ResumeEducationMutation object of the builder.
func (reuo *ResumeEducationUpdateOne) Mutation() *ResumeEducationMutation {
	return reuo.mutation
}

// ClearResume clears the "resume" edge to the Resume entity.
func (reuo *ResumeEducationUpdateOne) ClearResume() *ResumeEducationUpdateOne {
	reuo.mutation.ClearResume()
	return reuo
}

// Where appends a list predicates to the ResumeEducationUpdate builder.
func (reuo *ResumeEducationUpdateOne) Where(ps ...predicate.ResumeEducation) *ResumeEducationUpdateOne {
	reuo.mutation.Where(ps...)
	return reuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (reuo *ResumeEducationUpdateOne) Select(field string, fields ...string) *ResumeEducationUpdateOne {
	reuo.fields = append([]string{field}, fields...)
	return reuo
}

// Save executes the query and returns the updated ResumeEducation entity.
func (reuo *ResumeEducationUpdateOne) Save(ctx context.Context) (*ResumeEducation, error) {
	if err := reuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, reuo.sqlSave, reuo.mutation, reuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (reuo *ResumeEducationUpdateOne) SaveX(ctx context.Context) *ResumeEducation {
	node, err := reuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (reuo *ResumeEducationUpdateOne) Exec(ctx context.Context) error {
	_, err := reuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reuo *ResumeEducationUpdateOne) ExecX(ctx context.Context) {
	if err := reuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (reuo *ResumeEducationUpdateOne) defaults() error {
	if _, ok := reuo.mutation.UpdatedAt(); !ok {
		if resumeeducation.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumeeducation.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumeeducation.UpdateDefaultUpdatedAt()
		reuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (reuo *ResumeEducationUpdateOne) check() error {
	if reuo.mutation.ResumeCleared() && len(reuo.mutation.ResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeEducation.resume"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (reuo *ResumeEducationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeEducationUpdateOne {
	reuo.modifiers = append(reuo.modifiers, modifiers...)
	return reuo
}

func (reuo *ResumeEducationUpdateOne) sqlSave(ctx context.Context) (_node *ResumeEducation, err error) {
	if err := reuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumeeducation.Table, resumeeducation.Columns, sqlgraph.NewFieldSpec(resumeeducation.FieldID, field.TypeUUID))
	id, ok := reuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ResumeEducation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := reuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resumeeducation.FieldID)
		for _, f := range fields {
			if !resumeeducation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != resumeeducation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := reuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := reuo.mutation.DeletedAt(); ok {
		_spec.SetField(resumeeducation.FieldDeletedAt, field.TypeTime, value)
	}
	if reuo.mutation.DeletedAtCleared() {
		_spec.ClearField(resumeeducation.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := reuo.mutation.School(); ok {
		_spec.SetField(resumeeducation.FieldSchool, field.TypeString, value)
	}
	if reuo.mutation.SchoolCleared() {
		_spec.ClearField(resumeeducation.FieldSchool, field.TypeString)
	}
	if value, ok := reuo.mutation.Degree(); ok {
		_spec.SetField(resumeeducation.FieldDegree, field.TypeString, value)
	}
	if reuo.mutation.DegreeCleared() {
		_spec.ClearField(resumeeducation.FieldDegree, field.TypeString)
	}
	if value, ok := reuo.mutation.Major(); ok {
		_spec.SetField(resumeeducation.FieldMajor, field.TypeString, value)
	}
	if reuo.mutation.MajorCleared() {
		_spec.ClearField(resumeeducation.FieldMajor, field.TypeString)
	}
	if value, ok := reuo.mutation.Gpa(); ok {
		_spec.SetField(resumeeducation.FieldGpa, field.TypeFloat64, value)
	}
	if value, ok := reuo.mutation.AddedGpa(); ok {
		_spec.AddField(resumeeducation.FieldGpa, field.TypeFloat64, value)
	}
	if reuo.mutation.GpaCleared() {
		_spec.ClearField(resumeeducation.FieldGpa, field.TypeFloat64)
	}
	if value, ok := reuo.mutation.UniversityTypes(); ok {
		_spec.SetField(resumeeducation.FieldUniversityTypes, field.TypeJSON, value)
	}
	if value, ok := reuo.mutation.AppendedUniversityTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, resumeeducation.FieldUniversityTypes, value)
		})
	}
	if reuo.mutation.UniversityTypesCleared() {
		_spec.ClearField(resumeeducation.FieldUniversityTypes, field.TypeJSON)
	}
	if value, ok := reuo.mutation.StartDate(); ok {
		_spec.SetField(resumeeducation.FieldStartDate, field.TypeTime, value)
	}
	if reuo.mutation.StartDateCleared() {
		_spec.ClearField(resumeeducation.FieldStartDate, field.TypeTime)
	}
	if value, ok := reuo.mutation.EndDate(); ok {
		_spec.SetField(resumeeducation.FieldEndDate, field.TypeTime, value)
	}
	if reuo.mutation.EndDateCleared() {
		_spec.ClearField(resumeeducation.FieldEndDate, field.TypeTime)
	}
	if value, ok := reuo.mutation.CreatedAt(); ok {
		_spec.SetField(resumeeducation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := reuo.mutation.UpdatedAt(); ok {
		_spec.SetField(resumeeducation.FieldUpdatedAt, field.TypeTime, value)
	}
	if reuo.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeeducation.ResumeTable,
			Columns: []string{resumeeducation.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reuo.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeeducation.ResumeTable,
			Columns: []string{resumeeducation.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(reuo.modifiers...)
	_node = &ResumeEducation{config: reuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, reuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumeeducation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	reuo.mutation.done = true
	return _node, nil
}
