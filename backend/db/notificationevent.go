// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/notificationevent"
	"github.com/google/uuid"
)

// NotificationEvent is the model entity for the NotificationEvent schema.
type NotificationEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 事件类型
	EventType consts.NotificationEventType `json:"event_type,omitempty"`
	// 通知渠道
	Channel consts.NotificationChannel `json:"channel,omitempty"`
	// 通知状态
	Status consts.NotificationStatus `json:"status,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload map[string]interface{} `json:"payload,omitempty"`
	// TemplateID holds the value of the "template_id" field.
	TemplateID string `json:"template_id,omitempty"`
	// 目标地址，如webhook URL
	Target string `json:"target,omitempty"`
	// RetryCount holds the value of the "retry_count" field.
	RetryCount int `json:"retry_count,omitempty"`
	// MaxRetry holds the value of the "max_retry" field.
	MaxRetry int `json:"max_retry,omitempty"`
	// 超时时间(秒)
	Timeout int `json:"timeout,omitempty"`
	// LastError holds the value of the "last_error" field.
	LastError string `json:"last_error,omitempty"`
	// TraceID holds the value of the "trace_id" field.
	TraceID string `json:"trace_id,omitempty"`
	// 计划投递时间
	ScheduledAt time.Time `json:"scheduled_at,omitempty"`
	// 实际投递时间
	DeliveredAt time.Time `json:"delivered_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotificationEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notificationevent.FieldPayload:
			values[i] = new([]byte)
		case notificationevent.FieldRetryCount, notificationevent.FieldMaxRetry, notificationevent.FieldTimeout:
			values[i] = new(sql.NullInt64)
		case notificationevent.FieldEventType, notificationevent.FieldChannel, notificationevent.FieldStatus, notificationevent.FieldTemplateID, notificationevent.FieldTarget, notificationevent.FieldLastError, notificationevent.FieldTraceID:
			values[i] = new(sql.NullString)
		case notificationevent.FieldDeletedAt, notificationevent.FieldScheduledAt, notificationevent.FieldDeliveredAt, notificationevent.FieldCreatedAt, notificationevent.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case notificationevent.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotificationEvent fields.
func (ne *NotificationEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notificationevent.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ne.ID = *value
			}
		case notificationevent.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ne.DeletedAt = value.Time
			}
		case notificationevent.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				ne.EventType = consts.NotificationEventType(value.String)
			}
		case notificationevent.FieldChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel", values[i])
			} else if value.Valid {
				ne.Channel = consts.NotificationChannel(value.String)
			}
		case notificationevent.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ne.Status = consts.NotificationStatus(value.String)
			}
		case notificationevent.FieldPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ne.Payload); err != nil {
					return fmt.Errorf("unmarshal field payload: %w", err)
				}
			}
		case notificationevent.FieldTemplateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value.Valid {
				ne.TemplateID = value.String
			}
		case notificationevent.FieldTarget:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target", values[i])
			} else if value.Valid {
				ne.Target = value.String
			}
		case notificationevent.FieldRetryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retry_count", values[i])
			} else if value.Valid {
				ne.RetryCount = int(value.Int64)
			}
		case notificationevent.FieldMaxRetry:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_retry", values[i])
			} else if value.Valid {
				ne.MaxRetry = int(value.Int64)
			}
		case notificationevent.FieldTimeout:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				ne.Timeout = int(value.Int64)
			}
		case notificationevent.FieldLastError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_error", values[i])
			} else if value.Valid {
				ne.LastError = value.String
			}
		case notificationevent.FieldTraceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trace_id", values[i])
			} else if value.Valid {
				ne.TraceID = value.String
			}
		case notificationevent.FieldScheduledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_at", values[i])
			} else if value.Valid {
				ne.ScheduledAt = value.Time
			}
		case notificationevent.FieldDeliveredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delivered_at", values[i])
			} else if value.Valid {
				ne.DeliveredAt = value.Time
			}
		case notificationevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ne.CreatedAt = value.Time
			}
		case notificationevent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ne.UpdatedAt = value.Time
			}
		default:
			ne.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NotificationEvent.
// This includes values selected through modifiers, order, etc.
func (ne *NotificationEvent) Value(name string) (ent.Value, error) {
	return ne.selectValues.Get(name)
}

// Update returns a builder for updating this NotificationEvent.
// Note that you need to call NotificationEvent.Unwrap() before calling this method if this NotificationEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (ne *NotificationEvent) Update() *NotificationEventUpdateOne {
	return NewNotificationEventClient(ne.config).UpdateOne(ne)
}

// Unwrap unwraps the NotificationEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ne *NotificationEvent) Unwrap() *NotificationEvent {
	_tx, ok := ne.config.driver.(*txDriver)
	if !ok {
		panic("db: NotificationEvent is not a transactional entity")
	}
	ne.config.driver = _tx.drv
	return ne
}

// String implements the fmt.Stringer.
func (ne *NotificationEvent) String() string {
	var builder strings.Builder
	builder.WriteString("NotificationEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ne.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(ne.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(fmt.Sprintf("%v", ne.EventType))
	builder.WriteString(", ")
	builder.WriteString("channel=")
	builder.WriteString(fmt.Sprintf("%v", ne.Channel))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ne.Status))
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(fmt.Sprintf("%v", ne.Payload))
	builder.WriteString(", ")
	builder.WriteString("template_id=")
	builder.WriteString(ne.TemplateID)
	builder.WriteString(", ")
	builder.WriteString("target=")
	builder.WriteString(ne.Target)
	builder.WriteString(", ")
	builder.WriteString("retry_count=")
	builder.WriteString(fmt.Sprintf("%v", ne.RetryCount))
	builder.WriteString(", ")
	builder.WriteString("max_retry=")
	builder.WriteString(fmt.Sprintf("%v", ne.MaxRetry))
	builder.WriteString(", ")
	builder.WriteString("timeout=")
	builder.WriteString(fmt.Sprintf("%v", ne.Timeout))
	builder.WriteString(", ")
	builder.WriteString("last_error=")
	builder.WriteString(ne.LastError)
	builder.WriteString(", ")
	builder.WriteString("trace_id=")
	builder.WriteString(ne.TraceID)
	builder.WriteString(", ")
	builder.WriteString("scheduled_at=")
	builder.WriteString(ne.ScheduledAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delivered_at=")
	builder.WriteString(ne.DeliveredAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ne.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ne.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NotificationEvents is a parsable slice of NotificationEvent.
type NotificationEvents []*NotificationEvent
