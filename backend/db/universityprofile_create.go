// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/universityprofile"
	"github.com/google/uuid"
	pgvector "github.com/pgvector/pgvector-go"
)

// UniversityProfileCreate is the builder for creating a UniversityProfile entity.
type UniversityProfileCreate struct {
	config
	mutation *UniversityProfileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (upc *UniversityProfileCreate) SetDeletedAt(t time.Time) *UniversityProfileCreate {
	upc.mutation.SetDeletedAt(t)
	return upc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (upc *UniversityProfileCreate) SetNillableDeletedAt(t *time.Time) *UniversityProfileCreate {
	if t != nil {
		upc.SetDeletedAt(*t)
	}
	return upc
}

// SetNameCn sets the "name_cn" field.
func (upc *UniversityProfileCreate) SetNameCn(s string) *UniversityProfileCreate {
	upc.mutation.SetNameCn(s)
	return upc
}

// SetNameEn sets the "name_en" field.
func (upc *UniversityProfileCreate) SetNameEn(s string) *UniversityProfileCreate {
	upc.mutation.SetNameEn(s)
	return upc
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (upc *UniversityProfileCreate) SetNillableNameEn(s *string) *UniversityProfileCreate {
	if s != nil {
		upc.SetNameEn(*s)
	}
	return upc
}

// SetAlias sets the "alias" field.
func (upc *UniversityProfileCreate) SetAlias(s string) *UniversityProfileCreate {
	upc.mutation.SetAlias(s)
	return upc
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (upc *UniversityProfileCreate) SetNillableAlias(s *string) *UniversityProfileCreate {
	if s != nil {
		upc.SetAlias(*s)
	}
	return upc
}

// SetCountry sets the "country" field.
func (upc *UniversityProfileCreate) SetCountry(s string) *UniversityProfileCreate {
	upc.mutation.SetCountry(s)
	return upc
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (upc *UniversityProfileCreate) SetNillableCountry(s *string) *UniversityProfileCreate {
	if s != nil {
		upc.SetCountry(*s)
	}
	return upc
}

// SetIsDoubleFirstClass sets the "is_double_first_class" field.
func (upc *UniversityProfileCreate) SetIsDoubleFirstClass(b bool) *UniversityProfileCreate {
	upc.mutation.SetIsDoubleFirstClass(b)
	return upc
}

// SetNillableIsDoubleFirstClass sets the "is_double_first_class" field if the given value is not nil.
func (upc *UniversityProfileCreate) SetNillableIsDoubleFirstClass(b *bool) *UniversityProfileCreate {
	if b != nil {
		upc.SetIsDoubleFirstClass(*b)
	}
	return upc
}

// SetIsProject985 sets the "is_project_985" field.
func (upc *UniversityProfileCreate) SetIsProject985(b bool) *UniversityProfileCreate {
	upc.mutation.SetIsProject985(b)
	return upc
}

// SetNillableIsProject985 sets the "is_project_985" field if the given value is not nil.
func (upc *UniversityProfileCreate) SetNillableIsProject985(b *bool) *UniversityProfileCreate {
	if b != nil {
		upc.SetIsProject985(*b)
	}
	return upc
}

// SetIsProject211 sets the "is_project_211" field.
func (upc *UniversityProfileCreate) SetIsProject211(b bool) *UniversityProfileCreate {
	upc.mutation.SetIsProject211(b)
	return upc
}

// SetNillableIsProject211 sets the "is_project_211" field if the given value is not nil.
func (upc *UniversityProfileCreate) SetNillableIsProject211(b *bool) *UniversityProfileCreate {
	if b != nil {
		upc.SetIsProject211(*b)
	}
	return upc
}

// SetIsQsTop100 sets the "is_qs_top100" field.
func (upc *UniversityProfileCreate) SetIsQsTop100(b bool) *UniversityProfileCreate {
	upc.mutation.SetIsQsTop100(b)
	return upc
}

// SetNillableIsQsTop100 sets the "is_qs_top100" field if the given value is not nil.
func (upc *UniversityProfileCreate) SetNillableIsQsTop100(b *bool) *UniversityProfileCreate {
	if b != nil {
		upc.SetIsQsTop100(*b)
	}
	return upc
}

// SetRankQs sets the "rank_qs" field.
func (upc *UniversityProfileCreate) SetRankQs(i int) *UniversityProfileCreate {
	upc.mutation.SetRankQs(i)
	return upc
}

// SetNillableRankQs sets the "rank_qs" field if the given value is not nil.
func (upc *UniversityProfileCreate) SetNillableRankQs(i *int) *UniversityProfileCreate {
	if i != nil {
		upc.SetRankQs(*i)
	}
	return upc
}

// SetOverallScore sets the "overall_score" field.
func (upc *UniversityProfileCreate) SetOverallScore(f float64) *UniversityProfileCreate {
	upc.mutation.SetOverallScore(f)
	return upc
}

// SetNillableOverallScore sets the "overall_score" field if the given value is not nil.
func (upc *UniversityProfileCreate) SetNillableOverallScore(f *float64) *UniversityProfileCreate {
	if f != nil {
		upc.SetOverallScore(*f)
	}
	return upc
}

// SetMetadata sets the "metadata" field.
func (upc *UniversityProfileCreate) SetMetadata(m map[string]interface{}) *UniversityProfileCreate {
	upc.mutation.SetMetadata(m)
	return upc
}

// SetVectorContent sets the "vector_content" field.
func (upc *UniversityProfileCreate) SetVectorContent(s string) *UniversityProfileCreate {
	upc.mutation.SetVectorContent(s)
	return upc
}

// SetNillableVectorContent sets the "vector_content" field if the given value is not nil.
func (upc *UniversityProfileCreate) SetNillableVectorContent(s *string) *UniversityProfileCreate {
	if s != nil {
		upc.SetVectorContent(*s)
	}
	return upc
}

// SetVector sets the "vector" field.
func (upc *UniversityProfileCreate) SetVector(pg *pgvector.Vector) *UniversityProfileCreate {
	upc.mutation.SetVector(pg)
	return upc
}

// SetCreatedAt sets the "created_at" field.
func (upc *UniversityProfileCreate) SetCreatedAt(t time.Time) *UniversityProfileCreate {
	upc.mutation.SetCreatedAt(t)
	return upc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upc *UniversityProfileCreate) SetNillableCreatedAt(t *time.Time) *UniversityProfileCreate {
	if t != nil {
		upc.SetCreatedAt(*t)
	}
	return upc
}

// SetUpdatedAt sets the "updated_at" field.
func (upc *UniversityProfileCreate) SetUpdatedAt(t time.Time) *UniversityProfileCreate {
	upc.mutation.SetUpdatedAt(t)
	return upc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (upc *UniversityProfileCreate) SetNillableUpdatedAt(t *time.Time) *UniversityProfileCreate {
	if t != nil {
		upc.SetUpdatedAt(*t)
	}
	return upc
}

// SetID sets the "id" field.
func (upc *UniversityProfileCreate) SetID(u uuid.UUID) *UniversityProfileCreate {
	upc.mutation.SetID(u)
	return upc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (upc *UniversityProfileCreate) SetNillableID(u *uuid.UUID) *UniversityProfileCreate {
	if u != nil {
		upc.SetID(*u)
	}
	return upc
}

// Mutation returns the UniversityProfileMutation object of the builder.
func (upc *UniversityProfileCreate) Mutation() *UniversityProfileMutation {
	return upc.mutation
}

// Save creates the UniversityProfile in the database.
func (upc *UniversityProfileCreate) Save(ctx context.Context) (*UniversityProfile, error) {
	if err := upc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, upc.sqlSave, upc.mutation, upc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UniversityProfileCreate) SaveX(ctx context.Context) *UniversityProfile {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upc *UniversityProfileCreate) Exec(ctx context.Context) error {
	_, err := upc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upc *UniversityProfileCreate) ExecX(ctx context.Context) {
	if err := upc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upc *UniversityProfileCreate) defaults() error {
	if _, ok := upc.mutation.IsDoubleFirstClass(); !ok {
		v := universityprofile.DefaultIsDoubleFirstClass
		upc.mutation.SetIsDoubleFirstClass(v)
	}
	if _, ok := upc.mutation.IsProject985(); !ok {
		v := universityprofile.DefaultIsProject985
		upc.mutation.SetIsProject985(v)
	}
	if _, ok := upc.mutation.IsProject211(); !ok {
		v := universityprofile.DefaultIsProject211
		upc.mutation.SetIsProject211(v)
	}
	if _, ok := upc.mutation.IsQsTop100(); !ok {
		v := universityprofile.DefaultIsQsTop100
		upc.mutation.SetIsQsTop100(v)
	}
	if _, ok := upc.mutation.CreatedAt(); !ok {
		if universityprofile.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized universityprofile.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := universityprofile.DefaultCreatedAt()
		upc.mutation.SetCreatedAt(v)
	}
	if _, ok := upc.mutation.UpdatedAt(); !ok {
		if universityprofile.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized universityprofile.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := universityprofile.DefaultUpdatedAt()
		upc.mutation.SetUpdatedAt(v)
	}
	if _, ok := upc.mutation.ID(); !ok {
		if universityprofile.DefaultID == nil {
			return fmt.Errorf("db: uninitialized universityprofile.DefaultID (forgotten import db/runtime?)")
		}
		v := universityprofile.DefaultID()
		upc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (upc *UniversityProfileCreate) check() error {
	if _, ok := upc.mutation.NameCn(); !ok {
		return &ValidationError{Name: "name_cn", err: errors.New(`db: missing required field "UniversityProfile.name_cn"`)}
	}
	if v, ok := upc.mutation.NameCn(); ok {
		if err := universityprofile.NameCnValidator(v); err != nil {
			return &ValidationError{Name: "name_cn", err: fmt.Errorf(`db: validator failed for field "UniversityProfile.name_cn": %w`, err)}
		}
	}
	if _, ok := upc.mutation.IsDoubleFirstClass(); !ok {
		return &ValidationError{Name: "is_double_first_class", err: errors.New(`db: missing required field "UniversityProfile.is_double_first_class"`)}
	}
	if _, ok := upc.mutation.IsProject985(); !ok {
		return &ValidationError{Name: "is_project_985", err: errors.New(`db: missing required field "UniversityProfile.is_project_985"`)}
	}
	if _, ok := upc.mutation.IsProject211(); !ok {
		return &ValidationError{Name: "is_project_211", err: errors.New(`db: missing required field "UniversityProfile.is_project_211"`)}
	}
	if _, ok := upc.mutation.IsQsTop100(); !ok {
		return &ValidationError{Name: "is_qs_top100", err: errors.New(`db: missing required field "UniversityProfile.is_qs_top100"`)}
	}
	if _, ok := upc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "UniversityProfile.created_at"`)}
	}
	if _, ok := upc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "UniversityProfile.updated_at"`)}
	}
	return nil
}

func (upc *UniversityProfileCreate) sqlSave(ctx context.Context) (*UniversityProfile, error) {
	if err := upc.check(); err != nil {
		return nil, err
	}
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	upc.mutation.id = &_node.ID
	upc.mutation.done = true
	return _node, nil
}

func (upc *UniversityProfileCreate) createSpec() (*UniversityProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &UniversityProfile{config: upc.config}
		_spec = sqlgraph.NewCreateSpec(universityprofile.Table, sqlgraph.NewFieldSpec(universityprofile.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = upc.conflict
	if id, ok := upc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := upc.mutation.DeletedAt(); ok {
		_spec.SetField(universityprofile.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := upc.mutation.NameCn(); ok {
		_spec.SetField(universityprofile.FieldNameCn, field.TypeString, value)
		_node.NameCn = value
	}
	if value, ok := upc.mutation.NameEn(); ok {
		_spec.SetField(universityprofile.FieldNameEn, field.TypeString, value)
		_node.NameEn = value
	}
	if value, ok := upc.mutation.Alias(); ok {
		_spec.SetField(universityprofile.FieldAlias, field.TypeString, value)
		_node.Alias = value
	}
	if value, ok := upc.mutation.Country(); ok {
		_spec.SetField(universityprofile.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := upc.mutation.IsDoubleFirstClass(); ok {
		_spec.SetField(universityprofile.FieldIsDoubleFirstClass, field.TypeBool, value)
		_node.IsDoubleFirstClass = value
	}
	if value, ok := upc.mutation.IsProject985(); ok {
		_spec.SetField(universityprofile.FieldIsProject985, field.TypeBool, value)
		_node.IsProject985 = value
	}
	if value, ok := upc.mutation.IsProject211(); ok {
		_spec.SetField(universityprofile.FieldIsProject211, field.TypeBool, value)
		_node.IsProject211 = value
	}
	if value, ok := upc.mutation.IsQsTop100(); ok {
		_spec.SetField(universityprofile.FieldIsQsTop100, field.TypeBool, value)
		_node.IsQsTop100 = value
	}
	if value, ok := upc.mutation.RankQs(); ok {
		_spec.SetField(universityprofile.FieldRankQs, field.TypeInt, value)
		_node.RankQs = value
	}
	if value, ok := upc.mutation.OverallScore(); ok {
		_spec.SetField(universityprofile.FieldOverallScore, field.TypeFloat64, value)
		_node.OverallScore = value
	}
	if value, ok := upc.mutation.Metadata(); ok {
		_spec.SetField(universityprofile.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := upc.mutation.VectorContent(); ok {
		_spec.SetField(universityprofile.FieldVectorContent, field.TypeString, value)
		_node.VectorContent = value
	}
	if value, ok := upc.mutation.Vector(); ok {
		_spec.SetField(universityprofile.FieldVector, field.TypeOther, value)
		_node.Vector = value
	}
	if value, ok := upc.mutation.CreatedAt(); ok {
		_spec.SetField(universityprofile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := upc.mutation.UpdatedAt(); ok {
		_spec.SetField(universityprofile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UniversityProfile.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UniversityProfileUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (upc *UniversityProfileCreate) OnConflict(opts ...sql.ConflictOption) *UniversityProfileUpsertOne {
	upc.conflict = opts
	return &UniversityProfileUpsertOne{
		create: upc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UniversityProfile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upc *UniversityProfileCreate) OnConflictColumns(columns ...string) *UniversityProfileUpsertOne {
	upc.conflict = append(upc.conflict, sql.ConflictColumns(columns...))
	return &UniversityProfileUpsertOne{
		create: upc,
	}
}

type (
	// UniversityProfileUpsertOne is the builder for "upsert"-ing
	//  one UniversityProfile node.
	UniversityProfileUpsertOne struct {
		create *UniversityProfileCreate
	}

	// UniversityProfileUpsert is the "OnConflict" setter.
	UniversityProfileUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *UniversityProfileUpsert) SetDeletedAt(v time.Time) *UniversityProfileUpsert {
	u.Set(universityprofile.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UniversityProfileUpsert) UpdateDeletedAt() *UniversityProfileUpsert {
	u.SetExcluded(universityprofile.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UniversityProfileUpsert) ClearDeletedAt() *UniversityProfileUpsert {
	u.SetNull(universityprofile.FieldDeletedAt)
	return u
}

// SetNameCn sets the "name_cn" field.
func (u *UniversityProfileUpsert) SetNameCn(v string) *UniversityProfileUpsert {
	u.Set(universityprofile.FieldNameCn, v)
	return u
}

// UpdateNameCn sets the "name_cn" field to the value that was provided on create.
func (u *UniversityProfileUpsert) UpdateNameCn() *UniversityProfileUpsert {
	u.SetExcluded(universityprofile.FieldNameCn)
	return u
}

// SetNameEn sets the "name_en" field.
func (u *UniversityProfileUpsert) SetNameEn(v string) *UniversityProfileUpsert {
	u.Set(universityprofile.FieldNameEn, v)
	return u
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *UniversityProfileUpsert) UpdateNameEn() *UniversityProfileUpsert {
	u.SetExcluded(universityprofile.FieldNameEn)
	return u
}

// ClearNameEn clears the value of the "name_en" field.
func (u *UniversityProfileUpsert) ClearNameEn() *UniversityProfileUpsert {
	u.SetNull(universityprofile.FieldNameEn)
	return u
}

// SetAlias sets the "alias" field.
func (u *UniversityProfileUpsert) SetAlias(v string) *UniversityProfileUpsert {
	u.Set(universityprofile.FieldAlias, v)
	return u
}

// UpdateAlias sets the "alias" field to the value that was provided on create.
func (u *UniversityProfileUpsert) UpdateAlias() *UniversityProfileUpsert {
	u.SetExcluded(universityprofile.FieldAlias)
	return u
}

// ClearAlias clears the value of the "alias" field.
func (u *UniversityProfileUpsert) ClearAlias() *UniversityProfileUpsert {
	u.SetNull(universityprofile.FieldAlias)
	return u
}

// SetCountry sets the "country" field.
func (u *UniversityProfileUpsert) SetCountry(v string) *UniversityProfileUpsert {
	u.Set(universityprofile.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *UniversityProfileUpsert) UpdateCountry() *UniversityProfileUpsert {
	u.SetExcluded(universityprofile.FieldCountry)
	return u
}

// ClearCountry clears the value of the "country" field.
func (u *UniversityProfileUpsert) ClearCountry() *UniversityProfileUpsert {
	u.SetNull(universityprofile.FieldCountry)
	return u
}

// SetIsDoubleFirstClass sets the "is_double_first_class" field.
func (u *UniversityProfileUpsert) SetIsDoubleFirstClass(v bool) *UniversityProfileUpsert {
	u.Set(universityprofile.FieldIsDoubleFirstClass, v)
	return u
}

// UpdateIsDoubleFirstClass sets the "is_double_first_class" field to the value that was provided on create.
func (u *UniversityProfileUpsert) UpdateIsDoubleFirstClass() *UniversityProfileUpsert {
	u.SetExcluded(universityprofile.FieldIsDoubleFirstClass)
	return u
}

// SetIsProject985 sets the "is_project_985" field.
func (u *UniversityProfileUpsert) SetIsProject985(v bool) *UniversityProfileUpsert {
	u.Set(universityprofile.FieldIsProject985, v)
	return u
}

// UpdateIsProject985 sets the "is_project_985" field to the value that was provided on create.
func (u *UniversityProfileUpsert) UpdateIsProject985() *UniversityProfileUpsert {
	u.SetExcluded(universityprofile.FieldIsProject985)
	return u
}

// SetIsProject211 sets the "is_project_211" field.
func (u *UniversityProfileUpsert) SetIsProject211(v bool) *UniversityProfileUpsert {
	u.Set(universityprofile.FieldIsProject211, v)
	return u
}

// UpdateIsProject211 sets the "is_project_211" field to the value that was provided on create.
func (u *UniversityProfileUpsert) UpdateIsProject211() *UniversityProfileUpsert {
	u.SetExcluded(universityprofile.FieldIsProject211)
	return u
}

// SetIsQsTop100 sets the "is_qs_top100" field.
func (u *UniversityProfileUpsert) SetIsQsTop100(v bool) *UniversityProfileUpsert {
	u.Set(universityprofile.FieldIsQsTop100, v)
	return u
}

// UpdateIsQsTop100 sets the "is_qs_top100" field to the value that was provided on create.
func (u *UniversityProfileUpsert) UpdateIsQsTop100() *UniversityProfileUpsert {
	u.SetExcluded(universityprofile.FieldIsQsTop100)
	return u
}

// SetRankQs sets the "rank_qs" field.
func (u *UniversityProfileUpsert) SetRankQs(v int) *UniversityProfileUpsert {
	u.Set(universityprofile.FieldRankQs, v)
	return u
}

// UpdateRankQs sets the "rank_qs" field to the value that was provided on create.
func (u *UniversityProfileUpsert) UpdateRankQs() *UniversityProfileUpsert {
	u.SetExcluded(universityprofile.FieldRankQs)
	return u
}

// AddRankQs adds v to the "rank_qs" field.
func (u *UniversityProfileUpsert) AddRankQs(v int) *UniversityProfileUpsert {
	u.Add(universityprofile.FieldRankQs, v)
	return u
}

// ClearRankQs clears the value of the "rank_qs" field.
func (u *UniversityProfileUpsert) ClearRankQs() *UniversityProfileUpsert {
	u.SetNull(universityprofile.FieldRankQs)
	return u
}

// SetOverallScore sets the "overall_score" field.
func (u *UniversityProfileUpsert) SetOverallScore(v float64) *UniversityProfileUpsert {
	u.Set(universityprofile.FieldOverallScore, v)
	return u
}

// UpdateOverallScore sets the "overall_score" field to the value that was provided on create.
func (u *UniversityProfileUpsert) UpdateOverallScore() *UniversityProfileUpsert {
	u.SetExcluded(universityprofile.FieldOverallScore)
	return u
}

// AddOverallScore adds v to the "overall_score" field.
func (u *UniversityProfileUpsert) AddOverallScore(v float64) *UniversityProfileUpsert {
	u.Add(universityprofile.FieldOverallScore, v)
	return u
}

// ClearOverallScore clears the value of the "overall_score" field.
func (u *UniversityProfileUpsert) ClearOverallScore() *UniversityProfileUpsert {
	u.SetNull(universityprofile.FieldOverallScore)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *UniversityProfileUpsert) SetMetadata(v map[string]interface{}) *UniversityProfileUpsert {
	u.Set(universityprofile.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *UniversityProfileUpsert) UpdateMetadata() *UniversityProfileUpsert {
	u.SetExcluded(universityprofile.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *UniversityProfileUpsert) ClearMetadata() *UniversityProfileUpsert {
	u.SetNull(universityprofile.FieldMetadata)
	return u
}

// SetVectorContent sets the "vector_content" field.
func (u *UniversityProfileUpsert) SetVectorContent(v string) *UniversityProfileUpsert {
	u.Set(universityprofile.FieldVectorContent, v)
	return u
}

// UpdateVectorContent sets the "vector_content" field to the value that was provided on create.
func (u *UniversityProfileUpsert) UpdateVectorContent() *UniversityProfileUpsert {
	u.SetExcluded(universityprofile.FieldVectorContent)
	return u
}

// ClearVectorContent clears the value of the "vector_content" field.
func (u *UniversityProfileUpsert) ClearVectorContent() *UniversityProfileUpsert {
	u.SetNull(universityprofile.FieldVectorContent)
	return u
}

// SetVector sets the "vector" field.
func (u *UniversityProfileUpsert) SetVector(v *pgvector.Vector) *UniversityProfileUpsert {
	u.Set(universityprofile.FieldVector, v)
	return u
}

// UpdateVector sets the "vector" field to the value that was provided on create.
func (u *UniversityProfileUpsert) UpdateVector() *UniversityProfileUpsert {
	u.SetExcluded(universityprofile.FieldVector)
	return u
}

// ClearVector clears the value of the "vector" field.
func (u *UniversityProfileUpsert) ClearVector() *UniversityProfileUpsert {
	u.SetNull(universityprofile.FieldVector)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UniversityProfileUpsert) SetCreatedAt(v time.Time) *UniversityProfileUpsert {
	u.Set(universityprofile.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UniversityProfileUpsert) UpdateCreatedAt() *UniversityProfileUpsert {
	u.SetExcluded(universityprofile.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UniversityProfileUpsert) SetUpdatedAt(v time.Time) *UniversityProfileUpsert {
	u.Set(universityprofile.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UniversityProfileUpsert) UpdateUpdatedAt() *UniversityProfileUpsert {
	u.SetExcluded(universityprofile.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UniversityProfile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(universityprofile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UniversityProfileUpsertOne) UpdateNewValues() *UniversityProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(universityprofile.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UniversityProfile.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UniversityProfileUpsertOne) Ignore() *UniversityProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UniversityProfileUpsertOne) DoNothing() *UniversityProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UniversityProfileCreate.OnConflict
// documentation for more info.
func (u *UniversityProfileUpsertOne) Update(set func(*UniversityProfileUpsert)) *UniversityProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UniversityProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UniversityProfileUpsertOne) SetDeletedAt(v time.Time) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UniversityProfileUpsertOne) UpdateDeletedAt() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UniversityProfileUpsertOne) ClearDeletedAt() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearDeletedAt()
	})
}

// SetNameCn sets the "name_cn" field.
func (u *UniversityProfileUpsertOne) SetNameCn(v string) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetNameCn(v)
	})
}

// UpdateNameCn sets the "name_cn" field to the value that was provided on create.
func (u *UniversityProfileUpsertOne) UpdateNameCn() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateNameCn()
	})
}

// SetNameEn sets the "name_en" field.
func (u *UniversityProfileUpsertOne) SetNameEn(v string) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetNameEn(v)
	})
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *UniversityProfileUpsertOne) UpdateNameEn() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateNameEn()
	})
}

// ClearNameEn clears the value of the "name_en" field.
func (u *UniversityProfileUpsertOne) ClearNameEn() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearNameEn()
	})
}

// SetAlias sets the "alias" field.
func (u *UniversityProfileUpsertOne) SetAlias(v string) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetAlias(v)
	})
}

// UpdateAlias sets the "alias" field to the value that was provided on create.
func (u *UniversityProfileUpsertOne) UpdateAlias() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateAlias()
	})
}

// ClearAlias clears the value of the "alias" field.
func (u *UniversityProfileUpsertOne) ClearAlias() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearAlias()
	})
}

// SetCountry sets the "country" field.
func (u *UniversityProfileUpsertOne) SetCountry(v string) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *UniversityProfileUpsertOne) UpdateCountry() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *UniversityProfileUpsertOne) ClearCountry() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearCountry()
	})
}

// SetIsDoubleFirstClass sets the "is_double_first_class" field.
func (u *UniversityProfileUpsertOne) SetIsDoubleFirstClass(v bool) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetIsDoubleFirstClass(v)
	})
}

// UpdateIsDoubleFirstClass sets the "is_double_first_class" field to the value that was provided on create.
func (u *UniversityProfileUpsertOne) UpdateIsDoubleFirstClass() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateIsDoubleFirstClass()
	})
}

// SetIsProject985 sets the "is_project_985" field.
func (u *UniversityProfileUpsertOne) SetIsProject985(v bool) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetIsProject985(v)
	})
}

// UpdateIsProject985 sets the "is_project_985" field to the value that was provided on create.
func (u *UniversityProfileUpsertOne) UpdateIsProject985() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateIsProject985()
	})
}

// SetIsProject211 sets the "is_project_211" field.
func (u *UniversityProfileUpsertOne) SetIsProject211(v bool) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetIsProject211(v)
	})
}

// UpdateIsProject211 sets the "is_project_211" field to the value that was provided on create.
func (u *UniversityProfileUpsertOne) UpdateIsProject211() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateIsProject211()
	})
}

// SetIsQsTop100 sets the "is_qs_top100" field.
func (u *UniversityProfileUpsertOne) SetIsQsTop100(v bool) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetIsQsTop100(v)
	})
}

// UpdateIsQsTop100 sets the "is_qs_top100" field to the value that was provided on create.
func (u *UniversityProfileUpsertOne) UpdateIsQsTop100() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateIsQsTop100()
	})
}

// SetRankQs sets the "rank_qs" field.
func (u *UniversityProfileUpsertOne) SetRankQs(v int) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetRankQs(v)
	})
}

// AddRankQs adds v to the "rank_qs" field.
func (u *UniversityProfileUpsertOne) AddRankQs(v int) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.AddRankQs(v)
	})
}

// UpdateRankQs sets the "rank_qs" field to the value that was provided on create.
func (u *UniversityProfileUpsertOne) UpdateRankQs() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateRankQs()
	})
}

// ClearRankQs clears the value of the "rank_qs" field.
func (u *UniversityProfileUpsertOne) ClearRankQs() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearRankQs()
	})
}

// SetOverallScore sets the "overall_score" field.
func (u *UniversityProfileUpsertOne) SetOverallScore(v float64) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetOverallScore(v)
	})
}

// AddOverallScore adds v to the "overall_score" field.
func (u *UniversityProfileUpsertOne) AddOverallScore(v float64) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.AddOverallScore(v)
	})
}

// UpdateOverallScore sets the "overall_score" field to the value that was provided on create.
func (u *UniversityProfileUpsertOne) UpdateOverallScore() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateOverallScore()
	})
}

// ClearOverallScore clears the value of the "overall_score" field.
func (u *UniversityProfileUpsertOne) ClearOverallScore() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearOverallScore()
	})
}

// SetMetadata sets the "metadata" field.
func (u *UniversityProfileUpsertOne) SetMetadata(v map[string]interface{}) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *UniversityProfileUpsertOne) UpdateMetadata() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *UniversityProfileUpsertOne) ClearMetadata() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearMetadata()
	})
}

// SetVectorContent sets the "vector_content" field.
func (u *UniversityProfileUpsertOne) SetVectorContent(v string) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetVectorContent(v)
	})
}

// UpdateVectorContent sets the "vector_content" field to the value that was provided on create.
func (u *UniversityProfileUpsertOne) UpdateVectorContent() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateVectorContent()
	})
}

// ClearVectorContent clears the value of the "vector_content" field.
func (u *UniversityProfileUpsertOne) ClearVectorContent() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearVectorContent()
	})
}

// SetVector sets the "vector" field.
func (u *UniversityProfileUpsertOne) SetVector(v *pgvector.Vector) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetVector(v)
	})
}

// UpdateVector sets the "vector" field to the value that was provided on create.
func (u *UniversityProfileUpsertOne) UpdateVector() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateVector()
	})
}

// ClearVector clears the value of the "vector" field.
func (u *UniversityProfileUpsertOne) ClearVector() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearVector()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UniversityProfileUpsertOne) SetCreatedAt(v time.Time) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UniversityProfileUpsertOne) UpdateCreatedAt() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UniversityProfileUpsertOne) SetUpdatedAt(v time.Time) *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UniversityProfileUpsertOne) UpdateUpdatedAt() *UniversityProfileUpsertOne {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UniversityProfileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for UniversityProfileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UniversityProfileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UniversityProfileUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: UniversityProfileUpsertOne.ID is not supported by MySQL driver. Use UniversityProfileUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UniversityProfileUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UniversityProfileCreateBulk is the builder for creating many UniversityProfile entities in bulk.
type UniversityProfileCreateBulk struct {
	config
	err      error
	builders []*UniversityProfileCreate
	conflict []sql.ConflictOption
}

// Save creates the UniversityProfile entities in the database.
func (upcb *UniversityProfileCreateBulk) Save(ctx context.Context) ([]*UniversityProfile, error) {
	if upcb.err != nil {
		return nil, upcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UniversityProfile, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UniversityProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = upcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UniversityProfileCreateBulk) SaveX(ctx context.Context) []*UniversityProfile {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upcb *UniversityProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := upcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcb *UniversityProfileCreateBulk) ExecX(ctx context.Context) {
	if err := upcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UniversityProfile.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UniversityProfileUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (upcb *UniversityProfileCreateBulk) OnConflict(opts ...sql.ConflictOption) *UniversityProfileUpsertBulk {
	upcb.conflict = opts
	return &UniversityProfileUpsertBulk{
		create: upcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UniversityProfile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upcb *UniversityProfileCreateBulk) OnConflictColumns(columns ...string) *UniversityProfileUpsertBulk {
	upcb.conflict = append(upcb.conflict, sql.ConflictColumns(columns...))
	return &UniversityProfileUpsertBulk{
		create: upcb,
	}
}

// UniversityProfileUpsertBulk is the builder for "upsert"-ing
// a bulk of UniversityProfile nodes.
type UniversityProfileUpsertBulk struct {
	create *UniversityProfileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UniversityProfile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(universityprofile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UniversityProfileUpsertBulk) UpdateNewValues() *UniversityProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(universityprofile.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UniversityProfile.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UniversityProfileUpsertBulk) Ignore() *UniversityProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UniversityProfileUpsertBulk) DoNothing() *UniversityProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UniversityProfileCreateBulk.OnConflict
// documentation for more info.
func (u *UniversityProfileUpsertBulk) Update(set func(*UniversityProfileUpsert)) *UniversityProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UniversityProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UniversityProfileUpsertBulk) SetDeletedAt(v time.Time) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UniversityProfileUpsertBulk) UpdateDeletedAt() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UniversityProfileUpsertBulk) ClearDeletedAt() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearDeletedAt()
	})
}

// SetNameCn sets the "name_cn" field.
func (u *UniversityProfileUpsertBulk) SetNameCn(v string) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetNameCn(v)
	})
}

// UpdateNameCn sets the "name_cn" field to the value that was provided on create.
func (u *UniversityProfileUpsertBulk) UpdateNameCn() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateNameCn()
	})
}

// SetNameEn sets the "name_en" field.
func (u *UniversityProfileUpsertBulk) SetNameEn(v string) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetNameEn(v)
	})
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *UniversityProfileUpsertBulk) UpdateNameEn() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateNameEn()
	})
}

// ClearNameEn clears the value of the "name_en" field.
func (u *UniversityProfileUpsertBulk) ClearNameEn() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearNameEn()
	})
}

// SetAlias sets the "alias" field.
func (u *UniversityProfileUpsertBulk) SetAlias(v string) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetAlias(v)
	})
}

// UpdateAlias sets the "alias" field to the value that was provided on create.
func (u *UniversityProfileUpsertBulk) UpdateAlias() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateAlias()
	})
}

// ClearAlias clears the value of the "alias" field.
func (u *UniversityProfileUpsertBulk) ClearAlias() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearAlias()
	})
}

// SetCountry sets the "country" field.
func (u *UniversityProfileUpsertBulk) SetCountry(v string) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *UniversityProfileUpsertBulk) UpdateCountry() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *UniversityProfileUpsertBulk) ClearCountry() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearCountry()
	})
}

// SetIsDoubleFirstClass sets the "is_double_first_class" field.
func (u *UniversityProfileUpsertBulk) SetIsDoubleFirstClass(v bool) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetIsDoubleFirstClass(v)
	})
}

// UpdateIsDoubleFirstClass sets the "is_double_first_class" field to the value that was provided on create.
func (u *UniversityProfileUpsertBulk) UpdateIsDoubleFirstClass() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateIsDoubleFirstClass()
	})
}

// SetIsProject985 sets the "is_project_985" field.
func (u *UniversityProfileUpsertBulk) SetIsProject985(v bool) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetIsProject985(v)
	})
}

// UpdateIsProject985 sets the "is_project_985" field to the value that was provided on create.
func (u *UniversityProfileUpsertBulk) UpdateIsProject985() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateIsProject985()
	})
}

// SetIsProject211 sets the "is_project_211" field.
func (u *UniversityProfileUpsertBulk) SetIsProject211(v bool) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetIsProject211(v)
	})
}

// UpdateIsProject211 sets the "is_project_211" field to the value that was provided on create.
func (u *UniversityProfileUpsertBulk) UpdateIsProject211() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateIsProject211()
	})
}

// SetIsQsTop100 sets the "is_qs_top100" field.
func (u *UniversityProfileUpsertBulk) SetIsQsTop100(v bool) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetIsQsTop100(v)
	})
}

// UpdateIsQsTop100 sets the "is_qs_top100" field to the value that was provided on create.
func (u *UniversityProfileUpsertBulk) UpdateIsQsTop100() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateIsQsTop100()
	})
}

// SetRankQs sets the "rank_qs" field.
func (u *UniversityProfileUpsertBulk) SetRankQs(v int) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetRankQs(v)
	})
}

// AddRankQs adds v to the "rank_qs" field.
func (u *UniversityProfileUpsertBulk) AddRankQs(v int) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.AddRankQs(v)
	})
}

// UpdateRankQs sets the "rank_qs" field to the value that was provided on create.
func (u *UniversityProfileUpsertBulk) UpdateRankQs() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateRankQs()
	})
}

// ClearRankQs clears the value of the "rank_qs" field.
func (u *UniversityProfileUpsertBulk) ClearRankQs() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearRankQs()
	})
}

// SetOverallScore sets the "overall_score" field.
func (u *UniversityProfileUpsertBulk) SetOverallScore(v float64) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetOverallScore(v)
	})
}

// AddOverallScore adds v to the "overall_score" field.
func (u *UniversityProfileUpsertBulk) AddOverallScore(v float64) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.AddOverallScore(v)
	})
}

// UpdateOverallScore sets the "overall_score" field to the value that was provided on create.
func (u *UniversityProfileUpsertBulk) UpdateOverallScore() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateOverallScore()
	})
}

// ClearOverallScore clears the value of the "overall_score" field.
func (u *UniversityProfileUpsertBulk) ClearOverallScore() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearOverallScore()
	})
}

// SetMetadata sets the "metadata" field.
func (u *UniversityProfileUpsertBulk) SetMetadata(v map[string]interface{}) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *UniversityProfileUpsertBulk) UpdateMetadata() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *UniversityProfileUpsertBulk) ClearMetadata() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearMetadata()
	})
}

// SetVectorContent sets the "vector_content" field.
func (u *UniversityProfileUpsertBulk) SetVectorContent(v string) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetVectorContent(v)
	})
}

// UpdateVectorContent sets the "vector_content" field to the value that was provided on create.
func (u *UniversityProfileUpsertBulk) UpdateVectorContent() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateVectorContent()
	})
}

// ClearVectorContent clears the value of the "vector_content" field.
func (u *UniversityProfileUpsertBulk) ClearVectorContent() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearVectorContent()
	})
}

// SetVector sets the "vector" field.
func (u *UniversityProfileUpsertBulk) SetVector(v *pgvector.Vector) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetVector(v)
	})
}

// UpdateVector sets the "vector" field to the value that was provided on create.
func (u *UniversityProfileUpsertBulk) UpdateVector() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateVector()
	})
}

// ClearVector clears the value of the "vector" field.
func (u *UniversityProfileUpsertBulk) ClearVector() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.ClearVector()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UniversityProfileUpsertBulk) SetCreatedAt(v time.Time) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UniversityProfileUpsertBulk) UpdateCreatedAt() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UniversityProfileUpsertBulk) SetUpdatedAt(v time.Time) *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UniversityProfileUpsertBulk) UpdateUpdatedAt() *UniversityProfileUpsertBulk {
	return u.Update(func(s *UniversityProfileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UniversityProfileUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the UniversityProfileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for UniversityProfileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UniversityProfileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
