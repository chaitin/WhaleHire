// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/google/uuid"
)

// Resume is the model entity for the Resume schema.
type Resume struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender string `json:"gender,omitempty"`
	// Birthday holds the value of the "birthday" field.
	Birthday time.Time `json:"birthday,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// CurrentCity holds the value of the "current_city" field.
	CurrentCity string `json:"current_city,omitempty"`
	// HighestEducation holds the value of the "highest_education" field.
	HighestEducation string `json:"highest_education,omitempty"`
	// YearsExperience holds the value of the "years_experience" field.
	YearsExperience float64 `json:"years_experience,omitempty"`
	// ResumeFileURL holds the value of the "resume_file_url" field.
	ResumeFileURL string `json:"resume_file_url,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// ErrorMessage holds the value of the "error_message" field.
	ErrorMessage string `json:"error_message,omitempty"`
	// ParsedAt holds the value of the "parsed_at" field.
	ParsedAt time.Time `json:"parsed_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResumeQuery when eager-loading is set.
	Edges        ResumeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ResumeEdges holds the relations/edges for other nodes in the graph.
type ResumeEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Educations holds the value of the educations edge.
	Educations []*ResumeEducation `json:"educations,omitempty"`
	// Experiences holds the value of the experiences edge.
	Experiences []*ResumeExperience `json:"experiences,omitempty"`
	// Skills holds the value of the skills edge.
	Skills []*ResumeSkill `json:"skills,omitempty"`
	// Logs holds the value of the logs edge.
	Logs []*ResumeLog `json:"logs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResumeEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// EducationsOrErr returns the Educations value or an error if the edge
// was not loaded in eager-loading.
func (e ResumeEdges) EducationsOrErr() ([]*ResumeEducation, error) {
	if e.loadedTypes[1] {
		return e.Educations, nil
	}
	return nil, &NotLoadedError{edge: "educations"}
}

// ExperiencesOrErr returns the Experiences value or an error if the edge
// was not loaded in eager-loading.
func (e ResumeEdges) ExperiencesOrErr() ([]*ResumeExperience, error) {
	if e.loadedTypes[2] {
		return e.Experiences, nil
	}
	return nil, &NotLoadedError{edge: "experiences"}
}

// SkillsOrErr returns the Skills value or an error if the edge
// was not loaded in eager-loading.
func (e ResumeEdges) SkillsOrErr() ([]*ResumeSkill, error) {
	if e.loadedTypes[3] {
		return e.Skills, nil
	}
	return nil, &NotLoadedError{edge: "skills"}
}

// LogsOrErr returns the Logs value or an error if the edge
// was not loaded in eager-loading.
func (e ResumeEdges) LogsOrErr() ([]*ResumeLog, error) {
	if e.loadedTypes[4] {
		return e.Logs, nil
	}
	return nil, &NotLoadedError{edge: "logs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Resume) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resume.FieldYearsExperience:
			values[i] = new(sql.NullFloat64)
		case resume.FieldName, resume.FieldGender, resume.FieldEmail, resume.FieldPhone, resume.FieldCurrentCity, resume.FieldHighestEducation, resume.FieldResumeFileURL, resume.FieldStatus, resume.FieldErrorMessage:
			values[i] = new(sql.NullString)
		case resume.FieldDeletedAt, resume.FieldBirthday, resume.FieldParsedAt, resume.FieldCreatedAt, resume.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case resume.FieldID, resume.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Resume fields.
func (r *Resume) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resume.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case resume.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				r.DeletedAt = value.Time
			}
		case resume.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				r.UserID = *value
			}
		case resume.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case resume.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				r.Gender = value.String
			}
		case resume.FieldBirthday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				r.Birthday = value.Time
			}
		case resume.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				r.Email = value.String
			}
		case resume.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				r.Phone = value.String
			}
		case resume.FieldCurrentCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_city", values[i])
			} else if value.Valid {
				r.CurrentCity = value.String
			}
		case resume.FieldHighestEducation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field highest_education", values[i])
			} else if value.Valid {
				r.HighestEducation = value.String
			}
		case resume.FieldYearsExperience:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field years_experience", values[i])
			} else if value.Valid {
				r.YearsExperience = value.Float64
			}
		case resume.FieldResumeFileURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resume_file_url", values[i])
			} else if value.Valid {
				r.ResumeFileURL = value.String
			}
		case resume.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = value.String
			}
		case resume.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				r.ErrorMessage = value.String
			}
		case resume.FieldParsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field parsed_at", values[i])
			} else if value.Valid {
				r.ParsedAt = value.Time
			}
		case resume.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case resume.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Resume.
// This includes values selected through modifiers, order, etc.
func (r *Resume) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Resume entity.
func (r *Resume) QueryUser() *UserQuery {
	return NewResumeClient(r.config).QueryUser(r)
}

// QueryEducations queries the "educations" edge of the Resume entity.
func (r *Resume) QueryEducations() *ResumeEducationQuery {
	return NewResumeClient(r.config).QueryEducations(r)
}

// QueryExperiences queries the "experiences" edge of the Resume entity.
func (r *Resume) QueryExperiences() *ResumeExperienceQuery {
	return NewResumeClient(r.config).QueryExperiences(r)
}

// QuerySkills queries the "skills" edge of the Resume entity.
func (r *Resume) QuerySkills() *ResumeSkillQuery {
	return NewResumeClient(r.config).QuerySkills(r)
}

// QueryLogs queries the "logs" edge of the Resume entity.
func (r *Resume) QueryLogs() *ResumeLogQuery {
	return NewResumeClient(r.config).QueryLogs(r)
}

// Update returns a builder for updating this Resume.
// Note that you need to call Resume.Unwrap() before calling this method if this Resume
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Resume) Update() *ResumeUpdateOne {
	return NewResumeClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Resume entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Resume) Unwrap() *Resume {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("db: Resume is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Resume) String() string {
	var builder strings.Builder
	builder.WriteString("Resume(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(r.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", r.UserID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(r.Gender)
	builder.WriteString(", ")
	builder.WriteString("birthday=")
	builder.WriteString(r.Birthday.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(r.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(r.Phone)
	builder.WriteString(", ")
	builder.WriteString("current_city=")
	builder.WriteString(r.CurrentCity)
	builder.WriteString(", ")
	builder.WriteString("highest_education=")
	builder.WriteString(r.HighestEducation)
	builder.WriteString(", ")
	builder.WriteString("years_experience=")
	builder.WriteString(fmt.Sprintf("%v", r.YearsExperience))
	builder.WriteString(", ")
	builder.WriteString("resume_file_url=")
	builder.WriteString(r.ResumeFileURL)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(r.Status)
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(r.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("parsed_at=")
	builder.WriteString(r.ParsedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Resumes is a parsable slice of Resume.
type Resumes []*Resume
