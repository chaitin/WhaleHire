// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/jobexperiencerequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/google/uuid"
)

// JobExperienceRequirement is the model entity for the JobExperienceRequirement schema.
type JobExperienceRequirement struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// JobID holds the value of the "job_id" field.
	JobID uuid.UUID `json:"job_id,omitempty"`
	// ExperienceType holds the value of the "experience_type" field.
	ExperienceType string `json:"experience_type,omitempty"`
	// MinYears holds the value of the "min_years" field.
	MinYears int `json:"min_years,omitempty"`
	// IdealYears holds the value of the "ideal_years" field.
	IdealYears int `json:"ideal_years,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight int `json:"weight,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobExperienceRequirementQuery when eager-loading is set.
	Edges        JobExperienceRequirementEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JobExperienceRequirementEdges holds the relations/edges for other nodes in the graph.
type JobExperienceRequirementEdges struct {
	// Job holds the value of the job edge.
	Job *JobPosition `json:"job,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// JobOrErr returns the Job value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobExperienceRequirementEdges) JobOrErr() (*JobPosition, error) {
	if e.Job != nil {
		return e.Job, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: jobposition.Label}
	}
	return nil, &NotLoadedError{edge: "job"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobExperienceRequirement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobexperiencerequirement.FieldMinYears, jobexperiencerequirement.FieldIdealYears, jobexperiencerequirement.FieldWeight:
			values[i] = new(sql.NullInt64)
		case jobexperiencerequirement.FieldExperienceType:
			values[i] = new(sql.NullString)
		case jobexperiencerequirement.FieldDeletedAt, jobexperiencerequirement.FieldCreatedAt, jobexperiencerequirement.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case jobexperiencerequirement.FieldID, jobexperiencerequirement.FieldJobID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobExperienceRequirement fields.
func (jer *JobExperienceRequirement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobexperiencerequirement.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				jer.ID = *value
			}
		case jobexperiencerequirement.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				jer.DeletedAt = value.Time
			}
		case jobexperiencerequirement.FieldJobID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field job_id", values[i])
			} else if value != nil {
				jer.JobID = *value
			}
		case jobexperiencerequirement.FieldExperienceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field experience_type", values[i])
			} else if value.Valid {
				jer.ExperienceType = value.String
			}
		case jobexperiencerequirement.FieldMinYears:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_years", values[i])
			} else if value.Valid {
				jer.MinYears = int(value.Int64)
			}
		case jobexperiencerequirement.FieldIdealYears:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ideal_years", values[i])
			} else if value.Valid {
				jer.IdealYears = int(value.Int64)
			}
		case jobexperiencerequirement.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				jer.Weight = int(value.Int64)
			}
		case jobexperiencerequirement.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				jer.CreatedAt = value.Time
			}
		case jobexperiencerequirement.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				jer.UpdatedAt = value.Time
			}
		default:
			jer.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobExperienceRequirement.
// This includes values selected through modifiers, order, etc.
func (jer *JobExperienceRequirement) Value(name string) (ent.Value, error) {
	return jer.selectValues.Get(name)
}

// QueryJob queries the "job" edge of the JobExperienceRequirement entity.
func (jer *JobExperienceRequirement) QueryJob() *JobPositionQuery {
	return NewJobExperienceRequirementClient(jer.config).QueryJob(jer)
}

// Update returns a builder for updating this JobExperienceRequirement.
// Note that you need to call JobExperienceRequirement.Unwrap() before calling this method if this JobExperienceRequirement
// was returned from a transaction, and the transaction was committed or rolled back.
func (jer *JobExperienceRequirement) Update() *JobExperienceRequirementUpdateOne {
	return NewJobExperienceRequirementClient(jer.config).UpdateOne(jer)
}

// Unwrap unwraps the JobExperienceRequirement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jer *JobExperienceRequirement) Unwrap() *JobExperienceRequirement {
	_tx, ok := jer.config.driver.(*txDriver)
	if !ok {
		panic("db: JobExperienceRequirement is not a transactional entity")
	}
	jer.config.driver = _tx.drv
	return jer
}

// String implements the fmt.Stringer.
func (jer *JobExperienceRequirement) String() string {
	var builder strings.Builder
	builder.WriteString("JobExperienceRequirement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jer.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(jer.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("job_id=")
	builder.WriteString(fmt.Sprintf("%v", jer.JobID))
	builder.WriteString(", ")
	builder.WriteString("experience_type=")
	builder.WriteString(jer.ExperienceType)
	builder.WriteString(", ")
	builder.WriteString("min_years=")
	builder.WriteString(fmt.Sprintf("%v", jer.MinYears))
	builder.WriteString(", ")
	builder.WriteString("ideal_years=")
	builder.WriteString(fmt.Sprintf("%v", jer.IdealYears))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", jer.Weight))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(jer.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(jer.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// JobExperienceRequirements is a parsable slice of JobExperienceRequirement.
type JobExperienceRequirements []*JobExperienceRequirement
