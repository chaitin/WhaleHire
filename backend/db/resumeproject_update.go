// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumeproject"
	"github.com/google/uuid"
)

// ResumeProjectUpdate is the builder for updating ResumeProject entities.
type ResumeProjectUpdate struct {
	config
	hooks     []Hook
	mutation  *ResumeProjectMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ResumeProjectUpdate builder.
func (rpu *ResumeProjectUpdate) Where(ps ...predicate.ResumeProject) *ResumeProjectUpdate {
	rpu.mutation.Where(ps...)
	return rpu
}

// SetDeletedAt sets the "deleted_at" field.
func (rpu *ResumeProjectUpdate) SetDeletedAt(t time.Time) *ResumeProjectUpdate {
	rpu.mutation.SetDeletedAt(t)
	return rpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rpu *ResumeProjectUpdate) SetNillableDeletedAt(t *time.Time) *ResumeProjectUpdate {
	if t != nil {
		rpu.SetDeletedAt(*t)
	}
	return rpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rpu *ResumeProjectUpdate) ClearDeletedAt() *ResumeProjectUpdate {
	rpu.mutation.ClearDeletedAt()
	return rpu
}

// SetResumeID sets the "resume_id" field.
func (rpu *ResumeProjectUpdate) SetResumeID(u uuid.UUID) *ResumeProjectUpdate {
	rpu.mutation.SetResumeID(u)
	return rpu
}

// SetNillableResumeID sets the "resume_id" field if the given value is not nil.
func (rpu *ResumeProjectUpdate) SetNillableResumeID(u *uuid.UUID) *ResumeProjectUpdate {
	if u != nil {
		rpu.SetResumeID(*u)
	}
	return rpu
}

// SetName sets the "name" field.
func (rpu *ResumeProjectUpdate) SetName(s string) *ResumeProjectUpdate {
	rpu.mutation.SetName(s)
	return rpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rpu *ResumeProjectUpdate) SetNillableName(s *string) *ResumeProjectUpdate {
	if s != nil {
		rpu.SetName(*s)
	}
	return rpu
}

// ClearName clears the value of the "name" field.
func (rpu *ResumeProjectUpdate) ClearName() *ResumeProjectUpdate {
	rpu.mutation.ClearName()
	return rpu
}

// SetRole sets the "role" field.
func (rpu *ResumeProjectUpdate) SetRole(s string) *ResumeProjectUpdate {
	rpu.mutation.SetRole(s)
	return rpu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (rpu *ResumeProjectUpdate) SetNillableRole(s *string) *ResumeProjectUpdate {
	if s != nil {
		rpu.SetRole(*s)
	}
	return rpu
}

// ClearRole clears the value of the "role" field.
func (rpu *ResumeProjectUpdate) ClearRole() *ResumeProjectUpdate {
	rpu.mutation.ClearRole()
	return rpu
}

// SetCompany sets the "company" field.
func (rpu *ResumeProjectUpdate) SetCompany(s string) *ResumeProjectUpdate {
	rpu.mutation.SetCompany(s)
	return rpu
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (rpu *ResumeProjectUpdate) SetNillableCompany(s *string) *ResumeProjectUpdate {
	if s != nil {
		rpu.SetCompany(*s)
	}
	return rpu
}

// ClearCompany clears the value of the "company" field.
func (rpu *ResumeProjectUpdate) ClearCompany() *ResumeProjectUpdate {
	rpu.mutation.ClearCompany()
	return rpu
}

// SetStartDate sets the "start_date" field.
func (rpu *ResumeProjectUpdate) SetStartDate(t time.Time) *ResumeProjectUpdate {
	rpu.mutation.SetStartDate(t)
	return rpu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (rpu *ResumeProjectUpdate) SetNillableStartDate(t *time.Time) *ResumeProjectUpdate {
	if t != nil {
		rpu.SetStartDate(*t)
	}
	return rpu
}

// ClearStartDate clears the value of the "start_date" field.
func (rpu *ResumeProjectUpdate) ClearStartDate() *ResumeProjectUpdate {
	rpu.mutation.ClearStartDate()
	return rpu
}

// SetEndDate sets the "end_date" field.
func (rpu *ResumeProjectUpdate) SetEndDate(t time.Time) *ResumeProjectUpdate {
	rpu.mutation.SetEndDate(t)
	return rpu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (rpu *ResumeProjectUpdate) SetNillableEndDate(t *time.Time) *ResumeProjectUpdate {
	if t != nil {
		rpu.SetEndDate(*t)
	}
	return rpu
}

// ClearEndDate clears the value of the "end_date" field.
func (rpu *ResumeProjectUpdate) ClearEndDate() *ResumeProjectUpdate {
	rpu.mutation.ClearEndDate()
	return rpu
}

// SetDescription sets the "description" field.
func (rpu *ResumeProjectUpdate) SetDescription(s string) *ResumeProjectUpdate {
	rpu.mutation.SetDescription(s)
	return rpu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rpu *ResumeProjectUpdate) SetNillableDescription(s *string) *ResumeProjectUpdate {
	if s != nil {
		rpu.SetDescription(*s)
	}
	return rpu
}

// ClearDescription clears the value of the "description" field.
func (rpu *ResumeProjectUpdate) ClearDescription() *ResumeProjectUpdate {
	rpu.mutation.ClearDescription()
	return rpu
}

// SetResponsibilities sets the "responsibilities" field.
func (rpu *ResumeProjectUpdate) SetResponsibilities(s string) *ResumeProjectUpdate {
	rpu.mutation.SetResponsibilities(s)
	return rpu
}

// SetNillableResponsibilities sets the "responsibilities" field if the given value is not nil.
func (rpu *ResumeProjectUpdate) SetNillableResponsibilities(s *string) *ResumeProjectUpdate {
	if s != nil {
		rpu.SetResponsibilities(*s)
	}
	return rpu
}

// ClearResponsibilities clears the value of the "responsibilities" field.
func (rpu *ResumeProjectUpdate) ClearResponsibilities() *ResumeProjectUpdate {
	rpu.mutation.ClearResponsibilities()
	return rpu
}

// SetAchievements sets the "achievements" field.
func (rpu *ResumeProjectUpdate) SetAchievements(s string) *ResumeProjectUpdate {
	rpu.mutation.SetAchievements(s)
	return rpu
}

// SetNillableAchievements sets the "achievements" field if the given value is not nil.
func (rpu *ResumeProjectUpdate) SetNillableAchievements(s *string) *ResumeProjectUpdate {
	if s != nil {
		rpu.SetAchievements(*s)
	}
	return rpu
}

// ClearAchievements clears the value of the "achievements" field.
func (rpu *ResumeProjectUpdate) ClearAchievements() *ResumeProjectUpdate {
	rpu.mutation.ClearAchievements()
	return rpu
}

// SetTechnologies sets the "technologies" field.
func (rpu *ResumeProjectUpdate) SetTechnologies(s string) *ResumeProjectUpdate {
	rpu.mutation.SetTechnologies(s)
	return rpu
}

// SetNillableTechnologies sets the "technologies" field if the given value is not nil.
func (rpu *ResumeProjectUpdate) SetNillableTechnologies(s *string) *ResumeProjectUpdate {
	if s != nil {
		rpu.SetTechnologies(*s)
	}
	return rpu
}

// ClearTechnologies clears the value of the "technologies" field.
func (rpu *ResumeProjectUpdate) ClearTechnologies() *ResumeProjectUpdate {
	rpu.mutation.ClearTechnologies()
	return rpu
}

// SetProjectURL sets the "project_url" field.
func (rpu *ResumeProjectUpdate) SetProjectURL(s string) *ResumeProjectUpdate {
	rpu.mutation.SetProjectURL(s)
	return rpu
}

// SetNillableProjectURL sets the "project_url" field if the given value is not nil.
func (rpu *ResumeProjectUpdate) SetNillableProjectURL(s *string) *ResumeProjectUpdate {
	if s != nil {
		rpu.SetProjectURL(*s)
	}
	return rpu
}

// ClearProjectURL clears the value of the "project_url" field.
func (rpu *ResumeProjectUpdate) ClearProjectURL() *ResumeProjectUpdate {
	rpu.mutation.ClearProjectURL()
	return rpu
}

// SetProjectType sets the "project_type" field.
func (rpu *ResumeProjectUpdate) SetProjectType(s string) *ResumeProjectUpdate {
	rpu.mutation.SetProjectType(s)
	return rpu
}

// SetNillableProjectType sets the "project_type" field if the given value is not nil.
func (rpu *ResumeProjectUpdate) SetNillableProjectType(s *string) *ResumeProjectUpdate {
	if s != nil {
		rpu.SetProjectType(*s)
	}
	return rpu
}

// ClearProjectType clears the value of the "project_type" field.
func (rpu *ResumeProjectUpdate) ClearProjectType() *ResumeProjectUpdate {
	rpu.mutation.ClearProjectType()
	return rpu
}

// SetCreatedAt sets the "created_at" field.
func (rpu *ResumeProjectUpdate) SetCreatedAt(t time.Time) *ResumeProjectUpdate {
	rpu.mutation.SetCreatedAt(t)
	return rpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rpu *ResumeProjectUpdate) SetNillableCreatedAt(t *time.Time) *ResumeProjectUpdate {
	if t != nil {
		rpu.SetCreatedAt(*t)
	}
	return rpu
}

// SetUpdatedAt sets the "updated_at" field.
func (rpu *ResumeProjectUpdate) SetUpdatedAt(t time.Time) *ResumeProjectUpdate {
	rpu.mutation.SetUpdatedAt(t)
	return rpu
}

// SetResume sets the "resume" edge to the Resume entity.
func (rpu *ResumeProjectUpdate) SetResume(r *Resume) *ResumeProjectUpdate {
	return rpu.SetResumeID(r.ID)
}

// Mutation returns the ResumeProjectMutation object of the builder.
func (rpu *ResumeProjectUpdate) Mutation() *ResumeProjectMutation {
	return rpu.mutation
}

// ClearResume clears the "resume" edge to the Resume entity.
func (rpu *ResumeProjectUpdate) ClearResume() *ResumeProjectUpdate {
	rpu.mutation.ClearResume()
	return rpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpu *ResumeProjectUpdate) Save(ctx context.Context) (int, error) {
	if err := rpu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, rpu.sqlSave, rpu.mutation, rpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *ResumeProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *ResumeProjectUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *ResumeProjectUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpu *ResumeProjectUpdate) defaults() error {
	if _, ok := rpu.mutation.UpdatedAt(); !ok {
		if resumeproject.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumeproject.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumeproject.UpdateDefaultUpdatedAt()
		rpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rpu *ResumeProjectUpdate) check() error {
	if rpu.mutation.ResumeCleared() && len(rpu.mutation.ResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeProject.resume"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rpu *ResumeProjectUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeProjectUpdate {
	rpu.modifiers = append(rpu.modifiers, modifiers...)
	return rpu
}

func (rpu *ResumeProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumeproject.Table, resumeproject.Columns, sqlgraph.NewFieldSpec(resumeproject.FieldID, field.TypeUUID))
	if ps := rpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.DeletedAt(); ok {
		_spec.SetField(resumeproject.FieldDeletedAt, field.TypeTime, value)
	}
	if rpu.mutation.DeletedAtCleared() {
		_spec.ClearField(resumeproject.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rpu.mutation.Name(); ok {
		_spec.SetField(resumeproject.FieldName, field.TypeString, value)
	}
	if rpu.mutation.NameCleared() {
		_spec.ClearField(resumeproject.FieldName, field.TypeString)
	}
	if value, ok := rpu.mutation.Role(); ok {
		_spec.SetField(resumeproject.FieldRole, field.TypeString, value)
	}
	if rpu.mutation.RoleCleared() {
		_spec.ClearField(resumeproject.FieldRole, field.TypeString)
	}
	if value, ok := rpu.mutation.Company(); ok {
		_spec.SetField(resumeproject.FieldCompany, field.TypeString, value)
	}
	if rpu.mutation.CompanyCleared() {
		_spec.ClearField(resumeproject.FieldCompany, field.TypeString)
	}
	if value, ok := rpu.mutation.StartDate(); ok {
		_spec.SetField(resumeproject.FieldStartDate, field.TypeTime, value)
	}
	if rpu.mutation.StartDateCleared() {
		_spec.ClearField(resumeproject.FieldStartDate, field.TypeTime)
	}
	if value, ok := rpu.mutation.EndDate(); ok {
		_spec.SetField(resumeproject.FieldEndDate, field.TypeTime, value)
	}
	if rpu.mutation.EndDateCleared() {
		_spec.ClearField(resumeproject.FieldEndDate, field.TypeTime)
	}
	if value, ok := rpu.mutation.Description(); ok {
		_spec.SetField(resumeproject.FieldDescription, field.TypeString, value)
	}
	if rpu.mutation.DescriptionCleared() {
		_spec.ClearField(resumeproject.FieldDescription, field.TypeString)
	}
	if value, ok := rpu.mutation.Responsibilities(); ok {
		_spec.SetField(resumeproject.FieldResponsibilities, field.TypeString, value)
	}
	if rpu.mutation.ResponsibilitiesCleared() {
		_spec.ClearField(resumeproject.FieldResponsibilities, field.TypeString)
	}
	if value, ok := rpu.mutation.Achievements(); ok {
		_spec.SetField(resumeproject.FieldAchievements, field.TypeString, value)
	}
	if rpu.mutation.AchievementsCleared() {
		_spec.ClearField(resumeproject.FieldAchievements, field.TypeString)
	}
	if value, ok := rpu.mutation.Technologies(); ok {
		_spec.SetField(resumeproject.FieldTechnologies, field.TypeString, value)
	}
	if rpu.mutation.TechnologiesCleared() {
		_spec.ClearField(resumeproject.FieldTechnologies, field.TypeString)
	}
	if value, ok := rpu.mutation.ProjectURL(); ok {
		_spec.SetField(resumeproject.FieldProjectURL, field.TypeString, value)
	}
	if rpu.mutation.ProjectURLCleared() {
		_spec.ClearField(resumeproject.FieldProjectURL, field.TypeString)
	}
	if value, ok := rpu.mutation.ProjectType(); ok {
		_spec.SetField(resumeproject.FieldProjectType, field.TypeString, value)
	}
	if rpu.mutation.ProjectTypeCleared() {
		_spec.ClearField(resumeproject.FieldProjectType, field.TypeString)
	}
	if value, ok := rpu.mutation.CreatedAt(); ok {
		_spec.SetField(resumeproject.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rpu.mutation.UpdatedAt(); ok {
		_spec.SetField(resumeproject.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpu.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeproject.ResumeTable,
			Columns: []string{resumeproject.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeproject.ResumeTable,
			Columns: []string{resumeproject.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumeproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpu.mutation.done = true
	return n, nil
}

// ResumeProjectUpdateOne is the builder for updating a single ResumeProject entity.
type ResumeProjectUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ResumeProjectMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (rpuo *ResumeProjectUpdateOne) SetDeletedAt(t time.Time) *ResumeProjectUpdateOne {
	rpuo.mutation.SetDeletedAt(t)
	return rpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rpuo *ResumeProjectUpdateOne) SetNillableDeletedAt(t *time.Time) *ResumeProjectUpdateOne {
	if t != nil {
		rpuo.SetDeletedAt(*t)
	}
	return rpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rpuo *ResumeProjectUpdateOne) ClearDeletedAt() *ResumeProjectUpdateOne {
	rpuo.mutation.ClearDeletedAt()
	return rpuo
}

// SetResumeID sets the "resume_id" field.
func (rpuo *ResumeProjectUpdateOne) SetResumeID(u uuid.UUID) *ResumeProjectUpdateOne {
	rpuo.mutation.SetResumeID(u)
	return rpuo
}

// SetNillableResumeID sets the "resume_id" field if the given value is not nil.
func (rpuo *ResumeProjectUpdateOne) SetNillableResumeID(u *uuid.UUID) *ResumeProjectUpdateOne {
	if u != nil {
		rpuo.SetResumeID(*u)
	}
	return rpuo
}

// SetName sets the "name" field.
func (rpuo *ResumeProjectUpdateOne) SetName(s string) *ResumeProjectUpdateOne {
	rpuo.mutation.SetName(s)
	return rpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rpuo *ResumeProjectUpdateOne) SetNillableName(s *string) *ResumeProjectUpdateOne {
	if s != nil {
		rpuo.SetName(*s)
	}
	return rpuo
}

// ClearName clears the value of the "name" field.
func (rpuo *ResumeProjectUpdateOne) ClearName() *ResumeProjectUpdateOne {
	rpuo.mutation.ClearName()
	return rpuo
}

// SetRole sets the "role" field.
func (rpuo *ResumeProjectUpdateOne) SetRole(s string) *ResumeProjectUpdateOne {
	rpuo.mutation.SetRole(s)
	return rpuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (rpuo *ResumeProjectUpdateOne) SetNillableRole(s *string) *ResumeProjectUpdateOne {
	if s != nil {
		rpuo.SetRole(*s)
	}
	return rpuo
}

// ClearRole clears the value of the "role" field.
func (rpuo *ResumeProjectUpdateOne) ClearRole() *ResumeProjectUpdateOne {
	rpuo.mutation.ClearRole()
	return rpuo
}

// SetCompany sets the "company" field.
func (rpuo *ResumeProjectUpdateOne) SetCompany(s string) *ResumeProjectUpdateOne {
	rpuo.mutation.SetCompany(s)
	return rpuo
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (rpuo *ResumeProjectUpdateOne) SetNillableCompany(s *string) *ResumeProjectUpdateOne {
	if s != nil {
		rpuo.SetCompany(*s)
	}
	return rpuo
}

// ClearCompany clears the value of the "company" field.
func (rpuo *ResumeProjectUpdateOne) ClearCompany() *ResumeProjectUpdateOne {
	rpuo.mutation.ClearCompany()
	return rpuo
}

// SetStartDate sets the "start_date" field.
func (rpuo *ResumeProjectUpdateOne) SetStartDate(t time.Time) *ResumeProjectUpdateOne {
	rpuo.mutation.SetStartDate(t)
	return rpuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (rpuo *ResumeProjectUpdateOne) SetNillableStartDate(t *time.Time) *ResumeProjectUpdateOne {
	if t != nil {
		rpuo.SetStartDate(*t)
	}
	return rpuo
}

// ClearStartDate clears the value of the "start_date" field.
func (rpuo *ResumeProjectUpdateOne) ClearStartDate() *ResumeProjectUpdateOne {
	rpuo.mutation.ClearStartDate()
	return rpuo
}

// SetEndDate sets the "end_date" field.
func (rpuo *ResumeProjectUpdateOne) SetEndDate(t time.Time) *ResumeProjectUpdateOne {
	rpuo.mutation.SetEndDate(t)
	return rpuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (rpuo *ResumeProjectUpdateOne) SetNillableEndDate(t *time.Time) *ResumeProjectUpdateOne {
	if t != nil {
		rpuo.SetEndDate(*t)
	}
	return rpuo
}

// ClearEndDate clears the value of the "end_date" field.
func (rpuo *ResumeProjectUpdateOne) ClearEndDate() *ResumeProjectUpdateOne {
	rpuo.mutation.ClearEndDate()
	return rpuo
}

// SetDescription sets the "description" field.
func (rpuo *ResumeProjectUpdateOne) SetDescription(s string) *ResumeProjectUpdateOne {
	rpuo.mutation.SetDescription(s)
	return rpuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rpuo *ResumeProjectUpdateOne) SetNillableDescription(s *string) *ResumeProjectUpdateOne {
	if s != nil {
		rpuo.SetDescription(*s)
	}
	return rpuo
}

// ClearDescription clears the value of the "description" field.
func (rpuo *ResumeProjectUpdateOne) ClearDescription() *ResumeProjectUpdateOne {
	rpuo.mutation.ClearDescription()
	return rpuo
}

// SetResponsibilities sets the "responsibilities" field.
func (rpuo *ResumeProjectUpdateOne) SetResponsibilities(s string) *ResumeProjectUpdateOne {
	rpuo.mutation.SetResponsibilities(s)
	return rpuo
}

// SetNillableResponsibilities sets the "responsibilities" field if the given value is not nil.
func (rpuo *ResumeProjectUpdateOne) SetNillableResponsibilities(s *string) *ResumeProjectUpdateOne {
	if s != nil {
		rpuo.SetResponsibilities(*s)
	}
	return rpuo
}

// ClearResponsibilities clears the value of the "responsibilities" field.
func (rpuo *ResumeProjectUpdateOne) ClearResponsibilities() *ResumeProjectUpdateOne {
	rpuo.mutation.ClearResponsibilities()
	return rpuo
}

// SetAchievements sets the "achievements" field.
func (rpuo *ResumeProjectUpdateOne) SetAchievements(s string) *ResumeProjectUpdateOne {
	rpuo.mutation.SetAchievements(s)
	return rpuo
}

// SetNillableAchievements sets the "achievements" field if the given value is not nil.
func (rpuo *ResumeProjectUpdateOne) SetNillableAchievements(s *string) *ResumeProjectUpdateOne {
	if s != nil {
		rpuo.SetAchievements(*s)
	}
	return rpuo
}

// ClearAchievements clears the value of the "achievements" field.
func (rpuo *ResumeProjectUpdateOne) ClearAchievements() *ResumeProjectUpdateOne {
	rpuo.mutation.ClearAchievements()
	return rpuo
}

// SetTechnologies sets the "technologies" field.
func (rpuo *ResumeProjectUpdateOne) SetTechnologies(s string) *ResumeProjectUpdateOne {
	rpuo.mutation.SetTechnologies(s)
	return rpuo
}

// SetNillableTechnologies sets the "technologies" field if the given value is not nil.
func (rpuo *ResumeProjectUpdateOne) SetNillableTechnologies(s *string) *ResumeProjectUpdateOne {
	if s != nil {
		rpuo.SetTechnologies(*s)
	}
	return rpuo
}

// ClearTechnologies clears the value of the "technologies" field.
func (rpuo *ResumeProjectUpdateOne) ClearTechnologies() *ResumeProjectUpdateOne {
	rpuo.mutation.ClearTechnologies()
	return rpuo
}

// SetProjectURL sets the "project_url" field.
func (rpuo *ResumeProjectUpdateOne) SetProjectURL(s string) *ResumeProjectUpdateOne {
	rpuo.mutation.SetProjectURL(s)
	return rpuo
}

// SetNillableProjectURL sets the "project_url" field if the given value is not nil.
func (rpuo *ResumeProjectUpdateOne) SetNillableProjectURL(s *string) *ResumeProjectUpdateOne {
	if s != nil {
		rpuo.SetProjectURL(*s)
	}
	return rpuo
}

// ClearProjectURL clears the value of the "project_url" field.
func (rpuo *ResumeProjectUpdateOne) ClearProjectURL() *ResumeProjectUpdateOne {
	rpuo.mutation.ClearProjectURL()
	return rpuo
}

// SetProjectType sets the "project_type" field.
func (rpuo *ResumeProjectUpdateOne) SetProjectType(s string) *ResumeProjectUpdateOne {
	rpuo.mutation.SetProjectType(s)
	return rpuo
}

// SetNillableProjectType sets the "project_type" field if the given value is not nil.
func (rpuo *ResumeProjectUpdateOne) SetNillableProjectType(s *string) *ResumeProjectUpdateOne {
	if s != nil {
		rpuo.SetProjectType(*s)
	}
	return rpuo
}

// ClearProjectType clears the value of the "project_type" field.
func (rpuo *ResumeProjectUpdateOne) ClearProjectType() *ResumeProjectUpdateOne {
	rpuo.mutation.ClearProjectType()
	return rpuo
}

// SetCreatedAt sets the "created_at" field.
func (rpuo *ResumeProjectUpdateOne) SetCreatedAt(t time.Time) *ResumeProjectUpdateOne {
	rpuo.mutation.SetCreatedAt(t)
	return rpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rpuo *ResumeProjectUpdateOne) SetNillableCreatedAt(t *time.Time) *ResumeProjectUpdateOne {
	if t != nil {
		rpuo.SetCreatedAt(*t)
	}
	return rpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rpuo *ResumeProjectUpdateOne) SetUpdatedAt(t time.Time) *ResumeProjectUpdateOne {
	rpuo.mutation.SetUpdatedAt(t)
	return rpuo
}

// SetResume sets the "resume" edge to the Resume entity.
func (rpuo *ResumeProjectUpdateOne) SetResume(r *Resume) *ResumeProjectUpdateOne {
	return rpuo.SetResumeID(r.ID)
}

// Mutation returns the ResumeProjectMutation object of the builder.
func (rpuo *ResumeProjectUpdateOne) Mutation() *ResumeProjectMutation {
	return rpuo.mutation
}

// ClearResume clears the "resume" edge to the Resume entity.
func (rpuo *ResumeProjectUpdateOne) ClearResume() *ResumeProjectUpdateOne {
	rpuo.mutation.ClearResume()
	return rpuo
}

// Where appends a list predicates to the ResumeProjectUpdate builder.
func (rpuo *ResumeProjectUpdateOne) Where(ps ...predicate.ResumeProject) *ResumeProjectUpdateOne {
	rpuo.mutation.Where(ps...)
	return rpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpuo *ResumeProjectUpdateOne) Select(field string, fields ...string) *ResumeProjectUpdateOne {
	rpuo.fields = append([]string{field}, fields...)
	return rpuo
}

// Save executes the query and returns the updated ResumeProject entity.
func (rpuo *ResumeProjectUpdateOne) Save(ctx context.Context) (*ResumeProject, error) {
	if err := rpuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rpuo.sqlSave, rpuo.mutation, rpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *ResumeProjectUpdateOne) SaveX(ctx context.Context) *ResumeProject {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *ResumeProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *ResumeProjectUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpuo *ResumeProjectUpdateOne) defaults() error {
	if _, ok := rpuo.mutation.UpdatedAt(); !ok {
		if resumeproject.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumeproject.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumeproject.UpdateDefaultUpdatedAt()
		rpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rpuo *ResumeProjectUpdateOne) check() error {
	if rpuo.mutation.ResumeCleared() && len(rpuo.mutation.ResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeProject.resume"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rpuo *ResumeProjectUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeProjectUpdateOne {
	rpuo.modifiers = append(rpuo.modifiers, modifiers...)
	return rpuo
}

func (rpuo *ResumeProjectUpdateOne) sqlSave(ctx context.Context) (_node *ResumeProject, err error) {
	if err := rpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumeproject.Table, resumeproject.Columns, sqlgraph.NewFieldSpec(resumeproject.FieldID, field.TypeUUID))
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ResumeProject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resumeproject.FieldID)
		for _, f := range fields {
			if !resumeproject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != resumeproject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpuo.mutation.DeletedAt(); ok {
		_spec.SetField(resumeproject.FieldDeletedAt, field.TypeTime, value)
	}
	if rpuo.mutation.DeletedAtCleared() {
		_spec.ClearField(resumeproject.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rpuo.mutation.Name(); ok {
		_spec.SetField(resumeproject.FieldName, field.TypeString, value)
	}
	if rpuo.mutation.NameCleared() {
		_spec.ClearField(resumeproject.FieldName, field.TypeString)
	}
	if value, ok := rpuo.mutation.Role(); ok {
		_spec.SetField(resumeproject.FieldRole, field.TypeString, value)
	}
	if rpuo.mutation.RoleCleared() {
		_spec.ClearField(resumeproject.FieldRole, field.TypeString)
	}
	if value, ok := rpuo.mutation.Company(); ok {
		_spec.SetField(resumeproject.FieldCompany, field.TypeString, value)
	}
	if rpuo.mutation.CompanyCleared() {
		_spec.ClearField(resumeproject.FieldCompany, field.TypeString)
	}
	if value, ok := rpuo.mutation.StartDate(); ok {
		_spec.SetField(resumeproject.FieldStartDate, field.TypeTime, value)
	}
	if rpuo.mutation.StartDateCleared() {
		_spec.ClearField(resumeproject.FieldStartDate, field.TypeTime)
	}
	if value, ok := rpuo.mutation.EndDate(); ok {
		_spec.SetField(resumeproject.FieldEndDate, field.TypeTime, value)
	}
	if rpuo.mutation.EndDateCleared() {
		_spec.ClearField(resumeproject.FieldEndDate, field.TypeTime)
	}
	if value, ok := rpuo.mutation.Description(); ok {
		_spec.SetField(resumeproject.FieldDescription, field.TypeString, value)
	}
	if rpuo.mutation.DescriptionCleared() {
		_spec.ClearField(resumeproject.FieldDescription, field.TypeString)
	}
	if value, ok := rpuo.mutation.Responsibilities(); ok {
		_spec.SetField(resumeproject.FieldResponsibilities, field.TypeString, value)
	}
	if rpuo.mutation.ResponsibilitiesCleared() {
		_spec.ClearField(resumeproject.FieldResponsibilities, field.TypeString)
	}
	if value, ok := rpuo.mutation.Achievements(); ok {
		_spec.SetField(resumeproject.FieldAchievements, field.TypeString, value)
	}
	if rpuo.mutation.AchievementsCleared() {
		_spec.ClearField(resumeproject.FieldAchievements, field.TypeString)
	}
	if value, ok := rpuo.mutation.Technologies(); ok {
		_spec.SetField(resumeproject.FieldTechnologies, field.TypeString, value)
	}
	if rpuo.mutation.TechnologiesCleared() {
		_spec.ClearField(resumeproject.FieldTechnologies, field.TypeString)
	}
	if value, ok := rpuo.mutation.ProjectURL(); ok {
		_spec.SetField(resumeproject.FieldProjectURL, field.TypeString, value)
	}
	if rpuo.mutation.ProjectURLCleared() {
		_spec.ClearField(resumeproject.FieldProjectURL, field.TypeString)
	}
	if value, ok := rpuo.mutation.ProjectType(); ok {
		_spec.SetField(resumeproject.FieldProjectType, field.TypeString, value)
	}
	if rpuo.mutation.ProjectTypeCleared() {
		_spec.ClearField(resumeproject.FieldProjectType, field.TypeString)
	}
	if value, ok := rpuo.mutation.CreatedAt(); ok {
		_spec.SetField(resumeproject.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(resumeproject.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpuo.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeproject.ResumeTable,
			Columns: []string{resumeproject.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeproject.ResumeTable,
			Columns: []string{resumeproject.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rpuo.modifiers...)
	_node = &ResumeProject{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumeproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpuo.mutation.done = true
	return _node, nil
}
