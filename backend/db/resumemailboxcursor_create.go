// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxcursor"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxsetting"
	"github.com/google/uuid"
)

// ResumeMailboxCursorCreate is the builder for creating a ResumeMailboxCursor entity.
type ResumeMailboxCursorCreate struct {
	config
	mutation *ResumeMailboxCursorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (rmcc *ResumeMailboxCursorCreate) SetDeletedAt(t time.Time) *ResumeMailboxCursorCreate {
	rmcc.mutation.SetDeletedAt(t)
	return rmcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rmcc *ResumeMailboxCursorCreate) SetNillableDeletedAt(t *time.Time) *ResumeMailboxCursorCreate {
	if t != nil {
		rmcc.SetDeletedAt(*t)
	}
	return rmcc
}

// SetMailboxID sets the "mailbox_id" field.
func (rmcc *ResumeMailboxCursorCreate) SetMailboxID(u uuid.UUID) *ResumeMailboxCursorCreate {
	rmcc.mutation.SetMailboxID(u)
	return rmcc
}

// SetProtocolCursor sets the "protocol_cursor" field.
func (rmcc *ResumeMailboxCursorCreate) SetProtocolCursor(s string) *ResumeMailboxCursorCreate {
	rmcc.mutation.SetProtocolCursor(s)
	return rmcc
}

// SetLastMessageID sets the "last_message_id" field.
func (rmcc *ResumeMailboxCursorCreate) SetLastMessageID(s string) *ResumeMailboxCursorCreate {
	rmcc.mutation.SetLastMessageID(s)
	return rmcc
}

// SetNillableLastMessageID sets the "last_message_id" field if the given value is not nil.
func (rmcc *ResumeMailboxCursorCreate) SetNillableLastMessageID(s *string) *ResumeMailboxCursorCreate {
	if s != nil {
		rmcc.SetLastMessageID(*s)
	}
	return rmcc
}

// SetCreatedAt sets the "created_at" field.
func (rmcc *ResumeMailboxCursorCreate) SetCreatedAt(t time.Time) *ResumeMailboxCursorCreate {
	rmcc.mutation.SetCreatedAt(t)
	return rmcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rmcc *ResumeMailboxCursorCreate) SetNillableCreatedAt(t *time.Time) *ResumeMailboxCursorCreate {
	if t != nil {
		rmcc.SetCreatedAt(*t)
	}
	return rmcc
}

// SetUpdatedAt sets the "updated_at" field.
func (rmcc *ResumeMailboxCursorCreate) SetUpdatedAt(t time.Time) *ResumeMailboxCursorCreate {
	rmcc.mutation.SetUpdatedAt(t)
	return rmcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rmcc *ResumeMailboxCursorCreate) SetNillableUpdatedAt(t *time.Time) *ResumeMailboxCursorCreate {
	if t != nil {
		rmcc.SetUpdatedAt(*t)
	}
	return rmcc
}

// SetID sets the "id" field.
func (rmcc *ResumeMailboxCursorCreate) SetID(u uuid.UUID) *ResumeMailboxCursorCreate {
	rmcc.mutation.SetID(u)
	return rmcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rmcc *ResumeMailboxCursorCreate) SetNillableID(u *uuid.UUID) *ResumeMailboxCursorCreate {
	if u != nil {
		rmcc.SetID(*u)
	}
	return rmcc
}

// SetMailbox sets the "mailbox" edge to the ResumeMailboxSetting entity.
func (rmcc *ResumeMailboxCursorCreate) SetMailbox(r *ResumeMailboxSetting) *ResumeMailboxCursorCreate {
	return rmcc.SetMailboxID(r.ID)
}

// Mutation returns the ResumeMailboxCursorMutation object of the builder.
func (rmcc *ResumeMailboxCursorCreate) Mutation() *ResumeMailboxCursorMutation {
	return rmcc.mutation
}

// Save creates the ResumeMailboxCursor in the database.
func (rmcc *ResumeMailboxCursorCreate) Save(ctx context.Context) (*ResumeMailboxCursor, error) {
	if err := rmcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rmcc.sqlSave, rmcc.mutation, rmcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rmcc *ResumeMailboxCursorCreate) SaveX(ctx context.Context) *ResumeMailboxCursor {
	v, err := rmcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmcc *ResumeMailboxCursorCreate) Exec(ctx context.Context) error {
	_, err := rmcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmcc *ResumeMailboxCursorCreate) ExecX(ctx context.Context) {
	if err := rmcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmcc *ResumeMailboxCursorCreate) defaults() error {
	if _, ok := rmcc.mutation.CreatedAt(); !ok {
		if resumemailboxcursor.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized resumemailboxcursor.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := resumemailboxcursor.DefaultCreatedAt()
		rmcc.mutation.SetCreatedAt(v)
	}
	if _, ok := rmcc.mutation.UpdatedAt(); !ok {
		if resumemailboxcursor.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumemailboxcursor.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumemailboxcursor.DefaultUpdatedAt()
		rmcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rmcc.mutation.ID(); !ok {
		if resumemailboxcursor.DefaultID == nil {
			return fmt.Errorf("db: uninitialized resumemailboxcursor.DefaultID (forgotten import db/runtime?)")
		}
		v := resumemailboxcursor.DefaultID()
		rmcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rmcc *ResumeMailboxCursorCreate) check() error {
	if _, ok := rmcc.mutation.MailboxID(); !ok {
		return &ValidationError{Name: "mailbox_id", err: errors.New(`db: missing required field "ResumeMailboxCursor.mailbox_id"`)}
	}
	if _, ok := rmcc.mutation.ProtocolCursor(); !ok {
		return &ValidationError{Name: "protocol_cursor", err: errors.New(`db: missing required field "ResumeMailboxCursor.protocol_cursor"`)}
	}
	if v, ok := rmcc.mutation.LastMessageID(); ok {
		if err := resumemailboxcursor.LastMessageIDValidator(v); err != nil {
			return &ValidationError{Name: "last_message_id", err: fmt.Errorf(`db: validator failed for field "ResumeMailboxCursor.last_message_id": %w`, err)}
		}
	}
	if _, ok := rmcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ResumeMailboxCursor.created_at"`)}
	}
	if _, ok := rmcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "ResumeMailboxCursor.updated_at"`)}
	}
	if len(rmcc.mutation.MailboxIDs()) == 0 {
		return &ValidationError{Name: "mailbox", err: errors.New(`db: missing required edge "ResumeMailboxCursor.mailbox"`)}
	}
	return nil
}

func (rmcc *ResumeMailboxCursorCreate) sqlSave(ctx context.Context) (*ResumeMailboxCursor, error) {
	if err := rmcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rmcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rmcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rmcc.mutation.id = &_node.ID
	rmcc.mutation.done = true
	return _node, nil
}

func (rmcc *ResumeMailboxCursorCreate) createSpec() (*ResumeMailboxCursor, *sqlgraph.CreateSpec) {
	var (
		_node = &ResumeMailboxCursor{config: rmcc.config}
		_spec = sqlgraph.NewCreateSpec(resumemailboxcursor.Table, sqlgraph.NewFieldSpec(resumemailboxcursor.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rmcc.conflict
	if id, ok := rmcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rmcc.mutation.DeletedAt(); ok {
		_spec.SetField(resumemailboxcursor.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rmcc.mutation.ProtocolCursor(); ok {
		_spec.SetField(resumemailboxcursor.FieldProtocolCursor, field.TypeString, value)
		_node.ProtocolCursor = value
	}
	if value, ok := rmcc.mutation.LastMessageID(); ok {
		_spec.SetField(resumemailboxcursor.FieldLastMessageID, field.TypeString, value)
		_node.LastMessageID = value
	}
	if value, ok := rmcc.mutation.CreatedAt(); ok {
		_spec.SetField(resumemailboxcursor.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rmcc.mutation.UpdatedAt(); ok {
		_spec.SetField(resumemailboxcursor.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rmcc.mutation.MailboxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumemailboxcursor.MailboxTable,
			Columns: []string{resumemailboxcursor.MailboxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxsetting.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MailboxID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeMailboxCursor.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeMailboxCursorUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rmcc *ResumeMailboxCursorCreate) OnConflict(opts ...sql.ConflictOption) *ResumeMailboxCursorUpsertOne {
	rmcc.conflict = opts
	return &ResumeMailboxCursorUpsertOne{
		create: rmcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeMailboxCursor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rmcc *ResumeMailboxCursorCreate) OnConflictColumns(columns ...string) *ResumeMailboxCursorUpsertOne {
	rmcc.conflict = append(rmcc.conflict, sql.ConflictColumns(columns...))
	return &ResumeMailboxCursorUpsertOne{
		create: rmcc,
	}
}

type (
	// ResumeMailboxCursorUpsertOne is the builder for "upsert"-ing
	//  one ResumeMailboxCursor node.
	ResumeMailboxCursorUpsertOne struct {
		create *ResumeMailboxCursorCreate
	}

	// ResumeMailboxCursorUpsert is the "OnConflict" setter.
	ResumeMailboxCursorUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeMailboxCursorUpsert) SetDeletedAt(v time.Time) *ResumeMailboxCursorUpsert {
	u.Set(resumemailboxcursor.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeMailboxCursorUpsert) UpdateDeletedAt() *ResumeMailboxCursorUpsert {
	u.SetExcluded(resumemailboxcursor.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeMailboxCursorUpsert) ClearDeletedAt() *ResumeMailboxCursorUpsert {
	u.SetNull(resumemailboxcursor.FieldDeletedAt)
	return u
}

// SetMailboxID sets the "mailbox_id" field.
func (u *ResumeMailboxCursorUpsert) SetMailboxID(v uuid.UUID) *ResumeMailboxCursorUpsert {
	u.Set(resumemailboxcursor.FieldMailboxID, v)
	return u
}

// UpdateMailboxID sets the "mailbox_id" field to the value that was provided on create.
func (u *ResumeMailboxCursorUpsert) UpdateMailboxID() *ResumeMailboxCursorUpsert {
	u.SetExcluded(resumemailboxcursor.FieldMailboxID)
	return u
}

// SetProtocolCursor sets the "protocol_cursor" field.
func (u *ResumeMailboxCursorUpsert) SetProtocolCursor(v string) *ResumeMailboxCursorUpsert {
	u.Set(resumemailboxcursor.FieldProtocolCursor, v)
	return u
}

// UpdateProtocolCursor sets the "protocol_cursor" field to the value that was provided on create.
func (u *ResumeMailboxCursorUpsert) UpdateProtocolCursor() *ResumeMailboxCursorUpsert {
	u.SetExcluded(resumemailboxcursor.FieldProtocolCursor)
	return u
}

// SetLastMessageID sets the "last_message_id" field.
func (u *ResumeMailboxCursorUpsert) SetLastMessageID(v string) *ResumeMailboxCursorUpsert {
	u.Set(resumemailboxcursor.FieldLastMessageID, v)
	return u
}

// UpdateLastMessageID sets the "last_message_id" field to the value that was provided on create.
func (u *ResumeMailboxCursorUpsert) UpdateLastMessageID() *ResumeMailboxCursorUpsert {
	u.SetExcluded(resumemailboxcursor.FieldLastMessageID)
	return u
}

// ClearLastMessageID clears the value of the "last_message_id" field.
func (u *ResumeMailboxCursorUpsert) ClearLastMessageID() *ResumeMailboxCursorUpsert {
	u.SetNull(resumemailboxcursor.FieldLastMessageID)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeMailboxCursorUpsert) SetUpdatedAt(v time.Time) *ResumeMailboxCursorUpsert {
	u.Set(resumemailboxcursor.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeMailboxCursorUpsert) UpdateUpdatedAt() *ResumeMailboxCursorUpsert {
	u.SetExcluded(resumemailboxcursor.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ResumeMailboxCursor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumemailboxcursor.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeMailboxCursorUpsertOne) UpdateNewValues() *ResumeMailboxCursorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resumemailboxcursor.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(resumemailboxcursor.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeMailboxCursor.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResumeMailboxCursorUpsertOne) Ignore() *ResumeMailboxCursorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeMailboxCursorUpsertOne) DoNothing() *ResumeMailboxCursorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeMailboxCursorCreate.OnConflict
// documentation for more info.
func (u *ResumeMailboxCursorUpsertOne) Update(set func(*ResumeMailboxCursorUpsert)) *ResumeMailboxCursorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeMailboxCursorUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeMailboxCursorUpsertOne) SetDeletedAt(v time.Time) *ResumeMailboxCursorUpsertOne {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeMailboxCursorUpsertOne) UpdateDeletedAt() *ResumeMailboxCursorUpsertOne {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeMailboxCursorUpsertOne) ClearDeletedAt() *ResumeMailboxCursorUpsertOne {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMailboxID sets the "mailbox_id" field.
func (u *ResumeMailboxCursorUpsertOne) SetMailboxID(v uuid.UUID) *ResumeMailboxCursorUpsertOne {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.SetMailboxID(v)
	})
}

// UpdateMailboxID sets the "mailbox_id" field to the value that was provided on create.
func (u *ResumeMailboxCursorUpsertOne) UpdateMailboxID() *ResumeMailboxCursorUpsertOne {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.UpdateMailboxID()
	})
}

// SetProtocolCursor sets the "protocol_cursor" field.
func (u *ResumeMailboxCursorUpsertOne) SetProtocolCursor(v string) *ResumeMailboxCursorUpsertOne {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.SetProtocolCursor(v)
	})
}

// UpdateProtocolCursor sets the "protocol_cursor" field to the value that was provided on create.
func (u *ResumeMailboxCursorUpsertOne) UpdateProtocolCursor() *ResumeMailboxCursorUpsertOne {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.UpdateProtocolCursor()
	})
}

// SetLastMessageID sets the "last_message_id" field.
func (u *ResumeMailboxCursorUpsertOne) SetLastMessageID(v string) *ResumeMailboxCursorUpsertOne {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.SetLastMessageID(v)
	})
}

// UpdateLastMessageID sets the "last_message_id" field to the value that was provided on create.
func (u *ResumeMailboxCursorUpsertOne) UpdateLastMessageID() *ResumeMailboxCursorUpsertOne {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.UpdateLastMessageID()
	})
}

// ClearLastMessageID clears the value of the "last_message_id" field.
func (u *ResumeMailboxCursorUpsertOne) ClearLastMessageID() *ResumeMailboxCursorUpsertOne {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.ClearLastMessageID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeMailboxCursorUpsertOne) SetUpdatedAt(v time.Time) *ResumeMailboxCursorUpsertOne {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeMailboxCursorUpsertOne) UpdateUpdatedAt() *ResumeMailboxCursorUpsertOne {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeMailboxCursorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeMailboxCursorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeMailboxCursorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResumeMailboxCursorUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ResumeMailboxCursorUpsertOne.ID is not supported by MySQL driver. Use ResumeMailboxCursorUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResumeMailboxCursorUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResumeMailboxCursorCreateBulk is the builder for creating many ResumeMailboxCursor entities in bulk.
type ResumeMailboxCursorCreateBulk struct {
	config
	err      error
	builders []*ResumeMailboxCursorCreate
	conflict []sql.ConflictOption
}

// Save creates the ResumeMailboxCursor entities in the database.
func (rmccb *ResumeMailboxCursorCreateBulk) Save(ctx context.Context) ([]*ResumeMailboxCursor, error) {
	if rmccb.err != nil {
		return nil, rmccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rmccb.builders))
	nodes := make([]*ResumeMailboxCursor, len(rmccb.builders))
	mutators := make([]Mutator, len(rmccb.builders))
	for i := range rmccb.builders {
		func(i int, root context.Context) {
			builder := rmccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResumeMailboxCursorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rmccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rmccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rmccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rmccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rmccb *ResumeMailboxCursorCreateBulk) SaveX(ctx context.Context) []*ResumeMailboxCursor {
	v, err := rmccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmccb *ResumeMailboxCursorCreateBulk) Exec(ctx context.Context) error {
	_, err := rmccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmccb *ResumeMailboxCursorCreateBulk) ExecX(ctx context.Context) {
	if err := rmccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeMailboxCursor.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeMailboxCursorUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rmccb *ResumeMailboxCursorCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResumeMailboxCursorUpsertBulk {
	rmccb.conflict = opts
	return &ResumeMailboxCursorUpsertBulk{
		create: rmccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeMailboxCursor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rmccb *ResumeMailboxCursorCreateBulk) OnConflictColumns(columns ...string) *ResumeMailboxCursorUpsertBulk {
	rmccb.conflict = append(rmccb.conflict, sql.ConflictColumns(columns...))
	return &ResumeMailboxCursorUpsertBulk{
		create: rmccb,
	}
}

// ResumeMailboxCursorUpsertBulk is the builder for "upsert"-ing
// a bulk of ResumeMailboxCursor nodes.
type ResumeMailboxCursorUpsertBulk struct {
	create *ResumeMailboxCursorCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ResumeMailboxCursor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumemailboxcursor.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeMailboxCursorUpsertBulk) UpdateNewValues() *ResumeMailboxCursorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resumemailboxcursor.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(resumemailboxcursor.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeMailboxCursor.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResumeMailboxCursorUpsertBulk) Ignore() *ResumeMailboxCursorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeMailboxCursorUpsertBulk) DoNothing() *ResumeMailboxCursorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeMailboxCursorCreateBulk.OnConflict
// documentation for more info.
func (u *ResumeMailboxCursorUpsertBulk) Update(set func(*ResumeMailboxCursorUpsert)) *ResumeMailboxCursorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeMailboxCursorUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeMailboxCursorUpsertBulk) SetDeletedAt(v time.Time) *ResumeMailboxCursorUpsertBulk {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeMailboxCursorUpsertBulk) UpdateDeletedAt() *ResumeMailboxCursorUpsertBulk {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeMailboxCursorUpsertBulk) ClearDeletedAt() *ResumeMailboxCursorUpsertBulk {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMailboxID sets the "mailbox_id" field.
func (u *ResumeMailboxCursorUpsertBulk) SetMailboxID(v uuid.UUID) *ResumeMailboxCursorUpsertBulk {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.SetMailboxID(v)
	})
}

// UpdateMailboxID sets the "mailbox_id" field to the value that was provided on create.
func (u *ResumeMailboxCursorUpsertBulk) UpdateMailboxID() *ResumeMailboxCursorUpsertBulk {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.UpdateMailboxID()
	})
}

// SetProtocolCursor sets the "protocol_cursor" field.
func (u *ResumeMailboxCursorUpsertBulk) SetProtocolCursor(v string) *ResumeMailboxCursorUpsertBulk {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.SetProtocolCursor(v)
	})
}

// UpdateProtocolCursor sets the "protocol_cursor" field to the value that was provided on create.
func (u *ResumeMailboxCursorUpsertBulk) UpdateProtocolCursor() *ResumeMailboxCursorUpsertBulk {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.UpdateProtocolCursor()
	})
}

// SetLastMessageID sets the "last_message_id" field.
func (u *ResumeMailboxCursorUpsertBulk) SetLastMessageID(v string) *ResumeMailboxCursorUpsertBulk {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.SetLastMessageID(v)
	})
}

// UpdateLastMessageID sets the "last_message_id" field to the value that was provided on create.
func (u *ResumeMailboxCursorUpsertBulk) UpdateLastMessageID() *ResumeMailboxCursorUpsertBulk {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.UpdateLastMessageID()
	})
}

// ClearLastMessageID clears the value of the "last_message_id" field.
func (u *ResumeMailboxCursorUpsertBulk) ClearLastMessageID() *ResumeMailboxCursorUpsertBulk {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.ClearLastMessageID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeMailboxCursorUpsertBulk) SetUpdatedAt(v time.Time) *ResumeMailboxCursorUpsertBulk {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeMailboxCursorUpsertBulk) UpdateUpdatedAt() *ResumeMailboxCursorUpsertBulk {
	return u.Update(func(s *ResumeMailboxCursorUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeMailboxCursorUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ResumeMailboxCursorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeMailboxCursorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeMailboxCursorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
