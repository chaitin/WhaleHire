// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumejobapplication"
	"github.com/google/uuid"
)

// ResumeJobApplicationUpdate is the builder for updating ResumeJobApplication entities.
type ResumeJobApplicationUpdate struct {
	config
	hooks     []Hook
	mutation  *ResumeJobApplicationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ResumeJobApplicationUpdate builder.
func (rjau *ResumeJobApplicationUpdate) Where(ps ...predicate.ResumeJobApplication) *ResumeJobApplicationUpdate {
	rjau.mutation.Where(ps...)
	return rjau
}

// SetDeletedAt sets the "deleted_at" field.
func (rjau *ResumeJobApplicationUpdate) SetDeletedAt(t time.Time) *ResumeJobApplicationUpdate {
	rjau.mutation.SetDeletedAt(t)
	return rjau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rjau *ResumeJobApplicationUpdate) SetNillableDeletedAt(t *time.Time) *ResumeJobApplicationUpdate {
	if t != nil {
		rjau.SetDeletedAt(*t)
	}
	return rjau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rjau *ResumeJobApplicationUpdate) ClearDeletedAt() *ResumeJobApplicationUpdate {
	rjau.mutation.ClearDeletedAt()
	return rjau
}

// SetResumeID sets the "resume_id" field.
func (rjau *ResumeJobApplicationUpdate) SetResumeID(u uuid.UUID) *ResumeJobApplicationUpdate {
	rjau.mutation.SetResumeID(u)
	return rjau
}

// SetNillableResumeID sets the "resume_id" field if the given value is not nil.
func (rjau *ResumeJobApplicationUpdate) SetNillableResumeID(u *uuid.UUID) *ResumeJobApplicationUpdate {
	if u != nil {
		rjau.SetResumeID(*u)
	}
	return rjau
}

// SetJobPositionID sets the "job_position_id" field.
func (rjau *ResumeJobApplicationUpdate) SetJobPositionID(u uuid.UUID) *ResumeJobApplicationUpdate {
	rjau.mutation.SetJobPositionID(u)
	return rjau
}

// SetNillableJobPositionID sets the "job_position_id" field if the given value is not nil.
func (rjau *ResumeJobApplicationUpdate) SetNillableJobPositionID(u *uuid.UUID) *ResumeJobApplicationUpdate {
	if u != nil {
		rjau.SetJobPositionID(*u)
	}
	return rjau
}

// SetStatus sets the "status" field.
func (rjau *ResumeJobApplicationUpdate) SetStatus(s string) *ResumeJobApplicationUpdate {
	rjau.mutation.SetStatus(s)
	return rjau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rjau *ResumeJobApplicationUpdate) SetNillableStatus(s *string) *ResumeJobApplicationUpdate {
	if s != nil {
		rjau.SetStatus(*s)
	}
	return rjau
}

// SetSource sets the "source" field.
func (rjau *ResumeJobApplicationUpdate) SetSource(s string) *ResumeJobApplicationUpdate {
	rjau.mutation.SetSource(s)
	return rjau
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (rjau *ResumeJobApplicationUpdate) SetNillableSource(s *string) *ResumeJobApplicationUpdate {
	if s != nil {
		rjau.SetSource(*s)
	}
	return rjau
}

// ClearSource clears the value of the "source" field.
func (rjau *ResumeJobApplicationUpdate) ClearSource() *ResumeJobApplicationUpdate {
	rjau.mutation.ClearSource()
	return rjau
}

// SetNotes sets the "notes" field.
func (rjau *ResumeJobApplicationUpdate) SetNotes(s string) *ResumeJobApplicationUpdate {
	rjau.mutation.SetNotes(s)
	return rjau
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (rjau *ResumeJobApplicationUpdate) SetNillableNotes(s *string) *ResumeJobApplicationUpdate {
	if s != nil {
		rjau.SetNotes(*s)
	}
	return rjau
}

// ClearNotes clears the value of the "notes" field.
func (rjau *ResumeJobApplicationUpdate) ClearNotes() *ResumeJobApplicationUpdate {
	rjau.mutation.ClearNotes()
	return rjau
}

// SetAppliedAt sets the "applied_at" field.
func (rjau *ResumeJobApplicationUpdate) SetAppliedAt(t time.Time) *ResumeJobApplicationUpdate {
	rjau.mutation.SetAppliedAt(t)
	return rjau
}

// SetNillableAppliedAt sets the "applied_at" field if the given value is not nil.
func (rjau *ResumeJobApplicationUpdate) SetNillableAppliedAt(t *time.Time) *ResumeJobApplicationUpdate {
	if t != nil {
		rjau.SetAppliedAt(*t)
	}
	return rjau
}

// SetCreatedAt sets the "created_at" field.
func (rjau *ResumeJobApplicationUpdate) SetCreatedAt(t time.Time) *ResumeJobApplicationUpdate {
	rjau.mutation.SetCreatedAt(t)
	return rjau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rjau *ResumeJobApplicationUpdate) SetNillableCreatedAt(t *time.Time) *ResumeJobApplicationUpdate {
	if t != nil {
		rjau.SetCreatedAt(*t)
	}
	return rjau
}

// SetUpdatedAt sets the "updated_at" field.
func (rjau *ResumeJobApplicationUpdate) SetUpdatedAt(t time.Time) *ResumeJobApplicationUpdate {
	rjau.mutation.SetUpdatedAt(t)
	return rjau
}

// SetResume sets the "resume" edge to the Resume entity.
func (rjau *ResumeJobApplicationUpdate) SetResume(r *Resume) *ResumeJobApplicationUpdate {
	return rjau.SetResumeID(r.ID)
}

// SetJobPosition sets the "job_position" edge to the JobPosition entity.
func (rjau *ResumeJobApplicationUpdate) SetJobPosition(j *JobPosition) *ResumeJobApplicationUpdate {
	return rjau.SetJobPositionID(j.ID)
}

// Mutation returns the ResumeJobApplicationMutation object of the builder.
func (rjau *ResumeJobApplicationUpdate) Mutation() *ResumeJobApplicationMutation {
	return rjau.mutation
}

// ClearResume clears the "resume" edge to the Resume entity.
func (rjau *ResumeJobApplicationUpdate) ClearResume() *ResumeJobApplicationUpdate {
	rjau.mutation.ClearResume()
	return rjau
}

// ClearJobPosition clears the "job_position" edge to the JobPosition entity.
func (rjau *ResumeJobApplicationUpdate) ClearJobPosition() *ResumeJobApplicationUpdate {
	rjau.mutation.ClearJobPosition()
	return rjau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rjau *ResumeJobApplicationUpdate) Save(ctx context.Context) (int, error) {
	if err := rjau.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, rjau.sqlSave, rjau.mutation, rjau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rjau *ResumeJobApplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := rjau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rjau *ResumeJobApplicationUpdate) Exec(ctx context.Context) error {
	_, err := rjau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rjau *ResumeJobApplicationUpdate) ExecX(ctx context.Context) {
	if err := rjau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rjau *ResumeJobApplicationUpdate) defaults() error {
	if _, ok := rjau.mutation.UpdatedAt(); !ok {
		if resumejobapplication.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumejobapplication.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumejobapplication.UpdateDefaultUpdatedAt()
		rjau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rjau *ResumeJobApplicationUpdate) check() error {
	if rjau.mutation.ResumeCleared() && len(rjau.mutation.ResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeJobApplication.resume"`)
	}
	if rjau.mutation.JobPositionCleared() && len(rjau.mutation.JobPositionIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeJobApplication.job_position"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rjau *ResumeJobApplicationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeJobApplicationUpdate {
	rjau.modifiers = append(rjau.modifiers, modifiers...)
	return rjau
}

func (rjau *ResumeJobApplicationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rjau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumejobapplication.Table, resumejobapplication.Columns, sqlgraph.NewFieldSpec(resumejobapplication.FieldID, field.TypeUUID))
	if ps := rjau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rjau.mutation.DeletedAt(); ok {
		_spec.SetField(resumejobapplication.FieldDeletedAt, field.TypeTime, value)
	}
	if rjau.mutation.DeletedAtCleared() {
		_spec.ClearField(resumejobapplication.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rjau.mutation.Status(); ok {
		_spec.SetField(resumejobapplication.FieldStatus, field.TypeString, value)
	}
	if value, ok := rjau.mutation.Source(); ok {
		_spec.SetField(resumejobapplication.FieldSource, field.TypeString, value)
	}
	if rjau.mutation.SourceCleared() {
		_spec.ClearField(resumejobapplication.FieldSource, field.TypeString)
	}
	if value, ok := rjau.mutation.Notes(); ok {
		_spec.SetField(resumejobapplication.FieldNotes, field.TypeString, value)
	}
	if rjau.mutation.NotesCleared() {
		_spec.ClearField(resumejobapplication.FieldNotes, field.TypeString)
	}
	if value, ok := rjau.mutation.AppliedAt(); ok {
		_spec.SetField(resumejobapplication.FieldAppliedAt, field.TypeTime, value)
	}
	if value, ok := rjau.mutation.CreatedAt(); ok {
		_spec.SetField(resumejobapplication.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rjau.mutation.UpdatedAt(); ok {
		_spec.SetField(resumejobapplication.FieldUpdatedAt, field.TypeTime, value)
	}
	if rjau.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumejobapplication.ResumeTable,
			Columns: []string{resumejobapplication.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rjau.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumejobapplication.ResumeTable,
			Columns: []string{resumejobapplication.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rjau.mutation.JobPositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumejobapplication.JobPositionTable,
			Columns: []string{resumejobapplication.JobPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rjau.mutation.JobPositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumejobapplication.JobPositionTable,
			Columns: []string{resumejobapplication.JobPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rjau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rjau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumejobapplication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rjau.mutation.done = true
	return n, nil
}

// ResumeJobApplicationUpdateOne is the builder for updating a single ResumeJobApplication entity.
type ResumeJobApplicationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ResumeJobApplicationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (rjauo *ResumeJobApplicationUpdateOne) SetDeletedAt(t time.Time) *ResumeJobApplicationUpdateOne {
	rjauo.mutation.SetDeletedAt(t)
	return rjauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rjauo *ResumeJobApplicationUpdateOne) SetNillableDeletedAt(t *time.Time) *ResumeJobApplicationUpdateOne {
	if t != nil {
		rjauo.SetDeletedAt(*t)
	}
	return rjauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rjauo *ResumeJobApplicationUpdateOne) ClearDeletedAt() *ResumeJobApplicationUpdateOne {
	rjauo.mutation.ClearDeletedAt()
	return rjauo
}

// SetResumeID sets the "resume_id" field.
func (rjauo *ResumeJobApplicationUpdateOne) SetResumeID(u uuid.UUID) *ResumeJobApplicationUpdateOne {
	rjauo.mutation.SetResumeID(u)
	return rjauo
}

// SetNillableResumeID sets the "resume_id" field if the given value is not nil.
func (rjauo *ResumeJobApplicationUpdateOne) SetNillableResumeID(u *uuid.UUID) *ResumeJobApplicationUpdateOne {
	if u != nil {
		rjauo.SetResumeID(*u)
	}
	return rjauo
}

// SetJobPositionID sets the "job_position_id" field.
func (rjauo *ResumeJobApplicationUpdateOne) SetJobPositionID(u uuid.UUID) *ResumeJobApplicationUpdateOne {
	rjauo.mutation.SetJobPositionID(u)
	return rjauo
}

// SetNillableJobPositionID sets the "job_position_id" field if the given value is not nil.
func (rjauo *ResumeJobApplicationUpdateOne) SetNillableJobPositionID(u *uuid.UUID) *ResumeJobApplicationUpdateOne {
	if u != nil {
		rjauo.SetJobPositionID(*u)
	}
	return rjauo
}

// SetStatus sets the "status" field.
func (rjauo *ResumeJobApplicationUpdateOne) SetStatus(s string) *ResumeJobApplicationUpdateOne {
	rjauo.mutation.SetStatus(s)
	return rjauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rjauo *ResumeJobApplicationUpdateOne) SetNillableStatus(s *string) *ResumeJobApplicationUpdateOne {
	if s != nil {
		rjauo.SetStatus(*s)
	}
	return rjauo
}

// SetSource sets the "source" field.
func (rjauo *ResumeJobApplicationUpdateOne) SetSource(s string) *ResumeJobApplicationUpdateOne {
	rjauo.mutation.SetSource(s)
	return rjauo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (rjauo *ResumeJobApplicationUpdateOne) SetNillableSource(s *string) *ResumeJobApplicationUpdateOne {
	if s != nil {
		rjauo.SetSource(*s)
	}
	return rjauo
}

// ClearSource clears the value of the "source" field.
func (rjauo *ResumeJobApplicationUpdateOne) ClearSource() *ResumeJobApplicationUpdateOne {
	rjauo.mutation.ClearSource()
	return rjauo
}

// SetNotes sets the "notes" field.
func (rjauo *ResumeJobApplicationUpdateOne) SetNotes(s string) *ResumeJobApplicationUpdateOne {
	rjauo.mutation.SetNotes(s)
	return rjauo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (rjauo *ResumeJobApplicationUpdateOne) SetNillableNotes(s *string) *ResumeJobApplicationUpdateOne {
	if s != nil {
		rjauo.SetNotes(*s)
	}
	return rjauo
}

// ClearNotes clears the value of the "notes" field.
func (rjauo *ResumeJobApplicationUpdateOne) ClearNotes() *ResumeJobApplicationUpdateOne {
	rjauo.mutation.ClearNotes()
	return rjauo
}

// SetAppliedAt sets the "applied_at" field.
func (rjauo *ResumeJobApplicationUpdateOne) SetAppliedAt(t time.Time) *ResumeJobApplicationUpdateOne {
	rjauo.mutation.SetAppliedAt(t)
	return rjauo
}

// SetNillableAppliedAt sets the "applied_at" field if the given value is not nil.
func (rjauo *ResumeJobApplicationUpdateOne) SetNillableAppliedAt(t *time.Time) *ResumeJobApplicationUpdateOne {
	if t != nil {
		rjauo.SetAppliedAt(*t)
	}
	return rjauo
}

// SetCreatedAt sets the "created_at" field.
func (rjauo *ResumeJobApplicationUpdateOne) SetCreatedAt(t time.Time) *ResumeJobApplicationUpdateOne {
	rjauo.mutation.SetCreatedAt(t)
	return rjauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rjauo *ResumeJobApplicationUpdateOne) SetNillableCreatedAt(t *time.Time) *ResumeJobApplicationUpdateOne {
	if t != nil {
		rjauo.SetCreatedAt(*t)
	}
	return rjauo
}

// SetUpdatedAt sets the "updated_at" field.
func (rjauo *ResumeJobApplicationUpdateOne) SetUpdatedAt(t time.Time) *ResumeJobApplicationUpdateOne {
	rjauo.mutation.SetUpdatedAt(t)
	return rjauo
}

// SetResume sets the "resume" edge to the Resume entity.
func (rjauo *ResumeJobApplicationUpdateOne) SetResume(r *Resume) *ResumeJobApplicationUpdateOne {
	return rjauo.SetResumeID(r.ID)
}

// SetJobPosition sets the "job_position" edge to the JobPosition entity.
func (rjauo *ResumeJobApplicationUpdateOne) SetJobPosition(j *JobPosition) *ResumeJobApplicationUpdateOne {
	return rjauo.SetJobPositionID(j.ID)
}

// Mutation returns the ResumeJobApplicationMutation object of the builder.
func (rjauo *ResumeJobApplicationUpdateOne) Mutation() *ResumeJobApplicationMutation {
	return rjauo.mutation
}

// ClearResume clears the "resume" edge to the Resume entity.
func (rjauo *ResumeJobApplicationUpdateOne) ClearResume() *ResumeJobApplicationUpdateOne {
	rjauo.mutation.ClearResume()
	return rjauo
}

// ClearJobPosition clears the "job_position" edge to the JobPosition entity.
func (rjauo *ResumeJobApplicationUpdateOne) ClearJobPosition() *ResumeJobApplicationUpdateOne {
	rjauo.mutation.ClearJobPosition()
	return rjauo
}

// Where appends a list predicates to the ResumeJobApplicationUpdate builder.
func (rjauo *ResumeJobApplicationUpdateOne) Where(ps ...predicate.ResumeJobApplication) *ResumeJobApplicationUpdateOne {
	rjauo.mutation.Where(ps...)
	return rjauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rjauo *ResumeJobApplicationUpdateOne) Select(field string, fields ...string) *ResumeJobApplicationUpdateOne {
	rjauo.fields = append([]string{field}, fields...)
	return rjauo
}

// Save executes the query and returns the updated ResumeJobApplication entity.
func (rjauo *ResumeJobApplicationUpdateOne) Save(ctx context.Context) (*ResumeJobApplication, error) {
	if err := rjauo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rjauo.sqlSave, rjauo.mutation, rjauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rjauo *ResumeJobApplicationUpdateOne) SaveX(ctx context.Context) *ResumeJobApplication {
	node, err := rjauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rjauo *ResumeJobApplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := rjauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rjauo *ResumeJobApplicationUpdateOne) ExecX(ctx context.Context) {
	if err := rjauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rjauo *ResumeJobApplicationUpdateOne) defaults() error {
	if _, ok := rjauo.mutation.UpdatedAt(); !ok {
		if resumejobapplication.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumejobapplication.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumejobapplication.UpdateDefaultUpdatedAt()
		rjauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rjauo *ResumeJobApplicationUpdateOne) check() error {
	if rjauo.mutation.ResumeCleared() && len(rjauo.mutation.ResumeIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeJobApplication.resume"`)
	}
	if rjauo.mutation.JobPositionCleared() && len(rjauo.mutation.JobPositionIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ResumeJobApplication.job_position"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rjauo *ResumeJobApplicationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResumeJobApplicationUpdateOne {
	rjauo.modifiers = append(rjauo.modifiers, modifiers...)
	return rjauo
}

func (rjauo *ResumeJobApplicationUpdateOne) sqlSave(ctx context.Context) (_node *ResumeJobApplication, err error) {
	if err := rjauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resumejobapplication.Table, resumejobapplication.Columns, sqlgraph.NewFieldSpec(resumejobapplication.FieldID, field.TypeUUID))
	id, ok := rjauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ResumeJobApplication.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rjauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resumejobapplication.FieldID)
		for _, f := range fields {
			if !resumejobapplication.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != resumejobapplication.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rjauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rjauo.mutation.DeletedAt(); ok {
		_spec.SetField(resumejobapplication.FieldDeletedAt, field.TypeTime, value)
	}
	if rjauo.mutation.DeletedAtCleared() {
		_spec.ClearField(resumejobapplication.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rjauo.mutation.Status(); ok {
		_spec.SetField(resumejobapplication.FieldStatus, field.TypeString, value)
	}
	if value, ok := rjauo.mutation.Source(); ok {
		_spec.SetField(resumejobapplication.FieldSource, field.TypeString, value)
	}
	if rjauo.mutation.SourceCleared() {
		_spec.ClearField(resumejobapplication.FieldSource, field.TypeString)
	}
	if value, ok := rjauo.mutation.Notes(); ok {
		_spec.SetField(resumejobapplication.FieldNotes, field.TypeString, value)
	}
	if rjauo.mutation.NotesCleared() {
		_spec.ClearField(resumejobapplication.FieldNotes, field.TypeString)
	}
	if value, ok := rjauo.mutation.AppliedAt(); ok {
		_spec.SetField(resumejobapplication.FieldAppliedAt, field.TypeTime, value)
	}
	if value, ok := rjauo.mutation.CreatedAt(); ok {
		_spec.SetField(resumejobapplication.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rjauo.mutation.UpdatedAt(); ok {
		_spec.SetField(resumejobapplication.FieldUpdatedAt, field.TypeTime, value)
	}
	if rjauo.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumejobapplication.ResumeTable,
			Columns: []string{resumejobapplication.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rjauo.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumejobapplication.ResumeTable,
			Columns: []string{resumejobapplication.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rjauo.mutation.JobPositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumejobapplication.JobPositionTable,
			Columns: []string{resumejobapplication.JobPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rjauo.mutation.JobPositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumejobapplication.JobPositionTable,
			Columns: []string{resumejobapplication.JobPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rjauo.modifiers...)
	_node = &ResumeJobApplication{config: rjauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rjauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resumejobapplication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rjauo.mutation.done = true
	return _node, nil
}
