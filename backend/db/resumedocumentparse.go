// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumedocumentparse"
	"github.com/google/uuid"
)

// ResumeDocumentParse is the model entity for the ResumeDocumentParse schema.
type ResumeDocumentParse struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// ResumeID holds the value of the "resume_id" field.
	ResumeID uuid.UUID `json:"resume_id,omitempty"`
	// FileID holds the value of the "file_id" field.
	FileID string `json:"file_id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// FileType holds the value of the "file_type" field.
	FileType string `json:"file_type,omitempty"`
	// Filename holds the value of the "filename" field.
	Filename string `json:"filename,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// UploadAt holds the value of the "upload_at" field.
	UploadAt time.Time `json:"upload_at,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// ErrorMessage holds the value of the "error_message" field.
	ErrorMessage string `json:"error_message,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResumeDocumentParseQuery when eager-loading is set.
	Edges        ResumeDocumentParseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ResumeDocumentParseEdges holds the relations/edges for other nodes in the graph.
type ResumeDocumentParseEdges struct {
	// Resume holds the value of the resume edge.
	Resume *Resume `json:"resume,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ResumeOrErr returns the Resume value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResumeDocumentParseEdges) ResumeOrErr() (*Resume, error) {
	if e.Resume != nil {
		return e.Resume, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: resume.Label}
	}
	return nil, &NotLoadedError{edge: "resume"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResumeDocumentParse) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resumedocumentparse.FieldFileID, resumedocumentparse.FieldContent, resumedocumentparse.FieldFileType, resumedocumentparse.FieldFilename, resumedocumentparse.FieldTitle, resumedocumentparse.FieldStatus, resumedocumentparse.FieldErrorMessage:
			values[i] = new(sql.NullString)
		case resumedocumentparse.FieldDeletedAt, resumedocumentparse.FieldUploadAt, resumedocumentparse.FieldCreatedAt, resumedocumentparse.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case resumedocumentparse.FieldID, resumedocumentparse.FieldResumeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResumeDocumentParse fields.
func (rdp *ResumeDocumentParse) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resumedocumentparse.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rdp.ID = *value
			}
		case resumedocumentparse.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rdp.DeletedAt = value.Time
			}
		case resumedocumentparse.FieldResumeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field resume_id", values[i])
			} else if value != nil {
				rdp.ResumeID = *value
			}
		case resumedocumentparse.FieldFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_id", values[i])
			} else if value.Valid {
				rdp.FileID = value.String
			}
		case resumedocumentparse.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				rdp.Content = value.String
			}
		case resumedocumentparse.FieldFileType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_type", values[i])
			} else if value.Valid {
				rdp.FileType = value.String
			}
		case resumedocumentparse.FieldFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[i])
			} else if value.Valid {
				rdp.Filename = value.String
			}
		case resumedocumentparse.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				rdp.Title = value.String
			}
		case resumedocumentparse.FieldUploadAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field upload_at", values[i])
			} else if value.Valid {
				rdp.UploadAt = value.Time
			}
		case resumedocumentparse.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				rdp.Status = value.String
			}
		case resumedocumentparse.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				rdp.ErrorMessage = value.String
			}
		case resumedocumentparse.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rdp.CreatedAt = value.Time
			}
		case resumedocumentparse.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rdp.UpdatedAt = value.Time
			}
		default:
			rdp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ResumeDocumentParse.
// This includes values selected through modifiers, order, etc.
func (rdp *ResumeDocumentParse) Value(name string) (ent.Value, error) {
	return rdp.selectValues.Get(name)
}

// QueryResume queries the "resume" edge of the ResumeDocumentParse entity.
func (rdp *ResumeDocumentParse) QueryResume() *ResumeQuery {
	return NewResumeDocumentParseClient(rdp.config).QueryResume(rdp)
}

// Update returns a builder for updating this ResumeDocumentParse.
// Note that you need to call ResumeDocumentParse.Unwrap() before calling this method if this ResumeDocumentParse
// was returned from a transaction, and the transaction was committed or rolled back.
func (rdp *ResumeDocumentParse) Update() *ResumeDocumentParseUpdateOne {
	return NewResumeDocumentParseClient(rdp.config).UpdateOne(rdp)
}

// Unwrap unwraps the ResumeDocumentParse entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rdp *ResumeDocumentParse) Unwrap() *ResumeDocumentParse {
	_tx, ok := rdp.config.driver.(*txDriver)
	if !ok {
		panic("db: ResumeDocumentParse is not a transactional entity")
	}
	rdp.config.driver = _tx.drv
	return rdp
}

// String implements the fmt.Stringer.
func (rdp *ResumeDocumentParse) String() string {
	var builder strings.Builder
	builder.WriteString("ResumeDocumentParse(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rdp.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(rdp.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("resume_id=")
	builder.WriteString(fmt.Sprintf("%v", rdp.ResumeID))
	builder.WriteString(", ")
	builder.WriteString("file_id=")
	builder.WriteString(rdp.FileID)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(rdp.Content)
	builder.WriteString(", ")
	builder.WriteString("file_type=")
	builder.WriteString(rdp.FileType)
	builder.WriteString(", ")
	builder.WriteString("filename=")
	builder.WriteString(rdp.Filename)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(rdp.Title)
	builder.WriteString(", ")
	builder.WriteString("upload_at=")
	builder.WriteString(rdp.UploadAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(rdp.Status)
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(rdp.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rdp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rdp.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ResumeDocumentParses is a parsable slice of ResumeDocumentParse.
type ResumeDocumentParses []*ResumeDocumentParse
