// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumeskill"
	"github.com/google/uuid"
)

// ResumeSkill is the model entity for the ResumeSkill schema.
type ResumeSkill struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// ResumeID holds the value of the "resume_id" field.
	ResumeID uuid.UUID `json:"resume_id,omitempty"`
	// SkillName holds the value of the "skill_name" field.
	SkillName string `json:"skill_name,omitempty"`
	// Level holds the value of the "level" field.
	Level string `json:"level,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResumeSkillQuery when eager-loading is set.
	Edges        ResumeSkillEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ResumeSkillEdges holds the relations/edges for other nodes in the graph.
type ResumeSkillEdges struct {
	// Resume holds the value of the resume edge.
	Resume *Resume `json:"resume,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ResumeOrErr returns the Resume value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResumeSkillEdges) ResumeOrErr() (*Resume, error) {
	if e.Resume != nil {
		return e.Resume, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: resume.Label}
	}
	return nil, &NotLoadedError{edge: "resume"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResumeSkill) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resumeskill.FieldSkillName, resumeskill.FieldLevel, resumeskill.FieldDescription:
			values[i] = new(sql.NullString)
		case resumeskill.FieldDeletedAt, resumeskill.FieldCreatedAt, resumeskill.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case resumeskill.FieldID, resumeskill.FieldResumeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResumeSkill fields.
func (rs *ResumeSkill) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resumeskill.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rs.ID = *value
			}
		case resumeskill.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rs.DeletedAt = value.Time
			}
		case resumeskill.FieldResumeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field resume_id", values[i])
			} else if value != nil {
				rs.ResumeID = *value
			}
		case resumeskill.FieldSkillName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field skill_name", values[i])
			} else if value.Valid {
				rs.SkillName = value.String
			}
		case resumeskill.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				rs.Level = value.String
			}
		case resumeskill.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rs.Description = value.String
			}
		case resumeskill.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rs.CreatedAt = value.Time
			}
		case resumeskill.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rs.UpdatedAt = value.Time
			}
		default:
			rs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ResumeSkill.
// This includes values selected through modifiers, order, etc.
func (rs *ResumeSkill) Value(name string) (ent.Value, error) {
	return rs.selectValues.Get(name)
}

// QueryResume queries the "resume" edge of the ResumeSkill entity.
func (rs *ResumeSkill) QueryResume() *ResumeQuery {
	return NewResumeSkillClient(rs.config).QueryResume(rs)
}

// Update returns a builder for updating this ResumeSkill.
// Note that you need to call ResumeSkill.Unwrap() before calling this method if this ResumeSkill
// was returned from a transaction, and the transaction was committed or rolled back.
func (rs *ResumeSkill) Update() *ResumeSkillUpdateOne {
	return NewResumeSkillClient(rs.config).UpdateOne(rs)
}

// Unwrap unwraps the ResumeSkill entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rs *ResumeSkill) Unwrap() *ResumeSkill {
	_tx, ok := rs.config.driver.(*txDriver)
	if !ok {
		panic("db: ResumeSkill is not a transactional entity")
	}
	rs.config.driver = _tx.drv
	return rs
}

// String implements the fmt.Stringer.
func (rs *ResumeSkill) String() string {
	var builder strings.Builder
	builder.WriteString("ResumeSkill(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rs.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(rs.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("resume_id=")
	builder.WriteString(fmt.Sprintf("%v", rs.ResumeID))
	builder.WriteString(", ")
	builder.WriteString("skill_name=")
	builder.WriteString(rs.SkillName)
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(rs.Level)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(rs.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rs.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ResumeSkills is a parsable slice of ResumeSkill.
type ResumeSkills []*ResumeSkill
