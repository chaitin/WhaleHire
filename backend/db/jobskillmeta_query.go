// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobskill"
	"github.com/chaitin/WhaleHire/backend/db/jobskillmeta"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// JobSkillMetaQuery is the builder for querying JobSkillMeta entities.
type JobSkillMetaQuery struct {
	config
	ctx          *QueryContext
	order        []jobskillmeta.OrderOption
	inters       []Interceptor
	predicates   []predicate.JobSkillMeta
	withJobLinks *JobSkillQuery
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JobSkillMetaQuery builder.
func (jsmq *JobSkillMetaQuery) Where(ps ...predicate.JobSkillMeta) *JobSkillMetaQuery {
	jsmq.predicates = append(jsmq.predicates, ps...)
	return jsmq
}

// Limit the number of records to be returned by this query.
func (jsmq *JobSkillMetaQuery) Limit(limit int) *JobSkillMetaQuery {
	jsmq.ctx.Limit = &limit
	return jsmq
}

// Offset to start from.
func (jsmq *JobSkillMetaQuery) Offset(offset int) *JobSkillMetaQuery {
	jsmq.ctx.Offset = &offset
	return jsmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (jsmq *JobSkillMetaQuery) Unique(unique bool) *JobSkillMetaQuery {
	jsmq.ctx.Unique = &unique
	return jsmq
}

// Order specifies how the records should be ordered.
func (jsmq *JobSkillMetaQuery) Order(o ...jobskillmeta.OrderOption) *JobSkillMetaQuery {
	jsmq.order = append(jsmq.order, o...)
	return jsmq
}

// QueryJobLinks chains the current query on the "job_links" edge.
func (jsmq *JobSkillMetaQuery) QueryJobLinks() *JobSkillQuery {
	query := (&JobSkillClient{config: jsmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jsmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jsmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobskillmeta.Table, jobskillmeta.FieldID, selector),
			sqlgraph.To(jobskill.Table, jobskill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobskillmeta.JobLinksTable, jobskillmeta.JobLinksColumn),
		)
		fromU = sqlgraph.SetNeighbors(jsmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first JobSkillMeta entity from the query.
// Returns a *NotFoundError when no JobSkillMeta was found.
func (jsmq *JobSkillMetaQuery) First(ctx context.Context) (*JobSkillMeta, error) {
	nodes, err := jsmq.Limit(1).All(setContextOp(ctx, jsmq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{jobskillmeta.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jsmq *JobSkillMetaQuery) FirstX(ctx context.Context) *JobSkillMeta {
	node, err := jsmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first JobSkillMeta ID from the query.
// Returns a *NotFoundError when no JobSkillMeta ID was found.
func (jsmq *JobSkillMetaQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = jsmq.Limit(1).IDs(setContextOp(ctx, jsmq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{jobskillmeta.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (jsmq *JobSkillMetaQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := jsmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single JobSkillMeta entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one JobSkillMeta entity is found.
// Returns a *NotFoundError when no JobSkillMeta entities are found.
func (jsmq *JobSkillMetaQuery) Only(ctx context.Context) (*JobSkillMeta, error) {
	nodes, err := jsmq.Limit(2).All(setContextOp(ctx, jsmq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{jobskillmeta.Label}
	default:
		return nil, &NotSingularError{jobskillmeta.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jsmq *JobSkillMetaQuery) OnlyX(ctx context.Context) *JobSkillMeta {
	node, err := jsmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only JobSkillMeta ID in the query.
// Returns a *NotSingularError when more than one JobSkillMeta ID is found.
// Returns a *NotFoundError when no entities are found.
func (jsmq *JobSkillMetaQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = jsmq.Limit(2).IDs(setContextOp(ctx, jsmq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{jobskillmeta.Label}
	default:
		err = &NotSingularError{jobskillmeta.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (jsmq *JobSkillMetaQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := jsmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of JobSkillMetaSlice.
func (jsmq *JobSkillMetaQuery) All(ctx context.Context) ([]*JobSkillMeta, error) {
	ctx = setContextOp(ctx, jsmq.ctx, ent.OpQueryAll)
	if err := jsmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*JobSkillMeta, *JobSkillMetaQuery]()
	return withInterceptors[[]*JobSkillMeta](ctx, jsmq, qr, jsmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (jsmq *JobSkillMetaQuery) AllX(ctx context.Context) []*JobSkillMeta {
	nodes, err := jsmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of JobSkillMeta IDs.
func (jsmq *JobSkillMetaQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if jsmq.ctx.Unique == nil && jsmq.path != nil {
		jsmq.Unique(true)
	}
	ctx = setContextOp(ctx, jsmq.ctx, ent.OpQueryIDs)
	if err = jsmq.Select(jobskillmeta.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jsmq *JobSkillMetaQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := jsmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jsmq *JobSkillMetaQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jsmq.ctx, ent.OpQueryCount)
	if err := jsmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, jsmq, querierCount[*JobSkillMetaQuery](), jsmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (jsmq *JobSkillMetaQuery) CountX(ctx context.Context) int {
	count, err := jsmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jsmq *JobSkillMetaQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, jsmq.ctx, ent.OpQueryExist)
	switch _, err := jsmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (jsmq *JobSkillMetaQuery) ExistX(ctx context.Context) bool {
	exist, err := jsmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JobSkillMetaQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jsmq *JobSkillMetaQuery) Clone() *JobSkillMetaQuery {
	if jsmq == nil {
		return nil
	}
	return &JobSkillMetaQuery{
		config:       jsmq.config,
		ctx:          jsmq.ctx.Clone(),
		order:        append([]jobskillmeta.OrderOption{}, jsmq.order...),
		inters:       append([]Interceptor{}, jsmq.inters...),
		predicates:   append([]predicate.JobSkillMeta{}, jsmq.predicates...),
		withJobLinks: jsmq.withJobLinks.Clone(),
		// clone intermediate query.
		sql:       jsmq.sql.Clone(),
		path:      jsmq.path,
		modifiers: append([]func(*sql.Selector){}, jsmq.modifiers...),
	}
}

// WithJobLinks tells the query-builder to eager-load the nodes that are connected to
// the "job_links" edge. The optional arguments are used to configure the query builder of the edge.
func (jsmq *JobSkillMetaQuery) WithJobLinks(opts ...func(*JobSkillQuery)) *JobSkillMetaQuery {
	query := (&JobSkillClient{config: jsmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jsmq.withJobLinks = query
	return jsmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.JobSkillMeta.Query().
//		GroupBy(jobskillmeta.FieldName).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (jsmq *JobSkillMetaQuery) GroupBy(field string, fields ...string) *JobSkillMetaGroupBy {
	jsmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &JobSkillMetaGroupBy{build: jsmq}
	grbuild.flds = &jsmq.ctx.Fields
	grbuild.label = jobskillmeta.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.JobSkillMeta.Query().
//		Select(jobskillmeta.FieldName).
//		Scan(ctx, &v)
func (jsmq *JobSkillMetaQuery) Select(fields ...string) *JobSkillMetaSelect {
	jsmq.ctx.Fields = append(jsmq.ctx.Fields, fields...)
	sbuild := &JobSkillMetaSelect{JobSkillMetaQuery: jsmq}
	sbuild.label = jobskillmeta.Label
	sbuild.flds, sbuild.scan = &jsmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a JobSkillMetaSelect configured with the given aggregations.
func (jsmq *JobSkillMetaQuery) Aggregate(fns ...AggregateFunc) *JobSkillMetaSelect {
	return jsmq.Select().Aggregate(fns...)
}

func (jsmq *JobSkillMetaQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range jsmq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, jsmq); err != nil {
				return err
			}
		}
	}
	for _, f := range jsmq.ctx.Fields {
		if !jobskillmeta.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if jsmq.path != nil {
		prev, err := jsmq.path(ctx)
		if err != nil {
			return err
		}
		jsmq.sql = prev
	}
	return nil
}

func (jsmq *JobSkillMetaQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*JobSkillMeta, error) {
	var (
		nodes       = []*JobSkillMeta{}
		_spec       = jsmq.querySpec()
		loadedTypes = [1]bool{
			jsmq.withJobLinks != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*JobSkillMeta).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &JobSkillMeta{config: jsmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(jsmq.modifiers) > 0 {
		_spec.Modifiers = jsmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, jsmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := jsmq.withJobLinks; query != nil {
		if err := jsmq.loadJobLinks(ctx, query, nodes,
			func(n *JobSkillMeta) { n.Edges.JobLinks = []*JobSkill{} },
			func(n *JobSkillMeta, e *JobSkill) { n.Edges.JobLinks = append(n.Edges.JobLinks, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (jsmq *JobSkillMetaQuery) loadJobLinks(ctx context.Context, query *JobSkillQuery, nodes []*JobSkillMeta, init func(*JobSkillMeta), assign func(*JobSkillMeta, *JobSkill)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*JobSkillMeta)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(jobskill.FieldSkillID)
	}
	query.Where(predicate.JobSkill(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(jobskillmeta.JobLinksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SkillID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "skill_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (jsmq *JobSkillMetaQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jsmq.querySpec()
	if len(jsmq.modifiers) > 0 {
		_spec.Modifiers = jsmq.modifiers
	}
	_spec.Node.Columns = jsmq.ctx.Fields
	if len(jsmq.ctx.Fields) > 0 {
		_spec.Unique = jsmq.ctx.Unique != nil && *jsmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, jsmq.driver, _spec)
}

func (jsmq *JobSkillMetaQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(jobskillmeta.Table, jobskillmeta.Columns, sqlgraph.NewFieldSpec(jobskillmeta.FieldID, field.TypeUUID))
	_spec.From = jsmq.sql
	if unique := jsmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if jsmq.path != nil {
		_spec.Unique = true
	}
	if fields := jsmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobskillmeta.FieldID)
		for i := range fields {
			if fields[i] != jobskillmeta.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := jsmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jsmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jsmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jsmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jsmq *JobSkillMetaQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(jsmq.driver.Dialect())
	t1 := builder.Table(jobskillmeta.Table)
	columns := jsmq.ctx.Fields
	if len(columns) == 0 {
		columns = jobskillmeta.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if jsmq.sql != nil {
		selector = jsmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if jsmq.ctx.Unique != nil && *jsmq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range jsmq.modifiers {
		m(selector)
	}
	for _, p := range jsmq.predicates {
		p(selector)
	}
	for _, p := range jsmq.order {
		p(selector)
	}
	if offset := jsmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jsmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (jsmq *JobSkillMetaQuery) ForUpdate(opts ...sql.LockOption) *JobSkillMetaQuery {
	if jsmq.driver.Dialect() == dialect.Postgres {
		jsmq.Unique(false)
	}
	jsmq.modifiers = append(jsmq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return jsmq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (jsmq *JobSkillMetaQuery) ForShare(opts ...sql.LockOption) *JobSkillMetaQuery {
	if jsmq.driver.Dialect() == dialect.Postgres {
		jsmq.Unique(false)
	}
	jsmq.modifiers = append(jsmq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return jsmq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (jsmq *JobSkillMetaQuery) Modify(modifiers ...func(s *sql.Selector)) *JobSkillMetaSelect {
	jsmq.modifiers = append(jsmq.modifiers, modifiers...)
	return jsmq.Select()
}

// JobSkillMetaGroupBy is the group-by builder for JobSkillMeta entities.
type JobSkillMetaGroupBy struct {
	selector
	build *JobSkillMetaQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jsmgb *JobSkillMetaGroupBy) Aggregate(fns ...AggregateFunc) *JobSkillMetaGroupBy {
	jsmgb.fns = append(jsmgb.fns, fns...)
	return jsmgb
}

// Scan applies the selector query and scans the result into the given value.
func (jsmgb *JobSkillMetaGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jsmgb.build.ctx, ent.OpQueryGroupBy)
	if err := jsmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobSkillMetaQuery, *JobSkillMetaGroupBy](ctx, jsmgb.build, jsmgb, jsmgb.build.inters, v)
}

func (jsmgb *JobSkillMetaGroupBy) sqlScan(ctx context.Context, root *JobSkillMetaQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(jsmgb.fns))
	for _, fn := range jsmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*jsmgb.flds)+len(jsmgb.fns))
		for _, f := range *jsmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*jsmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jsmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// JobSkillMetaSelect is the builder for selecting fields of JobSkillMeta entities.
type JobSkillMetaSelect struct {
	*JobSkillMetaQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (jsms *JobSkillMetaSelect) Aggregate(fns ...AggregateFunc) *JobSkillMetaSelect {
	jsms.fns = append(jsms.fns, fns...)
	return jsms
}

// Scan applies the selector query and scans the result into the given value.
func (jsms *JobSkillMetaSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jsms.ctx, ent.OpQuerySelect)
	if err := jsms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobSkillMetaQuery, *JobSkillMetaSelect](ctx, jsms.JobSkillMetaQuery, jsms, jsms.inters, v)
}

func (jsms *JobSkillMetaSelect) sqlScan(ctx context.Context, root *JobSkillMetaQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(jsms.fns))
	for _, fn := range jsms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*jsms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jsms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (jsms *JobSkillMetaSelect) Modify(modifiers ...func(s *sql.Selector)) *JobSkillMetaSelect {
	jsms.modifiers = append(jsms.modifiers, modifiers...)
	return jsms
}
