// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/conversation"
	"github.com/chaitin/WhaleHire/backend/db/message"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/google/uuid"
)

// ConversationCreate is the builder for creating a Conversation entity.
type ConversationCreate struct {
	config
	mutation *ConversationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *ConversationCreate) SetDeletedAt(t time.Time) *ConversationCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *ConversationCreate) SetNillableDeletedAt(t *time.Time) *ConversationCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *ConversationCreate) SetUserID(u uuid.UUID) *ConversationCreate {
	cc.mutation.SetUserID(u)
	return cc
}

// SetTitle sets the "title" field.
func (cc *ConversationCreate) SetTitle(s string) *ConversationCreate {
	cc.mutation.SetTitle(s)
	return cc
}

// SetAgentName sets the "agent_name" field.
func (cc *ConversationCreate) SetAgentName(s string) *ConversationCreate {
	cc.mutation.SetAgentName(s)
	return cc
}

// SetNillableAgentName sets the "agent_name" field if the given value is not nil.
func (cc *ConversationCreate) SetNillableAgentName(s *string) *ConversationCreate {
	if s != nil {
		cc.SetAgentName(*s)
	}
	return cc
}

// SetMetadata sets the "metadata" field.
func (cc *ConversationCreate) SetMetadata(m map[string]interface{}) *ConversationCreate {
	cc.mutation.SetMetadata(m)
	return cc
}

// SetStatus sets the "status" field.
func (cc *ConversationCreate) SetStatus(s string) *ConversationCreate {
	cc.mutation.SetStatus(s)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *ConversationCreate) SetNillableStatus(s *string) *ConversationCreate {
	if s != nil {
		cc.SetStatus(*s)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ConversationCreate) SetCreatedAt(t time.Time) *ConversationCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ConversationCreate) SetNillableCreatedAt(t *time.Time) *ConversationCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ConversationCreate) SetUpdatedAt(t time.Time) *ConversationCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ConversationCreate) SetNillableUpdatedAt(t *time.Time) *ConversationCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ConversationCreate) SetID(u uuid.UUID) *ConversationCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ConversationCreate) SetNillableID(u *uuid.UUID) *ConversationCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// SetUser sets the "user" edge to the User entity.
func (cc *ConversationCreate) SetUser(u *User) *ConversationCreate {
	return cc.SetUserID(u.ID)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (cc *ConversationCreate) AddMessageIDs(ids ...uuid.UUID) *ConversationCreate {
	cc.mutation.AddMessageIDs(ids...)
	return cc
}

// AddMessages adds the "messages" edges to the Message entity.
func (cc *ConversationCreate) AddMessages(m ...*Message) *ConversationCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cc.AddMessageIDs(ids...)
}

// Mutation returns the ConversationMutation object of the builder.
func (cc *ConversationCreate) Mutation() *ConversationMutation {
	return cc.mutation
}

// Save creates the Conversation in the database.
func (cc *ConversationCreate) Save(ctx context.Context) (*Conversation, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConversationCreate) SaveX(ctx context.Context) *Conversation {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ConversationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ConversationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ConversationCreate) defaults() error {
	if _, ok := cc.mutation.Status(); !ok {
		v := conversation.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if conversation.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized conversation.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := conversation.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		if conversation.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized conversation.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := conversation.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		if conversation.DefaultID == nil {
			return fmt.Errorf("db: uninitialized conversation.DefaultID (forgotten import db/runtime?)")
		}
		v := conversation.DefaultID()
		cc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConversationCreate) check() error {
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`db: missing required field "Conversation.user_id"`)}
	}
	if _, ok := cc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`db: missing required field "Conversation.title"`)}
	}
	if v, ok := cc.mutation.Title(); ok {
		if err := conversation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`db: validator failed for field "Conversation.title": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "Conversation.status"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Conversation.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Conversation.updated_at"`)}
	}
	if len(cc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`db: missing required edge "Conversation.user"`)}
	}
	return nil
}

func (cc *ConversationCreate) sqlSave(ctx context.Context) (*Conversation, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ConversationCreate) createSpec() (*Conversation, *sqlgraph.CreateSpec) {
	var (
		_node = &Conversation{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(conversation.Table, sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(conversation.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cc.mutation.Title(); ok {
		_spec.SetField(conversation.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := cc.mutation.AgentName(); ok {
		_spec.SetField(conversation.FieldAgentName, field.TypeString, value)
		_node.AgentName = value
	}
	if value, ok := cc.mutation.Metadata(); ok {
		_spec.SetField(conversation.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(conversation.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(conversation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(conversation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversation.UserTable,
			Columns: []string{conversation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Conversation.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConversationUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *ConversationCreate) OnConflict(opts ...sql.ConflictOption) *ConversationUpsertOne {
	cc.conflict = opts
	return &ConversationUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Conversation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ConversationCreate) OnConflictColumns(columns ...string) *ConversationUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ConversationUpsertOne{
		create: cc,
	}
}

type (
	// ConversationUpsertOne is the builder for "upsert"-ing
	//  one Conversation node.
	ConversationUpsertOne struct {
		create *ConversationCreate
	}

	// ConversationUpsert is the "OnConflict" setter.
	ConversationUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *ConversationUpsert) SetDeletedAt(v time.Time) *ConversationUpsert {
	u.Set(conversation.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ConversationUpsert) UpdateDeletedAt() *ConversationUpsert {
	u.SetExcluded(conversation.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ConversationUpsert) ClearDeletedAt() *ConversationUpsert {
	u.SetNull(conversation.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ConversationUpsert) SetUserID(v uuid.UUID) *ConversationUpsert {
	u.Set(conversation.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ConversationUpsert) UpdateUserID() *ConversationUpsert {
	u.SetExcluded(conversation.FieldUserID)
	return u
}

// SetTitle sets the "title" field.
func (u *ConversationUpsert) SetTitle(v string) *ConversationUpsert {
	u.Set(conversation.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ConversationUpsert) UpdateTitle() *ConversationUpsert {
	u.SetExcluded(conversation.FieldTitle)
	return u
}

// SetAgentName sets the "agent_name" field.
func (u *ConversationUpsert) SetAgentName(v string) *ConversationUpsert {
	u.Set(conversation.FieldAgentName, v)
	return u
}

// UpdateAgentName sets the "agent_name" field to the value that was provided on create.
func (u *ConversationUpsert) UpdateAgentName() *ConversationUpsert {
	u.SetExcluded(conversation.FieldAgentName)
	return u
}

// ClearAgentName clears the value of the "agent_name" field.
func (u *ConversationUpsert) ClearAgentName() *ConversationUpsert {
	u.SetNull(conversation.FieldAgentName)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *ConversationUpsert) SetMetadata(v map[string]interface{}) *ConversationUpsert {
	u.Set(conversation.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ConversationUpsert) UpdateMetadata() *ConversationUpsert {
	u.SetExcluded(conversation.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ConversationUpsert) ClearMetadata() *ConversationUpsert {
	u.SetNull(conversation.FieldMetadata)
	return u
}

// SetStatus sets the "status" field.
func (u *ConversationUpsert) SetStatus(v string) *ConversationUpsert {
	u.Set(conversation.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ConversationUpsert) UpdateStatus() *ConversationUpsert {
	u.SetExcluded(conversation.FieldStatus)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ConversationUpsert) SetCreatedAt(v time.Time) *ConversationUpsert {
	u.Set(conversation.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ConversationUpsert) UpdateCreatedAt() *ConversationUpsert {
	u.SetExcluded(conversation.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ConversationUpsert) SetUpdatedAt(v time.Time) *ConversationUpsert {
	u.Set(conversation.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ConversationUpsert) UpdateUpdatedAt() *ConversationUpsert {
	u.SetExcluded(conversation.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Conversation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(conversation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConversationUpsertOne) UpdateNewValues() *ConversationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(conversation.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Conversation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ConversationUpsertOne) Ignore() *ConversationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConversationUpsertOne) DoNothing() *ConversationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConversationCreate.OnConflict
// documentation for more info.
func (u *ConversationUpsertOne) Update(set func(*ConversationUpsert)) *ConversationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConversationUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ConversationUpsertOne) SetDeletedAt(v time.Time) *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ConversationUpsertOne) UpdateDeletedAt() *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ConversationUpsertOne) ClearDeletedAt() *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *ConversationUpsertOne) SetUserID(v uuid.UUID) *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ConversationUpsertOne) UpdateUserID() *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.UpdateUserID()
	})
}

// SetTitle sets the "title" field.
func (u *ConversationUpsertOne) SetTitle(v string) *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ConversationUpsertOne) UpdateTitle() *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.UpdateTitle()
	})
}

// SetAgentName sets the "agent_name" field.
func (u *ConversationUpsertOne) SetAgentName(v string) *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.SetAgentName(v)
	})
}

// UpdateAgentName sets the "agent_name" field to the value that was provided on create.
func (u *ConversationUpsertOne) UpdateAgentName() *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.UpdateAgentName()
	})
}

// ClearAgentName clears the value of the "agent_name" field.
func (u *ConversationUpsertOne) ClearAgentName() *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.ClearAgentName()
	})
}

// SetMetadata sets the "metadata" field.
func (u *ConversationUpsertOne) SetMetadata(v map[string]interface{}) *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ConversationUpsertOne) UpdateMetadata() *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ConversationUpsertOne) ClearMetadata() *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.ClearMetadata()
	})
}

// SetStatus sets the "status" field.
func (u *ConversationUpsertOne) SetStatus(v string) *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ConversationUpsertOne) UpdateStatus() *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ConversationUpsertOne) SetCreatedAt(v time.Time) *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ConversationUpsertOne) UpdateCreatedAt() *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ConversationUpsertOne) SetUpdatedAt(v time.Time) *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ConversationUpsertOne) UpdateUpdatedAt() *ConversationUpsertOne {
	return u.Update(func(s *ConversationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ConversationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ConversationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConversationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ConversationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ConversationUpsertOne.ID is not supported by MySQL driver. Use ConversationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ConversationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ConversationCreateBulk is the builder for creating many Conversation entities in bulk.
type ConversationCreateBulk struct {
	config
	err      error
	builders []*ConversationCreate
	conflict []sql.ConflictOption
}

// Save creates the Conversation entities in the database.
func (ccb *ConversationCreateBulk) Save(ctx context.Context) ([]*Conversation, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Conversation, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConversationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConversationCreateBulk) SaveX(ctx context.Context) []*Conversation {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ConversationCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ConversationCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Conversation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConversationUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *ConversationCreateBulk) OnConflict(opts ...sql.ConflictOption) *ConversationUpsertBulk {
	ccb.conflict = opts
	return &ConversationUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Conversation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ConversationCreateBulk) OnConflictColumns(columns ...string) *ConversationUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ConversationUpsertBulk{
		create: ccb,
	}
}

// ConversationUpsertBulk is the builder for "upsert"-ing
// a bulk of Conversation nodes.
type ConversationUpsertBulk struct {
	create *ConversationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Conversation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(conversation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConversationUpsertBulk) UpdateNewValues() *ConversationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(conversation.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Conversation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ConversationUpsertBulk) Ignore() *ConversationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConversationUpsertBulk) DoNothing() *ConversationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConversationCreateBulk.OnConflict
// documentation for more info.
func (u *ConversationUpsertBulk) Update(set func(*ConversationUpsert)) *ConversationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConversationUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ConversationUpsertBulk) SetDeletedAt(v time.Time) *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ConversationUpsertBulk) UpdateDeletedAt() *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ConversationUpsertBulk) ClearDeletedAt() *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *ConversationUpsertBulk) SetUserID(v uuid.UUID) *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ConversationUpsertBulk) UpdateUserID() *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.UpdateUserID()
	})
}

// SetTitle sets the "title" field.
func (u *ConversationUpsertBulk) SetTitle(v string) *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ConversationUpsertBulk) UpdateTitle() *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.UpdateTitle()
	})
}

// SetAgentName sets the "agent_name" field.
func (u *ConversationUpsertBulk) SetAgentName(v string) *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.SetAgentName(v)
	})
}

// UpdateAgentName sets the "agent_name" field to the value that was provided on create.
func (u *ConversationUpsertBulk) UpdateAgentName() *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.UpdateAgentName()
	})
}

// ClearAgentName clears the value of the "agent_name" field.
func (u *ConversationUpsertBulk) ClearAgentName() *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.ClearAgentName()
	})
}

// SetMetadata sets the "metadata" field.
func (u *ConversationUpsertBulk) SetMetadata(v map[string]interface{}) *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ConversationUpsertBulk) UpdateMetadata() *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ConversationUpsertBulk) ClearMetadata() *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.ClearMetadata()
	})
}

// SetStatus sets the "status" field.
func (u *ConversationUpsertBulk) SetStatus(v string) *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ConversationUpsertBulk) UpdateStatus() *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ConversationUpsertBulk) SetCreatedAt(v time.Time) *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ConversationUpsertBulk) UpdateCreatedAt() *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ConversationUpsertBulk) SetUpdatedAt(v time.Time) *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ConversationUpsertBulk) UpdateUpdatedAt() *ConversationUpsertBulk {
	return u.Update(func(s *ConversationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ConversationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ConversationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ConversationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConversationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
