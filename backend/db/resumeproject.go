// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumeproject"
	"github.com/google/uuid"
)

// ResumeProject is the model entity for the ResumeProject schema.
type ResumeProject struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// ResumeID holds the value of the "resume_id" field.
	ResumeID uuid.UUID `json:"resume_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Role holds the value of the "role" field.
	Role string `json:"role,omitempty"`
	// Company holds the value of the "company" field.
	Company string `json:"company,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Responsibilities holds the value of the "responsibilities" field.
	Responsibilities string `json:"responsibilities,omitempty"`
	// Achievements holds the value of the "achievements" field.
	Achievements string `json:"achievements,omitempty"`
	// Technologies holds the value of the "technologies" field.
	Technologies string `json:"technologies,omitempty"`
	// ProjectURL holds the value of the "project_url" field.
	ProjectURL string `json:"project_url,omitempty"`
	// ProjectType holds the value of the "project_type" field.
	ProjectType consts.ProjectType `json:"project_type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResumeProjectQuery when eager-loading is set.
	Edges        ResumeProjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ResumeProjectEdges holds the relations/edges for other nodes in the graph.
type ResumeProjectEdges struct {
	// Resume holds the value of the resume edge.
	Resume *Resume `json:"resume,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ResumeOrErr returns the Resume value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResumeProjectEdges) ResumeOrErr() (*Resume, error) {
	if e.Resume != nil {
		return e.Resume, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: resume.Label}
	}
	return nil, &NotLoadedError{edge: "resume"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResumeProject) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resumeproject.FieldName, resumeproject.FieldRole, resumeproject.FieldCompany, resumeproject.FieldDescription, resumeproject.FieldResponsibilities, resumeproject.FieldAchievements, resumeproject.FieldTechnologies, resumeproject.FieldProjectURL, resumeproject.FieldProjectType:
			values[i] = new(sql.NullString)
		case resumeproject.FieldDeletedAt, resumeproject.FieldStartDate, resumeproject.FieldEndDate, resumeproject.FieldCreatedAt, resumeproject.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case resumeproject.FieldID, resumeproject.FieldResumeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResumeProject fields.
func (rp *ResumeProject) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resumeproject.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rp.ID = *value
			}
		case resumeproject.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rp.DeletedAt = value.Time
			}
		case resumeproject.FieldResumeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field resume_id", values[i])
			} else if value != nil {
				rp.ResumeID = *value
			}
		case resumeproject.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rp.Name = value.String
			}
		case resumeproject.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				rp.Role = value.String
			}
		case resumeproject.FieldCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company", values[i])
			} else if value.Valid {
				rp.Company = value.String
			}
		case resumeproject.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				rp.StartDate = value.Time
			}
		case resumeproject.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				rp.EndDate = value.Time
			}
		case resumeproject.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rp.Description = value.String
			}
		case resumeproject.FieldResponsibilities:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field responsibilities", values[i])
			} else if value.Valid {
				rp.Responsibilities = value.String
			}
		case resumeproject.FieldAchievements:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field achievements", values[i])
			} else if value.Valid {
				rp.Achievements = value.String
			}
		case resumeproject.FieldTechnologies:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field technologies", values[i])
			} else if value.Valid {
				rp.Technologies = value.String
			}
		case resumeproject.FieldProjectURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_url", values[i])
			} else if value.Valid {
				rp.ProjectURL = value.String
			}
		case resumeproject.FieldProjectType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_type", values[i])
			} else if value.Valid {
				rp.ProjectType = consts.ProjectType(value.String)
			}
		case resumeproject.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rp.CreatedAt = value.Time
			}
		case resumeproject.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rp.UpdatedAt = value.Time
			}
		default:
			rp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ResumeProject.
// This includes values selected through modifiers, order, etc.
func (rp *ResumeProject) Value(name string) (ent.Value, error) {
	return rp.selectValues.Get(name)
}

// QueryResume queries the "resume" edge of the ResumeProject entity.
func (rp *ResumeProject) QueryResume() *ResumeQuery {
	return NewResumeProjectClient(rp.config).QueryResume(rp)
}

// Update returns a builder for updating this ResumeProject.
// Note that you need to call ResumeProject.Unwrap() before calling this method if this ResumeProject
// was returned from a transaction, and the transaction was committed or rolled back.
func (rp *ResumeProject) Update() *ResumeProjectUpdateOne {
	return NewResumeProjectClient(rp.config).UpdateOne(rp)
}

// Unwrap unwraps the ResumeProject entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rp *ResumeProject) Unwrap() *ResumeProject {
	_tx, ok := rp.config.driver.(*txDriver)
	if !ok {
		panic("db: ResumeProject is not a transactional entity")
	}
	rp.config.driver = _tx.drv
	return rp
}

// String implements the fmt.Stringer.
func (rp *ResumeProject) String() string {
	var builder strings.Builder
	builder.WriteString("ResumeProject(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rp.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(rp.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("resume_id=")
	builder.WriteString(fmt.Sprintf("%v", rp.ResumeID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(rp.Name)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(rp.Role)
	builder.WriteString(", ")
	builder.WriteString("company=")
	builder.WriteString(rp.Company)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(rp.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(rp.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(rp.Description)
	builder.WriteString(", ")
	builder.WriteString("responsibilities=")
	builder.WriteString(rp.Responsibilities)
	builder.WriteString(", ")
	builder.WriteString("achievements=")
	builder.WriteString(rp.Achievements)
	builder.WriteString(", ")
	builder.WriteString("technologies=")
	builder.WriteString(rp.Technologies)
	builder.WriteString(", ")
	builder.WriteString("project_url=")
	builder.WriteString(rp.ProjectURL)
	builder.WriteString(", ")
	builder.WriteString("project_type=")
	builder.WriteString(fmt.Sprintf("%v", rp.ProjectType))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rp.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ResumeProjects is a parsable slice of ResumeProject.
type ResumeProjects []*ResumeProject
