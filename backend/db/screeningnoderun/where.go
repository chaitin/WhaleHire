// Code generated by ent, DO NOT EDIT.

package screeningnoderun

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldDeletedAt, v))
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldTaskID, v))
}

// TaskResumeID applies equality check predicate on the "task_resume_id" field. It's identical to TaskResumeIDEQ.
func TaskResumeID(v uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldTaskResumeID, v))
}

// NodeKey applies equality check predicate on the "node_key" field. It's identical to NodeKeyEQ.
func NodeKey(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldNodeKey, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldStatus, v))
}

// AttemptNo applies equality check predicate on the "attempt_no" field. It's identical to AttemptNoEQ.
func AttemptNo(v int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldAttemptNo, v))
}

// TraceID applies equality check predicate on the "trace_id" field. It's identical to TraceIDEQ.
func TraceID(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldTraceID, v))
}

// AgentVersion applies equality check predicate on the "agent_version" field. It's identical to AgentVersionEQ.
func AgentVersion(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldAgentVersion, v))
}

// ModelName applies equality check predicate on the "model_name" field. It's identical to ModelNameEQ.
func ModelName(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldModelName, v))
}

// ModelProvider applies equality check predicate on the "model_provider" field. It's identical to ModelProviderEQ.
func ModelProvider(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldModelProvider, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldErrorMessage, v))
}

// TokensInput applies equality check predicate on the "tokens_input" field. It's identical to TokensInputEQ.
func TokensInput(v int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldTokensInput, v))
}

// TokensOutput applies equality check predicate on the "tokens_output" field. It's identical to TokensOutputEQ.
func TokensOutput(v int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldTokensOutput, v))
}

// TotalCost applies equality check predicate on the "total_cost" field. It's identical to TotalCostEQ.
func TotalCost(v float64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldTotalCost, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldFinishedAt, v))
}

// DurationMs applies equality check predicate on the "duration_ms" field. It's identical to DurationMsEQ.
func DurationMs(v int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldDurationMs, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotNull(FieldDeletedAt))
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldTaskID, vs...))
}

// TaskResumeIDEQ applies the EQ predicate on the "task_resume_id" field.
func TaskResumeIDEQ(v uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldTaskResumeID, v))
}

// TaskResumeIDNEQ applies the NEQ predicate on the "task_resume_id" field.
func TaskResumeIDNEQ(v uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldTaskResumeID, v))
}

// TaskResumeIDIn applies the In predicate on the "task_resume_id" field.
func TaskResumeIDIn(vs ...uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldTaskResumeID, vs...))
}

// TaskResumeIDNotIn applies the NotIn predicate on the "task_resume_id" field.
func TaskResumeIDNotIn(vs ...uuid.UUID) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldTaskResumeID, vs...))
}

// NodeKeyEQ applies the EQ predicate on the "node_key" field.
func NodeKeyEQ(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldNodeKey, v))
}

// NodeKeyNEQ applies the NEQ predicate on the "node_key" field.
func NodeKeyNEQ(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldNodeKey, v))
}

// NodeKeyIn applies the In predicate on the "node_key" field.
func NodeKeyIn(vs ...string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldNodeKey, vs...))
}

// NodeKeyNotIn applies the NotIn predicate on the "node_key" field.
func NodeKeyNotIn(vs ...string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldNodeKey, vs...))
}

// NodeKeyGT applies the GT predicate on the "node_key" field.
func NodeKeyGT(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldNodeKey, v))
}

// NodeKeyGTE applies the GTE predicate on the "node_key" field.
func NodeKeyGTE(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldNodeKey, v))
}

// NodeKeyLT applies the LT predicate on the "node_key" field.
func NodeKeyLT(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldNodeKey, v))
}

// NodeKeyLTE applies the LTE predicate on the "node_key" field.
func NodeKeyLTE(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldNodeKey, v))
}

// NodeKeyContains applies the Contains predicate on the "node_key" field.
func NodeKeyContains(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldContains(FieldNodeKey, v))
}

// NodeKeyHasPrefix applies the HasPrefix predicate on the "node_key" field.
func NodeKeyHasPrefix(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldHasPrefix(FieldNodeKey, v))
}

// NodeKeyHasSuffix applies the HasSuffix predicate on the "node_key" field.
func NodeKeyHasSuffix(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldHasSuffix(FieldNodeKey, v))
}

// NodeKeyIsNil applies the IsNil predicate on the "node_key" field.
func NodeKeyIsNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIsNull(FieldNodeKey))
}

// NodeKeyNotNil applies the NotNil predicate on the "node_key" field.
func NodeKeyNotNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotNull(FieldNodeKey))
}

// NodeKeyEqualFold applies the EqualFold predicate on the "node_key" field.
func NodeKeyEqualFold(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEqualFold(FieldNodeKey, v))
}

// NodeKeyContainsFold applies the ContainsFold predicate on the "node_key" field.
func NodeKeyContainsFold(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldContainsFold(FieldNodeKey, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldContainsFold(FieldStatus, v))
}

// AttemptNoEQ applies the EQ predicate on the "attempt_no" field.
func AttemptNoEQ(v int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldAttemptNo, v))
}

// AttemptNoNEQ applies the NEQ predicate on the "attempt_no" field.
func AttemptNoNEQ(v int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldAttemptNo, v))
}

// AttemptNoIn applies the In predicate on the "attempt_no" field.
func AttemptNoIn(vs ...int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldAttemptNo, vs...))
}

// AttemptNoNotIn applies the NotIn predicate on the "attempt_no" field.
func AttemptNoNotIn(vs ...int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldAttemptNo, vs...))
}

// AttemptNoGT applies the GT predicate on the "attempt_no" field.
func AttemptNoGT(v int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldAttemptNo, v))
}

// AttemptNoGTE applies the GTE predicate on the "attempt_no" field.
func AttemptNoGTE(v int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldAttemptNo, v))
}

// AttemptNoLT applies the LT predicate on the "attempt_no" field.
func AttemptNoLT(v int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldAttemptNo, v))
}

// AttemptNoLTE applies the LTE predicate on the "attempt_no" field.
func AttemptNoLTE(v int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldAttemptNo, v))
}

// TraceIDEQ applies the EQ predicate on the "trace_id" field.
func TraceIDEQ(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldTraceID, v))
}

// TraceIDNEQ applies the NEQ predicate on the "trace_id" field.
func TraceIDNEQ(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldTraceID, v))
}

// TraceIDIn applies the In predicate on the "trace_id" field.
func TraceIDIn(vs ...string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldTraceID, vs...))
}

// TraceIDNotIn applies the NotIn predicate on the "trace_id" field.
func TraceIDNotIn(vs ...string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldTraceID, vs...))
}

// TraceIDGT applies the GT predicate on the "trace_id" field.
func TraceIDGT(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldTraceID, v))
}

// TraceIDGTE applies the GTE predicate on the "trace_id" field.
func TraceIDGTE(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldTraceID, v))
}

// TraceIDLT applies the LT predicate on the "trace_id" field.
func TraceIDLT(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldTraceID, v))
}

// TraceIDLTE applies the LTE predicate on the "trace_id" field.
func TraceIDLTE(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldTraceID, v))
}

// TraceIDContains applies the Contains predicate on the "trace_id" field.
func TraceIDContains(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldContains(FieldTraceID, v))
}

// TraceIDHasPrefix applies the HasPrefix predicate on the "trace_id" field.
func TraceIDHasPrefix(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldHasPrefix(FieldTraceID, v))
}

// TraceIDHasSuffix applies the HasSuffix predicate on the "trace_id" field.
func TraceIDHasSuffix(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldHasSuffix(FieldTraceID, v))
}

// TraceIDIsNil applies the IsNil predicate on the "trace_id" field.
func TraceIDIsNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIsNull(FieldTraceID))
}

// TraceIDNotNil applies the NotNil predicate on the "trace_id" field.
func TraceIDNotNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotNull(FieldTraceID))
}

// TraceIDEqualFold applies the EqualFold predicate on the "trace_id" field.
func TraceIDEqualFold(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEqualFold(FieldTraceID, v))
}

// TraceIDContainsFold applies the ContainsFold predicate on the "trace_id" field.
func TraceIDContainsFold(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldContainsFold(FieldTraceID, v))
}

// AgentVersionEQ applies the EQ predicate on the "agent_version" field.
func AgentVersionEQ(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldAgentVersion, v))
}

// AgentVersionNEQ applies the NEQ predicate on the "agent_version" field.
func AgentVersionNEQ(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldAgentVersion, v))
}

// AgentVersionIn applies the In predicate on the "agent_version" field.
func AgentVersionIn(vs ...string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldAgentVersion, vs...))
}

// AgentVersionNotIn applies the NotIn predicate on the "agent_version" field.
func AgentVersionNotIn(vs ...string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldAgentVersion, vs...))
}

// AgentVersionGT applies the GT predicate on the "agent_version" field.
func AgentVersionGT(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldAgentVersion, v))
}

// AgentVersionGTE applies the GTE predicate on the "agent_version" field.
func AgentVersionGTE(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldAgentVersion, v))
}

// AgentVersionLT applies the LT predicate on the "agent_version" field.
func AgentVersionLT(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldAgentVersion, v))
}

// AgentVersionLTE applies the LTE predicate on the "agent_version" field.
func AgentVersionLTE(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldAgentVersion, v))
}

// AgentVersionContains applies the Contains predicate on the "agent_version" field.
func AgentVersionContains(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldContains(FieldAgentVersion, v))
}

// AgentVersionHasPrefix applies the HasPrefix predicate on the "agent_version" field.
func AgentVersionHasPrefix(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldHasPrefix(FieldAgentVersion, v))
}

// AgentVersionHasSuffix applies the HasSuffix predicate on the "agent_version" field.
func AgentVersionHasSuffix(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldHasSuffix(FieldAgentVersion, v))
}

// AgentVersionIsNil applies the IsNil predicate on the "agent_version" field.
func AgentVersionIsNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIsNull(FieldAgentVersion))
}

// AgentVersionNotNil applies the NotNil predicate on the "agent_version" field.
func AgentVersionNotNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotNull(FieldAgentVersion))
}

// AgentVersionEqualFold applies the EqualFold predicate on the "agent_version" field.
func AgentVersionEqualFold(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEqualFold(FieldAgentVersion, v))
}

// AgentVersionContainsFold applies the ContainsFold predicate on the "agent_version" field.
func AgentVersionContainsFold(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldContainsFold(FieldAgentVersion, v))
}

// ModelNameEQ applies the EQ predicate on the "model_name" field.
func ModelNameEQ(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldModelName, v))
}

// ModelNameNEQ applies the NEQ predicate on the "model_name" field.
func ModelNameNEQ(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldModelName, v))
}

// ModelNameIn applies the In predicate on the "model_name" field.
func ModelNameIn(vs ...string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldModelName, vs...))
}

// ModelNameNotIn applies the NotIn predicate on the "model_name" field.
func ModelNameNotIn(vs ...string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldModelName, vs...))
}

// ModelNameGT applies the GT predicate on the "model_name" field.
func ModelNameGT(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldModelName, v))
}

// ModelNameGTE applies the GTE predicate on the "model_name" field.
func ModelNameGTE(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldModelName, v))
}

// ModelNameLT applies the LT predicate on the "model_name" field.
func ModelNameLT(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldModelName, v))
}

// ModelNameLTE applies the LTE predicate on the "model_name" field.
func ModelNameLTE(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldModelName, v))
}

// ModelNameContains applies the Contains predicate on the "model_name" field.
func ModelNameContains(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldContains(FieldModelName, v))
}

// ModelNameHasPrefix applies the HasPrefix predicate on the "model_name" field.
func ModelNameHasPrefix(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldHasPrefix(FieldModelName, v))
}

// ModelNameHasSuffix applies the HasSuffix predicate on the "model_name" field.
func ModelNameHasSuffix(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldHasSuffix(FieldModelName, v))
}

// ModelNameIsNil applies the IsNil predicate on the "model_name" field.
func ModelNameIsNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIsNull(FieldModelName))
}

// ModelNameNotNil applies the NotNil predicate on the "model_name" field.
func ModelNameNotNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotNull(FieldModelName))
}

// ModelNameEqualFold applies the EqualFold predicate on the "model_name" field.
func ModelNameEqualFold(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEqualFold(FieldModelName, v))
}

// ModelNameContainsFold applies the ContainsFold predicate on the "model_name" field.
func ModelNameContainsFold(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldContainsFold(FieldModelName, v))
}

// ModelProviderEQ applies the EQ predicate on the "model_provider" field.
func ModelProviderEQ(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldModelProvider, v))
}

// ModelProviderNEQ applies the NEQ predicate on the "model_provider" field.
func ModelProviderNEQ(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldModelProvider, v))
}

// ModelProviderIn applies the In predicate on the "model_provider" field.
func ModelProviderIn(vs ...string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldModelProvider, vs...))
}

// ModelProviderNotIn applies the NotIn predicate on the "model_provider" field.
func ModelProviderNotIn(vs ...string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldModelProvider, vs...))
}

// ModelProviderGT applies the GT predicate on the "model_provider" field.
func ModelProviderGT(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldModelProvider, v))
}

// ModelProviderGTE applies the GTE predicate on the "model_provider" field.
func ModelProviderGTE(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldModelProvider, v))
}

// ModelProviderLT applies the LT predicate on the "model_provider" field.
func ModelProviderLT(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldModelProvider, v))
}

// ModelProviderLTE applies the LTE predicate on the "model_provider" field.
func ModelProviderLTE(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldModelProvider, v))
}

// ModelProviderContains applies the Contains predicate on the "model_provider" field.
func ModelProviderContains(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldContains(FieldModelProvider, v))
}

// ModelProviderHasPrefix applies the HasPrefix predicate on the "model_provider" field.
func ModelProviderHasPrefix(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldHasPrefix(FieldModelProvider, v))
}

// ModelProviderHasSuffix applies the HasSuffix predicate on the "model_provider" field.
func ModelProviderHasSuffix(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldHasSuffix(FieldModelProvider, v))
}

// ModelProviderIsNil applies the IsNil predicate on the "model_provider" field.
func ModelProviderIsNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIsNull(FieldModelProvider))
}

// ModelProviderNotNil applies the NotNil predicate on the "model_provider" field.
func ModelProviderNotNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotNull(FieldModelProvider))
}

// ModelProviderEqualFold applies the EqualFold predicate on the "model_provider" field.
func ModelProviderEqualFold(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEqualFold(FieldModelProvider, v))
}

// ModelProviderContainsFold applies the ContainsFold predicate on the "model_provider" field.
func ModelProviderContainsFold(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldContainsFold(FieldModelProvider, v))
}

// LlmParamsIsNil applies the IsNil predicate on the "llm_params" field.
func LlmParamsIsNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIsNull(FieldLlmParams))
}

// LlmParamsNotNil applies the NotNil predicate on the "llm_params" field.
func LlmParamsNotNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotNull(FieldLlmParams))
}

// InputPayloadIsNil applies the IsNil predicate on the "input_payload" field.
func InputPayloadIsNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIsNull(FieldInputPayload))
}

// InputPayloadNotNil applies the NotNil predicate on the "input_payload" field.
func InputPayloadNotNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotNull(FieldInputPayload))
}

// OutputPayloadIsNil applies the IsNil predicate on the "output_payload" field.
func OutputPayloadIsNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIsNull(FieldOutputPayload))
}

// OutputPayloadNotNil applies the NotNil predicate on the "output_payload" field.
func OutputPayloadNotNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotNull(FieldOutputPayload))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldContainsFold(FieldErrorMessage, v))
}

// TokensInputEQ applies the EQ predicate on the "tokens_input" field.
func TokensInputEQ(v int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldTokensInput, v))
}

// TokensInputNEQ applies the NEQ predicate on the "tokens_input" field.
func TokensInputNEQ(v int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldTokensInput, v))
}

// TokensInputIn applies the In predicate on the "tokens_input" field.
func TokensInputIn(vs ...int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldTokensInput, vs...))
}

// TokensInputNotIn applies the NotIn predicate on the "tokens_input" field.
func TokensInputNotIn(vs ...int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldTokensInput, vs...))
}

// TokensInputGT applies the GT predicate on the "tokens_input" field.
func TokensInputGT(v int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldTokensInput, v))
}

// TokensInputGTE applies the GTE predicate on the "tokens_input" field.
func TokensInputGTE(v int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldTokensInput, v))
}

// TokensInputLT applies the LT predicate on the "tokens_input" field.
func TokensInputLT(v int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldTokensInput, v))
}

// TokensInputLTE applies the LTE predicate on the "tokens_input" field.
func TokensInputLTE(v int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldTokensInput, v))
}

// TokensInputIsNil applies the IsNil predicate on the "tokens_input" field.
func TokensInputIsNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIsNull(FieldTokensInput))
}

// TokensInputNotNil applies the NotNil predicate on the "tokens_input" field.
func TokensInputNotNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotNull(FieldTokensInput))
}

// TokensOutputEQ applies the EQ predicate on the "tokens_output" field.
func TokensOutputEQ(v int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldTokensOutput, v))
}

// TokensOutputNEQ applies the NEQ predicate on the "tokens_output" field.
func TokensOutputNEQ(v int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldTokensOutput, v))
}

// TokensOutputIn applies the In predicate on the "tokens_output" field.
func TokensOutputIn(vs ...int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldTokensOutput, vs...))
}

// TokensOutputNotIn applies the NotIn predicate on the "tokens_output" field.
func TokensOutputNotIn(vs ...int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldTokensOutput, vs...))
}

// TokensOutputGT applies the GT predicate on the "tokens_output" field.
func TokensOutputGT(v int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldTokensOutput, v))
}

// TokensOutputGTE applies the GTE predicate on the "tokens_output" field.
func TokensOutputGTE(v int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldTokensOutput, v))
}

// TokensOutputLT applies the LT predicate on the "tokens_output" field.
func TokensOutputLT(v int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldTokensOutput, v))
}

// TokensOutputLTE applies the LTE predicate on the "tokens_output" field.
func TokensOutputLTE(v int64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldTokensOutput, v))
}

// TokensOutputIsNil applies the IsNil predicate on the "tokens_output" field.
func TokensOutputIsNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIsNull(FieldTokensOutput))
}

// TokensOutputNotNil applies the NotNil predicate on the "tokens_output" field.
func TokensOutputNotNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotNull(FieldTokensOutput))
}

// TotalCostEQ applies the EQ predicate on the "total_cost" field.
func TotalCostEQ(v float64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldTotalCost, v))
}

// TotalCostNEQ applies the NEQ predicate on the "total_cost" field.
func TotalCostNEQ(v float64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldTotalCost, v))
}

// TotalCostIn applies the In predicate on the "total_cost" field.
func TotalCostIn(vs ...float64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldTotalCost, vs...))
}

// TotalCostNotIn applies the NotIn predicate on the "total_cost" field.
func TotalCostNotIn(vs ...float64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldTotalCost, vs...))
}

// TotalCostGT applies the GT predicate on the "total_cost" field.
func TotalCostGT(v float64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldTotalCost, v))
}

// TotalCostGTE applies the GTE predicate on the "total_cost" field.
func TotalCostGTE(v float64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldTotalCost, v))
}

// TotalCostLT applies the LT predicate on the "total_cost" field.
func TotalCostLT(v float64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldTotalCost, v))
}

// TotalCostLTE applies the LTE predicate on the "total_cost" field.
func TotalCostLTE(v float64) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldTotalCost, v))
}

// TotalCostIsNil applies the IsNil predicate on the "total_cost" field.
func TotalCostIsNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIsNull(FieldTotalCost))
}

// TotalCostNotNil applies the NotNil predicate on the "total_cost" field.
func TotalCostNotNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotNull(FieldTotalCost))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotNull(FieldStartedAt))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldFinishedAt, v))
}

// FinishedAtIsNil applies the IsNil predicate on the "finished_at" field.
func FinishedAtIsNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIsNull(FieldFinishedAt))
}

// FinishedAtNotNil applies the NotNil predicate on the "finished_at" field.
func FinishedAtNotNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotNull(FieldFinishedAt))
}

// DurationMsEQ applies the EQ predicate on the "duration_ms" field.
func DurationMsEQ(v int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldDurationMs, v))
}

// DurationMsNEQ applies the NEQ predicate on the "duration_ms" field.
func DurationMsNEQ(v int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldDurationMs, v))
}

// DurationMsIn applies the In predicate on the "duration_ms" field.
func DurationMsIn(vs ...int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldDurationMs, vs...))
}

// DurationMsNotIn applies the NotIn predicate on the "duration_ms" field.
func DurationMsNotIn(vs ...int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldDurationMs, vs...))
}

// DurationMsGT applies the GT predicate on the "duration_ms" field.
func DurationMsGT(v int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldDurationMs, v))
}

// DurationMsGTE applies the GTE predicate on the "duration_ms" field.
func DurationMsGTE(v int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldDurationMs, v))
}

// DurationMsLT applies the LT predicate on the "duration_ms" field.
func DurationMsLT(v int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldDurationMs, v))
}

// DurationMsLTE applies the LTE predicate on the "duration_ms" field.
func DurationMsLTE(v int) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldDurationMs, v))
}

// DurationMsIsNil applies the IsNil predicate on the "duration_ms" field.
func DurationMsIsNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIsNull(FieldDurationMs))
}

// DurationMsNotNil applies the NotNil predicate on the "duration_ms" field.
func DurationMsNotNil() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotNull(FieldDurationMs))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.ScreeningTask) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaskResume applies the HasEdge predicate on the "task_resume" edge.
func HasTaskResume() predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskResumeTable, TaskResumeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskResumeWith applies the HasEdge predicate on the "task_resume" edge with a given conditions (other predicates).
func HasTaskResumeWith(preds ...predicate.ScreeningTaskResume) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(func(s *sql.Selector) {
		step := newTaskResumeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScreeningNodeRun) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScreeningNodeRun) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScreeningNodeRun) predicate.ScreeningNodeRun {
	return predicate.ScreeningNodeRun(sql.NotPredicates(p))
}
