// Code generated by ent, DO NOT EDIT.

package screeningnoderun

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the screeningnoderun type in the database.
	Label = "screening_node_run"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldTaskResumeID holds the string denoting the task_resume_id field in the database.
	FieldTaskResumeID = "task_resume_id"
	// FieldNodeKey holds the string denoting the node_key field in the database.
	FieldNodeKey = "node_key"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldAttemptNo holds the string denoting the attempt_no field in the database.
	FieldAttemptNo = "attempt_no"
	// FieldTraceID holds the string denoting the trace_id field in the database.
	FieldTraceID = "trace_id"
	// FieldAgentVersion holds the string denoting the agent_version field in the database.
	FieldAgentVersion = "agent_version"
	// FieldModelName holds the string denoting the model_name field in the database.
	FieldModelName = "model_name"
	// FieldModelProvider holds the string denoting the model_provider field in the database.
	FieldModelProvider = "model_provider"
	// FieldLlmParams holds the string denoting the llm_params field in the database.
	FieldLlmParams = "llm_params"
	// FieldInputPayload holds the string denoting the input_payload field in the database.
	FieldInputPayload = "input_payload"
	// FieldOutputPayload holds the string denoting the output_payload field in the database.
	FieldOutputPayload = "output_payload"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldTokensInput holds the string denoting the tokens_input field in the database.
	FieldTokensInput = "tokens_input"
	// FieldTokensOutput holds the string denoting the tokens_output field in the database.
	FieldTokensOutput = "tokens_output"
	// FieldTotalCost holds the string denoting the total_cost field in the database.
	FieldTotalCost = "total_cost"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldFinishedAt holds the string denoting the finished_at field in the database.
	FieldFinishedAt = "finished_at"
	// FieldDurationMs holds the string denoting the duration_ms field in the database.
	FieldDurationMs = "duration_ms"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// EdgeTaskResume holds the string denoting the task_resume edge name in mutations.
	EdgeTaskResume = "task_resume"
	// Table holds the table name of the screeningnoderun in the database.
	Table = "screening_node_runs"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "screening_node_runs"
	// TaskInverseTable is the table name for the ScreeningTask entity.
	// It exists in this package in order to avoid circular dependency with the "screeningtask" package.
	TaskInverseTable = "screening_tasks"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_id"
	// TaskResumeTable is the table that holds the task_resume relation/edge.
	TaskResumeTable = "screening_node_runs"
	// TaskResumeInverseTable is the table name for the ScreeningTaskResume entity.
	// It exists in this package in order to avoid circular dependency with the "screeningtaskresume" package.
	TaskResumeInverseTable = "screening_task_resumes"
	// TaskResumeColumn is the table column denoting the task_resume relation/edge.
	TaskResumeColumn = "task_resume_id"
)

// Columns holds all SQL columns for screeningnoderun fields.
var Columns = []string{
	FieldID,
	FieldDeletedAt,
	FieldTaskID,
	FieldTaskResumeID,
	FieldNodeKey,
	FieldStatus,
	FieldAttemptNo,
	FieldTraceID,
	FieldAgentVersion,
	FieldModelName,
	FieldModelProvider,
	FieldLlmParams,
	FieldInputPayload,
	FieldOutputPayload,
	FieldErrorMessage,
	FieldTokensInput,
	FieldTokensOutput,
	FieldTotalCost,
	FieldStartedAt,
	FieldFinishedAt,
	FieldDurationMs,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/chaitin/WhaleHire/backend/db/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultAttemptNo holds the default value on creation for the "attempt_no" field.
	DefaultAttemptNo int
	// TraceIDValidator is a validator for the "trace_id" field. It is called by the builders before save.
	TraceIDValidator func(string) error
	// AgentVersionValidator is a validator for the "agent_version" field. It is called by the builders before save.
	AgentVersionValidator func(string) error
	// ModelNameValidator is a validator for the "model_name" field. It is called by the builders before save.
	ModelNameValidator func(string) error
	// ModelProviderValidator is a validator for the "model_provider" field. It is called by the builders before save.
	ModelProviderValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ScreeningNodeRun queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByTaskResumeID orders the results by the task_resume_id field.
func ByTaskResumeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskResumeID, opts...).ToFunc()
}

// ByNodeKey orders the results by the node_key field.
func ByNodeKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodeKey, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByAttemptNo orders the results by the attempt_no field.
func ByAttemptNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttemptNo, opts...).ToFunc()
}

// ByTraceID orders the results by the trace_id field.
func ByTraceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTraceID, opts...).ToFunc()
}

// ByAgentVersion orders the results by the agent_version field.
func ByAgentVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgentVersion, opts...).ToFunc()
}

// ByModelName orders the results by the model_name field.
func ByModelName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelName, opts...).ToFunc()
}

// ByModelProvider orders the results by the model_provider field.
func ByModelProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelProvider, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByTokensInput orders the results by the tokens_input field.
func ByTokensInput(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokensInput, opts...).ToFunc()
}

// ByTokensOutput orders the results by the tokens_output field.
func ByTokensOutput(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokensOutput, opts...).ToFunc()
}

// ByTotalCost orders the results by the total_cost field.
func ByTotalCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalCost, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByFinishedAt orders the results by the finished_at field.
func ByFinishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishedAt, opts...).ToFunc()
}

// ByDurationMs orders the results by the duration_ms field.
func ByDurationMs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationMs, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}

// ByTaskResumeField orders the results by task_resume field.
func ByTaskResumeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskResumeStep(), sql.OrderByField(field, opts...))
	}
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
	)
}
func newTaskResumeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskResumeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TaskResumeTable, TaskResumeColumn),
	)
}
