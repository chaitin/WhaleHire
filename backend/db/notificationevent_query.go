// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/notificationevent"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// NotificationEventQuery is the builder for querying NotificationEvent entities.
type NotificationEventQuery struct {
	config
	ctx        *QueryContext
	order      []notificationevent.OrderOption
	inters     []Interceptor
	predicates []predicate.NotificationEvent
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NotificationEventQuery builder.
func (neq *NotificationEventQuery) Where(ps ...predicate.NotificationEvent) *NotificationEventQuery {
	neq.predicates = append(neq.predicates, ps...)
	return neq
}

// Limit the number of records to be returned by this query.
func (neq *NotificationEventQuery) Limit(limit int) *NotificationEventQuery {
	neq.ctx.Limit = &limit
	return neq
}

// Offset to start from.
func (neq *NotificationEventQuery) Offset(offset int) *NotificationEventQuery {
	neq.ctx.Offset = &offset
	return neq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (neq *NotificationEventQuery) Unique(unique bool) *NotificationEventQuery {
	neq.ctx.Unique = &unique
	return neq
}

// Order specifies how the records should be ordered.
func (neq *NotificationEventQuery) Order(o ...notificationevent.OrderOption) *NotificationEventQuery {
	neq.order = append(neq.order, o...)
	return neq
}

// First returns the first NotificationEvent entity from the query.
// Returns a *NotFoundError when no NotificationEvent was found.
func (neq *NotificationEventQuery) First(ctx context.Context) (*NotificationEvent, error) {
	nodes, err := neq.Limit(1).All(setContextOp(ctx, neq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{notificationevent.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (neq *NotificationEventQuery) FirstX(ctx context.Context) *NotificationEvent {
	node, err := neq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NotificationEvent ID from the query.
// Returns a *NotFoundError when no NotificationEvent ID was found.
func (neq *NotificationEventQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = neq.Limit(1).IDs(setContextOp(ctx, neq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{notificationevent.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (neq *NotificationEventQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := neq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NotificationEvent entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one NotificationEvent entity is found.
// Returns a *NotFoundError when no NotificationEvent entities are found.
func (neq *NotificationEventQuery) Only(ctx context.Context) (*NotificationEvent, error) {
	nodes, err := neq.Limit(2).All(setContextOp(ctx, neq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{notificationevent.Label}
	default:
		return nil, &NotSingularError{notificationevent.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (neq *NotificationEventQuery) OnlyX(ctx context.Context) *NotificationEvent {
	node, err := neq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NotificationEvent ID in the query.
// Returns a *NotSingularError when more than one NotificationEvent ID is found.
// Returns a *NotFoundError when no entities are found.
func (neq *NotificationEventQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = neq.Limit(2).IDs(setContextOp(ctx, neq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{notificationevent.Label}
	default:
		err = &NotSingularError{notificationevent.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (neq *NotificationEventQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := neq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NotificationEvents.
func (neq *NotificationEventQuery) All(ctx context.Context) ([]*NotificationEvent, error) {
	ctx = setContextOp(ctx, neq.ctx, ent.OpQueryAll)
	if err := neq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*NotificationEvent, *NotificationEventQuery]()
	return withInterceptors[[]*NotificationEvent](ctx, neq, qr, neq.inters)
}

// AllX is like All, but panics if an error occurs.
func (neq *NotificationEventQuery) AllX(ctx context.Context) []*NotificationEvent {
	nodes, err := neq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NotificationEvent IDs.
func (neq *NotificationEventQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if neq.ctx.Unique == nil && neq.path != nil {
		neq.Unique(true)
	}
	ctx = setContextOp(ctx, neq.ctx, ent.OpQueryIDs)
	if err = neq.Select(notificationevent.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (neq *NotificationEventQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := neq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (neq *NotificationEventQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, neq.ctx, ent.OpQueryCount)
	if err := neq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, neq, querierCount[*NotificationEventQuery](), neq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (neq *NotificationEventQuery) CountX(ctx context.Context) int {
	count, err := neq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (neq *NotificationEventQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, neq.ctx, ent.OpQueryExist)
	switch _, err := neq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (neq *NotificationEventQuery) ExistX(ctx context.Context) bool {
	exist, err := neq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NotificationEventQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (neq *NotificationEventQuery) Clone() *NotificationEventQuery {
	if neq == nil {
		return nil
	}
	return &NotificationEventQuery{
		config:     neq.config,
		ctx:        neq.ctx.Clone(),
		order:      append([]notificationevent.OrderOption{}, neq.order...),
		inters:     append([]Interceptor{}, neq.inters...),
		predicates: append([]predicate.NotificationEvent{}, neq.predicates...),
		// clone intermediate query.
		sql:       neq.sql.Clone(),
		path:      neq.path,
		modifiers: append([]func(*sql.Selector){}, neq.modifiers...),
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NotificationEvent.Query().
//		GroupBy(notificationevent.FieldDeletedAt).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (neq *NotificationEventQuery) GroupBy(field string, fields ...string) *NotificationEventGroupBy {
	neq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &NotificationEventGroupBy{build: neq}
	grbuild.flds = &neq.ctx.Fields
	grbuild.label = notificationevent.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//	}
//
//	client.NotificationEvent.Query().
//		Select(notificationevent.FieldDeletedAt).
//		Scan(ctx, &v)
func (neq *NotificationEventQuery) Select(fields ...string) *NotificationEventSelect {
	neq.ctx.Fields = append(neq.ctx.Fields, fields...)
	sbuild := &NotificationEventSelect{NotificationEventQuery: neq}
	sbuild.label = notificationevent.Label
	sbuild.flds, sbuild.scan = &neq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a NotificationEventSelect configured with the given aggregations.
func (neq *NotificationEventQuery) Aggregate(fns ...AggregateFunc) *NotificationEventSelect {
	return neq.Select().Aggregate(fns...)
}

func (neq *NotificationEventQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range neq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, neq); err != nil {
				return err
			}
		}
	}
	for _, f := range neq.ctx.Fields {
		if !notificationevent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if neq.path != nil {
		prev, err := neq.path(ctx)
		if err != nil {
			return err
		}
		neq.sql = prev
	}
	return nil
}

func (neq *NotificationEventQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*NotificationEvent, error) {
	var (
		nodes = []*NotificationEvent{}
		_spec = neq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*NotificationEvent).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &NotificationEvent{config: neq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(neq.modifiers) > 0 {
		_spec.Modifiers = neq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, neq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (neq *NotificationEventQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := neq.querySpec()
	if len(neq.modifiers) > 0 {
		_spec.Modifiers = neq.modifiers
	}
	_spec.Node.Columns = neq.ctx.Fields
	if len(neq.ctx.Fields) > 0 {
		_spec.Unique = neq.ctx.Unique != nil && *neq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, neq.driver, _spec)
}

func (neq *NotificationEventQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(notificationevent.Table, notificationevent.Columns, sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeUUID))
	_spec.From = neq.sql
	if unique := neq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if neq.path != nil {
		_spec.Unique = true
	}
	if fields := neq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationevent.FieldID)
		for i := range fields {
			if fields[i] != notificationevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := neq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := neq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := neq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := neq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (neq *NotificationEventQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(neq.driver.Dialect())
	t1 := builder.Table(notificationevent.Table)
	columns := neq.ctx.Fields
	if len(columns) == 0 {
		columns = notificationevent.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if neq.sql != nil {
		selector = neq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if neq.ctx.Unique != nil && *neq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range neq.modifiers {
		m(selector)
	}
	for _, p := range neq.predicates {
		p(selector)
	}
	for _, p := range neq.order {
		p(selector)
	}
	if offset := neq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := neq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (neq *NotificationEventQuery) ForUpdate(opts ...sql.LockOption) *NotificationEventQuery {
	if neq.driver.Dialect() == dialect.Postgres {
		neq.Unique(false)
	}
	neq.modifiers = append(neq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return neq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (neq *NotificationEventQuery) ForShare(opts ...sql.LockOption) *NotificationEventQuery {
	if neq.driver.Dialect() == dialect.Postgres {
		neq.Unique(false)
	}
	neq.modifiers = append(neq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return neq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (neq *NotificationEventQuery) Modify(modifiers ...func(s *sql.Selector)) *NotificationEventSelect {
	neq.modifiers = append(neq.modifiers, modifiers...)
	return neq.Select()
}

// NotificationEventGroupBy is the group-by builder for NotificationEvent entities.
type NotificationEventGroupBy struct {
	selector
	build *NotificationEventQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (negb *NotificationEventGroupBy) Aggregate(fns ...AggregateFunc) *NotificationEventGroupBy {
	negb.fns = append(negb.fns, fns...)
	return negb
}

// Scan applies the selector query and scans the result into the given value.
func (negb *NotificationEventGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, negb.build.ctx, ent.OpQueryGroupBy)
	if err := negb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NotificationEventQuery, *NotificationEventGroupBy](ctx, negb.build, negb, negb.build.inters, v)
}

func (negb *NotificationEventGroupBy) sqlScan(ctx context.Context, root *NotificationEventQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(negb.fns))
	for _, fn := range negb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*negb.flds)+len(negb.fns))
		for _, f := range *negb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*negb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := negb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// NotificationEventSelect is the builder for selecting fields of NotificationEvent entities.
type NotificationEventSelect struct {
	*NotificationEventQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (nes *NotificationEventSelect) Aggregate(fns ...AggregateFunc) *NotificationEventSelect {
	nes.fns = append(nes.fns, fns...)
	return nes
}

// Scan applies the selector query and scans the result into the given value.
func (nes *NotificationEventSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nes.ctx, ent.OpQuerySelect)
	if err := nes.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NotificationEventQuery, *NotificationEventSelect](ctx, nes.NotificationEventQuery, nes, nes.inters, v)
}

func (nes *NotificationEventSelect) sqlScan(ctx context.Context, root *NotificationEventQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(nes.fns))
	for _, fn := range nes.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*nes.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (nes *NotificationEventSelect) Modify(modifiers ...func(s *sql.Selector)) *NotificationEventSelect {
	nes.modifiers = append(nes.modifiers, modifiers...)
	return nes
}
