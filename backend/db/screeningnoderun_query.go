// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/screeningnoderun"
	"github.com/chaitin/WhaleHire/backend/db/screeningtask"
	"github.com/chaitin/WhaleHire/backend/db/screeningtaskresume"
	"github.com/google/uuid"
)

// ScreeningNodeRunQuery is the builder for querying ScreeningNodeRun entities.
type ScreeningNodeRunQuery struct {
	config
	ctx            *QueryContext
	order          []screeningnoderun.OrderOption
	inters         []Interceptor
	predicates     []predicate.ScreeningNodeRun
	withTask       *ScreeningTaskQuery
	withTaskResume *ScreeningTaskResumeQuery
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ScreeningNodeRunQuery builder.
func (snrq *ScreeningNodeRunQuery) Where(ps ...predicate.ScreeningNodeRun) *ScreeningNodeRunQuery {
	snrq.predicates = append(snrq.predicates, ps...)
	return snrq
}

// Limit the number of records to be returned by this query.
func (snrq *ScreeningNodeRunQuery) Limit(limit int) *ScreeningNodeRunQuery {
	snrq.ctx.Limit = &limit
	return snrq
}

// Offset to start from.
func (snrq *ScreeningNodeRunQuery) Offset(offset int) *ScreeningNodeRunQuery {
	snrq.ctx.Offset = &offset
	return snrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (snrq *ScreeningNodeRunQuery) Unique(unique bool) *ScreeningNodeRunQuery {
	snrq.ctx.Unique = &unique
	return snrq
}

// Order specifies how the records should be ordered.
func (snrq *ScreeningNodeRunQuery) Order(o ...screeningnoderun.OrderOption) *ScreeningNodeRunQuery {
	snrq.order = append(snrq.order, o...)
	return snrq
}

// QueryTask chains the current query on the "task" edge.
func (snrq *ScreeningNodeRunQuery) QueryTask() *ScreeningTaskQuery {
	query := (&ScreeningTaskClient{config: snrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := snrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := snrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningnoderun.Table, screeningnoderun.FieldID, selector),
			sqlgraph.To(screeningtask.Table, screeningtask.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, screeningnoderun.TaskTable, screeningnoderun.TaskColumn),
		)
		fromU = sqlgraph.SetNeighbors(snrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskResume chains the current query on the "task_resume" edge.
func (snrq *ScreeningNodeRunQuery) QueryTaskResume() *ScreeningTaskResumeQuery {
	query := (&ScreeningTaskResumeClient{config: snrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := snrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := snrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningnoderun.Table, screeningnoderun.FieldID, selector),
			sqlgraph.To(screeningtaskresume.Table, screeningtaskresume.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, screeningnoderun.TaskResumeTable, screeningnoderun.TaskResumeColumn),
		)
		fromU = sqlgraph.SetNeighbors(snrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ScreeningNodeRun entity from the query.
// Returns a *NotFoundError when no ScreeningNodeRun was found.
func (snrq *ScreeningNodeRunQuery) First(ctx context.Context) (*ScreeningNodeRun, error) {
	nodes, err := snrq.Limit(1).All(setContextOp(ctx, snrq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{screeningnoderun.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (snrq *ScreeningNodeRunQuery) FirstX(ctx context.Context) *ScreeningNodeRun {
	node, err := snrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ScreeningNodeRun ID from the query.
// Returns a *NotFoundError when no ScreeningNodeRun ID was found.
func (snrq *ScreeningNodeRunQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = snrq.Limit(1).IDs(setContextOp(ctx, snrq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{screeningnoderun.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (snrq *ScreeningNodeRunQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := snrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ScreeningNodeRun entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ScreeningNodeRun entity is found.
// Returns a *NotFoundError when no ScreeningNodeRun entities are found.
func (snrq *ScreeningNodeRunQuery) Only(ctx context.Context) (*ScreeningNodeRun, error) {
	nodes, err := snrq.Limit(2).All(setContextOp(ctx, snrq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{screeningnoderun.Label}
	default:
		return nil, &NotSingularError{screeningnoderun.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (snrq *ScreeningNodeRunQuery) OnlyX(ctx context.Context) *ScreeningNodeRun {
	node, err := snrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ScreeningNodeRun ID in the query.
// Returns a *NotSingularError when more than one ScreeningNodeRun ID is found.
// Returns a *NotFoundError when no entities are found.
func (snrq *ScreeningNodeRunQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = snrq.Limit(2).IDs(setContextOp(ctx, snrq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{screeningnoderun.Label}
	default:
		err = &NotSingularError{screeningnoderun.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (snrq *ScreeningNodeRunQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := snrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ScreeningNodeRuns.
func (snrq *ScreeningNodeRunQuery) All(ctx context.Context) ([]*ScreeningNodeRun, error) {
	ctx = setContextOp(ctx, snrq.ctx, ent.OpQueryAll)
	if err := snrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ScreeningNodeRun, *ScreeningNodeRunQuery]()
	return withInterceptors[[]*ScreeningNodeRun](ctx, snrq, qr, snrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (snrq *ScreeningNodeRunQuery) AllX(ctx context.Context) []*ScreeningNodeRun {
	nodes, err := snrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ScreeningNodeRun IDs.
func (snrq *ScreeningNodeRunQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if snrq.ctx.Unique == nil && snrq.path != nil {
		snrq.Unique(true)
	}
	ctx = setContextOp(ctx, snrq.ctx, ent.OpQueryIDs)
	if err = snrq.Select(screeningnoderun.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (snrq *ScreeningNodeRunQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := snrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (snrq *ScreeningNodeRunQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, snrq.ctx, ent.OpQueryCount)
	if err := snrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, snrq, querierCount[*ScreeningNodeRunQuery](), snrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (snrq *ScreeningNodeRunQuery) CountX(ctx context.Context) int {
	count, err := snrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (snrq *ScreeningNodeRunQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, snrq.ctx, ent.OpQueryExist)
	switch _, err := snrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (snrq *ScreeningNodeRunQuery) ExistX(ctx context.Context) bool {
	exist, err := snrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ScreeningNodeRunQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (snrq *ScreeningNodeRunQuery) Clone() *ScreeningNodeRunQuery {
	if snrq == nil {
		return nil
	}
	return &ScreeningNodeRunQuery{
		config:         snrq.config,
		ctx:            snrq.ctx.Clone(),
		order:          append([]screeningnoderun.OrderOption{}, snrq.order...),
		inters:         append([]Interceptor{}, snrq.inters...),
		predicates:     append([]predicate.ScreeningNodeRun{}, snrq.predicates...),
		withTask:       snrq.withTask.Clone(),
		withTaskResume: snrq.withTaskResume.Clone(),
		// clone intermediate query.
		sql:       snrq.sql.Clone(),
		path:      snrq.path,
		modifiers: append([]func(*sql.Selector){}, snrq.modifiers...),
	}
}

// WithTask tells the query-builder to eager-load the nodes that are connected to
// the "task" edge. The optional arguments are used to configure the query builder of the edge.
func (snrq *ScreeningNodeRunQuery) WithTask(opts ...func(*ScreeningTaskQuery)) *ScreeningNodeRunQuery {
	query := (&ScreeningTaskClient{config: snrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	snrq.withTask = query
	return snrq
}

// WithTaskResume tells the query-builder to eager-load the nodes that are connected to
// the "task_resume" edge. The optional arguments are used to configure the query builder of the edge.
func (snrq *ScreeningNodeRunQuery) WithTaskResume(opts ...func(*ScreeningTaskResumeQuery)) *ScreeningNodeRunQuery {
	query := (&ScreeningTaskResumeClient{config: snrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	snrq.withTaskResume = query
	return snrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ScreeningNodeRun.Query().
//		GroupBy(screeningnoderun.FieldDeletedAt).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (snrq *ScreeningNodeRunQuery) GroupBy(field string, fields ...string) *ScreeningNodeRunGroupBy {
	snrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ScreeningNodeRunGroupBy{build: snrq}
	grbuild.flds = &snrq.ctx.Fields
	grbuild.label = screeningnoderun.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//	}
//
//	client.ScreeningNodeRun.Query().
//		Select(screeningnoderun.FieldDeletedAt).
//		Scan(ctx, &v)
func (snrq *ScreeningNodeRunQuery) Select(fields ...string) *ScreeningNodeRunSelect {
	snrq.ctx.Fields = append(snrq.ctx.Fields, fields...)
	sbuild := &ScreeningNodeRunSelect{ScreeningNodeRunQuery: snrq}
	sbuild.label = screeningnoderun.Label
	sbuild.flds, sbuild.scan = &snrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ScreeningNodeRunSelect configured with the given aggregations.
func (snrq *ScreeningNodeRunQuery) Aggregate(fns ...AggregateFunc) *ScreeningNodeRunSelect {
	return snrq.Select().Aggregate(fns...)
}

func (snrq *ScreeningNodeRunQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range snrq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, snrq); err != nil {
				return err
			}
		}
	}
	for _, f := range snrq.ctx.Fields {
		if !screeningnoderun.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if snrq.path != nil {
		prev, err := snrq.path(ctx)
		if err != nil {
			return err
		}
		snrq.sql = prev
	}
	return nil
}

func (snrq *ScreeningNodeRunQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ScreeningNodeRun, error) {
	var (
		nodes       = []*ScreeningNodeRun{}
		_spec       = snrq.querySpec()
		loadedTypes = [2]bool{
			snrq.withTask != nil,
			snrq.withTaskResume != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ScreeningNodeRun).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ScreeningNodeRun{config: snrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(snrq.modifiers) > 0 {
		_spec.Modifiers = snrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, snrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := snrq.withTask; query != nil {
		if err := snrq.loadTask(ctx, query, nodes, nil,
			func(n *ScreeningNodeRun, e *ScreeningTask) { n.Edges.Task = e }); err != nil {
			return nil, err
		}
	}
	if query := snrq.withTaskResume; query != nil {
		if err := snrq.loadTaskResume(ctx, query, nodes, nil,
			func(n *ScreeningNodeRun, e *ScreeningTaskResume) { n.Edges.TaskResume = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (snrq *ScreeningNodeRunQuery) loadTask(ctx context.Context, query *ScreeningTaskQuery, nodes []*ScreeningNodeRun, init func(*ScreeningNodeRun), assign func(*ScreeningNodeRun, *ScreeningTask)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ScreeningNodeRun)
	for i := range nodes {
		fk := nodes[i].TaskID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(screeningtask.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "task_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (snrq *ScreeningNodeRunQuery) loadTaskResume(ctx context.Context, query *ScreeningTaskResumeQuery, nodes []*ScreeningNodeRun, init func(*ScreeningNodeRun), assign func(*ScreeningNodeRun, *ScreeningTaskResume)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ScreeningNodeRun)
	for i := range nodes {
		fk := nodes[i].TaskResumeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(screeningtaskresume.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "task_resume_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (snrq *ScreeningNodeRunQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := snrq.querySpec()
	if len(snrq.modifiers) > 0 {
		_spec.Modifiers = snrq.modifiers
	}
	_spec.Node.Columns = snrq.ctx.Fields
	if len(snrq.ctx.Fields) > 0 {
		_spec.Unique = snrq.ctx.Unique != nil && *snrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, snrq.driver, _spec)
}

func (snrq *ScreeningNodeRunQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(screeningnoderun.Table, screeningnoderun.Columns, sqlgraph.NewFieldSpec(screeningnoderun.FieldID, field.TypeUUID))
	_spec.From = snrq.sql
	if unique := snrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if snrq.path != nil {
		_spec.Unique = true
	}
	if fields := snrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, screeningnoderun.FieldID)
		for i := range fields {
			if fields[i] != screeningnoderun.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if snrq.withTask != nil {
			_spec.Node.AddColumnOnce(screeningnoderun.FieldTaskID)
		}
		if snrq.withTaskResume != nil {
			_spec.Node.AddColumnOnce(screeningnoderun.FieldTaskResumeID)
		}
	}
	if ps := snrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := snrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := snrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := snrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (snrq *ScreeningNodeRunQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(snrq.driver.Dialect())
	t1 := builder.Table(screeningnoderun.Table)
	columns := snrq.ctx.Fields
	if len(columns) == 0 {
		columns = screeningnoderun.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if snrq.sql != nil {
		selector = snrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if snrq.ctx.Unique != nil && *snrq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range snrq.modifiers {
		m(selector)
	}
	for _, p := range snrq.predicates {
		p(selector)
	}
	for _, p := range snrq.order {
		p(selector)
	}
	if offset := snrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := snrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (snrq *ScreeningNodeRunQuery) ForUpdate(opts ...sql.LockOption) *ScreeningNodeRunQuery {
	if snrq.driver.Dialect() == dialect.Postgres {
		snrq.Unique(false)
	}
	snrq.modifiers = append(snrq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return snrq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (snrq *ScreeningNodeRunQuery) ForShare(opts ...sql.LockOption) *ScreeningNodeRunQuery {
	if snrq.driver.Dialect() == dialect.Postgres {
		snrq.Unique(false)
	}
	snrq.modifiers = append(snrq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return snrq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (snrq *ScreeningNodeRunQuery) Modify(modifiers ...func(s *sql.Selector)) *ScreeningNodeRunSelect {
	snrq.modifiers = append(snrq.modifiers, modifiers...)
	return snrq.Select()
}

// ScreeningNodeRunGroupBy is the group-by builder for ScreeningNodeRun entities.
type ScreeningNodeRunGroupBy struct {
	selector
	build *ScreeningNodeRunQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (snrgb *ScreeningNodeRunGroupBy) Aggregate(fns ...AggregateFunc) *ScreeningNodeRunGroupBy {
	snrgb.fns = append(snrgb.fns, fns...)
	return snrgb
}

// Scan applies the selector query and scans the result into the given value.
func (snrgb *ScreeningNodeRunGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, snrgb.build.ctx, ent.OpQueryGroupBy)
	if err := snrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScreeningNodeRunQuery, *ScreeningNodeRunGroupBy](ctx, snrgb.build, snrgb, snrgb.build.inters, v)
}

func (snrgb *ScreeningNodeRunGroupBy) sqlScan(ctx context.Context, root *ScreeningNodeRunQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(snrgb.fns))
	for _, fn := range snrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*snrgb.flds)+len(snrgb.fns))
		for _, f := range *snrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*snrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := snrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ScreeningNodeRunSelect is the builder for selecting fields of ScreeningNodeRun entities.
type ScreeningNodeRunSelect struct {
	*ScreeningNodeRunQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (snrs *ScreeningNodeRunSelect) Aggregate(fns ...AggregateFunc) *ScreeningNodeRunSelect {
	snrs.fns = append(snrs.fns, fns...)
	return snrs
}

// Scan applies the selector query and scans the result into the given value.
func (snrs *ScreeningNodeRunSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, snrs.ctx, ent.OpQuerySelect)
	if err := snrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScreeningNodeRunQuery, *ScreeningNodeRunSelect](ctx, snrs.ScreeningNodeRunQuery, snrs, snrs.inters, v)
}

func (snrs *ScreeningNodeRunSelect) sqlScan(ctx context.Context, root *ScreeningNodeRunQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(snrs.fns))
	for _, fn := range snrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*snrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := snrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (snrs *ScreeningNodeRunSelect) Modify(modifiers ...func(s *sql.Selector)) *ScreeningNodeRunSelect {
	snrs.modifiers = append(snrs.modifiers, modifiers...)
	return snrs
}
