// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/screeningresult"
	"github.com/chaitin/WhaleHire/backend/db/screeningtask"
	"github.com/google/uuid"
)

// ScreeningResult is the model entity for the ScreeningResult schema.
type ScreeningResult struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID uuid.UUID `json:"task_id,omitempty"`
	// JobPositionID holds the value of the "job_position_id" field.
	JobPositionID uuid.UUID `json:"job_position_id,omitempty"`
	// ResumeID holds the value of the "resume_id" field.
	ResumeID uuid.UUID `json:"resume_id,omitempty"`
	// 聚合总分 0-100
	OverallScore float64 `json:"overall_score,omitempty"`
	// 匹配等级
	MatchLevel screeningresult.MatchLevel `json:"match_level,omitempty"`
	// 各维度分数
	DimensionScores map[string]interface{} `json:"dimension_scores,omitempty"`
	// 技能匹配详情
	SkillDetail map[string]interface{} `json:"skill_detail,omitempty"`
	// 职责匹配详情
	ResponsibilityDetail map[string]interface{} `json:"responsibility_detail,omitempty"`
	// 经验匹配详情
	ExperienceDetail map[string]interface{} `json:"experience_detail,omitempty"`
	// 教育匹配详情
	EducationDetail map[string]interface{} `json:"education_detail,omitempty"`
	// 行业匹配详情
	IndustryDetail map[string]interface{} `json:"industry_detail,omitempty"`
	// 基本信息匹配详情
	BasicDetail map[string]interface{} `json:"basic_detail,omitempty"`
	// 匹配建议
	Recommendations []string `json:"recommendations,omitempty"`
	// 链路追踪ID
	TraceID string `json:"trace_id,omitempty"`
	// 运行时元数据
	RuntimeMetadata map[string]interface{} `json:"runtime_metadata,omitempty"`
	// 各Agent版本快照
	SubAgentVersions map[string]interface{} `json:"sub_agent_versions,omitempty"`
	// 匹配时间
	MatchedAt time.Time `json:"matched_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScreeningResultQuery when eager-loading is set.
	Edges        ScreeningResultEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScreeningResultEdges holds the relations/edges for other nodes in the graph.
type ScreeningResultEdges struct {
	// Task holds the value of the task edge.
	Task *ScreeningTask `json:"task,omitempty"`
	// JobPosition holds the value of the job_position edge.
	JobPosition *JobPosition `json:"job_position,omitempty"`
	// Resume holds the value of the resume edge.
	Resume *Resume `json:"resume,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScreeningResultEdges) TaskOrErr() (*ScreeningTask, error) {
	if e.Task != nil {
		return e.Task, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: screeningtask.Label}
	}
	return nil, &NotLoadedError{edge: "task"}
}

// JobPositionOrErr returns the JobPosition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScreeningResultEdges) JobPositionOrErr() (*JobPosition, error) {
	if e.JobPosition != nil {
		return e.JobPosition, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: jobposition.Label}
	}
	return nil, &NotLoadedError{edge: "job_position"}
}

// ResumeOrErr returns the Resume value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScreeningResultEdges) ResumeOrErr() (*Resume, error) {
	if e.Resume != nil {
		return e.Resume, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: resume.Label}
	}
	return nil, &NotLoadedError{edge: "resume"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScreeningResult) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case screeningresult.FieldDimensionScores, screeningresult.FieldSkillDetail, screeningresult.FieldResponsibilityDetail, screeningresult.FieldExperienceDetail, screeningresult.FieldEducationDetail, screeningresult.FieldIndustryDetail, screeningresult.FieldBasicDetail, screeningresult.FieldRecommendations, screeningresult.FieldRuntimeMetadata, screeningresult.FieldSubAgentVersions:
			values[i] = new([]byte)
		case screeningresult.FieldOverallScore:
			values[i] = new(sql.NullFloat64)
		case screeningresult.FieldMatchLevel, screeningresult.FieldTraceID:
			values[i] = new(sql.NullString)
		case screeningresult.FieldDeletedAt, screeningresult.FieldMatchedAt, screeningresult.FieldCreatedAt, screeningresult.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case screeningresult.FieldID, screeningresult.FieldTaskID, screeningresult.FieldJobPositionID, screeningresult.FieldResumeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScreeningResult fields.
func (sr *ScreeningResult) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case screeningresult.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sr.ID = *value
			}
		case screeningresult.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sr.DeletedAt = value.Time
			}
		case screeningresult.FieldTaskID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value != nil {
				sr.TaskID = *value
			}
		case screeningresult.FieldJobPositionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field job_position_id", values[i])
			} else if value != nil {
				sr.JobPositionID = *value
			}
		case screeningresult.FieldResumeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field resume_id", values[i])
			} else if value != nil {
				sr.ResumeID = *value
			}
		case screeningresult.FieldOverallScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field overall_score", values[i])
			} else if value.Valid {
				sr.OverallScore = value.Float64
			}
		case screeningresult.FieldMatchLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field match_level", values[i])
			} else if value.Valid {
				sr.MatchLevel = screeningresult.MatchLevel(value.String)
			}
		case screeningresult.FieldDimensionScores:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dimension_scores", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sr.DimensionScores); err != nil {
					return fmt.Errorf("unmarshal field dimension_scores: %w", err)
				}
			}
		case screeningresult.FieldSkillDetail:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field skill_detail", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sr.SkillDetail); err != nil {
					return fmt.Errorf("unmarshal field skill_detail: %w", err)
				}
			}
		case screeningresult.FieldResponsibilityDetail:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field responsibility_detail", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sr.ResponsibilityDetail); err != nil {
					return fmt.Errorf("unmarshal field responsibility_detail: %w", err)
				}
			}
		case screeningresult.FieldExperienceDetail:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field experience_detail", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sr.ExperienceDetail); err != nil {
					return fmt.Errorf("unmarshal field experience_detail: %w", err)
				}
			}
		case screeningresult.FieldEducationDetail:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field education_detail", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sr.EducationDetail); err != nil {
					return fmt.Errorf("unmarshal field education_detail: %w", err)
				}
			}
		case screeningresult.FieldIndustryDetail:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field industry_detail", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sr.IndustryDetail); err != nil {
					return fmt.Errorf("unmarshal field industry_detail: %w", err)
				}
			}
		case screeningresult.FieldBasicDetail:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field basic_detail", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sr.BasicDetail); err != nil {
					return fmt.Errorf("unmarshal field basic_detail: %w", err)
				}
			}
		case screeningresult.FieldRecommendations:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field recommendations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sr.Recommendations); err != nil {
					return fmt.Errorf("unmarshal field recommendations: %w", err)
				}
			}
		case screeningresult.FieldTraceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trace_id", values[i])
			} else if value.Valid {
				sr.TraceID = value.String
			}
		case screeningresult.FieldRuntimeMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field runtime_metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sr.RuntimeMetadata); err != nil {
					return fmt.Errorf("unmarshal field runtime_metadata: %w", err)
				}
			}
		case screeningresult.FieldSubAgentVersions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field sub_agent_versions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sr.SubAgentVersions); err != nil {
					return fmt.Errorf("unmarshal field sub_agent_versions: %w", err)
				}
			}
		case screeningresult.FieldMatchedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field matched_at", values[i])
			} else if value.Valid {
				sr.MatchedAt = value.Time
			}
		case screeningresult.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sr.CreatedAt = value.Time
			}
		case screeningresult.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sr.UpdatedAt = value.Time
			}
		default:
			sr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScreeningResult.
// This includes values selected through modifiers, order, etc.
func (sr *ScreeningResult) Value(name string) (ent.Value, error) {
	return sr.selectValues.Get(name)
}

// QueryTask queries the "task" edge of the ScreeningResult entity.
func (sr *ScreeningResult) QueryTask() *ScreeningTaskQuery {
	return NewScreeningResultClient(sr.config).QueryTask(sr)
}

// QueryJobPosition queries the "job_position" edge of the ScreeningResult entity.
func (sr *ScreeningResult) QueryJobPosition() *JobPositionQuery {
	return NewScreeningResultClient(sr.config).QueryJobPosition(sr)
}

// QueryResume queries the "resume" edge of the ScreeningResult entity.
func (sr *ScreeningResult) QueryResume() *ResumeQuery {
	return NewScreeningResultClient(sr.config).QueryResume(sr)
}

// Update returns a builder for updating this ScreeningResult.
// Note that you need to call ScreeningResult.Unwrap() before calling this method if this ScreeningResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *ScreeningResult) Update() *ScreeningResultUpdateOne {
	return NewScreeningResultClient(sr.config).UpdateOne(sr)
}

// Unwrap unwraps the ScreeningResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *ScreeningResult) Unwrap() *ScreeningResult {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("db: ScreeningResult is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *ScreeningResult) String() string {
	var builder strings.Builder
	builder.WriteString("ScreeningResult(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(sr.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.TaskID))
	builder.WriteString(", ")
	builder.WriteString("job_position_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.JobPositionID))
	builder.WriteString(", ")
	builder.WriteString("resume_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.ResumeID))
	builder.WriteString(", ")
	builder.WriteString("overall_score=")
	builder.WriteString(fmt.Sprintf("%v", sr.OverallScore))
	builder.WriteString(", ")
	builder.WriteString("match_level=")
	builder.WriteString(fmt.Sprintf("%v", sr.MatchLevel))
	builder.WriteString(", ")
	builder.WriteString("dimension_scores=")
	builder.WriteString(fmt.Sprintf("%v", sr.DimensionScores))
	builder.WriteString(", ")
	builder.WriteString("skill_detail=")
	builder.WriteString(fmt.Sprintf("%v", sr.SkillDetail))
	builder.WriteString(", ")
	builder.WriteString("responsibility_detail=")
	builder.WriteString(fmt.Sprintf("%v", sr.ResponsibilityDetail))
	builder.WriteString(", ")
	builder.WriteString("experience_detail=")
	builder.WriteString(fmt.Sprintf("%v", sr.ExperienceDetail))
	builder.WriteString(", ")
	builder.WriteString("education_detail=")
	builder.WriteString(fmt.Sprintf("%v", sr.EducationDetail))
	builder.WriteString(", ")
	builder.WriteString("industry_detail=")
	builder.WriteString(fmt.Sprintf("%v", sr.IndustryDetail))
	builder.WriteString(", ")
	builder.WriteString("basic_detail=")
	builder.WriteString(fmt.Sprintf("%v", sr.BasicDetail))
	builder.WriteString(", ")
	builder.WriteString("recommendations=")
	builder.WriteString(fmt.Sprintf("%v", sr.Recommendations))
	builder.WriteString(", ")
	builder.WriteString("trace_id=")
	builder.WriteString(sr.TraceID)
	builder.WriteString(", ")
	builder.WriteString("runtime_metadata=")
	builder.WriteString(fmt.Sprintf("%v", sr.RuntimeMetadata))
	builder.WriteString(", ")
	builder.WriteString("sub_agent_versions=")
	builder.WriteString(fmt.Sprintf("%v", sr.SubAgentVersions))
	builder.WriteString(", ")
	builder.WriteString("matched_at=")
	builder.WriteString(sr.MatchedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ScreeningResults is a parsable slice of ScreeningResult.
type ScreeningResults []*ScreeningResult
