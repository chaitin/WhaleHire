// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxsetting"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxstatistic"
	"github.com/google/uuid"
)

// ResumeMailboxStatisticCreate is the builder for creating a ResumeMailboxStatistic entity.
type ResumeMailboxStatisticCreate struct {
	config
	mutation *ResumeMailboxStatisticMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (rmsc *ResumeMailboxStatisticCreate) SetDeletedAt(t time.Time) *ResumeMailboxStatisticCreate {
	rmsc.mutation.SetDeletedAt(t)
	return rmsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rmsc *ResumeMailboxStatisticCreate) SetNillableDeletedAt(t *time.Time) *ResumeMailboxStatisticCreate {
	if t != nil {
		rmsc.SetDeletedAt(*t)
	}
	return rmsc
}

// SetMailboxID sets the "mailbox_id" field.
func (rmsc *ResumeMailboxStatisticCreate) SetMailboxID(u uuid.UUID) *ResumeMailboxStatisticCreate {
	rmsc.mutation.SetMailboxID(u)
	return rmsc
}

// SetDate sets the "date" field.
func (rmsc *ResumeMailboxStatisticCreate) SetDate(t time.Time) *ResumeMailboxStatisticCreate {
	rmsc.mutation.SetDate(t)
	return rmsc
}

// SetSyncedEmails sets the "synced_emails" field.
func (rmsc *ResumeMailboxStatisticCreate) SetSyncedEmails(i int) *ResumeMailboxStatisticCreate {
	rmsc.mutation.SetSyncedEmails(i)
	return rmsc
}

// SetNillableSyncedEmails sets the "synced_emails" field if the given value is not nil.
func (rmsc *ResumeMailboxStatisticCreate) SetNillableSyncedEmails(i *int) *ResumeMailboxStatisticCreate {
	if i != nil {
		rmsc.SetSyncedEmails(*i)
	}
	return rmsc
}

// SetParsedResumes sets the "parsed_resumes" field.
func (rmsc *ResumeMailboxStatisticCreate) SetParsedResumes(i int) *ResumeMailboxStatisticCreate {
	rmsc.mutation.SetParsedResumes(i)
	return rmsc
}

// SetNillableParsedResumes sets the "parsed_resumes" field if the given value is not nil.
func (rmsc *ResumeMailboxStatisticCreate) SetNillableParsedResumes(i *int) *ResumeMailboxStatisticCreate {
	if i != nil {
		rmsc.SetParsedResumes(*i)
	}
	return rmsc
}

// SetFailedResumes sets the "failed_resumes" field.
func (rmsc *ResumeMailboxStatisticCreate) SetFailedResumes(i int) *ResumeMailboxStatisticCreate {
	rmsc.mutation.SetFailedResumes(i)
	return rmsc
}

// SetNillableFailedResumes sets the "failed_resumes" field if the given value is not nil.
func (rmsc *ResumeMailboxStatisticCreate) SetNillableFailedResumes(i *int) *ResumeMailboxStatisticCreate {
	if i != nil {
		rmsc.SetFailedResumes(*i)
	}
	return rmsc
}

// SetSkippedAttachments sets the "skipped_attachments" field.
func (rmsc *ResumeMailboxStatisticCreate) SetSkippedAttachments(i int) *ResumeMailboxStatisticCreate {
	rmsc.mutation.SetSkippedAttachments(i)
	return rmsc
}

// SetNillableSkippedAttachments sets the "skipped_attachments" field if the given value is not nil.
func (rmsc *ResumeMailboxStatisticCreate) SetNillableSkippedAttachments(i *int) *ResumeMailboxStatisticCreate {
	if i != nil {
		rmsc.SetSkippedAttachments(*i)
	}
	return rmsc
}

// SetLastSyncDurationMs sets the "last_sync_duration_ms" field.
func (rmsc *ResumeMailboxStatisticCreate) SetLastSyncDurationMs(i int) *ResumeMailboxStatisticCreate {
	rmsc.mutation.SetLastSyncDurationMs(i)
	return rmsc
}

// SetNillableLastSyncDurationMs sets the "last_sync_duration_ms" field if the given value is not nil.
func (rmsc *ResumeMailboxStatisticCreate) SetNillableLastSyncDurationMs(i *int) *ResumeMailboxStatisticCreate {
	if i != nil {
		rmsc.SetLastSyncDurationMs(*i)
	}
	return rmsc
}

// SetCreatedAt sets the "created_at" field.
func (rmsc *ResumeMailboxStatisticCreate) SetCreatedAt(t time.Time) *ResumeMailboxStatisticCreate {
	rmsc.mutation.SetCreatedAt(t)
	return rmsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rmsc *ResumeMailboxStatisticCreate) SetNillableCreatedAt(t *time.Time) *ResumeMailboxStatisticCreate {
	if t != nil {
		rmsc.SetCreatedAt(*t)
	}
	return rmsc
}

// SetUpdatedAt sets the "updated_at" field.
func (rmsc *ResumeMailboxStatisticCreate) SetUpdatedAt(t time.Time) *ResumeMailboxStatisticCreate {
	rmsc.mutation.SetUpdatedAt(t)
	return rmsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rmsc *ResumeMailboxStatisticCreate) SetNillableUpdatedAt(t *time.Time) *ResumeMailboxStatisticCreate {
	if t != nil {
		rmsc.SetUpdatedAt(*t)
	}
	return rmsc
}

// SetID sets the "id" field.
func (rmsc *ResumeMailboxStatisticCreate) SetID(u uuid.UUID) *ResumeMailboxStatisticCreate {
	rmsc.mutation.SetID(u)
	return rmsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rmsc *ResumeMailboxStatisticCreate) SetNillableID(u *uuid.UUID) *ResumeMailboxStatisticCreate {
	if u != nil {
		rmsc.SetID(*u)
	}
	return rmsc
}

// SetMailbox sets the "mailbox" edge to the ResumeMailboxSetting entity.
func (rmsc *ResumeMailboxStatisticCreate) SetMailbox(r *ResumeMailboxSetting) *ResumeMailboxStatisticCreate {
	return rmsc.SetMailboxID(r.ID)
}

// Mutation returns the ResumeMailboxStatisticMutation object of the builder.
func (rmsc *ResumeMailboxStatisticCreate) Mutation() *ResumeMailboxStatisticMutation {
	return rmsc.mutation
}

// Save creates the ResumeMailboxStatistic in the database.
func (rmsc *ResumeMailboxStatisticCreate) Save(ctx context.Context) (*ResumeMailboxStatistic, error) {
	if err := rmsc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rmsc.sqlSave, rmsc.mutation, rmsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rmsc *ResumeMailboxStatisticCreate) SaveX(ctx context.Context) *ResumeMailboxStatistic {
	v, err := rmsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmsc *ResumeMailboxStatisticCreate) Exec(ctx context.Context) error {
	_, err := rmsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmsc *ResumeMailboxStatisticCreate) ExecX(ctx context.Context) {
	if err := rmsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmsc *ResumeMailboxStatisticCreate) defaults() error {
	if _, ok := rmsc.mutation.SyncedEmails(); !ok {
		v := resumemailboxstatistic.DefaultSyncedEmails
		rmsc.mutation.SetSyncedEmails(v)
	}
	if _, ok := rmsc.mutation.ParsedResumes(); !ok {
		v := resumemailboxstatistic.DefaultParsedResumes
		rmsc.mutation.SetParsedResumes(v)
	}
	if _, ok := rmsc.mutation.FailedResumes(); !ok {
		v := resumemailboxstatistic.DefaultFailedResumes
		rmsc.mutation.SetFailedResumes(v)
	}
	if _, ok := rmsc.mutation.SkippedAttachments(); !ok {
		v := resumemailboxstatistic.DefaultSkippedAttachments
		rmsc.mutation.SetSkippedAttachments(v)
	}
	if _, ok := rmsc.mutation.LastSyncDurationMs(); !ok {
		v := resumemailboxstatistic.DefaultLastSyncDurationMs
		rmsc.mutation.SetLastSyncDurationMs(v)
	}
	if _, ok := rmsc.mutation.CreatedAt(); !ok {
		if resumemailboxstatistic.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized resumemailboxstatistic.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := resumemailboxstatistic.DefaultCreatedAt()
		rmsc.mutation.SetCreatedAt(v)
	}
	if _, ok := rmsc.mutation.UpdatedAt(); !ok {
		if resumemailboxstatistic.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumemailboxstatistic.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumemailboxstatistic.DefaultUpdatedAt()
		rmsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rmsc.mutation.ID(); !ok {
		if resumemailboxstatistic.DefaultID == nil {
			return fmt.Errorf("db: uninitialized resumemailboxstatistic.DefaultID (forgotten import db/runtime?)")
		}
		v := resumemailboxstatistic.DefaultID()
		rmsc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rmsc *ResumeMailboxStatisticCreate) check() error {
	if _, ok := rmsc.mutation.MailboxID(); !ok {
		return &ValidationError{Name: "mailbox_id", err: errors.New(`db: missing required field "ResumeMailboxStatistic.mailbox_id"`)}
	}
	if _, ok := rmsc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`db: missing required field "ResumeMailboxStatistic.date"`)}
	}
	if _, ok := rmsc.mutation.SyncedEmails(); !ok {
		return &ValidationError{Name: "synced_emails", err: errors.New(`db: missing required field "ResumeMailboxStatistic.synced_emails"`)}
	}
	if _, ok := rmsc.mutation.ParsedResumes(); !ok {
		return &ValidationError{Name: "parsed_resumes", err: errors.New(`db: missing required field "ResumeMailboxStatistic.parsed_resumes"`)}
	}
	if _, ok := rmsc.mutation.FailedResumes(); !ok {
		return &ValidationError{Name: "failed_resumes", err: errors.New(`db: missing required field "ResumeMailboxStatistic.failed_resumes"`)}
	}
	if _, ok := rmsc.mutation.SkippedAttachments(); !ok {
		return &ValidationError{Name: "skipped_attachments", err: errors.New(`db: missing required field "ResumeMailboxStatistic.skipped_attachments"`)}
	}
	if _, ok := rmsc.mutation.LastSyncDurationMs(); !ok {
		return &ValidationError{Name: "last_sync_duration_ms", err: errors.New(`db: missing required field "ResumeMailboxStatistic.last_sync_duration_ms"`)}
	}
	if _, ok := rmsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ResumeMailboxStatistic.created_at"`)}
	}
	if _, ok := rmsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "ResumeMailboxStatistic.updated_at"`)}
	}
	if len(rmsc.mutation.MailboxIDs()) == 0 {
		return &ValidationError{Name: "mailbox", err: errors.New(`db: missing required edge "ResumeMailboxStatistic.mailbox"`)}
	}
	return nil
}

func (rmsc *ResumeMailboxStatisticCreate) sqlSave(ctx context.Context) (*ResumeMailboxStatistic, error) {
	if err := rmsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rmsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rmsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rmsc.mutation.id = &_node.ID
	rmsc.mutation.done = true
	return _node, nil
}

func (rmsc *ResumeMailboxStatisticCreate) createSpec() (*ResumeMailboxStatistic, *sqlgraph.CreateSpec) {
	var (
		_node = &ResumeMailboxStatistic{config: rmsc.config}
		_spec = sqlgraph.NewCreateSpec(resumemailboxstatistic.Table, sqlgraph.NewFieldSpec(resumemailboxstatistic.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rmsc.conflict
	if id, ok := rmsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rmsc.mutation.DeletedAt(); ok {
		_spec.SetField(resumemailboxstatistic.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rmsc.mutation.Date(); ok {
		_spec.SetField(resumemailboxstatistic.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := rmsc.mutation.SyncedEmails(); ok {
		_spec.SetField(resumemailboxstatistic.FieldSyncedEmails, field.TypeInt, value)
		_node.SyncedEmails = value
	}
	if value, ok := rmsc.mutation.ParsedResumes(); ok {
		_spec.SetField(resumemailboxstatistic.FieldParsedResumes, field.TypeInt, value)
		_node.ParsedResumes = value
	}
	if value, ok := rmsc.mutation.FailedResumes(); ok {
		_spec.SetField(resumemailboxstatistic.FieldFailedResumes, field.TypeInt, value)
		_node.FailedResumes = value
	}
	if value, ok := rmsc.mutation.SkippedAttachments(); ok {
		_spec.SetField(resumemailboxstatistic.FieldSkippedAttachments, field.TypeInt, value)
		_node.SkippedAttachments = value
	}
	if value, ok := rmsc.mutation.LastSyncDurationMs(); ok {
		_spec.SetField(resumemailboxstatistic.FieldLastSyncDurationMs, field.TypeInt, value)
		_node.LastSyncDurationMs = value
	}
	if value, ok := rmsc.mutation.CreatedAt(); ok {
		_spec.SetField(resumemailboxstatistic.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rmsc.mutation.UpdatedAt(); ok {
		_spec.SetField(resumemailboxstatistic.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rmsc.mutation.MailboxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumemailboxstatistic.MailboxTable,
			Columns: []string{resumemailboxstatistic.MailboxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumemailboxsetting.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MailboxID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeMailboxStatistic.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeMailboxStatisticUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rmsc *ResumeMailboxStatisticCreate) OnConflict(opts ...sql.ConflictOption) *ResumeMailboxStatisticUpsertOne {
	rmsc.conflict = opts
	return &ResumeMailboxStatisticUpsertOne{
		create: rmsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeMailboxStatistic.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rmsc *ResumeMailboxStatisticCreate) OnConflictColumns(columns ...string) *ResumeMailboxStatisticUpsertOne {
	rmsc.conflict = append(rmsc.conflict, sql.ConflictColumns(columns...))
	return &ResumeMailboxStatisticUpsertOne{
		create: rmsc,
	}
}

type (
	// ResumeMailboxStatisticUpsertOne is the builder for "upsert"-ing
	//  one ResumeMailboxStatistic node.
	ResumeMailboxStatisticUpsertOne struct {
		create *ResumeMailboxStatisticCreate
	}

	// ResumeMailboxStatisticUpsert is the "OnConflict" setter.
	ResumeMailboxStatisticUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeMailboxStatisticUpsert) SetDeletedAt(v time.Time) *ResumeMailboxStatisticUpsert {
	u.Set(resumemailboxstatistic.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsert) UpdateDeletedAt() *ResumeMailboxStatisticUpsert {
	u.SetExcluded(resumemailboxstatistic.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeMailboxStatisticUpsert) ClearDeletedAt() *ResumeMailboxStatisticUpsert {
	u.SetNull(resumemailboxstatistic.FieldDeletedAt)
	return u
}

// SetMailboxID sets the "mailbox_id" field.
func (u *ResumeMailboxStatisticUpsert) SetMailboxID(v uuid.UUID) *ResumeMailboxStatisticUpsert {
	u.Set(resumemailboxstatistic.FieldMailboxID, v)
	return u
}

// UpdateMailboxID sets the "mailbox_id" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsert) UpdateMailboxID() *ResumeMailboxStatisticUpsert {
	u.SetExcluded(resumemailboxstatistic.FieldMailboxID)
	return u
}

// SetDate sets the "date" field.
func (u *ResumeMailboxStatisticUpsert) SetDate(v time.Time) *ResumeMailboxStatisticUpsert {
	u.Set(resumemailboxstatistic.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsert) UpdateDate() *ResumeMailboxStatisticUpsert {
	u.SetExcluded(resumemailboxstatistic.FieldDate)
	return u
}

// SetSyncedEmails sets the "synced_emails" field.
func (u *ResumeMailboxStatisticUpsert) SetSyncedEmails(v int) *ResumeMailboxStatisticUpsert {
	u.Set(resumemailboxstatistic.FieldSyncedEmails, v)
	return u
}

// UpdateSyncedEmails sets the "synced_emails" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsert) UpdateSyncedEmails() *ResumeMailboxStatisticUpsert {
	u.SetExcluded(resumemailboxstatistic.FieldSyncedEmails)
	return u
}

// AddSyncedEmails adds v to the "synced_emails" field.
func (u *ResumeMailboxStatisticUpsert) AddSyncedEmails(v int) *ResumeMailboxStatisticUpsert {
	u.Add(resumemailboxstatistic.FieldSyncedEmails, v)
	return u
}

// SetParsedResumes sets the "parsed_resumes" field.
func (u *ResumeMailboxStatisticUpsert) SetParsedResumes(v int) *ResumeMailboxStatisticUpsert {
	u.Set(resumemailboxstatistic.FieldParsedResumes, v)
	return u
}

// UpdateParsedResumes sets the "parsed_resumes" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsert) UpdateParsedResumes() *ResumeMailboxStatisticUpsert {
	u.SetExcluded(resumemailboxstatistic.FieldParsedResumes)
	return u
}

// AddParsedResumes adds v to the "parsed_resumes" field.
func (u *ResumeMailboxStatisticUpsert) AddParsedResumes(v int) *ResumeMailboxStatisticUpsert {
	u.Add(resumemailboxstatistic.FieldParsedResumes, v)
	return u
}

// SetFailedResumes sets the "failed_resumes" field.
func (u *ResumeMailboxStatisticUpsert) SetFailedResumes(v int) *ResumeMailboxStatisticUpsert {
	u.Set(resumemailboxstatistic.FieldFailedResumes, v)
	return u
}

// UpdateFailedResumes sets the "failed_resumes" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsert) UpdateFailedResumes() *ResumeMailboxStatisticUpsert {
	u.SetExcluded(resumemailboxstatistic.FieldFailedResumes)
	return u
}

// AddFailedResumes adds v to the "failed_resumes" field.
func (u *ResumeMailboxStatisticUpsert) AddFailedResumes(v int) *ResumeMailboxStatisticUpsert {
	u.Add(resumemailboxstatistic.FieldFailedResumes, v)
	return u
}

// SetSkippedAttachments sets the "skipped_attachments" field.
func (u *ResumeMailboxStatisticUpsert) SetSkippedAttachments(v int) *ResumeMailboxStatisticUpsert {
	u.Set(resumemailboxstatistic.FieldSkippedAttachments, v)
	return u
}

// UpdateSkippedAttachments sets the "skipped_attachments" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsert) UpdateSkippedAttachments() *ResumeMailboxStatisticUpsert {
	u.SetExcluded(resumemailboxstatistic.FieldSkippedAttachments)
	return u
}

// AddSkippedAttachments adds v to the "skipped_attachments" field.
func (u *ResumeMailboxStatisticUpsert) AddSkippedAttachments(v int) *ResumeMailboxStatisticUpsert {
	u.Add(resumemailboxstatistic.FieldSkippedAttachments, v)
	return u
}

// SetLastSyncDurationMs sets the "last_sync_duration_ms" field.
func (u *ResumeMailboxStatisticUpsert) SetLastSyncDurationMs(v int) *ResumeMailboxStatisticUpsert {
	u.Set(resumemailboxstatistic.FieldLastSyncDurationMs, v)
	return u
}

// UpdateLastSyncDurationMs sets the "last_sync_duration_ms" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsert) UpdateLastSyncDurationMs() *ResumeMailboxStatisticUpsert {
	u.SetExcluded(resumemailboxstatistic.FieldLastSyncDurationMs)
	return u
}

// AddLastSyncDurationMs adds v to the "last_sync_duration_ms" field.
func (u *ResumeMailboxStatisticUpsert) AddLastSyncDurationMs(v int) *ResumeMailboxStatisticUpsert {
	u.Add(resumemailboxstatistic.FieldLastSyncDurationMs, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeMailboxStatisticUpsert) SetUpdatedAt(v time.Time) *ResumeMailboxStatisticUpsert {
	u.Set(resumemailboxstatistic.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsert) UpdateUpdatedAt() *ResumeMailboxStatisticUpsert {
	u.SetExcluded(resumemailboxstatistic.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ResumeMailboxStatistic.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumemailboxstatistic.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeMailboxStatisticUpsertOne) UpdateNewValues() *ResumeMailboxStatisticUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resumemailboxstatistic.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(resumemailboxstatistic.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeMailboxStatistic.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResumeMailboxStatisticUpsertOne) Ignore() *ResumeMailboxStatisticUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeMailboxStatisticUpsertOne) DoNothing() *ResumeMailboxStatisticUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeMailboxStatisticCreate.OnConflict
// documentation for more info.
func (u *ResumeMailboxStatisticUpsertOne) Update(set func(*ResumeMailboxStatisticUpsert)) *ResumeMailboxStatisticUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeMailboxStatisticUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeMailboxStatisticUpsertOne) SetDeletedAt(v time.Time) *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertOne) UpdateDeletedAt() *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeMailboxStatisticUpsertOne) ClearDeletedAt() *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMailboxID sets the "mailbox_id" field.
func (u *ResumeMailboxStatisticUpsertOne) SetMailboxID(v uuid.UUID) *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetMailboxID(v)
	})
}

// UpdateMailboxID sets the "mailbox_id" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertOne) UpdateMailboxID() *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateMailboxID()
	})
}

// SetDate sets the "date" field.
func (u *ResumeMailboxStatisticUpsertOne) SetDate(v time.Time) *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertOne) UpdateDate() *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateDate()
	})
}

// SetSyncedEmails sets the "synced_emails" field.
func (u *ResumeMailboxStatisticUpsertOne) SetSyncedEmails(v int) *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetSyncedEmails(v)
	})
}

// AddSyncedEmails adds v to the "synced_emails" field.
func (u *ResumeMailboxStatisticUpsertOne) AddSyncedEmails(v int) *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.AddSyncedEmails(v)
	})
}

// UpdateSyncedEmails sets the "synced_emails" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertOne) UpdateSyncedEmails() *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateSyncedEmails()
	})
}

// SetParsedResumes sets the "parsed_resumes" field.
func (u *ResumeMailboxStatisticUpsertOne) SetParsedResumes(v int) *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetParsedResumes(v)
	})
}

// AddParsedResumes adds v to the "parsed_resumes" field.
func (u *ResumeMailboxStatisticUpsertOne) AddParsedResumes(v int) *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.AddParsedResumes(v)
	})
}

// UpdateParsedResumes sets the "parsed_resumes" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertOne) UpdateParsedResumes() *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateParsedResumes()
	})
}

// SetFailedResumes sets the "failed_resumes" field.
func (u *ResumeMailboxStatisticUpsertOne) SetFailedResumes(v int) *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetFailedResumes(v)
	})
}

// AddFailedResumes adds v to the "failed_resumes" field.
func (u *ResumeMailboxStatisticUpsertOne) AddFailedResumes(v int) *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.AddFailedResumes(v)
	})
}

// UpdateFailedResumes sets the "failed_resumes" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertOne) UpdateFailedResumes() *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateFailedResumes()
	})
}

// SetSkippedAttachments sets the "skipped_attachments" field.
func (u *ResumeMailboxStatisticUpsertOne) SetSkippedAttachments(v int) *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetSkippedAttachments(v)
	})
}

// AddSkippedAttachments adds v to the "skipped_attachments" field.
func (u *ResumeMailboxStatisticUpsertOne) AddSkippedAttachments(v int) *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.AddSkippedAttachments(v)
	})
}

// UpdateSkippedAttachments sets the "skipped_attachments" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertOne) UpdateSkippedAttachments() *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateSkippedAttachments()
	})
}

// SetLastSyncDurationMs sets the "last_sync_duration_ms" field.
func (u *ResumeMailboxStatisticUpsertOne) SetLastSyncDurationMs(v int) *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetLastSyncDurationMs(v)
	})
}

// AddLastSyncDurationMs adds v to the "last_sync_duration_ms" field.
func (u *ResumeMailboxStatisticUpsertOne) AddLastSyncDurationMs(v int) *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.AddLastSyncDurationMs(v)
	})
}

// UpdateLastSyncDurationMs sets the "last_sync_duration_ms" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertOne) UpdateLastSyncDurationMs() *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateLastSyncDurationMs()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeMailboxStatisticUpsertOne) SetUpdatedAt(v time.Time) *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertOne) UpdateUpdatedAt() *ResumeMailboxStatisticUpsertOne {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeMailboxStatisticUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeMailboxStatisticCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeMailboxStatisticUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResumeMailboxStatisticUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ResumeMailboxStatisticUpsertOne.ID is not supported by MySQL driver. Use ResumeMailboxStatisticUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResumeMailboxStatisticUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResumeMailboxStatisticCreateBulk is the builder for creating many ResumeMailboxStatistic entities in bulk.
type ResumeMailboxStatisticCreateBulk struct {
	config
	err      error
	builders []*ResumeMailboxStatisticCreate
	conflict []sql.ConflictOption
}

// Save creates the ResumeMailboxStatistic entities in the database.
func (rmscb *ResumeMailboxStatisticCreateBulk) Save(ctx context.Context) ([]*ResumeMailboxStatistic, error) {
	if rmscb.err != nil {
		return nil, rmscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rmscb.builders))
	nodes := make([]*ResumeMailboxStatistic, len(rmscb.builders))
	mutators := make([]Mutator, len(rmscb.builders))
	for i := range rmscb.builders {
		func(i int, root context.Context) {
			builder := rmscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResumeMailboxStatisticMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rmscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rmscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rmscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rmscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rmscb *ResumeMailboxStatisticCreateBulk) SaveX(ctx context.Context) []*ResumeMailboxStatistic {
	v, err := rmscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmscb *ResumeMailboxStatisticCreateBulk) Exec(ctx context.Context) error {
	_, err := rmscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmscb *ResumeMailboxStatisticCreateBulk) ExecX(ctx context.Context) {
	if err := rmscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeMailboxStatistic.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeMailboxStatisticUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rmscb *ResumeMailboxStatisticCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResumeMailboxStatisticUpsertBulk {
	rmscb.conflict = opts
	return &ResumeMailboxStatisticUpsertBulk{
		create: rmscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeMailboxStatistic.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rmscb *ResumeMailboxStatisticCreateBulk) OnConflictColumns(columns ...string) *ResumeMailboxStatisticUpsertBulk {
	rmscb.conflict = append(rmscb.conflict, sql.ConflictColumns(columns...))
	return &ResumeMailboxStatisticUpsertBulk{
		create: rmscb,
	}
}

// ResumeMailboxStatisticUpsertBulk is the builder for "upsert"-ing
// a bulk of ResumeMailboxStatistic nodes.
type ResumeMailboxStatisticUpsertBulk struct {
	create *ResumeMailboxStatisticCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ResumeMailboxStatistic.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumemailboxstatistic.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeMailboxStatisticUpsertBulk) UpdateNewValues() *ResumeMailboxStatisticUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resumemailboxstatistic.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(resumemailboxstatistic.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeMailboxStatistic.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResumeMailboxStatisticUpsertBulk) Ignore() *ResumeMailboxStatisticUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeMailboxStatisticUpsertBulk) DoNothing() *ResumeMailboxStatisticUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeMailboxStatisticCreateBulk.OnConflict
// documentation for more info.
func (u *ResumeMailboxStatisticUpsertBulk) Update(set func(*ResumeMailboxStatisticUpsert)) *ResumeMailboxStatisticUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeMailboxStatisticUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeMailboxStatisticUpsertBulk) SetDeletedAt(v time.Time) *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertBulk) UpdateDeletedAt() *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeMailboxStatisticUpsertBulk) ClearDeletedAt() *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMailboxID sets the "mailbox_id" field.
func (u *ResumeMailboxStatisticUpsertBulk) SetMailboxID(v uuid.UUID) *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetMailboxID(v)
	})
}

// UpdateMailboxID sets the "mailbox_id" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertBulk) UpdateMailboxID() *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateMailboxID()
	})
}

// SetDate sets the "date" field.
func (u *ResumeMailboxStatisticUpsertBulk) SetDate(v time.Time) *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertBulk) UpdateDate() *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateDate()
	})
}

// SetSyncedEmails sets the "synced_emails" field.
func (u *ResumeMailboxStatisticUpsertBulk) SetSyncedEmails(v int) *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetSyncedEmails(v)
	})
}

// AddSyncedEmails adds v to the "synced_emails" field.
func (u *ResumeMailboxStatisticUpsertBulk) AddSyncedEmails(v int) *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.AddSyncedEmails(v)
	})
}

// UpdateSyncedEmails sets the "synced_emails" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertBulk) UpdateSyncedEmails() *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateSyncedEmails()
	})
}

// SetParsedResumes sets the "parsed_resumes" field.
func (u *ResumeMailboxStatisticUpsertBulk) SetParsedResumes(v int) *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetParsedResumes(v)
	})
}

// AddParsedResumes adds v to the "parsed_resumes" field.
func (u *ResumeMailboxStatisticUpsertBulk) AddParsedResumes(v int) *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.AddParsedResumes(v)
	})
}

// UpdateParsedResumes sets the "parsed_resumes" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertBulk) UpdateParsedResumes() *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateParsedResumes()
	})
}

// SetFailedResumes sets the "failed_resumes" field.
func (u *ResumeMailboxStatisticUpsertBulk) SetFailedResumes(v int) *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetFailedResumes(v)
	})
}

// AddFailedResumes adds v to the "failed_resumes" field.
func (u *ResumeMailboxStatisticUpsertBulk) AddFailedResumes(v int) *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.AddFailedResumes(v)
	})
}

// UpdateFailedResumes sets the "failed_resumes" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertBulk) UpdateFailedResumes() *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateFailedResumes()
	})
}

// SetSkippedAttachments sets the "skipped_attachments" field.
func (u *ResumeMailboxStatisticUpsertBulk) SetSkippedAttachments(v int) *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetSkippedAttachments(v)
	})
}

// AddSkippedAttachments adds v to the "skipped_attachments" field.
func (u *ResumeMailboxStatisticUpsertBulk) AddSkippedAttachments(v int) *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.AddSkippedAttachments(v)
	})
}

// UpdateSkippedAttachments sets the "skipped_attachments" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertBulk) UpdateSkippedAttachments() *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateSkippedAttachments()
	})
}

// SetLastSyncDurationMs sets the "last_sync_duration_ms" field.
func (u *ResumeMailboxStatisticUpsertBulk) SetLastSyncDurationMs(v int) *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetLastSyncDurationMs(v)
	})
}

// AddLastSyncDurationMs adds v to the "last_sync_duration_ms" field.
func (u *ResumeMailboxStatisticUpsertBulk) AddLastSyncDurationMs(v int) *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.AddLastSyncDurationMs(v)
	})
}

// UpdateLastSyncDurationMs sets the "last_sync_duration_ms" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertBulk) UpdateLastSyncDurationMs() *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateLastSyncDurationMs()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeMailboxStatisticUpsertBulk) SetUpdatedAt(v time.Time) *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeMailboxStatisticUpsertBulk) UpdateUpdatedAt() *ResumeMailboxStatisticUpsertBulk {
	return u.Update(func(s *ResumeMailboxStatisticUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeMailboxStatisticUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ResumeMailboxStatisticCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeMailboxStatisticCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeMailboxStatisticUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
