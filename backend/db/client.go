// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/chaitin/WhaleHire/backend/db/migrate"
	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/db/admin"
	"github.com/chaitin/WhaleHire/backend/db/adminloginhistory"
	"github.com/chaitin/WhaleHire/backend/db/adminrole"
	"github.com/chaitin/WhaleHire/backend/db/attachment"
	"github.com/chaitin/WhaleHire/backend/db/auditlog"
	"github.com/chaitin/WhaleHire/backend/db/conversation"
	"github.com/chaitin/WhaleHire/backend/db/department"
	"github.com/chaitin/WhaleHire/backend/db/jobeducationrequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobexperiencerequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobindustryrequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/jobresponsibility"
	"github.com/chaitin/WhaleHire/backend/db/jobskill"
	"github.com/chaitin/WhaleHire/backend/db/jobskillmeta"
	"github.com/chaitin/WhaleHire/backend/db/message"
	"github.com/chaitin/WhaleHire/backend/db/notificationevent"
	"github.com/chaitin/WhaleHire/backend/db/notificationsetting"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumedocumentparse"
	"github.com/chaitin/WhaleHire/backend/db/resumeeducation"
	"github.com/chaitin/WhaleHire/backend/db/resumeexperience"
	"github.com/chaitin/WhaleHire/backend/db/resumejobapplication"
	"github.com/chaitin/WhaleHire/backend/db/resumelog"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxcursor"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxsetting"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxstatistic"
	"github.com/chaitin/WhaleHire/backend/db/resumeproject"
	"github.com/chaitin/WhaleHire/backend/db/resumeskill"
	"github.com/chaitin/WhaleHire/backend/db/role"
	"github.com/chaitin/WhaleHire/backend/db/screeningnoderun"
	"github.com/chaitin/WhaleHire/backend/db/screeningresult"
	"github.com/chaitin/WhaleHire/backend/db/screeningrunmetric"
	"github.com/chaitin/WhaleHire/backend/db/screeningtask"
	"github.com/chaitin/WhaleHire/backend/db/screeningtaskresume"
	"github.com/chaitin/WhaleHire/backend/db/setting"
	"github.com/chaitin/WhaleHire/backend/db/universityprofile"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/chaitin/WhaleHire/backend/db/useridentity"
	"github.com/chaitin/WhaleHire/backend/db/userloginhistory"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Admin is the client for interacting with the Admin builders.
	Admin *AdminClient
	// AdminLoginHistory is the client for interacting with the AdminLoginHistory builders.
	AdminLoginHistory *AdminLoginHistoryClient
	// AdminRole is the client for interacting with the AdminRole builders.
	AdminRole *AdminRoleClient
	// Attachment is the client for interacting with the Attachment builders.
	Attachment *AttachmentClient
	// AuditLog is the client for interacting with the AuditLog builders.
	AuditLog *AuditLogClient
	// Conversation is the client for interacting with the Conversation builders.
	Conversation *ConversationClient
	// Department is the client for interacting with the Department builders.
	Department *DepartmentClient
	// JobEducationRequirement is the client for interacting with the JobEducationRequirement builders.
	JobEducationRequirement *JobEducationRequirementClient
	// JobExperienceRequirement is the client for interacting with the JobExperienceRequirement builders.
	JobExperienceRequirement *JobExperienceRequirementClient
	// JobIndustryRequirement is the client for interacting with the JobIndustryRequirement builders.
	JobIndustryRequirement *JobIndustryRequirementClient
	// JobPosition is the client for interacting with the JobPosition builders.
	JobPosition *JobPositionClient
	// JobResponsibility is the client for interacting with the JobResponsibility builders.
	JobResponsibility *JobResponsibilityClient
	// JobSkill is the client for interacting with the JobSkill builders.
	JobSkill *JobSkillClient
	// JobSkillMeta is the client for interacting with the JobSkillMeta builders.
	JobSkillMeta *JobSkillMetaClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// NotificationEvent is the client for interacting with the NotificationEvent builders.
	NotificationEvent *NotificationEventClient
	// NotificationSetting is the client for interacting with the NotificationSetting builders.
	NotificationSetting *NotificationSettingClient
	// Resume is the client for interacting with the Resume builders.
	Resume *ResumeClient
	// ResumeDocumentParse is the client for interacting with the ResumeDocumentParse builders.
	ResumeDocumentParse *ResumeDocumentParseClient
	// ResumeEducation is the client for interacting with the ResumeEducation builders.
	ResumeEducation *ResumeEducationClient
	// ResumeExperience is the client for interacting with the ResumeExperience builders.
	ResumeExperience *ResumeExperienceClient
	// ResumeJobApplication is the client for interacting with the ResumeJobApplication builders.
	ResumeJobApplication *ResumeJobApplicationClient
	// ResumeLog is the client for interacting with the ResumeLog builders.
	ResumeLog *ResumeLogClient
	// ResumeMailboxCursor is the client for interacting with the ResumeMailboxCursor builders.
	ResumeMailboxCursor *ResumeMailboxCursorClient
	// ResumeMailboxSetting is the client for interacting with the ResumeMailboxSetting builders.
	ResumeMailboxSetting *ResumeMailboxSettingClient
	// ResumeMailboxStatistic is the client for interacting with the ResumeMailboxStatistic builders.
	ResumeMailboxStatistic *ResumeMailboxStatisticClient
	// ResumeProject is the client for interacting with the ResumeProject builders.
	ResumeProject *ResumeProjectClient
	// ResumeSkill is the client for interacting with the ResumeSkill builders.
	ResumeSkill *ResumeSkillClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// ScreeningNodeRun is the client for interacting with the ScreeningNodeRun builders.
	ScreeningNodeRun *ScreeningNodeRunClient
	// ScreeningResult is the client for interacting with the ScreeningResult builders.
	ScreeningResult *ScreeningResultClient
	// ScreeningRunMetric is the client for interacting with the ScreeningRunMetric builders.
	ScreeningRunMetric *ScreeningRunMetricClient
	// ScreeningTask is the client for interacting with the ScreeningTask builders.
	ScreeningTask *ScreeningTaskClient
	// ScreeningTaskResume is the client for interacting with the ScreeningTaskResume builders.
	ScreeningTaskResume *ScreeningTaskResumeClient
	// Setting is the client for interacting with the Setting builders.
	Setting *SettingClient
	// UniversityProfile is the client for interacting with the UniversityProfile builders.
	UniversityProfile *UniversityProfileClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserIdentity is the client for interacting with the UserIdentity builders.
	UserIdentity *UserIdentityClient
	// UserLoginHistory is the client for interacting with the UserLoginHistory builders.
	UserLoginHistory *UserLoginHistoryClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Admin = NewAdminClient(c.config)
	c.AdminLoginHistory = NewAdminLoginHistoryClient(c.config)
	c.AdminRole = NewAdminRoleClient(c.config)
	c.Attachment = NewAttachmentClient(c.config)
	c.AuditLog = NewAuditLogClient(c.config)
	c.Conversation = NewConversationClient(c.config)
	c.Department = NewDepartmentClient(c.config)
	c.JobEducationRequirement = NewJobEducationRequirementClient(c.config)
	c.JobExperienceRequirement = NewJobExperienceRequirementClient(c.config)
	c.JobIndustryRequirement = NewJobIndustryRequirementClient(c.config)
	c.JobPosition = NewJobPositionClient(c.config)
	c.JobResponsibility = NewJobResponsibilityClient(c.config)
	c.JobSkill = NewJobSkillClient(c.config)
	c.JobSkillMeta = NewJobSkillMetaClient(c.config)
	c.Message = NewMessageClient(c.config)
	c.NotificationEvent = NewNotificationEventClient(c.config)
	c.NotificationSetting = NewNotificationSettingClient(c.config)
	c.Resume = NewResumeClient(c.config)
	c.ResumeDocumentParse = NewResumeDocumentParseClient(c.config)
	c.ResumeEducation = NewResumeEducationClient(c.config)
	c.ResumeExperience = NewResumeExperienceClient(c.config)
	c.ResumeJobApplication = NewResumeJobApplicationClient(c.config)
	c.ResumeLog = NewResumeLogClient(c.config)
	c.ResumeMailboxCursor = NewResumeMailboxCursorClient(c.config)
	c.ResumeMailboxSetting = NewResumeMailboxSettingClient(c.config)
	c.ResumeMailboxStatistic = NewResumeMailboxStatisticClient(c.config)
	c.ResumeProject = NewResumeProjectClient(c.config)
	c.ResumeSkill = NewResumeSkillClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.ScreeningNodeRun = NewScreeningNodeRunClient(c.config)
	c.ScreeningResult = NewScreeningResultClient(c.config)
	c.ScreeningRunMetric = NewScreeningRunMetricClient(c.config)
	c.ScreeningTask = NewScreeningTaskClient(c.config)
	c.ScreeningTaskResume = NewScreeningTaskResumeClient(c.config)
	c.Setting = NewSettingClient(c.config)
	c.UniversityProfile = NewUniversityProfileClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserIdentity = NewUserIdentityClient(c.config)
	c.UserLoginHistory = NewUserLoginHistoryClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("db: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("db: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                      ctx,
		config:                   cfg,
		Admin:                    NewAdminClient(cfg),
		AdminLoginHistory:        NewAdminLoginHistoryClient(cfg),
		AdminRole:                NewAdminRoleClient(cfg),
		Attachment:               NewAttachmentClient(cfg),
		AuditLog:                 NewAuditLogClient(cfg),
		Conversation:             NewConversationClient(cfg),
		Department:               NewDepartmentClient(cfg),
		JobEducationRequirement:  NewJobEducationRequirementClient(cfg),
		JobExperienceRequirement: NewJobExperienceRequirementClient(cfg),
		JobIndustryRequirement:   NewJobIndustryRequirementClient(cfg),
		JobPosition:              NewJobPositionClient(cfg),
		JobResponsibility:        NewJobResponsibilityClient(cfg),
		JobSkill:                 NewJobSkillClient(cfg),
		JobSkillMeta:             NewJobSkillMetaClient(cfg),
		Message:                  NewMessageClient(cfg),
		NotificationEvent:        NewNotificationEventClient(cfg),
		NotificationSetting:      NewNotificationSettingClient(cfg),
		Resume:                   NewResumeClient(cfg),
		ResumeDocumentParse:      NewResumeDocumentParseClient(cfg),
		ResumeEducation:          NewResumeEducationClient(cfg),
		ResumeExperience:         NewResumeExperienceClient(cfg),
		ResumeJobApplication:     NewResumeJobApplicationClient(cfg),
		ResumeLog:                NewResumeLogClient(cfg),
		ResumeMailboxCursor:      NewResumeMailboxCursorClient(cfg),
		ResumeMailboxSetting:     NewResumeMailboxSettingClient(cfg),
		ResumeMailboxStatistic:   NewResumeMailboxStatisticClient(cfg),
		ResumeProject:            NewResumeProjectClient(cfg),
		ResumeSkill:              NewResumeSkillClient(cfg),
		Role:                     NewRoleClient(cfg),
		ScreeningNodeRun:         NewScreeningNodeRunClient(cfg),
		ScreeningResult:          NewScreeningResultClient(cfg),
		ScreeningRunMetric:       NewScreeningRunMetricClient(cfg),
		ScreeningTask:            NewScreeningTaskClient(cfg),
		ScreeningTaskResume:      NewScreeningTaskResumeClient(cfg),
		Setting:                  NewSettingClient(cfg),
		UniversityProfile:        NewUniversityProfileClient(cfg),
		User:                     NewUserClient(cfg),
		UserIdentity:             NewUserIdentityClient(cfg),
		UserLoginHistory:         NewUserLoginHistoryClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                      ctx,
		config:                   cfg,
		Admin:                    NewAdminClient(cfg),
		AdminLoginHistory:        NewAdminLoginHistoryClient(cfg),
		AdminRole:                NewAdminRoleClient(cfg),
		Attachment:               NewAttachmentClient(cfg),
		AuditLog:                 NewAuditLogClient(cfg),
		Conversation:             NewConversationClient(cfg),
		Department:               NewDepartmentClient(cfg),
		JobEducationRequirement:  NewJobEducationRequirementClient(cfg),
		JobExperienceRequirement: NewJobExperienceRequirementClient(cfg),
		JobIndustryRequirement:   NewJobIndustryRequirementClient(cfg),
		JobPosition:              NewJobPositionClient(cfg),
		JobResponsibility:        NewJobResponsibilityClient(cfg),
		JobSkill:                 NewJobSkillClient(cfg),
		JobSkillMeta:             NewJobSkillMetaClient(cfg),
		Message:                  NewMessageClient(cfg),
		NotificationEvent:        NewNotificationEventClient(cfg),
		NotificationSetting:      NewNotificationSettingClient(cfg),
		Resume:                   NewResumeClient(cfg),
		ResumeDocumentParse:      NewResumeDocumentParseClient(cfg),
		ResumeEducation:          NewResumeEducationClient(cfg),
		ResumeExperience:         NewResumeExperienceClient(cfg),
		ResumeJobApplication:     NewResumeJobApplicationClient(cfg),
		ResumeLog:                NewResumeLogClient(cfg),
		ResumeMailboxCursor:      NewResumeMailboxCursorClient(cfg),
		ResumeMailboxSetting:     NewResumeMailboxSettingClient(cfg),
		ResumeMailboxStatistic:   NewResumeMailboxStatisticClient(cfg),
		ResumeProject:            NewResumeProjectClient(cfg),
		ResumeSkill:              NewResumeSkillClient(cfg),
		Role:                     NewRoleClient(cfg),
		ScreeningNodeRun:         NewScreeningNodeRunClient(cfg),
		ScreeningResult:          NewScreeningResultClient(cfg),
		ScreeningRunMetric:       NewScreeningRunMetricClient(cfg),
		ScreeningTask:            NewScreeningTaskClient(cfg),
		ScreeningTaskResume:      NewScreeningTaskResumeClient(cfg),
		Setting:                  NewSettingClient(cfg),
		UniversityProfile:        NewUniversityProfileClient(cfg),
		User:                     NewUserClient(cfg),
		UserIdentity:             NewUserIdentityClient(cfg),
		UserLoginHistory:         NewUserLoginHistoryClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Admin.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Admin, c.AdminLoginHistory, c.AdminRole, c.Attachment, c.AuditLog,
		c.Conversation, c.Department, c.JobEducationRequirement,
		c.JobExperienceRequirement, c.JobIndustryRequirement, c.JobPosition,
		c.JobResponsibility, c.JobSkill, c.JobSkillMeta, c.Message,
		c.NotificationEvent, c.NotificationSetting, c.Resume, c.ResumeDocumentParse,
		c.ResumeEducation, c.ResumeExperience, c.ResumeJobApplication, c.ResumeLog,
		c.ResumeMailboxCursor, c.ResumeMailboxSetting, c.ResumeMailboxStatistic,
		c.ResumeProject, c.ResumeSkill, c.Role, c.ScreeningNodeRun, c.ScreeningResult,
		c.ScreeningRunMetric, c.ScreeningTask, c.ScreeningTaskResume, c.Setting,
		c.UniversityProfile, c.User, c.UserIdentity, c.UserLoginHistory,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Admin, c.AdminLoginHistory, c.AdminRole, c.Attachment, c.AuditLog,
		c.Conversation, c.Department, c.JobEducationRequirement,
		c.JobExperienceRequirement, c.JobIndustryRequirement, c.JobPosition,
		c.JobResponsibility, c.JobSkill, c.JobSkillMeta, c.Message,
		c.NotificationEvent, c.NotificationSetting, c.Resume, c.ResumeDocumentParse,
		c.ResumeEducation, c.ResumeExperience, c.ResumeJobApplication, c.ResumeLog,
		c.ResumeMailboxCursor, c.ResumeMailboxSetting, c.ResumeMailboxStatistic,
		c.ResumeProject, c.ResumeSkill, c.Role, c.ScreeningNodeRun, c.ScreeningResult,
		c.ScreeningRunMetric, c.ScreeningTask, c.ScreeningTaskResume, c.Setting,
		c.UniversityProfile, c.User, c.UserIdentity, c.UserLoginHistory,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AdminMutation:
		return c.Admin.mutate(ctx, m)
	case *AdminLoginHistoryMutation:
		return c.AdminLoginHistory.mutate(ctx, m)
	case *AdminRoleMutation:
		return c.AdminRole.mutate(ctx, m)
	case *AttachmentMutation:
		return c.Attachment.mutate(ctx, m)
	case *AuditLogMutation:
		return c.AuditLog.mutate(ctx, m)
	case *ConversationMutation:
		return c.Conversation.mutate(ctx, m)
	case *DepartmentMutation:
		return c.Department.mutate(ctx, m)
	case *JobEducationRequirementMutation:
		return c.JobEducationRequirement.mutate(ctx, m)
	case *JobExperienceRequirementMutation:
		return c.JobExperienceRequirement.mutate(ctx, m)
	case *JobIndustryRequirementMutation:
		return c.JobIndustryRequirement.mutate(ctx, m)
	case *JobPositionMutation:
		return c.JobPosition.mutate(ctx, m)
	case *JobResponsibilityMutation:
		return c.JobResponsibility.mutate(ctx, m)
	case *JobSkillMutation:
		return c.JobSkill.mutate(ctx, m)
	case *JobSkillMetaMutation:
		return c.JobSkillMeta.mutate(ctx, m)
	case *MessageMutation:
		return c.Message.mutate(ctx, m)
	case *NotificationEventMutation:
		return c.NotificationEvent.mutate(ctx, m)
	case *NotificationSettingMutation:
		return c.NotificationSetting.mutate(ctx, m)
	case *ResumeMutation:
		return c.Resume.mutate(ctx, m)
	case *ResumeDocumentParseMutation:
		return c.ResumeDocumentParse.mutate(ctx, m)
	case *ResumeEducationMutation:
		return c.ResumeEducation.mutate(ctx, m)
	case *ResumeExperienceMutation:
		return c.ResumeExperience.mutate(ctx, m)
	case *ResumeJobApplicationMutation:
		return c.ResumeJobApplication.mutate(ctx, m)
	case *ResumeLogMutation:
		return c.ResumeLog.mutate(ctx, m)
	case *ResumeMailboxCursorMutation:
		return c.ResumeMailboxCursor.mutate(ctx, m)
	case *ResumeMailboxSettingMutation:
		return c.ResumeMailboxSetting.mutate(ctx, m)
	case *ResumeMailboxStatisticMutation:
		return c.ResumeMailboxStatistic.mutate(ctx, m)
	case *ResumeProjectMutation:
		return c.ResumeProject.mutate(ctx, m)
	case *ResumeSkillMutation:
		return c.ResumeSkill.mutate(ctx, m)
	case *RoleMutation:
		return c.Role.mutate(ctx, m)
	case *ScreeningNodeRunMutation:
		return c.ScreeningNodeRun.mutate(ctx, m)
	case *ScreeningResultMutation:
		return c.ScreeningResult.mutate(ctx, m)
	case *ScreeningRunMetricMutation:
		return c.ScreeningRunMetric.mutate(ctx, m)
	case *ScreeningTaskMutation:
		return c.ScreeningTask.mutate(ctx, m)
	case *ScreeningTaskResumeMutation:
		return c.ScreeningTaskResume.mutate(ctx, m)
	case *SettingMutation:
		return c.Setting.mutate(ctx, m)
	case *UniversityProfileMutation:
		return c.UniversityProfile.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserIdentityMutation:
		return c.UserIdentity.mutate(ctx, m)
	case *UserLoginHistoryMutation:
		return c.UserLoginHistory.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("db: unknown mutation type %T", m)
	}
}

// AdminClient is a client for the Admin schema.
type AdminClient struct {
	config
}

// NewAdminClient returns a client for the Admin from the given config.
func NewAdminClient(c config) *AdminClient {
	return &AdminClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `admin.Hooks(f(g(h())))`.
func (c *AdminClient) Use(hooks ...Hook) {
	c.hooks.Admin = append(c.hooks.Admin, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `admin.Intercept(f(g(h())))`.
func (c *AdminClient) Intercept(interceptors ...Interceptor) {
	c.inters.Admin = append(c.inters.Admin, interceptors...)
}

// Create returns a builder for creating a Admin entity.
func (c *AdminClient) Create() *AdminCreate {
	mutation := newAdminMutation(c.config, OpCreate)
	return &AdminCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Admin entities.
func (c *AdminClient) CreateBulk(builders ...*AdminCreate) *AdminCreateBulk {
	return &AdminCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AdminClient) MapCreateBulk(slice any, setFunc func(*AdminCreate, int)) *AdminCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AdminCreateBulk{err: fmt.Errorf("calling to AdminClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AdminCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AdminCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Admin.
func (c *AdminClient) Update() *AdminUpdate {
	mutation := newAdminMutation(c.config, OpUpdate)
	return &AdminUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminClient) UpdateOne(a *Admin) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdmin(a))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminClient) UpdateOneID(id uuid.UUID) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdminID(id))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Admin.
func (c *AdminClient) Delete() *AdminDelete {
	mutation := newAdminMutation(c.config, OpDelete)
	return &AdminDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminClient) DeleteOne(a *Admin) *AdminDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminClient) DeleteOneID(id uuid.UUID) *AdminDeleteOne {
	builder := c.Delete().Where(admin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminDeleteOne{builder}
}

// Query returns a query builder for Admin.
func (c *AdminClient) Query() *AdminQuery {
	return &AdminQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdmin},
		inters: c.Interceptors(),
	}
}

// Get returns a Admin entity by its id.
func (c *AdminClient) Get(ctx context.Context, id uuid.UUID) (*Admin, error) {
	return c.Query().Where(admin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminClient) GetX(ctx context.Context, id uuid.UUID) *Admin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLoginHistories queries the login_histories edge of a Admin.
func (c *AdminClient) QueryLoginHistories(a *Admin) *AdminLoginHistoryQuery {
	query := (&AdminLoginHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(adminloginhistory.Table, adminloginhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.LoginHistoriesTable, admin.LoginHistoriesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoles queries the roles edge of a Admin.
func (c *AdminClient) QueryRoles(a *Admin) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, admin.RolesTable, admin.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdminRoles queries the admin_roles edge of a Admin.
func (c *AdminClient) QueryAdminRoles(a *Admin) *AdminRoleQuery {
	query := (&AdminRoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(adminrole.Table, adminrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, admin.AdminRolesTable, admin.AdminRolesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminClient) Hooks() []Hook {
	return c.hooks.Admin
}

// Interceptors returns the client interceptors.
func (c *AdminClient) Interceptors() []Interceptor {
	return c.inters.Admin
}

func (c *AdminClient) mutate(ctx context.Context, m *AdminMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Admin mutation op: %q", m.Op())
	}
}

// AdminLoginHistoryClient is a client for the AdminLoginHistory schema.
type AdminLoginHistoryClient struct {
	config
}

// NewAdminLoginHistoryClient returns a client for the AdminLoginHistory from the given config.
func NewAdminLoginHistoryClient(c config) *AdminLoginHistoryClient {
	return &AdminLoginHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminloginhistory.Hooks(f(g(h())))`.
func (c *AdminLoginHistoryClient) Use(hooks ...Hook) {
	c.hooks.AdminLoginHistory = append(c.hooks.AdminLoginHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adminloginhistory.Intercept(f(g(h())))`.
func (c *AdminLoginHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdminLoginHistory = append(c.inters.AdminLoginHistory, interceptors...)
}

// Create returns a builder for creating a AdminLoginHistory entity.
func (c *AdminLoginHistoryClient) Create() *AdminLoginHistoryCreate {
	mutation := newAdminLoginHistoryMutation(c.config, OpCreate)
	return &AdminLoginHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminLoginHistory entities.
func (c *AdminLoginHistoryClient) CreateBulk(builders ...*AdminLoginHistoryCreate) *AdminLoginHistoryCreateBulk {
	return &AdminLoginHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AdminLoginHistoryClient) MapCreateBulk(slice any, setFunc func(*AdminLoginHistoryCreate, int)) *AdminLoginHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AdminLoginHistoryCreateBulk{err: fmt.Errorf("calling to AdminLoginHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AdminLoginHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AdminLoginHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminLoginHistory.
func (c *AdminLoginHistoryClient) Update() *AdminLoginHistoryUpdate {
	mutation := newAdminLoginHistoryMutation(c.config, OpUpdate)
	return &AdminLoginHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminLoginHistoryClient) UpdateOne(alh *AdminLoginHistory) *AdminLoginHistoryUpdateOne {
	mutation := newAdminLoginHistoryMutation(c.config, OpUpdateOne, withAdminLoginHistory(alh))
	return &AdminLoginHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminLoginHistoryClient) UpdateOneID(id uuid.UUID) *AdminLoginHistoryUpdateOne {
	mutation := newAdminLoginHistoryMutation(c.config, OpUpdateOne, withAdminLoginHistoryID(id))
	return &AdminLoginHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminLoginHistory.
func (c *AdminLoginHistoryClient) Delete() *AdminLoginHistoryDelete {
	mutation := newAdminLoginHistoryMutation(c.config, OpDelete)
	return &AdminLoginHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminLoginHistoryClient) DeleteOne(alh *AdminLoginHistory) *AdminLoginHistoryDeleteOne {
	return c.DeleteOneID(alh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminLoginHistoryClient) DeleteOneID(id uuid.UUID) *AdminLoginHistoryDeleteOne {
	builder := c.Delete().Where(adminloginhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminLoginHistoryDeleteOne{builder}
}

// Query returns a query builder for AdminLoginHistory.
func (c *AdminLoginHistoryClient) Query() *AdminLoginHistoryQuery {
	return &AdminLoginHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdminLoginHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a AdminLoginHistory entity by its id.
func (c *AdminLoginHistoryClient) Get(ctx context.Context, id uuid.UUID) (*AdminLoginHistory, error) {
	return c.Query().Where(adminloginhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminLoginHistoryClient) GetX(ctx context.Context, id uuid.UUID) *AdminLoginHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a AdminLoginHistory.
func (c *AdminLoginHistoryClient) QueryOwner(alh *AdminLoginHistory) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := alh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminloginhistory.Table, adminloginhistory.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminloginhistory.OwnerTable, adminloginhistory.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(alh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminLoginHistoryClient) Hooks() []Hook {
	return c.hooks.AdminLoginHistory
}

// Interceptors returns the client interceptors.
func (c *AdminLoginHistoryClient) Interceptors() []Interceptor {
	return c.inters.AdminLoginHistory
}

func (c *AdminLoginHistoryClient) mutate(ctx context.Context, m *AdminLoginHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminLoginHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminLoginHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminLoginHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminLoginHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown AdminLoginHistory mutation op: %q", m.Op())
	}
}

// AdminRoleClient is a client for the AdminRole schema.
type AdminRoleClient struct {
	config
}

// NewAdminRoleClient returns a client for the AdminRole from the given config.
func NewAdminRoleClient(c config) *AdminRoleClient {
	return &AdminRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminrole.Hooks(f(g(h())))`.
func (c *AdminRoleClient) Use(hooks ...Hook) {
	c.hooks.AdminRole = append(c.hooks.AdminRole, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adminrole.Intercept(f(g(h())))`.
func (c *AdminRoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdminRole = append(c.inters.AdminRole, interceptors...)
}

// Create returns a builder for creating a AdminRole entity.
func (c *AdminRoleClient) Create() *AdminRoleCreate {
	mutation := newAdminRoleMutation(c.config, OpCreate)
	return &AdminRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminRole entities.
func (c *AdminRoleClient) CreateBulk(builders ...*AdminRoleCreate) *AdminRoleCreateBulk {
	return &AdminRoleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AdminRoleClient) MapCreateBulk(slice any, setFunc func(*AdminRoleCreate, int)) *AdminRoleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AdminRoleCreateBulk{err: fmt.Errorf("calling to AdminRoleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AdminRoleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AdminRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminRole.
func (c *AdminRoleClient) Update() *AdminRoleUpdate {
	mutation := newAdminRoleMutation(c.config, OpUpdate)
	return &AdminRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminRoleClient) UpdateOne(ar *AdminRole) *AdminRoleUpdateOne {
	mutation := newAdminRoleMutation(c.config, OpUpdateOne, withAdminRole(ar))
	return &AdminRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminRoleClient) UpdateOneID(id uuid.UUID) *AdminRoleUpdateOne {
	mutation := newAdminRoleMutation(c.config, OpUpdateOne, withAdminRoleID(id))
	return &AdminRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminRole.
func (c *AdminRoleClient) Delete() *AdminRoleDelete {
	mutation := newAdminRoleMutation(c.config, OpDelete)
	return &AdminRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminRoleClient) DeleteOne(ar *AdminRole) *AdminRoleDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminRoleClient) DeleteOneID(id uuid.UUID) *AdminRoleDeleteOne {
	builder := c.Delete().Where(adminrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminRoleDeleteOne{builder}
}

// Query returns a query builder for AdminRole.
func (c *AdminRoleClient) Query() *AdminRoleQuery {
	return &AdminRoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdminRole},
		inters: c.Interceptors(),
	}
}

// Get returns a AdminRole entity by its id.
func (c *AdminRoleClient) Get(ctx context.Context, id uuid.UUID) (*AdminRole, error) {
	return c.Query().Where(adminrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminRoleClient) GetX(ctx context.Context, id uuid.UUID) *AdminRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAdmin queries the admin edge of a AdminRole.
func (c *AdminRoleClient) QueryAdmin(ar *AdminRole) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminrole.Table, adminrole.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, adminrole.AdminTable, adminrole.AdminColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRole queries the role edge of a AdminRole.
func (c *AdminRoleClient) QueryRole(ar *AdminRole) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminrole.Table, adminrole.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, adminrole.RoleTable, adminrole.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminRoleClient) Hooks() []Hook {
	return c.hooks.AdminRole
}

// Interceptors returns the client interceptors.
func (c *AdminRoleClient) Interceptors() []Interceptor {
	return c.inters.AdminRole
}

func (c *AdminRoleClient) mutate(ctx context.Context, m *AdminRoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminRoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminRoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown AdminRole mutation op: %q", m.Op())
	}
}

// AttachmentClient is a client for the Attachment schema.
type AttachmentClient struct {
	config
}

// NewAttachmentClient returns a client for the Attachment from the given config.
func NewAttachmentClient(c config) *AttachmentClient {
	return &AttachmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attachment.Hooks(f(g(h())))`.
func (c *AttachmentClient) Use(hooks ...Hook) {
	c.hooks.Attachment = append(c.hooks.Attachment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `attachment.Intercept(f(g(h())))`.
func (c *AttachmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Attachment = append(c.inters.Attachment, interceptors...)
}

// Create returns a builder for creating a Attachment entity.
func (c *AttachmentClient) Create() *AttachmentCreate {
	mutation := newAttachmentMutation(c.config, OpCreate)
	return &AttachmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Attachment entities.
func (c *AttachmentClient) CreateBulk(builders ...*AttachmentCreate) *AttachmentCreateBulk {
	return &AttachmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AttachmentClient) MapCreateBulk(slice any, setFunc func(*AttachmentCreate, int)) *AttachmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AttachmentCreateBulk{err: fmt.Errorf("calling to AttachmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AttachmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AttachmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Attachment.
func (c *AttachmentClient) Update() *AttachmentUpdate {
	mutation := newAttachmentMutation(c.config, OpUpdate)
	return &AttachmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttachmentClient) UpdateOne(a *Attachment) *AttachmentUpdateOne {
	mutation := newAttachmentMutation(c.config, OpUpdateOne, withAttachment(a))
	return &AttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttachmentClient) UpdateOneID(id uuid.UUID) *AttachmentUpdateOne {
	mutation := newAttachmentMutation(c.config, OpUpdateOne, withAttachmentID(id))
	return &AttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Attachment.
func (c *AttachmentClient) Delete() *AttachmentDelete {
	mutation := newAttachmentMutation(c.config, OpDelete)
	return &AttachmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttachmentClient) DeleteOne(a *Attachment) *AttachmentDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttachmentClient) DeleteOneID(id uuid.UUID) *AttachmentDeleteOne {
	builder := c.Delete().Where(attachment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttachmentDeleteOne{builder}
}

// Query returns a query builder for Attachment.
func (c *AttachmentClient) Query() *AttachmentQuery {
	return &AttachmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAttachment},
		inters: c.Interceptors(),
	}
}

// Get returns a Attachment entity by its id.
func (c *AttachmentClient) Get(ctx context.Context, id uuid.UUID) (*Attachment, error) {
	return c.Query().Where(attachment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttachmentClient) GetX(ctx context.Context, id uuid.UUID) *Attachment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMessage queries the message edge of a Attachment.
func (c *AttachmentClient) QueryMessage(a *Attachment) *MessageQuery {
	query := (&MessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attachment.MessageTable, attachment.MessageColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AttachmentClient) Hooks() []Hook {
	hooks := c.hooks.Attachment
	return append(hooks[:len(hooks):len(hooks)], attachment.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AttachmentClient) Interceptors() []Interceptor {
	inters := c.inters.Attachment
	return append(inters[:len(inters):len(inters)], attachment.Interceptors[:]...)
}

func (c *AttachmentClient) mutate(ctx context.Context, m *AttachmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AttachmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AttachmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AttachmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Attachment mutation op: %q", m.Op())
	}
}

// AuditLogClient is a client for the AuditLog schema.
type AuditLogClient struct {
	config
}

// NewAuditLogClient returns a client for the AuditLog from the given config.
func NewAuditLogClient(c config) *AuditLogClient {
	return &AuditLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `auditlog.Hooks(f(g(h())))`.
func (c *AuditLogClient) Use(hooks ...Hook) {
	c.hooks.AuditLog = append(c.hooks.AuditLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `auditlog.Intercept(f(g(h())))`.
func (c *AuditLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.AuditLog = append(c.inters.AuditLog, interceptors...)
}

// Create returns a builder for creating a AuditLog entity.
func (c *AuditLogClient) Create() *AuditLogCreate {
	mutation := newAuditLogMutation(c.config, OpCreate)
	return &AuditLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuditLog entities.
func (c *AuditLogClient) CreateBulk(builders ...*AuditLogCreate) *AuditLogCreateBulk {
	return &AuditLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuditLogClient) MapCreateBulk(slice any, setFunc func(*AuditLogCreate, int)) *AuditLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuditLogCreateBulk{err: fmt.Errorf("calling to AuditLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuditLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuditLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuditLog.
func (c *AuditLogClient) Update() *AuditLogUpdate {
	mutation := newAuditLogMutation(c.config, OpUpdate)
	return &AuditLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuditLogClient) UpdateOne(al *AuditLog) *AuditLogUpdateOne {
	mutation := newAuditLogMutation(c.config, OpUpdateOne, withAuditLog(al))
	return &AuditLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuditLogClient) UpdateOneID(id uuid.UUID) *AuditLogUpdateOne {
	mutation := newAuditLogMutation(c.config, OpUpdateOne, withAuditLogID(id))
	return &AuditLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuditLog.
func (c *AuditLogClient) Delete() *AuditLogDelete {
	mutation := newAuditLogMutation(c.config, OpDelete)
	return &AuditLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuditLogClient) DeleteOne(al *AuditLog) *AuditLogDeleteOne {
	return c.DeleteOneID(al.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuditLogClient) DeleteOneID(id uuid.UUID) *AuditLogDeleteOne {
	builder := c.Delete().Where(auditlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuditLogDeleteOne{builder}
}

// Query returns a query builder for AuditLog.
func (c *AuditLogClient) Query() *AuditLogQuery {
	return &AuditLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuditLog},
		inters: c.Interceptors(),
	}
}

// Get returns a AuditLog entity by its id.
func (c *AuditLogClient) Get(ctx context.Context, id uuid.UUID) (*AuditLog, error) {
	return c.Query().Where(auditlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuditLogClient) GetX(ctx context.Context, id uuid.UUID) *AuditLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuditLogClient) Hooks() []Hook {
	hooks := c.hooks.AuditLog
	return append(hooks[:len(hooks):len(hooks)], auditlog.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AuditLogClient) Interceptors() []Interceptor {
	inters := c.inters.AuditLog
	return append(inters[:len(inters):len(inters)], auditlog.Interceptors[:]...)
}

func (c *AuditLogClient) mutate(ctx context.Context, m *AuditLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuditLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuditLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuditLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuditLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown AuditLog mutation op: %q", m.Op())
	}
}

// ConversationClient is a client for the Conversation schema.
type ConversationClient struct {
	config
}

// NewConversationClient returns a client for the Conversation from the given config.
func NewConversationClient(c config) *ConversationClient {
	return &ConversationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `conversation.Hooks(f(g(h())))`.
func (c *ConversationClient) Use(hooks ...Hook) {
	c.hooks.Conversation = append(c.hooks.Conversation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `conversation.Intercept(f(g(h())))`.
func (c *ConversationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Conversation = append(c.inters.Conversation, interceptors...)
}

// Create returns a builder for creating a Conversation entity.
func (c *ConversationClient) Create() *ConversationCreate {
	mutation := newConversationMutation(c.config, OpCreate)
	return &ConversationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Conversation entities.
func (c *ConversationClient) CreateBulk(builders ...*ConversationCreate) *ConversationCreateBulk {
	return &ConversationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConversationClient) MapCreateBulk(slice any, setFunc func(*ConversationCreate, int)) *ConversationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConversationCreateBulk{err: fmt.Errorf("calling to ConversationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConversationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConversationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Conversation.
func (c *ConversationClient) Update() *ConversationUpdate {
	mutation := newConversationMutation(c.config, OpUpdate)
	return &ConversationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConversationClient) UpdateOne(co *Conversation) *ConversationUpdateOne {
	mutation := newConversationMutation(c.config, OpUpdateOne, withConversation(co))
	return &ConversationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConversationClient) UpdateOneID(id uuid.UUID) *ConversationUpdateOne {
	mutation := newConversationMutation(c.config, OpUpdateOne, withConversationID(id))
	return &ConversationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Conversation.
func (c *ConversationClient) Delete() *ConversationDelete {
	mutation := newConversationMutation(c.config, OpDelete)
	return &ConversationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConversationClient) DeleteOne(co *Conversation) *ConversationDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConversationClient) DeleteOneID(id uuid.UUID) *ConversationDeleteOne {
	builder := c.Delete().Where(conversation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConversationDeleteOne{builder}
}

// Query returns a query builder for Conversation.
func (c *ConversationClient) Query() *ConversationQuery {
	return &ConversationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConversation},
		inters: c.Interceptors(),
	}
}

// Get returns a Conversation entity by its id.
func (c *ConversationClient) Get(ctx context.Context, id uuid.UUID) (*Conversation, error) {
	return c.Query().Where(conversation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConversationClient) GetX(ctx context.Context, id uuid.UUID) *Conversation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Conversation.
func (c *ConversationClient) QueryUser(co *Conversation) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(conversation.Table, conversation.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, conversation.UserTable, conversation.UserColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessages queries the messages edge of a Conversation.
func (c *ConversationClient) QueryMessages(co *Conversation) *MessageQuery {
	query := (&MessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(conversation.Table, conversation.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, conversation.MessagesTable, conversation.MessagesColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConversationClient) Hooks() []Hook {
	hooks := c.hooks.Conversation
	return append(hooks[:len(hooks):len(hooks)], conversation.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ConversationClient) Interceptors() []Interceptor {
	inters := c.inters.Conversation
	return append(inters[:len(inters):len(inters)], conversation.Interceptors[:]...)
}

func (c *ConversationClient) mutate(ctx context.Context, m *ConversationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConversationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConversationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConversationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConversationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Conversation mutation op: %q", m.Op())
	}
}

// DepartmentClient is a client for the Department schema.
type DepartmentClient struct {
	config
}

// NewDepartmentClient returns a client for the Department from the given config.
func NewDepartmentClient(c config) *DepartmentClient {
	return &DepartmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `department.Hooks(f(g(h())))`.
func (c *DepartmentClient) Use(hooks ...Hook) {
	c.hooks.Department = append(c.hooks.Department, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `department.Intercept(f(g(h())))`.
func (c *DepartmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Department = append(c.inters.Department, interceptors...)
}

// Create returns a builder for creating a Department entity.
func (c *DepartmentClient) Create() *DepartmentCreate {
	mutation := newDepartmentMutation(c.config, OpCreate)
	return &DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Department entities.
func (c *DepartmentClient) CreateBulk(builders ...*DepartmentCreate) *DepartmentCreateBulk {
	return &DepartmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DepartmentClient) MapCreateBulk(slice any, setFunc func(*DepartmentCreate, int)) *DepartmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DepartmentCreateBulk{err: fmt.Errorf("calling to DepartmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DepartmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DepartmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Department.
func (c *DepartmentClient) Update() *DepartmentUpdate {
	mutation := newDepartmentMutation(c.config, OpUpdate)
	return &DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepartmentClient) UpdateOne(d *Department) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartment(d))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepartmentClient) UpdateOneID(id uuid.UUID) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartmentID(id))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Department.
func (c *DepartmentClient) Delete() *DepartmentDelete {
	mutation := newDepartmentMutation(c.config, OpDelete)
	return &DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DepartmentClient) DeleteOne(d *Department) *DepartmentDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DepartmentClient) DeleteOneID(id uuid.UUID) *DepartmentDeleteOne {
	builder := c.Delete().Where(department.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepartmentDeleteOne{builder}
}

// Query returns a query builder for Department.
func (c *DepartmentClient) Query() *DepartmentQuery {
	return &DepartmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDepartment},
		inters: c.Interceptors(),
	}
}

// Get returns a Department entity by its id.
func (c *DepartmentClient) Get(ctx context.Context, id uuid.UUID) (*Department, error) {
	return c.Query().Where(department.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepartmentClient) GetX(ctx context.Context, id uuid.UUID) *Department {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPositions queries the positions edge of a Department.
func (c *DepartmentClient) QueryPositions(d *Department) *JobPositionQuery {
	query := (&JobPositionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(jobposition.Table, jobposition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, department.PositionsTable, department.PositionsColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DepartmentClient) Hooks() []Hook {
	hooks := c.hooks.Department
	return append(hooks[:len(hooks):len(hooks)], department.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DepartmentClient) Interceptors() []Interceptor {
	inters := c.inters.Department
	return append(inters[:len(inters):len(inters)], department.Interceptors[:]...)
}

func (c *DepartmentClient) mutate(ctx context.Context, m *DepartmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Department mutation op: %q", m.Op())
	}
}

// JobEducationRequirementClient is a client for the JobEducationRequirement schema.
type JobEducationRequirementClient struct {
	config
}

// NewJobEducationRequirementClient returns a client for the JobEducationRequirement from the given config.
func NewJobEducationRequirementClient(c config) *JobEducationRequirementClient {
	return &JobEducationRequirementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobeducationrequirement.Hooks(f(g(h())))`.
func (c *JobEducationRequirementClient) Use(hooks ...Hook) {
	c.hooks.JobEducationRequirement = append(c.hooks.JobEducationRequirement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobeducationrequirement.Intercept(f(g(h())))`.
func (c *JobEducationRequirementClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobEducationRequirement = append(c.inters.JobEducationRequirement, interceptors...)
}

// Create returns a builder for creating a JobEducationRequirement entity.
func (c *JobEducationRequirementClient) Create() *JobEducationRequirementCreate {
	mutation := newJobEducationRequirementMutation(c.config, OpCreate)
	return &JobEducationRequirementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobEducationRequirement entities.
func (c *JobEducationRequirementClient) CreateBulk(builders ...*JobEducationRequirementCreate) *JobEducationRequirementCreateBulk {
	return &JobEducationRequirementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobEducationRequirementClient) MapCreateBulk(slice any, setFunc func(*JobEducationRequirementCreate, int)) *JobEducationRequirementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobEducationRequirementCreateBulk{err: fmt.Errorf("calling to JobEducationRequirementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobEducationRequirementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobEducationRequirementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobEducationRequirement.
func (c *JobEducationRequirementClient) Update() *JobEducationRequirementUpdate {
	mutation := newJobEducationRequirementMutation(c.config, OpUpdate)
	return &JobEducationRequirementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobEducationRequirementClient) UpdateOne(jer *JobEducationRequirement) *JobEducationRequirementUpdateOne {
	mutation := newJobEducationRequirementMutation(c.config, OpUpdateOne, withJobEducationRequirement(jer))
	return &JobEducationRequirementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobEducationRequirementClient) UpdateOneID(id uuid.UUID) *JobEducationRequirementUpdateOne {
	mutation := newJobEducationRequirementMutation(c.config, OpUpdateOne, withJobEducationRequirementID(id))
	return &JobEducationRequirementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobEducationRequirement.
func (c *JobEducationRequirementClient) Delete() *JobEducationRequirementDelete {
	mutation := newJobEducationRequirementMutation(c.config, OpDelete)
	return &JobEducationRequirementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobEducationRequirementClient) DeleteOne(jer *JobEducationRequirement) *JobEducationRequirementDeleteOne {
	return c.DeleteOneID(jer.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobEducationRequirementClient) DeleteOneID(id uuid.UUID) *JobEducationRequirementDeleteOne {
	builder := c.Delete().Where(jobeducationrequirement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobEducationRequirementDeleteOne{builder}
}

// Query returns a query builder for JobEducationRequirement.
func (c *JobEducationRequirementClient) Query() *JobEducationRequirementQuery {
	return &JobEducationRequirementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobEducationRequirement},
		inters: c.Interceptors(),
	}
}

// Get returns a JobEducationRequirement entity by its id.
func (c *JobEducationRequirementClient) Get(ctx context.Context, id uuid.UUID) (*JobEducationRequirement, error) {
	return c.Query().Where(jobeducationrequirement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobEducationRequirementClient) GetX(ctx context.Context, id uuid.UUID) *JobEducationRequirement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJob queries the job edge of a JobEducationRequirement.
func (c *JobEducationRequirementClient) QueryJob(jer *JobEducationRequirement) *JobPositionQuery {
	query := (&JobPositionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jer.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobeducationrequirement.Table, jobeducationrequirement.FieldID, id),
			sqlgraph.To(jobposition.Table, jobposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobeducationrequirement.JobTable, jobeducationrequirement.JobColumn),
		)
		fromV = sqlgraph.Neighbors(jer.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobEducationRequirementClient) Hooks() []Hook {
	hooks := c.hooks.JobEducationRequirement
	return append(hooks[:len(hooks):len(hooks)], jobeducationrequirement.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *JobEducationRequirementClient) Interceptors() []Interceptor {
	inters := c.inters.JobEducationRequirement
	return append(inters[:len(inters):len(inters)], jobeducationrequirement.Interceptors[:]...)
}

func (c *JobEducationRequirementClient) mutate(ctx context.Context, m *JobEducationRequirementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobEducationRequirementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobEducationRequirementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobEducationRequirementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobEducationRequirementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown JobEducationRequirement mutation op: %q", m.Op())
	}
}

// JobExperienceRequirementClient is a client for the JobExperienceRequirement schema.
type JobExperienceRequirementClient struct {
	config
}

// NewJobExperienceRequirementClient returns a client for the JobExperienceRequirement from the given config.
func NewJobExperienceRequirementClient(c config) *JobExperienceRequirementClient {
	return &JobExperienceRequirementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobexperiencerequirement.Hooks(f(g(h())))`.
func (c *JobExperienceRequirementClient) Use(hooks ...Hook) {
	c.hooks.JobExperienceRequirement = append(c.hooks.JobExperienceRequirement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobexperiencerequirement.Intercept(f(g(h())))`.
func (c *JobExperienceRequirementClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobExperienceRequirement = append(c.inters.JobExperienceRequirement, interceptors...)
}

// Create returns a builder for creating a JobExperienceRequirement entity.
func (c *JobExperienceRequirementClient) Create() *JobExperienceRequirementCreate {
	mutation := newJobExperienceRequirementMutation(c.config, OpCreate)
	return &JobExperienceRequirementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobExperienceRequirement entities.
func (c *JobExperienceRequirementClient) CreateBulk(builders ...*JobExperienceRequirementCreate) *JobExperienceRequirementCreateBulk {
	return &JobExperienceRequirementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobExperienceRequirementClient) MapCreateBulk(slice any, setFunc func(*JobExperienceRequirementCreate, int)) *JobExperienceRequirementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobExperienceRequirementCreateBulk{err: fmt.Errorf("calling to JobExperienceRequirementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobExperienceRequirementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobExperienceRequirementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobExperienceRequirement.
func (c *JobExperienceRequirementClient) Update() *JobExperienceRequirementUpdate {
	mutation := newJobExperienceRequirementMutation(c.config, OpUpdate)
	return &JobExperienceRequirementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobExperienceRequirementClient) UpdateOne(jer *JobExperienceRequirement) *JobExperienceRequirementUpdateOne {
	mutation := newJobExperienceRequirementMutation(c.config, OpUpdateOne, withJobExperienceRequirement(jer))
	return &JobExperienceRequirementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobExperienceRequirementClient) UpdateOneID(id uuid.UUID) *JobExperienceRequirementUpdateOne {
	mutation := newJobExperienceRequirementMutation(c.config, OpUpdateOne, withJobExperienceRequirementID(id))
	return &JobExperienceRequirementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobExperienceRequirement.
func (c *JobExperienceRequirementClient) Delete() *JobExperienceRequirementDelete {
	mutation := newJobExperienceRequirementMutation(c.config, OpDelete)
	return &JobExperienceRequirementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobExperienceRequirementClient) DeleteOne(jer *JobExperienceRequirement) *JobExperienceRequirementDeleteOne {
	return c.DeleteOneID(jer.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobExperienceRequirementClient) DeleteOneID(id uuid.UUID) *JobExperienceRequirementDeleteOne {
	builder := c.Delete().Where(jobexperiencerequirement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobExperienceRequirementDeleteOne{builder}
}

// Query returns a query builder for JobExperienceRequirement.
func (c *JobExperienceRequirementClient) Query() *JobExperienceRequirementQuery {
	return &JobExperienceRequirementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobExperienceRequirement},
		inters: c.Interceptors(),
	}
}

// Get returns a JobExperienceRequirement entity by its id.
func (c *JobExperienceRequirementClient) Get(ctx context.Context, id uuid.UUID) (*JobExperienceRequirement, error) {
	return c.Query().Where(jobexperiencerequirement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobExperienceRequirementClient) GetX(ctx context.Context, id uuid.UUID) *JobExperienceRequirement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJob queries the job edge of a JobExperienceRequirement.
func (c *JobExperienceRequirementClient) QueryJob(jer *JobExperienceRequirement) *JobPositionQuery {
	query := (&JobPositionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jer.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobexperiencerequirement.Table, jobexperiencerequirement.FieldID, id),
			sqlgraph.To(jobposition.Table, jobposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobexperiencerequirement.JobTable, jobexperiencerequirement.JobColumn),
		)
		fromV = sqlgraph.Neighbors(jer.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobExperienceRequirementClient) Hooks() []Hook {
	hooks := c.hooks.JobExperienceRequirement
	return append(hooks[:len(hooks):len(hooks)], jobexperiencerequirement.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *JobExperienceRequirementClient) Interceptors() []Interceptor {
	inters := c.inters.JobExperienceRequirement
	return append(inters[:len(inters):len(inters)], jobexperiencerequirement.Interceptors[:]...)
}

func (c *JobExperienceRequirementClient) mutate(ctx context.Context, m *JobExperienceRequirementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobExperienceRequirementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobExperienceRequirementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobExperienceRequirementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobExperienceRequirementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown JobExperienceRequirement mutation op: %q", m.Op())
	}
}

// JobIndustryRequirementClient is a client for the JobIndustryRequirement schema.
type JobIndustryRequirementClient struct {
	config
}

// NewJobIndustryRequirementClient returns a client for the JobIndustryRequirement from the given config.
func NewJobIndustryRequirementClient(c config) *JobIndustryRequirementClient {
	return &JobIndustryRequirementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobindustryrequirement.Hooks(f(g(h())))`.
func (c *JobIndustryRequirementClient) Use(hooks ...Hook) {
	c.hooks.JobIndustryRequirement = append(c.hooks.JobIndustryRequirement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobindustryrequirement.Intercept(f(g(h())))`.
func (c *JobIndustryRequirementClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobIndustryRequirement = append(c.inters.JobIndustryRequirement, interceptors...)
}

// Create returns a builder for creating a JobIndustryRequirement entity.
func (c *JobIndustryRequirementClient) Create() *JobIndustryRequirementCreate {
	mutation := newJobIndustryRequirementMutation(c.config, OpCreate)
	return &JobIndustryRequirementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobIndustryRequirement entities.
func (c *JobIndustryRequirementClient) CreateBulk(builders ...*JobIndustryRequirementCreate) *JobIndustryRequirementCreateBulk {
	return &JobIndustryRequirementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobIndustryRequirementClient) MapCreateBulk(slice any, setFunc func(*JobIndustryRequirementCreate, int)) *JobIndustryRequirementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobIndustryRequirementCreateBulk{err: fmt.Errorf("calling to JobIndustryRequirementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobIndustryRequirementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobIndustryRequirementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobIndustryRequirement.
func (c *JobIndustryRequirementClient) Update() *JobIndustryRequirementUpdate {
	mutation := newJobIndustryRequirementMutation(c.config, OpUpdate)
	return &JobIndustryRequirementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobIndustryRequirementClient) UpdateOne(jir *JobIndustryRequirement) *JobIndustryRequirementUpdateOne {
	mutation := newJobIndustryRequirementMutation(c.config, OpUpdateOne, withJobIndustryRequirement(jir))
	return &JobIndustryRequirementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobIndustryRequirementClient) UpdateOneID(id uuid.UUID) *JobIndustryRequirementUpdateOne {
	mutation := newJobIndustryRequirementMutation(c.config, OpUpdateOne, withJobIndustryRequirementID(id))
	return &JobIndustryRequirementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobIndustryRequirement.
func (c *JobIndustryRequirementClient) Delete() *JobIndustryRequirementDelete {
	mutation := newJobIndustryRequirementMutation(c.config, OpDelete)
	return &JobIndustryRequirementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobIndustryRequirementClient) DeleteOne(jir *JobIndustryRequirement) *JobIndustryRequirementDeleteOne {
	return c.DeleteOneID(jir.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobIndustryRequirementClient) DeleteOneID(id uuid.UUID) *JobIndustryRequirementDeleteOne {
	builder := c.Delete().Where(jobindustryrequirement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobIndustryRequirementDeleteOne{builder}
}

// Query returns a query builder for JobIndustryRequirement.
func (c *JobIndustryRequirementClient) Query() *JobIndustryRequirementQuery {
	return &JobIndustryRequirementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobIndustryRequirement},
		inters: c.Interceptors(),
	}
}

// Get returns a JobIndustryRequirement entity by its id.
func (c *JobIndustryRequirementClient) Get(ctx context.Context, id uuid.UUID) (*JobIndustryRequirement, error) {
	return c.Query().Where(jobindustryrequirement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobIndustryRequirementClient) GetX(ctx context.Context, id uuid.UUID) *JobIndustryRequirement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJob queries the job edge of a JobIndustryRequirement.
func (c *JobIndustryRequirementClient) QueryJob(jir *JobIndustryRequirement) *JobPositionQuery {
	query := (&JobPositionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobindustryrequirement.Table, jobindustryrequirement.FieldID, id),
			sqlgraph.To(jobposition.Table, jobposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobindustryrequirement.JobTable, jobindustryrequirement.JobColumn),
		)
		fromV = sqlgraph.Neighbors(jir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobIndustryRequirementClient) Hooks() []Hook {
	hooks := c.hooks.JobIndustryRequirement
	return append(hooks[:len(hooks):len(hooks)], jobindustryrequirement.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *JobIndustryRequirementClient) Interceptors() []Interceptor {
	inters := c.inters.JobIndustryRequirement
	return append(inters[:len(inters):len(inters)], jobindustryrequirement.Interceptors[:]...)
}

func (c *JobIndustryRequirementClient) mutate(ctx context.Context, m *JobIndustryRequirementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobIndustryRequirementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobIndustryRequirementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobIndustryRequirementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobIndustryRequirementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown JobIndustryRequirement mutation op: %q", m.Op())
	}
}

// JobPositionClient is a client for the JobPosition schema.
type JobPositionClient struct {
	config
}

// NewJobPositionClient returns a client for the JobPosition from the given config.
func NewJobPositionClient(c config) *JobPositionClient {
	return &JobPositionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobposition.Hooks(f(g(h())))`.
func (c *JobPositionClient) Use(hooks ...Hook) {
	c.hooks.JobPosition = append(c.hooks.JobPosition, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobposition.Intercept(f(g(h())))`.
func (c *JobPositionClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobPosition = append(c.inters.JobPosition, interceptors...)
}

// Create returns a builder for creating a JobPosition entity.
func (c *JobPositionClient) Create() *JobPositionCreate {
	mutation := newJobPositionMutation(c.config, OpCreate)
	return &JobPositionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobPosition entities.
func (c *JobPositionClient) CreateBulk(builders ...*JobPositionCreate) *JobPositionCreateBulk {
	return &JobPositionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobPositionClient) MapCreateBulk(slice any, setFunc func(*JobPositionCreate, int)) *JobPositionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobPositionCreateBulk{err: fmt.Errorf("calling to JobPositionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobPositionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobPositionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobPosition.
func (c *JobPositionClient) Update() *JobPositionUpdate {
	mutation := newJobPositionMutation(c.config, OpUpdate)
	return &JobPositionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobPositionClient) UpdateOne(jp *JobPosition) *JobPositionUpdateOne {
	mutation := newJobPositionMutation(c.config, OpUpdateOne, withJobPosition(jp))
	return &JobPositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobPositionClient) UpdateOneID(id uuid.UUID) *JobPositionUpdateOne {
	mutation := newJobPositionMutation(c.config, OpUpdateOne, withJobPositionID(id))
	return &JobPositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobPosition.
func (c *JobPositionClient) Delete() *JobPositionDelete {
	mutation := newJobPositionMutation(c.config, OpDelete)
	return &JobPositionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobPositionClient) DeleteOne(jp *JobPosition) *JobPositionDeleteOne {
	return c.DeleteOneID(jp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobPositionClient) DeleteOneID(id uuid.UUID) *JobPositionDeleteOne {
	builder := c.Delete().Where(jobposition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobPositionDeleteOne{builder}
}

// Query returns a query builder for JobPosition.
func (c *JobPositionClient) Query() *JobPositionQuery {
	return &JobPositionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobPosition},
		inters: c.Interceptors(),
	}
}

// Get returns a JobPosition entity by its id.
func (c *JobPositionClient) Get(ctx context.Context, id uuid.UUID) (*JobPosition, error) {
	return c.Query().Where(jobposition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobPositionClient) GetX(ctx context.Context, id uuid.UUID) *JobPosition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDepartment queries the department edge of a JobPosition.
func (c *JobPositionClient) QueryDepartment(jp *JobPosition) *DepartmentQuery {
	query := (&DepartmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobposition.DepartmentTable, jobposition.DepartmentColumn),
		)
		fromV = sqlgraph.Neighbors(jp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a JobPosition.
func (c *JobPositionClient) QueryCreator(jp *JobPosition) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobposition.CreatorTable, jobposition.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(jp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResponsibilities queries the responsibilities edge of a JobPosition.
func (c *JobPositionClient) QueryResponsibilities(jp *JobPosition) *JobResponsibilityQuery {
	query := (&JobResponsibilityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, id),
			sqlgraph.To(jobresponsibility.Table, jobresponsibility.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobposition.ResponsibilitiesTable, jobposition.ResponsibilitiesColumn),
		)
		fromV = sqlgraph.Neighbors(jp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySkills queries the skills edge of a JobPosition.
func (c *JobPositionClient) QuerySkills(jp *JobPosition) *JobSkillQuery {
	query := (&JobSkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, id),
			sqlgraph.To(jobskill.Table, jobskill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobposition.SkillsTable, jobposition.SkillsColumn),
		)
		fromV = sqlgraph.Neighbors(jp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEducationRequirements queries the education_requirements edge of a JobPosition.
func (c *JobPositionClient) QueryEducationRequirements(jp *JobPosition) *JobEducationRequirementQuery {
	query := (&JobEducationRequirementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, id),
			sqlgraph.To(jobeducationrequirement.Table, jobeducationrequirement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobposition.EducationRequirementsTable, jobposition.EducationRequirementsColumn),
		)
		fromV = sqlgraph.Neighbors(jp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExperienceRequirements queries the experience_requirements edge of a JobPosition.
func (c *JobPositionClient) QueryExperienceRequirements(jp *JobPosition) *JobExperienceRequirementQuery {
	query := (&JobExperienceRequirementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, id),
			sqlgraph.To(jobexperiencerequirement.Table, jobexperiencerequirement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobposition.ExperienceRequirementsTable, jobposition.ExperienceRequirementsColumn),
		)
		fromV = sqlgraph.Neighbors(jp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIndustryRequirements queries the industry_requirements edge of a JobPosition.
func (c *JobPositionClient) QueryIndustryRequirements(jp *JobPosition) *JobIndustryRequirementQuery {
	query := (&JobIndustryRequirementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, id),
			sqlgraph.To(jobindustryrequirement.Table, jobindustryrequirement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobposition.IndustryRequirementsTable, jobposition.IndustryRequirementsColumn),
		)
		fromV = sqlgraph.Neighbors(jp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResumeApplications queries the resume_applications edge of a JobPosition.
func (c *JobPositionClient) QueryResumeApplications(jp *JobPosition) *ResumeJobApplicationQuery {
	query := (&ResumeJobApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, id),
			sqlgraph.To(resumejobapplication.Table, resumejobapplication.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobposition.ResumeApplicationsTable, jobposition.ResumeApplicationsColumn),
		)
		fromV = sqlgraph.Neighbors(jp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScreeningTasks queries the screening_tasks edge of a JobPosition.
func (c *JobPositionClient) QueryScreeningTasks(jp *JobPosition) *ScreeningTaskQuery {
	query := (&ScreeningTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, id),
			sqlgraph.To(screeningtask.Table, screeningtask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobposition.ScreeningTasksTable, jobposition.ScreeningTasksColumn),
		)
		fromV = sqlgraph.Neighbors(jp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScreeningResults queries the screening_results edge of a JobPosition.
func (c *JobPositionClient) QueryScreeningResults(jp *JobPosition) *ScreeningResultQuery {
	query := (&ScreeningResultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, id),
			sqlgraph.To(screeningresult.Table, screeningresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobposition.ScreeningResultsTable, jobposition.ScreeningResultsColumn),
		)
		fromV = sqlgraph.Neighbors(jp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobPositionClient) Hooks() []Hook {
	hooks := c.hooks.JobPosition
	return append(hooks[:len(hooks):len(hooks)], jobposition.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *JobPositionClient) Interceptors() []Interceptor {
	inters := c.inters.JobPosition
	return append(inters[:len(inters):len(inters)], jobposition.Interceptors[:]...)
}

func (c *JobPositionClient) mutate(ctx context.Context, m *JobPositionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobPositionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobPositionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobPositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobPositionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown JobPosition mutation op: %q", m.Op())
	}
}

// JobResponsibilityClient is a client for the JobResponsibility schema.
type JobResponsibilityClient struct {
	config
}

// NewJobResponsibilityClient returns a client for the JobResponsibility from the given config.
func NewJobResponsibilityClient(c config) *JobResponsibilityClient {
	return &JobResponsibilityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobresponsibility.Hooks(f(g(h())))`.
func (c *JobResponsibilityClient) Use(hooks ...Hook) {
	c.hooks.JobResponsibility = append(c.hooks.JobResponsibility, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobresponsibility.Intercept(f(g(h())))`.
func (c *JobResponsibilityClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobResponsibility = append(c.inters.JobResponsibility, interceptors...)
}

// Create returns a builder for creating a JobResponsibility entity.
func (c *JobResponsibilityClient) Create() *JobResponsibilityCreate {
	mutation := newJobResponsibilityMutation(c.config, OpCreate)
	return &JobResponsibilityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobResponsibility entities.
func (c *JobResponsibilityClient) CreateBulk(builders ...*JobResponsibilityCreate) *JobResponsibilityCreateBulk {
	return &JobResponsibilityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobResponsibilityClient) MapCreateBulk(slice any, setFunc func(*JobResponsibilityCreate, int)) *JobResponsibilityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobResponsibilityCreateBulk{err: fmt.Errorf("calling to JobResponsibilityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobResponsibilityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobResponsibilityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobResponsibility.
func (c *JobResponsibilityClient) Update() *JobResponsibilityUpdate {
	mutation := newJobResponsibilityMutation(c.config, OpUpdate)
	return &JobResponsibilityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobResponsibilityClient) UpdateOne(jr *JobResponsibility) *JobResponsibilityUpdateOne {
	mutation := newJobResponsibilityMutation(c.config, OpUpdateOne, withJobResponsibility(jr))
	return &JobResponsibilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobResponsibilityClient) UpdateOneID(id uuid.UUID) *JobResponsibilityUpdateOne {
	mutation := newJobResponsibilityMutation(c.config, OpUpdateOne, withJobResponsibilityID(id))
	return &JobResponsibilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobResponsibility.
func (c *JobResponsibilityClient) Delete() *JobResponsibilityDelete {
	mutation := newJobResponsibilityMutation(c.config, OpDelete)
	return &JobResponsibilityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobResponsibilityClient) DeleteOne(jr *JobResponsibility) *JobResponsibilityDeleteOne {
	return c.DeleteOneID(jr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobResponsibilityClient) DeleteOneID(id uuid.UUID) *JobResponsibilityDeleteOne {
	builder := c.Delete().Where(jobresponsibility.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobResponsibilityDeleteOne{builder}
}

// Query returns a query builder for JobResponsibility.
func (c *JobResponsibilityClient) Query() *JobResponsibilityQuery {
	return &JobResponsibilityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobResponsibility},
		inters: c.Interceptors(),
	}
}

// Get returns a JobResponsibility entity by its id.
func (c *JobResponsibilityClient) Get(ctx context.Context, id uuid.UUID) (*JobResponsibility, error) {
	return c.Query().Where(jobresponsibility.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobResponsibilityClient) GetX(ctx context.Context, id uuid.UUID) *JobResponsibility {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJob queries the job edge of a JobResponsibility.
func (c *JobResponsibilityClient) QueryJob(jr *JobResponsibility) *JobPositionQuery {
	query := (&JobPositionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobresponsibility.Table, jobresponsibility.FieldID, id),
			sqlgraph.To(jobposition.Table, jobposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobresponsibility.JobTable, jobresponsibility.JobColumn),
		)
		fromV = sqlgraph.Neighbors(jr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobResponsibilityClient) Hooks() []Hook {
	hooks := c.hooks.JobResponsibility
	return append(hooks[:len(hooks):len(hooks)], jobresponsibility.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *JobResponsibilityClient) Interceptors() []Interceptor {
	inters := c.inters.JobResponsibility
	return append(inters[:len(inters):len(inters)], jobresponsibility.Interceptors[:]...)
}

func (c *JobResponsibilityClient) mutate(ctx context.Context, m *JobResponsibilityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobResponsibilityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobResponsibilityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobResponsibilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobResponsibilityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown JobResponsibility mutation op: %q", m.Op())
	}
}

// JobSkillClient is a client for the JobSkill schema.
type JobSkillClient struct {
	config
}

// NewJobSkillClient returns a client for the JobSkill from the given config.
func NewJobSkillClient(c config) *JobSkillClient {
	return &JobSkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobskill.Hooks(f(g(h())))`.
func (c *JobSkillClient) Use(hooks ...Hook) {
	c.hooks.JobSkill = append(c.hooks.JobSkill, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobskill.Intercept(f(g(h())))`.
func (c *JobSkillClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobSkill = append(c.inters.JobSkill, interceptors...)
}

// Create returns a builder for creating a JobSkill entity.
func (c *JobSkillClient) Create() *JobSkillCreate {
	mutation := newJobSkillMutation(c.config, OpCreate)
	return &JobSkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobSkill entities.
func (c *JobSkillClient) CreateBulk(builders ...*JobSkillCreate) *JobSkillCreateBulk {
	return &JobSkillCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobSkillClient) MapCreateBulk(slice any, setFunc func(*JobSkillCreate, int)) *JobSkillCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobSkillCreateBulk{err: fmt.Errorf("calling to JobSkillClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobSkillCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobSkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobSkill.
func (c *JobSkillClient) Update() *JobSkillUpdate {
	mutation := newJobSkillMutation(c.config, OpUpdate)
	return &JobSkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobSkillClient) UpdateOne(js *JobSkill) *JobSkillUpdateOne {
	mutation := newJobSkillMutation(c.config, OpUpdateOne, withJobSkill(js))
	return &JobSkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobSkillClient) UpdateOneID(id uuid.UUID) *JobSkillUpdateOne {
	mutation := newJobSkillMutation(c.config, OpUpdateOne, withJobSkillID(id))
	return &JobSkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobSkill.
func (c *JobSkillClient) Delete() *JobSkillDelete {
	mutation := newJobSkillMutation(c.config, OpDelete)
	return &JobSkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobSkillClient) DeleteOne(js *JobSkill) *JobSkillDeleteOne {
	return c.DeleteOneID(js.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobSkillClient) DeleteOneID(id uuid.UUID) *JobSkillDeleteOne {
	builder := c.Delete().Where(jobskill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobSkillDeleteOne{builder}
}

// Query returns a query builder for JobSkill.
func (c *JobSkillClient) Query() *JobSkillQuery {
	return &JobSkillQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobSkill},
		inters: c.Interceptors(),
	}
}

// Get returns a JobSkill entity by its id.
func (c *JobSkillClient) Get(ctx context.Context, id uuid.UUID) (*JobSkill, error) {
	return c.Query().Where(jobskill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobSkillClient) GetX(ctx context.Context, id uuid.UUID) *JobSkill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJob queries the job edge of a JobSkill.
func (c *JobSkillClient) QueryJob(js *JobSkill) *JobPositionQuery {
	query := (&JobPositionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := js.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobskill.Table, jobskill.FieldID, id),
			sqlgraph.To(jobposition.Table, jobposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobskill.JobTable, jobskill.JobColumn),
		)
		fromV = sqlgraph.Neighbors(js.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySkill queries the skill edge of a JobSkill.
func (c *JobSkillClient) QuerySkill(js *JobSkill) *JobSkillMetaQuery {
	query := (&JobSkillMetaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := js.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobskill.Table, jobskill.FieldID, id),
			sqlgraph.To(jobskillmeta.Table, jobskillmeta.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobskill.SkillTable, jobskill.SkillColumn),
		)
		fromV = sqlgraph.Neighbors(js.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobSkillClient) Hooks() []Hook {
	hooks := c.hooks.JobSkill
	return append(hooks[:len(hooks):len(hooks)], jobskill.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *JobSkillClient) Interceptors() []Interceptor {
	inters := c.inters.JobSkill
	return append(inters[:len(inters):len(inters)], jobskill.Interceptors[:]...)
}

func (c *JobSkillClient) mutate(ctx context.Context, m *JobSkillMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobSkillCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobSkillUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobSkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobSkillDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown JobSkill mutation op: %q", m.Op())
	}
}

// JobSkillMetaClient is a client for the JobSkillMeta schema.
type JobSkillMetaClient struct {
	config
}

// NewJobSkillMetaClient returns a client for the JobSkillMeta from the given config.
func NewJobSkillMetaClient(c config) *JobSkillMetaClient {
	return &JobSkillMetaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobskillmeta.Hooks(f(g(h())))`.
func (c *JobSkillMetaClient) Use(hooks ...Hook) {
	c.hooks.JobSkillMeta = append(c.hooks.JobSkillMeta, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobskillmeta.Intercept(f(g(h())))`.
func (c *JobSkillMetaClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobSkillMeta = append(c.inters.JobSkillMeta, interceptors...)
}

// Create returns a builder for creating a JobSkillMeta entity.
func (c *JobSkillMetaClient) Create() *JobSkillMetaCreate {
	mutation := newJobSkillMetaMutation(c.config, OpCreate)
	return &JobSkillMetaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobSkillMeta entities.
func (c *JobSkillMetaClient) CreateBulk(builders ...*JobSkillMetaCreate) *JobSkillMetaCreateBulk {
	return &JobSkillMetaCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobSkillMetaClient) MapCreateBulk(slice any, setFunc func(*JobSkillMetaCreate, int)) *JobSkillMetaCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobSkillMetaCreateBulk{err: fmt.Errorf("calling to JobSkillMetaClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobSkillMetaCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobSkillMetaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobSkillMeta.
func (c *JobSkillMetaClient) Update() *JobSkillMetaUpdate {
	mutation := newJobSkillMetaMutation(c.config, OpUpdate)
	return &JobSkillMetaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobSkillMetaClient) UpdateOne(jsm *JobSkillMeta) *JobSkillMetaUpdateOne {
	mutation := newJobSkillMetaMutation(c.config, OpUpdateOne, withJobSkillMeta(jsm))
	return &JobSkillMetaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobSkillMetaClient) UpdateOneID(id uuid.UUID) *JobSkillMetaUpdateOne {
	mutation := newJobSkillMetaMutation(c.config, OpUpdateOne, withJobSkillMetaID(id))
	return &JobSkillMetaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobSkillMeta.
func (c *JobSkillMetaClient) Delete() *JobSkillMetaDelete {
	mutation := newJobSkillMetaMutation(c.config, OpDelete)
	return &JobSkillMetaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobSkillMetaClient) DeleteOne(jsm *JobSkillMeta) *JobSkillMetaDeleteOne {
	return c.DeleteOneID(jsm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobSkillMetaClient) DeleteOneID(id uuid.UUID) *JobSkillMetaDeleteOne {
	builder := c.Delete().Where(jobskillmeta.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobSkillMetaDeleteOne{builder}
}

// Query returns a query builder for JobSkillMeta.
func (c *JobSkillMetaClient) Query() *JobSkillMetaQuery {
	return &JobSkillMetaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobSkillMeta},
		inters: c.Interceptors(),
	}
}

// Get returns a JobSkillMeta entity by its id.
func (c *JobSkillMetaClient) Get(ctx context.Context, id uuid.UUID) (*JobSkillMeta, error) {
	return c.Query().Where(jobskillmeta.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobSkillMetaClient) GetX(ctx context.Context, id uuid.UUID) *JobSkillMeta {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJobLinks queries the job_links edge of a JobSkillMeta.
func (c *JobSkillMetaClient) QueryJobLinks(jsm *JobSkillMeta) *JobSkillQuery {
	query := (&JobSkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jsm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobskillmeta.Table, jobskillmeta.FieldID, id),
			sqlgraph.To(jobskill.Table, jobskill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobskillmeta.JobLinksTable, jobskillmeta.JobLinksColumn),
		)
		fromV = sqlgraph.Neighbors(jsm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobSkillMetaClient) Hooks() []Hook {
	hooks := c.hooks.JobSkillMeta
	return append(hooks[:len(hooks):len(hooks)], jobskillmeta.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *JobSkillMetaClient) Interceptors() []Interceptor {
	inters := c.inters.JobSkillMeta
	return append(inters[:len(inters):len(inters)], jobskillmeta.Interceptors[:]...)
}

func (c *JobSkillMetaClient) mutate(ctx context.Context, m *JobSkillMetaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobSkillMetaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobSkillMetaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobSkillMetaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobSkillMetaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown JobSkillMeta mutation op: %q", m.Op())
	}
}

// MessageClient is a client for the Message schema.
type MessageClient struct {
	config
}

// NewMessageClient returns a client for the Message from the given config.
func NewMessageClient(c config) *MessageClient {
	return &MessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `message.Hooks(f(g(h())))`.
func (c *MessageClient) Use(hooks ...Hook) {
	c.hooks.Message = append(c.hooks.Message, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `message.Intercept(f(g(h())))`.
func (c *MessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Message = append(c.inters.Message, interceptors...)
}

// Create returns a builder for creating a Message entity.
func (c *MessageClient) Create() *MessageCreate {
	mutation := newMessageMutation(c.config, OpCreate)
	return &MessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Message entities.
func (c *MessageClient) CreateBulk(builders ...*MessageCreate) *MessageCreateBulk {
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MessageClient) MapCreateBulk(slice any, setFunc func(*MessageCreate, int)) *MessageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MessageCreateBulk{err: fmt.Errorf("calling to MessageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MessageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Message.
func (c *MessageClient) Update() *MessageUpdate {
	mutation := newMessageMutation(c.config, OpUpdate)
	return &MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageClient) UpdateOne(m *Message) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessage(m))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageClient) UpdateOneID(id uuid.UUID) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessageID(id))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Message.
func (c *MessageClient) Delete() *MessageDelete {
	mutation := newMessageMutation(c.config, OpDelete)
	return &MessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageClient) DeleteOne(m *Message) *MessageDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MessageClient) DeleteOneID(id uuid.UUID) *MessageDeleteOne {
	builder := c.Delete().Where(message.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageDeleteOne{builder}
}

// Query returns a query builder for Message.
func (c *MessageClient) Query() *MessageQuery {
	return &MessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a Message entity by its id.
func (c *MessageClient) Get(ctx context.Context, id uuid.UUID) (*Message, error) {
	return c.Query().Where(message.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageClient) GetX(ctx context.Context, id uuid.UUID) *Message {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConversation queries the conversation edge of a Message.
func (c *MessageClient) QueryConversation(m *Message) *ConversationQuery {
	query := (&ConversationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(conversation.Table, conversation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, message.ConversationTable, message.ConversationColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttachments queries the attachments edge of a Message.
func (c *MessageClient) QueryAttachments(m *Message) *AttachmentQuery {
	query := (&AttachmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, message.AttachmentsTable, message.AttachmentsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MessageClient) Hooks() []Hook {
	hooks := c.hooks.Message
	return append(hooks[:len(hooks):len(hooks)], message.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *MessageClient) Interceptors() []Interceptor {
	inters := c.inters.Message
	return append(inters[:len(inters):len(inters)], message.Interceptors[:]...)
}

func (c *MessageClient) mutate(ctx context.Context, m *MessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Message mutation op: %q", m.Op())
	}
}

// NotificationEventClient is a client for the NotificationEvent schema.
type NotificationEventClient struct {
	config
}

// NewNotificationEventClient returns a client for the NotificationEvent from the given config.
func NewNotificationEventClient(c config) *NotificationEventClient {
	return &NotificationEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationevent.Hooks(f(g(h())))`.
func (c *NotificationEventClient) Use(hooks ...Hook) {
	c.hooks.NotificationEvent = append(c.hooks.NotificationEvent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationevent.Intercept(f(g(h())))`.
func (c *NotificationEventClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationEvent = append(c.inters.NotificationEvent, interceptors...)
}

// Create returns a builder for creating a NotificationEvent entity.
func (c *NotificationEventClient) Create() *NotificationEventCreate {
	mutation := newNotificationEventMutation(c.config, OpCreate)
	return &NotificationEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationEvent entities.
func (c *NotificationEventClient) CreateBulk(builders ...*NotificationEventCreate) *NotificationEventCreateBulk {
	return &NotificationEventCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationEventClient) MapCreateBulk(slice any, setFunc func(*NotificationEventCreate, int)) *NotificationEventCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationEventCreateBulk{err: fmt.Errorf("calling to NotificationEventClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationEventCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationEvent.
func (c *NotificationEventClient) Update() *NotificationEventUpdate {
	mutation := newNotificationEventMutation(c.config, OpUpdate)
	return &NotificationEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationEventClient) UpdateOne(ne *NotificationEvent) *NotificationEventUpdateOne {
	mutation := newNotificationEventMutation(c.config, OpUpdateOne, withNotificationEvent(ne))
	return &NotificationEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationEventClient) UpdateOneID(id uuid.UUID) *NotificationEventUpdateOne {
	mutation := newNotificationEventMutation(c.config, OpUpdateOne, withNotificationEventID(id))
	return &NotificationEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationEvent.
func (c *NotificationEventClient) Delete() *NotificationEventDelete {
	mutation := newNotificationEventMutation(c.config, OpDelete)
	return &NotificationEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationEventClient) DeleteOne(ne *NotificationEvent) *NotificationEventDeleteOne {
	return c.DeleteOneID(ne.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationEventClient) DeleteOneID(id uuid.UUID) *NotificationEventDeleteOne {
	builder := c.Delete().Where(notificationevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationEventDeleteOne{builder}
}

// Query returns a query builder for NotificationEvent.
func (c *NotificationEventClient) Query() *NotificationEventQuery {
	return &NotificationEventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationEvent entity by its id.
func (c *NotificationEventClient) Get(ctx context.Context, id uuid.UUID) (*NotificationEvent, error) {
	return c.Query().Where(notificationevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationEventClient) GetX(ctx context.Context, id uuid.UUID) *NotificationEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NotificationEventClient) Hooks() []Hook {
	hooks := c.hooks.NotificationEvent
	return append(hooks[:len(hooks):len(hooks)], notificationevent.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *NotificationEventClient) Interceptors() []Interceptor {
	inters := c.inters.NotificationEvent
	return append(inters[:len(inters):len(inters)], notificationevent.Interceptors[:]...)
}

func (c *NotificationEventClient) mutate(ctx context.Context, m *NotificationEventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationEventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationEventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationEventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown NotificationEvent mutation op: %q", m.Op())
	}
}

// NotificationSettingClient is a client for the NotificationSetting schema.
type NotificationSettingClient struct {
	config
}

// NewNotificationSettingClient returns a client for the NotificationSetting from the given config.
func NewNotificationSettingClient(c config) *NotificationSettingClient {
	return &NotificationSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationsetting.Hooks(f(g(h())))`.
func (c *NotificationSettingClient) Use(hooks ...Hook) {
	c.hooks.NotificationSetting = append(c.hooks.NotificationSetting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationsetting.Intercept(f(g(h())))`.
func (c *NotificationSettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationSetting = append(c.inters.NotificationSetting, interceptors...)
}

// Create returns a builder for creating a NotificationSetting entity.
func (c *NotificationSettingClient) Create() *NotificationSettingCreate {
	mutation := newNotificationSettingMutation(c.config, OpCreate)
	return &NotificationSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationSetting entities.
func (c *NotificationSettingClient) CreateBulk(builders ...*NotificationSettingCreate) *NotificationSettingCreateBulk {
	return &NotificationSettingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationSettingClient) MapCreateBulk(slice any, setFunc func(*NotificationSettingCreate, int)) *NotificationSettingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationSettingCreateBulk{err: fmt.Errorf("calling to NotificationSettingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationSettingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationSetting.
func (c *NotificationSettingClient) Update() *NotificationSettingUpdate {
	mutation := newNotificationSettingMutation(c.config, OpUpdate)
	return &NotificationSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationSettingClient) UpdateOne(ns *NotificationSetting) *NotificationSettingUpdateOne {
	mutation := newNotificationSettingMutation(c.config, OpUpdateOne, withNotificationSetting(ns))
	return &NotificationSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationSettingClient) UpdateOneID(id uuid.UUID) *NotificationSettingUpdateOne {
	mutation := newNotificationSettingMutation(c.config, OpUpdateOne, withNotificationSettingID(id))
	return &NotificationSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationSetting.
func (c *NotificationSettingClient) Delete() *NotificationSettingDelete {
	mutation := newNotificationSettingMutation(c.config, OpDelete)
	return &NotificationSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationSettingClient) DeleteOne(ns *NotificationSetting) *NotificationSettingDeleteOne {
	return c.DeleteOneID(ns.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationSettingClient) DeleteOneID(id uuid.UUID) *NotificationSettingDeleteOne {
	builder := c.Delete().Where(notificationsetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationSettingDeleteOne{builder}
}

// Query returns a query builder for NotificationSetting.
func (c *NotificationSettingClient) Query() *NotificationSettingQuery {
	return &NotificationSettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationSetting},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationSetting entity by its id.
func (c *NotificationSettingClient) Get(ctx context.Context, id uuid.UUID) (*NotificationSetting, error) {
	return c.Query().Where(notificationsetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationSettingClient) GetX(ctx context.Context, id uuid.UUID) *NotificationSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NotificationSettingClient) Hooks() []Hook {
	hooks := c.hooks.NotificationSetting
	return append(hooks[:len(hooks):len(hooks)], notificationsetting.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *NotificationSettingClient) Interceptors() []Interceptor {
	inters := c.inters.NotificationSetting
	return append(inters[:len(inters):len(inters)], notificationsetting.Interceptors[:]...)
}

func (c *NotificationSettingClient) mutate(ctx context.Context, m *NotificationSettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationSettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationSettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown NotificationSetting mutation op: %q", m.Op())
	}
}

// ResumeClient is a client for the Resume schema.
type ResumeClient struct {
	config
}

// NewResumeClient returns a client for the Resume from the given config.
func NewResumeClient(c config) *ResumeClient {
	return &ResumeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resume.Hooks(f(g(h())))`.
func (c *ResumeClient) Use(hooks ...Hook) {
	c.hooks.Resume = append(c.hooks.Resume, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `resume.Intercept(f(g(h())))`.
func (c *ResumeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Resume = append(c.inters.Resume, interceptors...)
}

// Create returns a builder for creating a Resume entity.
func (c *ResumeClient) Create() *ResumeCreate {
	mutation := newResumeMutation(c.config, OpCreate)
	return &ResumeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Resume entities.
func (c *ResumeClient) CreateBulk(builders ...*ResumeCreate) *ResumeCreateBulk {
	return &ResumeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResumeClient) MapCreateBulk(slice any, setFunc func(*ResumeCreate, int)) *ResumeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResumeCreateBulk{err: fmt.Errorf("calling to ResumeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResumeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResumeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Resume.
func (c *ResumeClient) Update() *ResumeUpdate {
	mutation := newResumeMutation(c.config, OpUpdate)
	return &ResumeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResumeClient) UpdateOne(r *Resume) *ResumeUpdateOne {
	mutation := newResumeMutation(c.config, OpUpdateOne, withResume(r))
	return &ResumeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResumeClient) UpdateOneID(id uuid.UUID) *ResumeUpdateOne {
	mutation := newResumeMutation(c.config, OpUpdateOne, withResumeID(id))
	return &ResumeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Resume.
func (c *ResumeClient) Delete() *ResumeDelete {
	mutation := newResumeMutation(c.config, OpDelete)
	return &ResumeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResumeClient) DeleteOne(r *Resume) *ResumeDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResumeClient) DeleteOneID(id uuid.UUID) *ResumeDeleteOne {
	builder := c.Delete().Where(resume.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResumeDeleteOne{builder}
}

// Query returns a query builder for Resume.
func (c *ResumeClient) Query() *ResumeQuery {
	return &ResumeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResume},
		inters: c.Interceptors(),
	}
}

// Get returns a Resume entity by its id.
func (c *ResumeClient) Get(ctx context.Context, id uuid.UUID) (*Resume, error) {
	return c.Query().Where(resume.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResumeClient) GetX(ctx context.Context, id uuid.UUID) *Resume {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Resume.
func (c *ResumeClient) QueryUser(r *Resume) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resume.Table, resume.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resume.UserTable, resume.UserColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEducations queries the educations edge of a Resume.
func (c *ResumeClient) QueryEducations(r *Resume) *ResumeEducationQuery {
	query := (&ResumeEducationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resume.Table, resume.FieldID, id),
			sqlgraph.To(resumeeducation.Table, resumeeducation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resume.EducationsTable, resume.EducationsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExperiences queries the experiences edge of a Resume.
func (c *ResumeClient) QueryExperiences(r *Resume) *ResumeExperienceQuery {
	query := (&ResumeExperienceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resume.Table, resume.FieldID, id),
			sqlgraph.To(resumeexperience.Table, resumeexperience.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resume.ExperiencesTable, resume.ExperiencesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjects queries the projects edge of a Resume.
func (c *ResumeClient) QueryProjects(r *Resume) *ResumeProjectQuery {
	query := (&ResumeProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resume.Table, resume.FieldID, id),
			sqlgraph.To(resumeproject.Table, resumeproject.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resume.ProjectsTable, resume.ProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySkills queries the skills edge of a Resume.
func (c *ResumeClient) QuerySkills(r *Resume) *ResumeSkillQuery {
	query := (&ResumeSkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resume.Table, resume.FieldID, id),
			sqlgraph.To(resumeskill.Table, resumeskill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resume.SkillsTable, resume.SkillsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogs queries the logs edge of a Resume.
func (c *ResumeClient) QueryLogs(r *Resume) *ResumeLogQuery {
	query := (&ResumeLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resume.Table, resume.FieldID, id),
			sqlgraph.To(resumelog.Table, resumelog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resume.LogsTable, resume.LogsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDocumentParse queries the document_parse edge of a Resume.
func (c *ResumeClient) QueryDocumentParse(r *Resume) *ResumeDocumentParseQuery {
	query := (&ResumeDocumentParseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resume.Table, resume.FieldID, id),
			sqlgraph.To(resumedocumentparse.Table, resumedocumentparse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resume.DocumentParseTable, resume.DocumentParseColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobApplications queries the job_applications edge of a Resume.
func (c *ResumeClient) QueryJobApplications(r *Resume) *ResumeJobApplicationQuery {
	query := (&ResumeJobApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resume.Table, resume.FieldID, id),
			sqlgraph.To(resumejobapplication.Table, resumejobapplication.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resume.JobApplicationsTable, resume.JobApplicationsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScreeningTaskResumes queries the screening_task_resumes edge of a Resume.
func (c *ResumeClient) QueryScreeningTaskResumes(r *Resume) *ScreeningTaskResumeQuery {
	query := (&ScreeningTaskResumeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resume.Table, resume.FieldID, id),
			sqlgraph.To(screeningtaskresume.Table, screeningtaskresume.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resume.ScreeningTaskResumesTable, resume.ScreeningTaskResumesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScreeningResults queries the screening_results edge of a Resume.
func (c *ResumeClient) QueryScreeningResults(r *Resume) *ScreeningResultQuery {
	query := (&ScreeningResultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resume.Table, resume.FieldID, id),
			sqlgraph.To(screeningresult.Table, screeningresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resume.ScreeningResultsTable, resume.ScreeningResultsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResumeClient) Hooks() []Hook {
	hooks := c.hooks.Resume
	return append(hooks[:len(hooks):len(hooks)], resume.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ResumeClient) Interceptors() []Interceptor {
	inters := c.inters.Resume
	return append(inters[:len(inters):len(inters)], resume.Interceptors[:]...)
}

func (c *ResumeClient) mutate(ctx context.Context, m *ResumeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResumeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResumeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResumeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResumeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Resume mutation op: %q", m.Op())
	}
}

// ResumeDocumentParseClient is a client for the ResumeDocumentParse schema.
type ResumeDocumentParseClient struct {
	config
}

// NewResumeDocumentParseClient returns a client for the ResumeDocumentParse from the given config.
func NewResumeDocumentParseClient(c config) *ResumeDocumentParseClient {
	return &ResumeDocumentParseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resumedocumentparse.Hooks(f(g(h())))`.
func (c *ResumeDocumentParseClient) Use(hooks ...Hook) {
	c.hooks.ResumeDocumentParse = append(c.hooks.ResumeDocumentParse, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `resumedocumentparse.Intercept(f(g(h())))`.
func (c *ResumeDocumentParseClient) Intercept(interceptors ...Interceptor) {
	c.inters.ResumeDocumentParse = append(c.inters.ResumeDocumentParse, interceptors...)
}

// Create returns a builder for creating a ResumeDocumentParse entity.
func (c *ResumeDocumentParseClient) Create() *ResumeDocumentParseCreate {
	mutation := newResumeDocumentParseMutation(c.config, OpCreate)
	return &ResumeDocumentParseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResumeDocumentParse entities.
func (c *ResumeDocumentParseClient) CreateBulk(builders ...*ResumeDocumentParseCreate) *ResumeDocumentParseCreateBulk {
	return &ResumeDocumentParseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResumeDocumentParseClient) MapCreateBulk(slice any, setFunc func(*ResumeDocumentParseCreate, int)) *ResumeDocumentParseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResumeDocumentParseCreateBulk{err: fmt.Errorf("calling to ResumeDocumentParseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResumeDocumentParseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResumeDocumentParseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResumeDocumentParse.
func (c *ResumeDocumentParseClient) Update() *ResumeDocumentParseUpdate {
	mutation := newResumeDocumentParseMutation(c.config, OpUpdate)
	return &ResumeDocumentParseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResumeDocumentParseClient) UpdateOne(rdp *ResumeDocumentParse) *ResumeDocumentParseUpdateOne {
	mutation := newResumeDocumentParseMutation(c.config, OpUpdateOne, withResumeDocumentParse(rdp))
	return &ResumeDocumentParseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResumeDocumentParseClient) UpdateOneID(id uuid.UUID) *ResumeDocumentParseUpdateOne {
	mutation := newResumeDocumentParseMutation(c.config, OpUpdateOne, withResumeDocumentParseID(id))
	return &ResumeDocumentParseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResumeDocumentParse.
func (c *ResumeDocumentParseClient) Delete() *ResumeDocumentParseDelete {
	mutation := newResumeDocumentParseMutation(c.config, OpDelete)
	return &ResumeDocumentParseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResumeDocumentParseClient) DeleteOne(rdp *ResumeDocumentParse) *ResumeDocumentParseDeleteOne {
	return c.DeleteOneID(rdp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResumeDocumentParseClient) DeleteOneID(id uuid.UUID) *ResumeDocumentParseDeleteOne {
	builder := c.Delete().Where(resumedocumentparse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResumeDocumentParseDeleteOne{builder}
}

// Query returns a query builder for ResumeDocumentParse.
func (c *ResumeDocumentParseClient) Query() *ResumeDocumentParseQuery {
	return &ResumeDocumentParseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResumeDocumentParse},
		inters: c.Interceptors(),
	}
}

// Get returns a ResumeDocumentParse entity by its id.
func (c *ResumeDocumentParseClient) Get(ctx context.Context, id uuid.UUID) (*ResumeDocumentParse, error) {
	return c.Query().Where(resumedocumentparse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResumeDocumentParseClient) GetX(ctx context.Context, id uuid.UUID) *ResumeDocumentParse {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryResume queries the resume edge of a ResumeDocumentParse.
func (c *ResumeDocumentParseClient) QueryResume(rdp *ResumeDocumentParse) *ResumeQuery {
	query := (&ResumeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rdp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resumedocumentparse.Table, resumedocumentparse.FieldID, id),
			sqlgraph.To(resume.Table, resume.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resumedocumentparse.ResumeTable, resumedocumentparse.ResumeColumn),
		)
		fromV = sqlgraph.Neighbors(rdp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResumeDocumentParseClient) Hooks() []Hook {
	hooks := c.hooks.ResumeDocumentParse
	return append(hooks[:len(hooks):len(hooks)], resumedocumentparse.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ResumeDocumentParseClient) Interceptors() []Interceptor {
	inters := c.inters.ResumeDocumentParse
	return append(inters[:len(inters):len(inters)], resumedocumentparse.Interceptors[:]...)
}

func (c *ResumeDocumentParseClient) mutate(ctx context.Context, m *ResumeDocumentParseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResumeDocumentParseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResumeDocumentParseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResumeDocumentParseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResumeDocumentParseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown ResumeDocumentParse mutation op: %q", m.Op())
	}
}

// ResumeEducationClient is a client for the ResumeEducation schema.
type ResumeEducationClient struct {
	config
}

// NewResumeEducationClient returns a client for the ResumeEducation from the given config.
func NewResumeEducationClient(c config) *ResumeEducationClient {
	return &ResumeEducationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resumeeducation.Hooks(f(g(h())))`.
func (c *ResumeEducationClient) Use(hooks ...Hook) {
	c.hooks.ResumeEducation = append(c.hooks.ResumeEducation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `resumeeducation.Intercept(f(g(h())))`.
func (c *ResumeEducationClient) Intercept(interceptors ...Interceptor) {
	c.inters.ResumeEducation = append(c.inters.ResumeEducation, interceptors...)
}

// Create returns a builder for creating a ResumeEducation entity.
func (c *ResumeEducationClient) Create() *ResumeEducationCreate {
	mutation := newResumeEducationMutation(c.config, OpCreate)
	return &ResumeEducationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResumeEducation entities.
func (c *ResumeEducationClient) CreateBulk(builders ...*ResumeEducationCreate) *ResumeEducationCreateBulk {
	return &ResumeEducationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResumeEducationClient) MapCreateBulk(slice any, setFunc func(*ResumeEducationCreate, int)) *ResumeEducationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResumeEducationCreateBulk{err: fmt.Errorf("calling to ResumeEducationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResumeEducationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResumeEducationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResumeEducation.
func (c *ResumeEducationClient) Update() *ResumeEducationUpdate {
	mutation := newResumeEducationMutation(c.config, OpUpdate)
	return &ResumeEducationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResumeEducationClient) UpdateOne(re *ResumeEducation) *ResumeEducationUpdateOne {
	mutation := newResumeEducationMutation(c.config, OpUpdateOne, withResumeEducation(re))
	return &ResumeEducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResumeEducationClient) UpdateOneID(id uuid.UUID) *ResumeEducationUpdateOne {
	mutation := newResumeEducationMutation(c.config, OpUpdateOne, withResumeEducationID(id))
	return &ResumeEducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResumeEducation.
func (c *ResumeEducationClient) Delete() *ResumeEducationDelete {
	mutation := newResumeEducationMutation(c.config, OpDelete)
	return &ResumeEducationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResumeEducationClient) DeleteOne(re *ResumeEducation) *ResumeEducationDeleteOne {
	return c.DeleteOneID(re.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResumeEducationClient) DeleteOneID(id uuid.UUID) *ResumeEducationDeleteOne {
	builder := c.Delete().Where(resumeeducation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResumeEducationDeleteOne{builder}
}

// Query returns a query builder for ResumeEducation.
func (c *ResumeEducationClient) Query() *ResumeEducationQuery {
	return &ResumeEducationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResumeEducation},
		inters: c.Interceptors(),
	}
}

// Get returns a ResumeEducation entity by its id.
func (c *ResumeEducationClient) Get(ctx context.Context, id uuid.UUID) (*ResumeEducation, error) {
	return c.Query().Where(resumeeducation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResumeEducationClient) GetX(ctx context.Context, id uuid.UUID) *ResumeEducation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryResume queries the resume edge of a ResumeEducation.
func (c *ResumeEducationClient) QueryResume(re *ResumeEducation) *ResumeQuery {
	query := (&ResumeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := re.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resumeeducation.Table, resumeeducation.FieldID, id),
			sqlgraph.To(resume.Table, resume.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resumeeducation.ResumeTable, resumeeducation.ResumeColumn),
		)
		fromV = sqlgraph.Neighbors(re.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResumeEducationClient) Hooks() []Hook {
	hooks := c.hooks.ResumeEducation
	return append(hooks[:len(hooks):len(hooks)], resumeeducation.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ResumeEducationClient) Interceptors() []Interceptor {
	inters := c.inters.ResumeEducation
	return append(inters[:len(inters):len(inters)], resumeeducation.Interceptors[:]...)
}

func (c *ResumeEducationClient) mutate(ctx context.Context, m *ResumeEducationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResumeEducationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResumeEducationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResumeEducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResumeEducationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown ResumeEducation mutation op: %q", m.Op())
	}
}

// ResumeExperienceClient is a client for the ResumeExperience schema.
type ResumeExperienceClient struct {
	config
}

// NewResumeExperienceClient returns a client for the ResumeExperience from the given config.
func NewResumeExperienceClient(c config) *ResumeExperienceClient {
	return &ResumeExperienceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resumeexperience.Hooks(f(g(h())))`.
func (c *ResumeExperienceClient) Use(hooks ...Hook) {
	c.hooks.ResumeExperience = append(c.hooks.ResumeExperience, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `resumeexperience.Intercept(f(g(h())))`.
func (c *ResumeExperienceClient) Intercept(interceptors ...Interceptor) {
	c.inters.ResumeExperience = append(c.inters.ResumeExperience, interceptors...)
}

// Create returns a builder for creating a ResumeExperience entity.
func (c *ResumeExperienceClient) Create() *ResumeExperienceCreate {
	mutation := newResumeExperienceMutation(c.config, OpCreate)
	return &ResumeExperienceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResumeExperience entities.
func (c *ResumeExperienceClient) CreateBulk(builders ...*ResumeExperienceCreate) *ResumeExperienceCreateBulk {
	return &ResumeExperienceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResumeExperienceClient) MapCreateBulk(slice any, setFunc func(*ResumeExperienceCreate, int)) *ResumeExperienceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResumeExperienceCreateBulk{err: fmt.Errorf("calling to ResumeExperienceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResumeExperienceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResumeExperienceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResumeExperience.
func (c *ResumeExperienceClient) Update() *ResumeExperienceUpdate {
	mutation := newResumeExperienceMutation(c.config, OpUpdate)
	return &ResumeExperienceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResumeExperienceClient) UpdateOne(re *ResumeExperience) *ResumeExperienceUpdateOne {
	mutation := newResumeExperienceMutation(c.config, OpUpdateOne, withResumeExperience(re))
	return &ResumeExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResumeExperienceClient) UpdateOneID(id uuid.UUID) *ResumeExperienceUpdateOne {
	mutation := newResumeExperienceMutation(c.config, OpUpdateOne, withResumeExperienceID(id))
	return &ResumeExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResumeExperience.
func (c *ResumeExperienceClient) Delete() *ResumeExperienceDelete {
	mutation := newResumeExperienceMutation(c.config, OpDelete)
	return &ResumeExperienceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResumeExperienceClient) DeleteOne(re *ResumeExperience) *ResumeExperienceDeleteOne {
	return c.DeleteOneID(re.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResumeExperienceClient) DeleteOneID(id uuid.UUID) *ResumeExperienceDeleteOne {
	builder := c.Delete().Where(resumeexperience.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResumeExperienceDeleteOne{builder}
}

// Query returns a query builder for ResumeExperience.
func (c *ResumeExperienceClient) Query() *ResumeExperienceQuery {
	return &ResumeExperienceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResumeExperience},
		inters: c.Interceptors(),
	}
}

// Get returns a ResumeExperience entity by its id.
func (c *ResumeExperienceClient) Get(ctx context.Context, id uuid.UUID) (*ResumeExperience, error) {
	return c.Query().Where(resumeexperience.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResumeExperienceClient) GetX(ctx context.Context, id uuid.UUID) *ResumeExperience {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryResume queries the resume edge of a ResumeExperience.
func (c *ResumeExperienceClient) QueryResume(re *ResumeExperience) *ResumeQuery {
	query := (&ResumeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := re.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resumeexperience.Table, resumeexperience.FieldID, id),
			sqlgraph.To(resume.Table, resume.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resumeexperience.ResumeTable, resumeexperience.ResumeColumn),
		)
		fromV = sqlgraph.Neighbors(re.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResumeExperienceClient) Hooks() []Hook {
	hooks := c.hooks.ResumeExperience
	return append(hooks[:len(hooks):len(hooks)], resumeexperience.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ResumeExperienceClient) Interceptors() []Interceptor {
	inters := c.inters.ResumeExperience
	return append(inters[:len(inters):len(inters)], resumeexperience.Interceptors[:]...)
}

func (c *ResumeExperienceClient) mutate(ctx context.Context, m *ResumeExperienceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResumeExperienceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResumeExperienceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResumeExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResumeExperienceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown ResumeExperience mutation op: %q", m.Op())
	}
}

// ResumeJobApplicationClient is a client for the ResumeJobApplication schema.
type ResumeJobApplicationClient struct {
	config
}

// NewResumeJobApplicationClient returns a client for the ResumeJobApplication from the given config.
func NewResumeJobApplicationClient(c config) *ResumeJobApplicationClient {
	return &ResumeJobApplicationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resumejobapplication.Hooks(f(g(h())))`.
func (c *ResumeJobApplicationClient) Use(hooks ...Hook) {
	c.hooks.ResumeJobApplication = append(c.hooks.ResumeJobApplication, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `resumejobapplication.Intercept(f(g(h())))`.
func (c *ResumeJobApplicationClient) Intercept(interceptors ...Interceptor) {
	c.inters.ResumeJobApplication = append(c.inters.ResumeJobApplication, interceptors...)
}

// Create returns a builder for creating a ResumeJobApplication entity.
func (c *ResumeJobApplicationClient) Create() *ResumeJobApplicationCreate {
	mutation := newResumeJobApplicationMutation(c.config, OpCreate)
	return &ResumeJobApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResumeJobApplication entities.
func (c *ResumeJobApplicationClient) CreateBulk(builders ...*ResumeJobApplicationCreate) *ResumeJobApplicationCreateBulk {
	return &ResumeJobApplicationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResumeJobApplicationClient) MapCreateBulk(slice any, setFunc func(*ResumeJobApplicationCreate, int)) *ResumeJobApplicationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResumeJobApplicationCreateBulk{err: fmt.Errorf("calling to ResumeJobApplicationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResumeJobApplicationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResumeJobApplicationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResumeJobApplication.
func (c *ResumeJobApplicationClient) Update() *ResumeJobApplicationUpdate {
	mutation := newResumeJobApplicationMutation(c.config, OpUpdate)
	return &ResumeJobApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResumeJobApplicationClient) UpdateOne(rja *ResumeJobApplication) *ResumeJobApplicationUpdateOne {
	mutation := newResumeJobApplicationMutation(c.config, OpUpdateOne, withResumeJobApplication(rja))
	return &ResumeJobApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResumeJobApplicationClient) UpdateOneID(id uuid.UUID) *ResumeJobApplicationUpdateOne {
	mutation := newResumeJobApplicationMutation(c.config, OpUpdateOne, withResumeJobApplicationID(id))
	return &ResumeJobApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResumeJobApplication.
func (c *ResumeJobApplicationClient) Delete() *ResumeJobApplicationDelete {
	mutation := newResumeJobApplicationMutation(c.config, OpDelete)
	return &ResumeJobApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResumeJobApplicationClient) DeleteOne(rja *ResumeJobApplication) *ResumeJobApplicationDeleteOne {
	return c.DeleteOneID(rja.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResumeJobApplicationClient) DeleteOneID(id uuid.UUID) *ResumeJobApplicationDeleteOne {
	builder := c.Delete().Where(resumejobapplication.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResumeJobApplicationDeleteOne{builder}
}

// Query returns a query builder for ResumeJobApplication.
func (c *ResumeJobApplicationClient) Query() *ResumeJobApplicationQuery {
	return &ResumeJobApplicationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResumeJobApplication},
		inters: c.Interceptors(),
	}
}

// Get returns a ResumeJobApplication entity by its id.
func (c *ResumeJobApplicationClient) Get(ctx context.Context, id uuid.UUID) (*ResumeJobApplication, error) {
	return c.Query().Where(resumejobapplication.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResumeJobApplicationClient) GetX(ctx context.Context, id uuid.UUID) *ResumeJobApplication {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryResume queries the resume edge of a ResumeJobApplication.
func (c *ResumeJobApplicationClient) QueryResume(rja *ResumeJobApplication) *ResumeQuery {
	query := (&ResumeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rja.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resumejobapplication.Table, resumejobapplication.FieldID, id),
			sqlgraph.To(resume.Table, resume.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resumejobapplication.ResumeTable, resumejobapplication.ResumeColumn),
		)
		fromV = sqlgraph.Neighbors(rja.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobPosition queries the job_position edge of a ResumeJobApplication.
func (c *ResumeJobApplicationClient) QueryJobPosition(rja *ResumeJobApplication) *JobPositionQuery {
	query := (&JobPositionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rja.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resumejobapplication.Table, resumejobapplication.FieldID, id),
			sqlgraph.To(jobposition.Table, jobposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resumejobapplication.JobPositionTable, resumejobapplication.JobPositionColumn),
		)
		fromV = sqlgraph.Neighbors(rja.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResumeJobApplicationClient) Hooks() []Hook {
	hooks := c.hooks.ResumeJobApplication
	return append(hooks[:len(hooks):len(hooks)], resumejobapplication.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ResumeJobApplicationClient) Interceptors() []Interceptor {
	inters := c.inters.ResumeJobApplication
	return append(inters[:len(inters):len(inters)], resumejobapplication.Interceptors[:]...)
}

func (c *ResumeJobApplicationClient) mutate(ctx context.Context, m *ResumeJobApplicationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResumeJobApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResumeJobApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResumeJobApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResumeJobApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown ResumeJobApplication mutation op: %q", m.Op())
	}
}

// ResumeLogClient is a client for the ResumeLog schema.
type ResumeLogClient struct {
	config
}

// NewResumeLogClient returns a client for the ResumeLog from the given config.
func NewResumeLogClient(c config) *ResumeLogClient {
	return &ResumeLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resumelog.Hooks(f(g(h())))`.
func (c *ResumeLogClient) Use(hooks ...Hook) {
	c.hooks.ResumeLog = append(c.hooks.ResumeLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `resumelog.Intercept(f(g(h())))`.
func (c *ResumeLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.ResumeLog = append(c.inters.ResumeLog, interceptors...)
}

// Create returns a builder for creating a ResumeLog entity.
func (c *ResumeLogClient) Create() *ResumeLogCreate {
	mutation := newResumeLogMutation(c.config, OpCreate)
	return &ResumeLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResumeLog entities.
func (c *ResumeLogClient) CreateBulk(builders ...*ResumeLogCreate) *ResumeLogCreateBulk {
	return &ResumeLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResumeLogClient) MapCreateBulk(slice any, setFunc func(*ResumeLogCreate, int)) *ResumeLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResumeLogCreateBulk{err: fmt.Errorf("calling to ResumeLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResumeLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResumeLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResumeLog.
func (c *ResumeLogClient) Update() *ResumeLogUpdate {
	mutation := newResumeLogMutation(c.config, OpUpdate)
	return &ResumeLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResumeLogClient) UpdateOne(rl *ResumeLog) *ResumeLogUpdateOne {
	mutation := newResumeLogMutation(c.config, OpUpdateOne, withResumeLog(rl))
	return &ResumeLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResumeLogClient) UpdateOneID(id uuid.UUID) *ResumeLogUpdateOne {
	mutation := newResumeLogMutation(c.config, OpUpdateOne, withResumeLogID(id))
	return &ResumeLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResumeLog.
func (c *ResumeLogClient) Delete() *ResumeLogDelete {
	mutation := newResumeLogMutation(c.config, OpDelete)
	return &ResumeLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResumeLogClient) DeleteOne(rl *ResumeLog) *ResumeLogDeleteOne {
	return c.DeleteOneID(rl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResumeLogClient) DeleteOneID(id uuid.UUID) *ResumeLogDeleteOne {
	builder := c.Delete().Where(resumelog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResumeLogDeleteOne{builder}
}

// Query returns a query builder for ResumeLog.
func (c *ResumeLogClient) Query() *ResumeLogQuery {
	return &ResumeLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResumeLog},
		inters: c.Interceptors(),
	}
}

// Get returns a ResumeLog entity by its id.
func (c *ResumeLogClient) Get(ctx context.Context, id uuid.UUID) (*ResumeLog, error) {
	return c.Query().Where(resumelog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResumeLogClient) GetX(ctx context.Context, id uuid.UUID) *ResumeLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryResume queries the resume edge of a ResumeLog.
func (c *ResumeLogClient) QueryResume(rl *ResumeLog) *ResumeQuery {
	query := (&ResumeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resumelog.Table, resumelog.FieldID, id),
			sqlgraph.To(resume.Table, resume.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resumelog.ResumeTable, resumelog.ResumeColumn),
		)
		fromV = sqlgraph.Neighbors(rl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResumeLogClient) Hooks() []Hook {
	hooks := c.hooks.ResumeLog
	return append(hooks[:len(hooks):len(hooks)], resumelog.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ResumeLogClient) Interceptors() []Interceptor {
	inters := c.inters.ResumeLog
	return append(inters[:len(inters):len(inters)], resumelog.Interceptors[:]...)
}

func (c *ResumeLogClient) mutate(ctx context.Context, m *ResumeLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResumeLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResumeLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResumeLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResumeLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown ResumeLog mutation op: %q", m.Op())
	}
}

// ResumeMailboxCursorClient is a client for the ResumeMailboxCursor schema.
type ResumeMailboxCursorClient struct {
	config
}

// NewResumeMailboxCursorClient returns a client for the ResumeMailboxCursor from the given config.
func NewResumeMailboxCursorClient(c config) *ResumeMailboxCursorClient {
	return &ResumeMailboxCursorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resumemailboxcursor.Hooks(f(g(h())))`.
func (c *ResumeMailboxCursorClient) Use(hooks ...Hook) {
	c.hooks.ResumeMailboxCursor = append(c.hooks.ResumeMailboxCursor, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `resumemailboxcursor.Intercept(f(g(h())))`.
func (c *ResumeMailboxCursorClient) Intercept(interceptors ...Interceptor) {
	c.inters.ResumeMailboxCursor = append(c.inters.ResumeMailboxCursor, interceptors...)
}

// Create returns a builder for creating a ResumeMailboxCursor entity.
func (c *ResumeMailboxCursorClient) Create() *ResumeMailboxCursorCreate {
	mutation := newResumeMailboxCursorMutation(c.config, OpCreate)
	return &ResumeMailboxCursorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResumeMailboxCursor entities.
func (c *ResumeMailboxCursorClient) CreateBulk(builders ...*ResumeMailboxCursorCreate) *ResumeMailboxCursorCreateBulk {
	return &ResumeMailboxCursorCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResumeMailboxCursorClient) MapCreateBulk(slice any, setFunc func(*ResumeMailboxCursorCreate, int)) *ResumeMailboxCursorCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResumeMailboxCursorCreateBulk{err: fmt.Errorf("calling to ResumeMailboxCursorClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResumeMailboxCursorCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResumeMailboxCursorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResumeMailboxCursor.
func (c *ResumeMailboxCursorClient) Update() *ResumeMailboxCursorUpdate {
	mutation := newResumeMailboxCursorMutation(c.config, OpUpdate)
	return &ResumeMailboxCursorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResumeMailboxCursorClient) UpdateOne(rmc *ResumeMailboxCursor) *ResumeMailboxCursorUpdateOne {
	mutation := newResumeMailboxCursorMutation(c.config, OpUpdateOne, withResumeMailboxCursor(rmc))
	return &ResumeMailboxCursorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResumeMailboxCursorClient) UpdateOneID(id uuid.UUID) *ResumeMailboxCursorUpdateOne {
	mutation := newResumeMailboxCursorMutation(c.config, OpUpdateOne, withResumeMailboxCursorID(id))
	return &ResumeMailboxCursorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResumeMailboxCursor.
func (c *ResumeMailboxCursorClient) Delete() *ResumeMailboxCursorDelete {
	mutation := newResumeMailboxCursorMutation(c.config, OpDelete)
	return &ResumeMailboxCursorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResumeMailboxCursorClient) DeleteOne(rmc *ResumeMailboxCursor) *ResumeMailboxCursorDeleteOne {
	return c.DeleteOneID(rmc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResumeMailboxCursorClient) DeleteOneID(id uuid.UUID) *ResumeMailboxCursorDeleteOne {
	builder := c.Delete().Where(resumemailboxcursor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResumeMailboxCursorDeleteOne{builder}
}

// Query returns a query builder for ResumeMailboxCursor.
func (c *ResumeMailboxCursorClient) Query() *ResumeMailboxCursorQuery {
	return &ResumeMailboxCursorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResumeMailboxCursor},
		inters: c.Interceptors(),
	}
}

// Get returns a ResumeMailboxCursor entity by its id.
func (c *ResumeMailboxCursorClient) Get(ctx context.Context, id uuid.UUID) (*ResumeMailboxCursor, error) {
	return c.Query().Where(resumemailboxcursor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResumeMailboxCursorClient) GetX(ctx context.Context, id uuid.UUID) *ResumeMailboxCursor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMailbox queries the mailbox edge of a ResumeMailboxCursor.
func (c *ResumeMailboxCursorClient) QueryMailbox(rmc *ResumeMailboxCursor) *ResumeMailboxSettingQuery {
	query := (&ResumeMailboxSettingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rmc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resumemailboxcursor.Table, resumemailboxcursor.FieldID, id),
			sqlgraph.To(resumemailboxsetting.Table, resumemailboxsetting.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resumemailboxcursor.MailboxTable, resumemailboxcursor.MailboxColumn),
		)
		fromV = sqlgraph.Neighbors(rmc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResumeMailboxCursorClient) Hooks() []Hook {
	hooks := c.hooks.ResumeMailboxCursor
	return append(hooks[:len(hooks):len(hooks)], resumemailboxcursor.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ResumeMailboxCursorClient) Interceptors() []Interceptor {
	inters := c.inters.ResumeMailboxCursor
	return append(inters[:len(inters):len(inters)], resumemailboxcursor.Interceptors[:]...)
}

func (c *ResumeMailboxCursorClient) mutate(ctx context.Context, m *ResumeMailboxCursorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResumeMailboxCursorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResumeMailboxCursorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResumeMailboxCursorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResumeMailboxCursorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown ResumeMailboxCursor mutation op: %q", m.Op())
	}
}

// ResumeMailboxSettingClient is a client for the ResumeMailboxSetting schema.
type ResumeMailboxSettingClient struct {
	config
}

// NewResumeMailboxSettingClient returns a client for the ResumeMailboxSetting from the given config.
func NewResumeMailboxSettingClient(c config) *ResumeMailboxSettingClient {
	return &ResumeMailboxSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resumemailboxsetting.Hooks(f(g(h())))`.
func (c *ResumeMailboxSettingClient) Use(hooks ...Hook) {
	c.hooks.ResumeMailboxSetting = append(c.hooks.ResumeMailboxSetting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `resumemailboxsetting.Intercept(f(g(h())))`.
func (c *ResumeMailboxSettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.ResumeMailboxSetting = append(c.inters.ResumeMailboxSetting, interceptors...)
}

// Create returns a builder for creating a ResumeMailboxSetting entity.
func (c *ResumeMailboxSettingClient) Create() *ResumeMailboxSettingCreate {
	mutation := newResumeMailboxSettingMutation(c.config, OpCreate)
	return &ResumeMailboxSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResumeMailboxSetting entities.
func (c *ResumeMailboxSettingClient) CreateBulk(builders ...*ResumeMailboxSettingCreate) *ResumeMailboxSettingCreateBulk {
	return &ResumeMailboxSettingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResumeMailboxSettingClient) MapCreateBulk(slice any, setFunc func(*ResumeMailboxSettingCreate, int)) *ResumeMailboxSettingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResumeMailboxSettingCreateBulk{err: fmt.Errorf("calling to ResumeMailboxSettingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResumeMailboxSettingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResumeMailboxSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResumeMailboxSetting.
func (c *ResumeMailboxSettingClient) Update() *ResumeMailboxSettingUpdate {
	mutation := newResumeMailboxSettingMutation(c.config, OpUpdate)
	return &ResumeMailboxSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResumeMailboxSettingClient) UpdateOne(rms *ResumeMailboxSetting) *ResumeMailboxSettingUpdateOne {
	mutation := newResumeMailboxSettingMutation(c.config, OpUpdateOne, withResumeMailboxSetting(rms))
	return &ResumeMailboxSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResumeMailboxSettingClient) UpdateOneID(id uuid.UUID) *ResumeMailboxSettingUpdateOne {
	mutation := newResumeMailboxSettingMutation(c.config, OpUpdateOne, withResumeMailboxSettingID(id))
	return &ResumeMailboxSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResumeMailboxSetting.
func (c *ResumeMailboxSettingClient) Delete() *ResumeMailboxSettingDelete {
	mutation := newResumeMailboxSettingMutation(c.config, OpDelete)
	return &ResumeMailboxSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResumeMailboxSettingClient) DeleteOne(rms *ResumeMailboxSetting) *ResumeMailboxSettingDeleteOne {
	return c.DeleteOneID(rms.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResumeMailboxSettingClient) DeleteOneID(id uuid.UUID) *ResumeMailboxSettingDeleteOne {
	builder := c.Delete().Where(resumemailboxsetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResumeMailboxSettingDeleteOne{builder}
}

// Query returns a query builder for ResumeMailboxSetting.
func (c *ResumeMailboxSettingClient) Query() *ResumeMailboxSettingQuery {
	return &ResumeMailboxSettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResumeMailboxSetting},
		inters: c.Interceptors(),
	}
}

// Get returns a ResumeMailboxSetting entity by its id.
func (c *ResumeMailboxSettingClient) Get(ctx context.Context, id uuid.UUID) (*ResumeMailboxSetting, error) {
	return c.Query().Where(resumemailboxsetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResumeMailboxSettingClient) GetX(ctx context.Context, id uuid.UUID) *ResumeMailboxSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUploader queries the uploader edge of a ResumeMailboxSetting.
func (c *ResumeMailboxSettingClient) QueryUploader(rms *ResumeMailboxSetting) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rms.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resumemailboxsetting.Table, resumemailboxsetting.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, resumemailboxsetting.UploaderTable, resumemailboxsetting.UploaderColumn),
		)
		fromV = sqlgraph.Neighbors(rms.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCursors queries the cursors edge of a ResumeMailboxSetting.
func (c *ResumeMailboxSettingClient) QueryCursors(rms *ResumeMailboxSetting) *ResumeMailboxCursorQuery {
	query := (&ResumeMailboxCursorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rms.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resumemailboxsetting.Table, resumemailboxsetting.FieldID, id),
			sqlgraph.To(resumemailboxcursor.Table, resumemailboxcursor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resumemailboxsetting.CursorsTable, resumemailboxsetting.CursorsColumn),
		)
		fromV = sqlgraph.Neighbors(rms.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatistics queries the statistics edge of a ResumeMailboxSetting.
func (c *ResumeMailboxSettingClient) QueryStatistics(rms *ResumeMailboxSetting) *ResumeMailboxStatisticQuery {
	query := (&ResumeMailboxStatisticClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rms.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resumemailboxsetting.Table, resumemailboxsetting.FieldID, id),
			sqlgraph.To(resumemailboxstatistic.Table, resumemailboxstatistic.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resumemailboxsetting.StatisticsTable, resumemailboxsetting.StatisticsColumn),
		)
		fromV = sqlgraph.Neighbors(rms.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResumeMailboxSettingClient) Hooks() []Hook {
	hooks := c.hooks.ResumeMailboxSetting
	return append(hooks[:len(hooks):len(hooks)], resumemailboxsetting.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ResumeMailboxSettingClient) Interceptors() []Interceptor {
	inters := c.inters.ResumeMailboxSetting
	return append(inters[:len(inters):len(inters)], resumemailboxsetting.Interceptors[:]...)
}

func (c *ResumeMailboxSettingClient) mutate(ctx context.Context, m *ResumeMailboxSettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResumeMailboxSettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResumeMailboxSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResumeMailboxSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResumeMailboxSettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown ResumeMailboxSetting mutation op: %q", m.Op())
	}
}

// ResumeMailboxStatisticClient is a client for the ResumeMailboxStatistic schema.
type ResumeMailboxStatisticClient struct {
	config
}

// NewResumeMailboxStatisticClient returns a client for the ResumeMailboxStatistic from the given config.
func NewResumeMailboxStatisticClient(c config) *ResumeMailboxStatisticClient {
	return &ResumeMailboxStatisticClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resumemailboxstatistic.Hooks(f(g(h())))`.
func (c *ResumeMailboxStatisticClient) Use(hooks ...Hook) {
	c.hooks.ResumeMailboxStatistic = append(c.hooks.ResumeMailboxStatistic, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `resumemailboxstatistic.Intercept(f(g(h())))`.
func (c *ResumeMailboxStatisticClient) Intercept(interceptors ...Interceptor) {
	c.inters.ResumeMailboxStatistic = append(c.inters.ResumeMailboxStatistic, interceptors...)
}

// Create returns a builder for creating a ResumeMailboxStatistic entity.
func (c *ResumeMailboxStatisticClient) Create() *ResumeMailboxStatisticCreate {
	mutation := newResumeMailboxStatisticMutation(c.config, OpCreate)
	return &ResumeMailboxStatisticCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResumeMailboxStatistic entities.
func (c *ResumeMailboxStatisticClient) CreateBulk(builders ...*ResumeMailboxStatisticCreate) *ResumeMailboxStatisticCreateBulk {
	return &ResumeMailboxStatisticCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResumeMailboxStatisticClient) MapCreateBulk(slice any, setFunc func(*ResumeMailboxStatisticCreate, int)) *ResumeMailboxStatisticCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResumeMailboxStatisticCreateBulk{err: fmt.Errorf("calling to ResumeMailboxStatisticClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResumeMailboxStatisticCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResumeMailboxStatisticCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResumeMailboxStatistic.
func (c *ResumeMailboxStatisticClient) Update() *ResumeMailboxStatisticUpdate {
	mutation := newResumeMailboxStatisticMutation(c.config, OpUpdate)
	return &ResumeMailboxStatisticUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResumeMailboxStatisticClient) UpdateOne(rms *ResumeMailboxStatistic) *ResumeMailboxStatisticUpdateOne {
	mutation := newResumeMailboxStatisticMutation(c.config, OpUpdateOne, withResumeMailboxStatistic(rms))
	return &ResumeMailboxStatisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResumeMailboxStatisticClient) UpdateOneID(id uuid.UUID) *ResumeMailboxStatisticUpdateOne {
	mutation := newResumeMailboxStatisticMutation(c.config, OpUpdateOne, withResumeMailboxStatisticID(id))
	return &ResumeMailboxStatisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResumeMailboxStatistic.
func (c *ResumeMailboxStatisticClient) Delete() *ResumeMailboxStatisticDelete {
	mutation := newResumeMailboxStatisticMutation(c.config, OpDelete)
	return &ResumeMailboxStatisticDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResumeMailboxStatisticClient) DeleteOne(rms *ResumeMailboxStatistic) *ResumeMailboxStatisticDeleteOne {
	return c.DeleteOneID(rms.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResumeMailboxStatisticClient) DeleteOneID(id uuid.UUID) *ResumeMailboxStatisticDeleteOne {
	builder := c.Delete().Where(resumemailboxstatistic.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResumeMailboxStatisticDeleteOne{builder}
}

// Query returns a query builder for ResumeMailboxStatistic.
func (c *ResumeMailboxStatisticClient) Query() *ResumeMailboxStatisticQuery {
	return &ResumeMailboxStatisticQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResumeMailboxStatistic},
		inters: c.Interceptors(),
	}
}

// Get returns a ResumeMailboxStatistic entity by its id.
func (c *ResumeMailboxStatisticClient) Get(ctx context.Context, id uuid.UUID) (*ResumeMailboxStatistic, error) {
	return c.Query().Where(resumemailboxstatistic.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResumeMailboxStatisticClient) GetX(ctx context.Context, id uuid.UUID) *ResumeMailboxStatistic {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMailbox queries the mailbox edge of a ResumeMailboxStatistic.
func (c *ResumeMailboxStatisticClient) QueryMailbox(rms *ResumeMailboxStatistic) *ResumeMailboxSettingQuery {
	query := (&ResumeMailboxSettingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rms.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resumemailboxstatistic.Table, resumemailboxstatistic.FieldID, id),
			sqlgraph.To(resumemailboxsetting.Table, resumemailboxsetting.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resumemailboxstatistic.MailboxTable, resumemailboxstatistic.MailboxColumn),
		)
		fromV = sqlgraph.Neighbors(rms.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResumeMailboxStatisticClient) Hooks() []Hook {
	hooks := c.hooks.ResumeMailboxStatistic
	return append(hooks[:len(hooks):len(hooks)], resumemailboxstatistic.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ResumeMailboxStatisticClient) Interceptors() []Interceptor {
	inters := c.inters.ResumeMailboxStatistic
	return append(inters[:len(inters):len(inters)], resumemailboxstatistic.Interceptors[:]...)
}

func (c *ResumeMailboxStatisticClient) mutate(ctx context.Context, m *ResumeMailboxStatisticMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResumeMailboxStatisticCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResumeMailboxStatisticUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResumeMailboxStatisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResumeMailboxStatisticDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown ResumeMailboxStatistic mutation op: %q", m.Op())
	}
}

// ResumeProjectClient is a client for the ResumeProject schema.
type ResumeProjectClient struct {
	config
}

// NewResumeProjectClient returns a client for the ResumeProject from the given config.
func NewResumeProjectClient(c config) *ResumeProjectClient {
	return &ResumeProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resumeproject.Hooks(f(g(h())))`.
func (c *ResumeProjectClient) Use(hooks ...Hook) {
	c.hooks.ResumeProject = append(c.hooks.ResumeProject, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `resumeproject.Intercept(f(g(h())))`.
func (c *ResumeProjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.ResumeProject = append(c.inters.ResumeProject, interceptors...)
}

// Create returns a builder for creating a ResumeProject entity.
func (c *ResumeProjectClient) Create() *ResumeProjectCreate {
	mutation := newResumeProjectMutation(c.config, OpCreate)
	return &ResumeProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResumeProject entities.
func (c *ResumeProjectClient) CreateBulk(builders ...*ResumeProjectCreate) *ResumeProjectCreateBulk {
	return &ResumeProjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResumeProjectClient) MapCreateBulk(slice any, setFunc func(*ResumeProjectCreate, int)) *ResumeProjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResumeProjectCreateBulk{err: fmt.Errorf("calling to ResumeProjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResumeProjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResumeProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResumeProject.
func (c *ResumeProjectClient) Update() *ResumeProjectUpdate {
	mutation := newResumeProjectMutation(c.config, OpUpdate)
	return &ResumeProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResumeProjectClient) UpdateOne(rp *ResumeProject) *ResumeProjectUpdateOne {
	mutation := newResumeProjectMutation(c.config, OpUpdateOne, withResumeProject(rp))
	return &ResumeProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResumeProjectClient) UpdateOneID(id uuid.UUID) *ResumeProjectUpdateOne {
	mutation := newResumeProjectMutation(c.config, OpUpdateOne, withResumeProjectID(id))
	return &ResumeProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResumeProject.
func (c *ResumeProjectClient) Delete() *ResumeProjectDelete {
	mutation := newResumeProjectMutation(c.config, OpDelete)
	return &ResumeProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResumeProjectClient) DeleteOne(rp *ResumeProject) *ResumeProjectDeleteOne {
	return c.DeleteOneID(rp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResumeProjectClient) DeleteOneID(id uuid.UUID) *ResumeProjectDeleteOne {
	builder := c.Delete().Where(resumeproject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResumeProjectDeleteOne{builder}
}

// Query returns a query builder for ResumeProject.
func (c *ResumeProjectClient) Query() *ResumeProjectQuery {
	return &ResumeProjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResumeProject},
		inters: c.Interceptors(),
	}
}

// Get returns a ResumeProject entity by its id.
func (c *ResumeProjectClient) Get(ctx context.Context, id uuid.UUID) (*ResumeProject, error) {
	return c.Query().Where(resumeproject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResumeProjectClient) GetX(ctx context.Context, id uuid.UUID) *ResumeProject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryResume queries the resume edge of a ResumeProject.
func (c *ResumeProjectClient) QueryResume(rp *ResumeProject) *ResumeQuery {
	query := (&ResumeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resumeproject.Table, resumeproject.FieldID, id),
			sqlgraph.To(resume.Table, resume.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resumeproject.ResumeTable, resumeproject.ResumeColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResumeProjectClient) Hooks() []Hook {
	hooks := c.hooks.ResumeProject
	return append(hooks[:len(hooks):len(hooks)], resumeproject.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ResumeProjectClient) Interceptors() []Interceptor {
	inters := c.inters.ResumeProject
	return append(inters[:len(inters):len(inters)], resumeproject.Interceptors[:]...)
}

func (c *ResumeProjectClient) mutate(ctx context.Context, m *ResumeProjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResumeProjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResumeProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResumeProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResumeProjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown ResumeProject mutation op: %q", m.Op())
	}
}

// ResumeSkillClient is a client for the ResumeSkill schema.
type ResumeSkillClient struct {
	config
}

// NewResumeSkillClient returns a client for the ResumeSkill from the given config.
func NewResumeSkillClient(c config) *ResumeSkillClient {
	return &ResumeSkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resumeskill.Hooks(f(g(h())))`.
func (c *ResumeSkillClient) Use(hooks ...Hook) {
	c.hooks.ResumeSkill = append(c.hooks.ResumeSkill, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `resumeskill.Intercept(f(g(h())))`.
func (c *ResumeSkillClient) Intercept(interceptors ...Interceptor) {
	c.inters.ResumeSkill = append(c.inters.ResumeSkill, interceptors...)
}

// Create returns a builder for creating a ResumeSkill entity.
func (c *ResumeSkillClient) Create() *ResumeSkillCreate {
	mutation := newResumeSkillMutation(c.config, OpCreate)
	return &ResumeSkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResumeSkill entities.
func (c *ResumeSkillClient) CreateBulk(builders ...*ResumeSkillCreate) *ResumeSkillCreateBulk {
	return &ResumeSkillCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResumeSkillClient) MapCreateBulk(slice any, setFunc func(*ResumeSkillCreate, int)) *ResumeSkillCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResumeSkillCreateBulk{err: fmt.Errorf("calling to ResumeSkillClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResumeSkillCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResumeSkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResumeSkill.
func (c *ResumeSkillClient) Update() *ResumeSkillUpdate {
	mutation := newResumeSkillMutation(c.config, OpUpdate)
	return &ResumeSkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResumeSkillClient) UpdateOne(rs *ResumeSkill) *ResumeSkillUpdateOne {
	mutation := newResumeSkillMutation(c.config, OpUpdateOne, withResumeSkill(rs))
	return &ResumeSkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResumeSkillClient) UpdateOneID(id uuid.UUID) *ResumeSkillUpdateOne {
	mutation := newResumeSkillMutation(c.config, OpUpdateOne, withResumeSkillID(id))
	return &ResumeSkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResumeSkill.
func (c *ResumeSkillClient) Delete() *ResumeSkillDelete {
	mutation := newResumeSkillMutation(c.config, OpDelete)
	return &ResumeSkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResumeSkillClient) DeleteOne(rs *ResumeSkill) *ResumeSkillDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResumeSkillClient) DeleteOneID(id uuid.UUID) *ResumeSkillDeleteOne {
	builder := c.Delete().Where(resumeskill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResumeSkillDeleteOne{builder}
}

// Query returns a query builder for ResumeSkill.
func (c *ResumeSkillClient) Query() *ResumeSkillQuery {
	return &ResumeSkillQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResumeSkill},
		inters: c.Interceptors(),
	}
}

// Get returns a ResumeSkill entity by its id.
func (c *ResumeSkillClient) Get(ctx context.Context, id uuid.UUID) (*ResumeSkill, error) {
	return c.Query().Where(resumeskill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResumeSkillClient) GetX(ctx context.Context, id uuid.UUID) *ResumeSkill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryResume queries the resume edge of a ResumeSkill.
func (c *ResumeSkillClient) QueryResume(rs *ResumeSkill) *ResumeQuery {
	query := (&ResumeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resumeskill.Table, resumeskill.FieldID, id),
			sqlgraph.To(resume.Table, resume.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resumeskill.ResumeTable, resumeskill.ResumeColumn),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResumeSkillClient) Hooks() []Hook {
	hooks := c.hooks.ResumeSkill
	return append(hooks[:len(hooks):len(hooks)], resumeskill.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ResumeSkillClient) Interceptors() []Interceptor {
	inters := c.inters.ResumeSkill
	return append(inters[:len(inters):len(inters)], resumeskill.Interceptors[:]...)
}

func (c *ResumeSkillClient) mutate(ctx context.Context, m *ResumeSkillMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResumeSkillCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResumeSkillUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResumeSkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResumeSkillDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown ResumeSkill mutation op: %q", m.Op())
	}
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `role.Intercept(f(g(h())))`.
func (c *RoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Role = append(c.inters.Role, interceptors...)
}

// Create returns a builder for creating a Role entity.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoleClient) MapCreateBulk(slice any, setFunc func(*RoleCreate, int)) *RoleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoleCreateBulk{err: fmt.Errorf("calling to RoleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id int64) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleClient) DeleteOneID(id int64) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRole},
		inters: c.Interceptors(),
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id int64) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id int64) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAdmins queries the admins edge of a Role.
func (c *RoleClient) QueryAdmins(r *Role) *AdminQuery {
	query := (&AdminClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, role.AdminsTable, role.AdminsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdminRoles queries the admin_roles edge of a Role.
func (c *RoleClient) QueryAdminRoles(r *Role) *AdminRoleQuery {
	query := (&AdminRoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(adminrole.Table, adminrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, role.AdminRolesTable, role.AdminRolesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// Interceptors returns the client interceptors.
func (c *RoleClient) Interceptors() []Interceptor {
	return c.inters.Role
}

func (c *RoleClient) mutate(ctx context.Context, m *RoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Role mutation op: %q", m.Op())
	}
}

// ScreeningNodeRunClient is a client for the ScreeningNodeRun schema.
type ScreeningNodeRunClient struct {
	config
}

// NewScreeningNodeRunClient returns a client for the ScreeningNodeRun from the given config.
func NewScreeningNodeRunClient(c config) *ScreeningNodeRunClient {
	return &ScreeningNodeRunClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `screeningnoderun.Hooks(f(g(h())))`.
func (c *ScreeningNodeRunClient) Use(hooks ...Hook) {
	c.hooks.ScreeningNodeRun = append(c.hooks.ScreeningNodeRun, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `screeningnoderun.Intercept(f(g(h())))`.
func (c *ScreeningNodeRunClient) Intercept(interceptors ...Interceptor) {
	c.inters.ScreeningNodeRun = append(c.inters.ScreeningNodeRun, interceptors...)
}

// Create returns a builder for creating a ScreeningNodeRun entity.
func (c *ScreeningNodeRunClient) Create() *ScreeningNodeRunCreate {
	mutation := newScreeningNodeRunMutation(c.config, OpCreate)
	return &ScreeningNodeRunCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ScreeningNodeRun entities.
func (c *ScreeningNodeRunClient) CreateBulk(builders ...*ScreeningNodeRunCreate) *ScreeningNodeRunCreateBulk {
	return &ScreeningNodeRunCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ScreeningNodeRunClient) MapCreateBulk(slice any, setFunc func(*ScreeningNodeRunCreate, int)) *ScreeningNodeRunCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ScreeningNodeRunCreateBulk{err: fmt.Errorf("calling to ScreeningNodeRunClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ScreeningNodeRunCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ScreeningNodeRunCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ScreeningNodeRun.
func (c *ScreeningNodeRunClient) Update() *ScreeningNodeRunUpdate {
	mutation := newScreeningNodeRunMutation(c.config, OpUpdate)
	return &ScreeningNodeRunUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScreeningNodeRunClient) UpdateOne(snr *ScreeningNodeRun) *ScreeningNodeRunUpdateOne {
	mutation := newScreeningNodeRunMutation(c.config, OpUpdateOne, withScreeningNodeRun(snr))
	return &ScreeningNodeRunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScreeningNodeRunClient) UpdateOneID(id uuid.UUID) *ScreeningNodeRunUpdateOne {
	mutation := newScreeningNodeRunMutation(c.config, OpUpdateOne, withScreeningNodeRunID(id))
	return &ScreeningNodeRunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ScreeningNodeRun.
func (c *ScreeningNodeRunClient) Delete() *ScreeningNodeRunDelete {
	mutation := newScreeningNodeRunMutation(c.config, OpDelete)
	return &ScreeningNodeRunDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScreeningNodeRunClient) DeleteOne(snr *ScreeningNodeRun) *ScreeningNodeRunDeleteOne {
	return c.DeleteOneID(snr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScreeningNodeRunClient) DeleteOneID(id uuid.UUID) *ScreeningNodeRunDeleteOne {
	builder := c.Delete().Where(screeningnoderun.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScreeningNodeRunDeleteOne{builder}
}

// Query returns a query builder for ScreeningNodeRun.
func (c *ScreeningNodeRunClient) Query() *ScreeningNodeRunQuery {
	return &ScreeningNodeRunQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScreeningNodeRun},
		inters: c.Interceptors(),
	}
}

// Get returns a ScreeningNodeRun entity by its id.
func (c *ScreeningNodeRunClient) Get(ctx context.Context, id uuid.UUID) (*ScreeningNodeRun, error) {
	return c.Query().Where(screeningnoderun.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScreeningNodeRunClient) GetX(ctx context.Context, id uuid.UUID) *ScreeningNodeRun {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the task edge of a ScreeningNodeRun.
func (c *ScreeningNodeRunClient) QueryTask(snr *ScreeningNodeRun) *ScreeningTaskQuery {
	query := (&ScreeningTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := snr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningnoderun.Table, screeningnoderun.FieldID, id),
			sqlgraph.To(screeningtask.Table, screeningtask.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, screeningnoderun.TaskTable, screeningnoderun.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(snr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskResume queries the task_resume edge of a ScreeningNodeRun.
func (c *ScreeningNodeRunClient) QueryTaskResume(snr *ScreeningNodeRun) *ScreeningTaskResumeQuery {
	query := (&ScreeningTaskResumeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := snr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningnoderun.Table, screeningnoderun.FieldID, id),
			sqlgraph.To(screeningtaskresume.Table, screeningtaskresume.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, screeningnoderun.TaskResumeTable, screeningnoderun.TaskResumeColumn),
		)
		fromV = sqlgraph.Neighbors(snr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScreeningNodeRunClient) Hooks() []Hook {
	hooks := c.hooks.ScreeningNodeRun
	return append(hooks[:len(hooks):len(hooks)], screeningnoderun.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ScreeningNodeRunClient) Interceptors() []Interceptor {
	inters := c.inters.ScreeningNodeRun
	return append(inters[:len(inters):len(inters)], screeningnoderun.Interceptors[:]...)
}

func (c *ScreeningNodeRunClient) mutate(ctx context.Context, m *ScreeningNodeRunMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScreeningNodeRunCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScreeningNodeRunUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScreeningNodeRunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScreeningNodeRunDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown ScreeningNodeRun mutation op: %q", m.Op())
	}
}

// ScreeningResultClient is a client for the ScreeningResult schema.
type ScreeningResultClient struct {
	config
}

// NewScreeningResultClient returns a client for the ScreeningResult from the given config.
func NewScreeningResultClient(c config) *ScreeningResultClient {
	return &ScreeningResultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `screeningresult.Hooks(f(g(h())))`.
func (c *ScreeningResultClient) Use(hooks ...Hook) {
	c.hooks.ScreeningResult = append(c.hooks.ScreeningResult, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `screeningresult.Intercept(f(g(h())))`.
func (c *ScreeningResultClient) Intercept(interceptors ...Interceptor) {
	c.inters.ScreeningResult = append(c.inters.ScreeningResult, interceptors...)
}

// Create returns a builder for creating a ScreeningResult entity.
func (c *ScreeningResultClient) Create() *ScreeningResultCreate {
	mutation := newScreeningResultMutation(c.config, OpCreate)
	return &ScreeningResultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ScreeningResult entities.
func (c *ScreeningResultClient) CreateBulk(builders ...*ScreeningResultCreate) *ScreeningResultCreateBulk {
	return &ScreeningResultCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ScreeningResultClient) MapCreateBulk(slice any, setFunc func(*ScreeningResultCreate, int)) *ScreeningResultCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ScreeningResultCreateBulk{err: fmt.Errorf("calling to ScreeningResultClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ScreeningResultCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ScreeningResultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ScreeningResult.
func (c *ScreeningResultClient) Update() *ScreeningResultUpdate {
	mutation := newScreeningResultMutation(c.config, OpUpdate)
	return &ScreeningResultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScreeningResultClient) UpdateOne(sr *ScreeningResult) *ScreeningResultUpdateOne {
	mutation := newScreeningResultMutation(c.config, OpUpdateOne, withScreeningResult(sr))
	return &ScreeningResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScreeningResultClient) UpdateOneID(id uuid.UUID) *ScreeningResultUpdateOne {
	mutation := newScreeningResultMutation(c.config, OpUpdateOne, withScreeningResultID(id))
	return &ScreeningResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ScreeningResult.
func (c *ScreeningResultClient) Delete() *ScreeningResultDelete {
	mutation := newScreeningResultMutation(c.config, OpDelete)
	return &ScreeningResultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScreeningResultClient) DeleteOne(sr *ScreeningResult) *ScreeningResultDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScreeningResultClient) DeleteOneID(id uuid.UUID) *ScreeningResultDeleteOne {
	builder := c.Delete().Where(screeningresult.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScreeningResultDeleteOne{builder}
}

// Query returns a query builder for ScreeningResult.
func (c *ScreeningResultClient) Query() *ScreeningResultQuery {
	return &ScreeningResultQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScreeningResult},
		inters: c.Interceptors(),
	}
}

// Get returns a ScreeningResult entity by its id.
func (c *ScreeningResultClient) Get(ctx context.Context, id uuid.UUID) (*ScreeningResult, error) {
	return c.Query().Where(screeningresult.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScreeningResultClient) GetX(ctx context.Context, id uuid.UUID) *ScreeningResult {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the task edge of a ScreeningResult.
func (c *ScreeningResultClient) QueryTask(sr *ScreeningResult) *ScreeningTaskQuery {
	query := (&ScreeningTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningresult.Table, screeningresult.FieldID, id),
			sqlgraph.To(screeningtask.Table, screeningtask.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, screeningresult.TaskTable, screeningresult.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobPosition queries the job_position edge of a ScreeningResult.
func (c *ScreeningResultClient) QueryJobPosition(sr *ScreeningResult) *JobPositionQuery {
	query := (&JobPositionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningresult.Table, screeningresult.FieldID, id),
			sqlgraph.To(jobposition.Table, jobposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, screeningresult.JobPositionTable, screeningresult.JobPositionColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResume queries the resume edge of a ScreeningResult.
func (c *ScreeningResultClient) QueryResume(sr *ScreeningResult) *ResumeQuery {
	query := (&ResumeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningresult.Table, screeningresult.FieldID, id),
			sqlgraph.To(resume.Table, resume.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, screeningresult.ResumeTable, screeningresult.ResumeColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScreeningResultClient) Hooks() []Hook {
	hooks := c.hooks.ScreeningResult
	return append(hooks[:len(hooks):len(hooks)], screeningresult.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ScreeningResultClient) Interceptors() []Interceptor {
	inters := c.inters.ScreeningResult
	return append(inters[:len(inters):len(inters)], screeningresult.Interceptors[:]...)
}

func (c *ScreeningResultClient) mutate(ctx context.Context, m *ScreeningResultMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScreeningResultCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScreeningResultUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScreeningResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScreeningResultDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown ScreeningResult mutation op: %q", m.Op())
	}
}

// ScreeningRunMetricClient is a client for the ScreeningRunMetric schema.
type ScreeningRunMetricClient struct {
	config
}

// NewScreeningRunMetricClient returns a client for the ScreeningRunMetric from the given config.
func NewScreeningRunMetricClient(c config) *ScreeningRunMetricClient {
	return &ScreeningRunMetricClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `screeningrunmetric.Hooks(f(g(h())))`.
func (c *ScreeningRunMetricClient) Use(hooks ...Hook) {
	c.hooks.ScreeningRunMetric = append(c.hooks.ScreeningRunMetric, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `screeningrunmetric.Intercept(f(g(h())))`.
func (c *ScreeningRunMetricClient) Intercept(interceptors ...Interceptor) {
	c.inters.ScreeningRunMetric = append(c.inters.ScreeningRunMetric, interceptors...)
}

// Create returns a builder for creating a ScreeningRunMetric entity.
func (c *ScreeningRunMetricClient) Create() *ScreeningRunMetricCreate {
	mutation := newScreeningRunMetricMutation(c.config, OpCreate)
	return &ScreeningRunMetricCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ScreeningRunMetric entities.
func (c *ScreeningRunMetricClient) CreateBulk(builders ...*ScreeningRunMetricCreate) *ScreeningRunMetricCreateBulk {
	return &ScreeningRunMetricCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ScreeningRunMetricClient) MapCreateBulk(slice any, setFunc func(*ScreeningRunMetricCreate, int)) *ScreeningRunMetricCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ScreeningRunMetricCreateBulk{err: fmt.Errorf("calling to ScreeningRunMetricClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ScreeningRunMetricCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ScreeningRunMetricCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ScreeningRunMetric.
func (c *ScreeningRunMetricClient) Update() *ScreeningRunMetricUpdate {
	mutation := newScreeningRunMetricMutation(c.config, OpUpdate)
	return &ScreeningRunMetricUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScreeningRunMetricClient) UpdateOne(srm *ScreeningRunMetric) *ScreeningRunMetricUpdateOne {
	mutation := newScreeningRunMetricMutation(c.config, OpUpdateOne, withScreeningRunMetric(srm))
	return &ScreeningRunMetricUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScreeningRunMetricClient) UpdateOneID(id uuid.UUID) *ScreeningRunMetricUpdateOne {
	mutation := newScreeningRunMetricMutation(c.config, OpUpdateOne, withScreeningRunMetricID(id))
	return &ScreeningRunMetricUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ScreeningRunMetric.
func (c *ScreeningRunMetricClient) Delete() *ScreeningRunMetricDelete {
	mutation := newScreeningRunMetricMutation(c.config, OpDelete)
	return &ScreeningRunMetricDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScreeningRunMetricClient) DeleteOne(srm *ScreeningRunMetric) *ScreeningRunMetricDeleteOne {
	return c.DeleteOneID(srm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScreeningRunMetricClient) DeleteOneID(id uuid.UUID) *ScreeningRunMetricDeleteOne {
	builder := c.Delete().Where(screeningrunmetric.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScreeningRunMetricDeleteOne{builder}
}

// Query returns a query builder for ScreeningRunMetric.
func (c *ScreeningRunMetricClient) Query() *ScreeningRunMetricQuery {
	return &ScreeningRunMetricQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScreeningRunMetric},
		inters: c.Interceptors(),
	}
}

// Get returns a ScreeningRunMetric entity by its id.
func (c *ScreeningRunMetricClient) Get(ctx context.Context, id uuid.UUID) (*ScreeningRunMetric, error) {
	return c.Query().Where(screeningrunmetric.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScreeningRunMetricClient) GetX(ctx context.Context, id uuid.UUID) *ScreeningRunMetric {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the task edge of a ScreeningRunMetric.
func (c *ScreeningRunMetricClient) QueryTask(srm *ScreeningRunMetric) *ScreeningTaskQuery {
	query := (&ScreeningTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := srm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningrunmetric.Table, screeningrunmetric.FieldID, id),
			sqlgraph.To(screeningtask.Table, screeningtask.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, screeningrunmetric.TaskTable, screeningrunmetric.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(srm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScreeningRunMetricClient) Hooks() []Hook {
	hooks := c.hooks.ScreeningRunMetric
	return append(hooks[:len(hooks):len(hooks)], screeningrunmetric.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ScreeningRunMetricClient) Interceptors() []Interceptor {
	inters := c.inters.ScreeningRunMetric
	return append(inters[:len(inters):len(inters)], screeningrunmetric.Interceptors[:]...)
}

func (c *ScreeningRunMetricClient) mutate(ctx context.Context, m *ScreeningRunMetricMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScreeningRunMetricCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScreeningRunMetricUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScreeningRunMetricUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScreeningRunMetricDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown ScreeningRunMetric mutation op: %q", m.Op())
	}
}

// ScreeningTaskClient is a client for the ScreeningTask schema.
type ScreeningTaskClient struct {
	config
}

// NewScreeningTaskClient returns a client for the ScreeningTask from the given config.
func NewScreeningTaskClient(c config) *ScreeningTaskClient {
	return &ScreeningTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `screeningtask.Hooks(f(g(h())))`.
func (c *ScreeningTaskClient) Use(hooks ...Hook) {
	c.hooks.ScreeningTask = append(c.hooks.ScreeningTask, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `screeningtask.Intercept(f(g(h())))`.
func (c *ScreeningTaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.ScreeningTask = append(c.inters.ScreeningTask, interceptors...)
}

// Create returns a builder for creating a ScreeningTask entity.
func (c *ScreeningTaskClient) Create() *ScreeningTaskCreate {
	mutation := newScreeningTaskMutation(c.config, OpCreate)
	return &ScreeningTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ScreeningTask entities.
func (c *ScreeningTaskClient) CreateBulk(builders ...*ScreeningTaskCreate) *ScreeningTaskCreateBulk {
	return &ScreeningTaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ScreeningTaskClient) MapCreateBulk(slice any, setFunc func(*ScreeningTaskCreate, int)) *ScreeningTaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ScreeningTaskCreateBulk{err: fmt.Errorf("calling to ScreeningTaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ScreeningTaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ScreeningTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ScreeningTask.
func (c *ScreeningTaskClient) Update() *ScreeningTaskUpdate {
	mutation := newScreeningTaskMutation(c.config, OpUpdate)
	return &ScreeningTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScreeningTaskClient) UpdateOne(st *ScreeningTask) *ScreeningTaskUpdateOne {
	mutation := newScreeningTaskMutation(c.config, OpUpdateOne, withScreeningTask(st))
	return &ScreeningTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScreeningTaskClient) UpdateOneID(id uuid.UUID) *ScreeningTaskUpdateOne {
	mutation := newScreeningTaskMutation(c.config, OpUpdateOne, withScreeningTaskID(id))
	return &ScreeningTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ScreeningTask.
func (c *ScreeningTaskClient) Delete() *ScreeningTaskDelete {
	mutation := newScreeningTaskMutation(c.config, OpDelete)
	return &ScreeningTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScreeningTaskClient) DeleteOne(st *ScreeningTask) *ScreeningTaskDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScreeningTaskClient) DeleteOneID(id uuid.UUID) *ScreeningTaskDeleteOne {
	builder := c.Delete().Where(screeningtask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScreeningTaskDeleteOne{builder}
}

// Query returns a query builder for ScreeningTask.
func (c *ScreeningTaskClient) Query() *ScreeningTaskQuery {
	return &ScreeningTaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScreeningTask},
		inters: c.Interceptors(),
	}
}

// Get returns a ScreeningTask entity by its id.
func (c *ScreeningTaskClient) Get(ctx context.Context, id uuid.UUID) (*ScreeningTask, error) {
	return c.Query().Where(screeningtask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScreeningTaskClient) GetX(ctx context.Context, id uuid.UUID) *ScreeningTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJobPosition queries the job_position edge of a ScreeningTask.
func (c *ScreeningTaskClient) QueryJobPosition(st *ScreeningTask) *JobPositionQuery {
	query := (&JobPositionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningtask.Table, screeningtask.FieldID, id),
			sqlgraph.To(jobposition.Table, jobposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, screeningtask.JobPositionTable, screeningtask.JobPositionColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a ScreeningTask.
func (c *ScreeningTaskClient) QueryCreator(st *ScreeningTask) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningtask.Table, screeningtask.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, screeningtask.CreatorTable, screeningtask.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskResumes queries the task_resumes edge of a ScreeningTask.
func (c *ScreeningTaskClient) QueryTaskResumes(st *ScreeningTask) *ScreeningTaskResumeQuery {
	query := (&ScreeningTaskResumeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningtask.Table, screeningtask.FieldID, id),
			sqlgraph.To(screeningtaskresume.Table, screeningtaskresume.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, screeningtask.TaskResumesTable, screeningtask.TaskResumesColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResults queries the results edge of a ScreeningTask.
func (c *ScreeningTaskClient) QueryResults(st *ScreeningTask) *ScreeningResultQuery {
	query := (&ScreeningResultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningtask.Table, screeningtask.FieldID, id),
			sqlgraph.To(screeningresult.Table, screeningresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, screeningtask.ResultsTable, screeningtask.ResultsColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRunMetrics queries the run_metrics edge of a ScreeningTask.
func (c *ScreeningTaskClient) QueryRunMetrics(st *ScreeningTask) *ScreeningRunMetricQuery {
	query := (&ScreeningRunMetricClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningtask.Table, screeningtask.FieldID, id),
			sqlgraph.To(screeningrunmetric.Table, screeningrunmetric.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, screeningtask.RunMetricsTable, screeningtask.RunMetricsColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNodeRuns queries the node_runs edge of a ScreeningTask.
func (c *ScreeningTaskClient) QueryNodeRuns(st *ScreeningTask) *ScreeningNodeRunQuery {
	query := (&ScreeningNodeRunClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningtask.Table, screeningtask.FieldID, id),
			sqlgraph.To(screeningnoderun.Table, screeningnoderun.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, screeningtask.NodeRunsTable, screeningtask.NodeRunsColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScreeningTaskClient) Hooks() []Hook {
	hooks := c.hooks.ScreeningTask
	return append(hooks[:len(hooks):len(hooks)], screeningtask.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ScreeningTaskClient) Interceptors() []Interceptor {
	inters := c.inters.ScreeningTask
	return append(inters[:len(inters):len(inters)], screeningtask.Interceptors[:]...)
}

func (c *ScreeningTaskClient) mutate(ctx context.Context, m *ScreeningTaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScreeningTaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScreeningTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScreeningTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScreeningTaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown ScreeningTask mutation op: %q", m.Op())
	}
}

// ScreeningTaskResumeClient is a client for the ScreeningTaskResume schema.
type ScreeningTaskResumeClient struct {
	config
}

// NewScreeningTaskResumeClient returns a client for the ScreeningTaskResume from the given config.
func NewScreeningTaskResumeClient(c config) *ScreeningTaskResumeClient {
	return &ScreeningTaskResumeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `screeningtaskresume.Hooks(f(g(h())))`.
func (c *ScreeningTaskResumeClient) Use(hooks ...Hook) {
	c.hooks.ScreeningTaskResume = append(c.hooks.ScreeningTaskResume, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `screeningtaskresume.Intercept(f(g(h())))`.
func (c *ScreeningTaskResumeClient) Intercept(interceptors ...Interceptor) {
	c.inters.ScreeningTaskResume = append(c.inters.ScreeningTaskResume, interceptors...)
}

// Create returns a builder for creating a ScreeningTaskResume entity.
func (c *ScreeningTaskResumeClient) Create() *ScreeningTaskResumeCreate {
	mutation := newScreeningTaskResumeMutation(c.config, OpCreate)
	return &ScreeningTaskResumeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ScreeningTaskResume entities.
func (c *ScreeningTaskResumeClient) CreateBulk(builders ...*ScreeningTaskResumeCreate) *ScreeningTaskResumeCreateBulk {
	return &ScreeningTaskResumeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ScreeningTaskResumeClient) MapCreateBulk(slice any, setFunc func(*ScreeningTaskResumeCreate, int)) *ScreeningTaskResumeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ScreeningTaskResumeCreateBulk{err: fmt.Errorf("calling to ScreeningTaskResumeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ScreeningTaskResumeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ScreeningTaskResumeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ScreeningTaskResume.
func (c *ScreeningTaskResumeClient) Update() *ScreeningTaskResumeUpdate {
	mutation := newScreeningTaskResumeMutation(c.config, OpUpdate)
	return &ScreeningTaskResumeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScreeningTaskResumeClient) UpdateOne(str *ScreeningTaskResume) *ScreeningTaskResumeUpdateOne {
	mutation := newScreeningTaskResumeMutation(c.config, OpUpdateOne, withScreeningTaskResume(str))
	return &ScreeningTaskResumeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScreeningTaskResumeClient) UpdateOneID(id uuid.UUID) *ScreeningTaskResumeUpdateOne {
	mutation := newScreeningTaskResumeMutation(c.config, OpUpdateOne, withScreeningTaskResumeID(id))
	return &ScreeningTaskResumeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ScreeningTaskResume.
func (c *ScreeningTaskResumeClient) Delete() *ScreeningTaskResumeDelete {
	mutation := newScreeningTaskResumeMutation(c.config, OpDelete)
	return &ScreeningTaskResumeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScreeningTaskResumeClient) DeleteOne(str *ScreeningTaskResume) *ScreeningTaskResumeDeleteOne {
	return c.DeleteOneID(str.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScreeningTaskResumeClient) DeleteOneID(id uuid.UUID) *ScreeningTaskResumeDeleteOne {
	builder := c.Delete().Where(screeningtaskresume.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScreeningTaskResumeDeleteOne{builder}
}

// Query returns a query builder for ScreeningTaskResume.
func (c *ScreeningTaskResumeClient) Query() *ScreeningTaskResumeQuery {
	return &ScreeningTaskResumeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScreeningTaskResume},
		inters: c.Interceptors(),
	}
}

// Get returns a ScreeningTaskResume entity by its id.
func (c *ScreeningTaskResumeClient) Get(ctx context.Context, id uuid.UUID) (*ScreeningTaskResume, error) {
	return c.Query().Where(screeningtaskresume.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScreeningTaskResumeClient) GetX(ctx context.Context, id uuid.UUID) *ScreeningTaskResume {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the task edge of a ScreeningTaskResume.
func (c *ScreeningTaskResumeClient) QueryTask(str *ScreeningTaskResume) *ScreeningTaskQuery {
	query := (&ScreeningTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := str.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningtaskresume.Table, screeningtaskresume.FieldID, id),
			sqlgraph.To(screeningtask.Table, screeningtask.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, screeningtaskresume.TaskTable, screeningtaskresume.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(str.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResume queries the resume edge of a ScreeningTaskResume.
func (c *ScreeningTaskResumeClient) QueryResume(str *ScreeningTaskResume) *ResumeQuery {
	query := (&ResumeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := str.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningtaskresume.Table, screeningtaskresume.FieldID, id),
			sqlgraph.To(resume.Table, resume.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, screeningtaskresume.ResumeTable, screeningtaskresume.ResumeColumn),
		)
		fromV = sqlgraph.Neighbors(str.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNodeRuns queries the node_runs edge of a ScreeningTaskResume.
func (c *ScreeningTaskResumeClient) QueryNodeRuns(str *ScreeningTaskResume) *ScreeningNodeRunQuery {
	query := (&ScreeningNodeRunClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := str.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(screeningtaskresume.Table, screeningtaskresume.FieldID, id),
			sqlgraph.To(screeningnoderun.Table, screeningnoderun.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, screeningtaskresume.NodeRunsTable, screeningtaskresume.NodeRunsColumn),
		)
		fromV = sqlgraph.Neighbors(str.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScreeningTaskResumeClient) Hooks() []Hook {
	hooks := c.hooks.ScreeningTaskResume
	return append(hooks[:len(hooks):len(hooks)], screeningtaskresume.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ScreeningTaskResumeClient) Interceptors() []Interceptor {
	inters := c.inters.ScreeningTaskResume
	return append(inters[:len(inters):len(inters)], screeningtaskresume.Interceptors[:]...)
}

func (c *ScreeningTaskResumeClient) mutate(ctx context.Context, m *ScreeningTaskResumeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScreeningTaskResumeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScreeningTaskResumeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScreeningTaskResumeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScreeningTaskResumeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown ScreeningTaskResume mutation op: %q", m.Op())
	}
}

// SettingClient is a client for the Setting schema.
type SettingClient struct {
	config
}

// NewSettingClient returns a client for the Setting from the given config.
func NewSettingClient(c config) *SettingClient {
	return &SettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `setting.Hooks(f(g(h())))`.
func (c *SettingClient) Use(hooks ...Hook) {
	c.hooks.Setting = append(c.hooks.Setting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `setting.Intercept(f(g(h())))`.
func (c *SettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Setting = append(c.inters.Setting, interceptors...)
}

// Create returns a builder for creating a Setting entity.
func (c *SettingClient) Create() *SettingCreate {
	mutation := newSettingMutation(c.config, OpCreate)
	return &SettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Setting entities.
func (c *SettingClient) CreateBulk(builders ...*SettingCreate) *SettingCreateBulk {
	return &SettingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SettingClient) MapCreateBulk(slice any, setFunc func(*SettingCreate, int)) *SettingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SettingCreateBulk{err: fmt.Errorf("calling to SettingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SettingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Setting.
func (c *SettingClient) Update() *SettingUpdate {
	mutation := newSettingMutation(c.config, OpUpdate)
	return &SettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SettingClient) UpdateOne(s *Setting) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSetting(s))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SettingClient) UpdateOneID(id uuid.UUID) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSettingID(id))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Setting.
func (c *SettingClient) Delete() *SettingDelete {
	mutation := newSettingMutation(c.config, OpDelete)
	return &SettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SettingClient) DeleteOne(s *Setting) *SettingDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SettingClient) DeleteOneID(id uuid.UUID) *SettingDeleteOne {
	builder := c.Delete().Where(setting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SettingDeleteOne{builder}
}

// Query returns a query builder for Setting.
func (c *SettingClient) Query() *SettingQuery {
	return &SettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSetting},
		inters: c.Interceptors(),
	}
}

// Get returns a Setting entity by its id.
func (c *SettingClient) Get(ctx context.Context, id uuid.UUID) (*Setting, error) {
	return c.Query().Where(setting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SettingClient) GetX(ctx context.Context, id uuid.UUID) *Setting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SettingClient) Hooks() []Hook {
	return c.hooks.Setting
}

// Interceptors returns the client interceptors.
func (c *SettingClient) Interceptors() []Interceptor {
	return c.inters.Setting
}

func (c *SettingClient) mutate(ctx context.Context, m *SettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Setting mutation op: %q", m.Op())
	}
}

// UniversityProfileClient is a client for the UniversityProfile schema.
type UniversityProfileClient struct {
	config
}

// NewUniversityProfileClient returns a client for the UniversityProfile from the given config.
func NewUniversityProfileClient(c config) *UniversityProfileClient {
	return &UniversityProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `universityprofile.Hooks(f(g(h())))`.
func (c *UniversityProfileClient) Use(hooks ...Hook) {
	c.hooks.UniversityProfile = append(c.hooks.UniversityProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `universityprofile.Intercept(f(g(h())))`.
func (c *UniversityProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.UniversityProfile = append(c.inters.UniversityProfile, interceptors...)
}

// Create returns a builder for creating a UniversityProfile entity.
func (c *UniversityProfileClient) Create() *UniversityProfileCreate {
	mutation := newUniversityProfileMutation(c.config, OpCreate)
	return &UniversityProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UniversityProfile entities.
func (c *UniversityProfileClient) CreateBulk(builders ...*UniversityProfileCreate) *UniversityProfileCreateBulk {
	return &UniversityProfileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UniversityProfileClient) MapCreateBulk(slice any, setFunc func(*UniversityProfileCreate, int)) *UniversityProfileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UniversityProfileCreateBulk{err: fmt.Errorf("calling to UniversityProfileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UniversityProfileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UniversityProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UniversityProfile.
func (c *UniversityProfileClient) Update() *UniversityProfileUpdate {
	mutation := newUniversityProfileMutation(c.config, OpUpdate)
	return &UniversityProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UniversityProfileClient) UpdateOne(up *UniversityProfile) *UniversityProfileUpdateOne {
	mutation := newUniversityProfileMutation(c.config, OpUpdateOne, withUniversityProfile(up))
	return &UniversityProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UniversityProfileClient) UpdateOneID(id uuid.UUID) *UniversityProfileUpdateOne {
	mutation := newUniversityProfileMutation(c.config, OpUpdateOne, withUniversityProfileID(id))
	return &UniversityProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UniversityProfile.
func (c *UniversityProfileClient) Delete() *UniversityProfileDelete {
	mutation := newUniversityProfileMutation(c.config, OpDelete)
	return &UniversityProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UniversityProfileClient) DeleteOne(up *UniversityProfile) *UniversityProfileDeleteOne {
	return c.DeleteOneID(up.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UniversityProfileClient) DeleteOneID(id uuid.UUID) *UniversityProfileDeleteOne {
	builder := c.Delete().Where(universityprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UniversityProfileDeleteOne{builder}
}

// Query returns a query builder for UniversityProfile.
func (c *UniversityProfileClient) Query() *UniversityProfileQuery {
	return &UniversityProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUniversityProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a UniversityProfile entity by its id.
func (c *UniversityProfileClient) Get(ctx context.Context, id uuid.UUID) (*UniversityProfile, error) {
	return c.Query().Where(universityprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UniversityProfileClient) GetX(ctx context.Context, id uuid.UUID) *UniversityProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UniversityProfileClient) Hooks() []Hook {
	hooks := c.hooks.UniversityProfile
	return append(hooks[:len(hooks):len(hooks)], universityprofile.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UniversityProfileClient) Interceptors() []Interceptor {
	inters := c.inters.UniversityProfile
	return append(inters[:len(inters):len(inters)], universityprofile.Interceptors[:]...)
}

func (c *UniversityProfileClient) mutate(ctx context.Context, m *UniversityProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UniversityProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UniversityProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UniversityProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UniversityProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown UniversityProfile mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLoginHistories queries the login_histories edge of a User.
func (c *UserClient) QueryLoginHistories(u *User) *UserLoginHistoryQuery {
	query := (&UserLoginHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userloginhistory.Table, userloginhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.LoginHistoriesTable, user.LoginHistoriesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIdentities queries the identities edge of a User.
func (c *UserClient) QueryIdentities(u *User) *UserIdentityQuery {
	query := (&UserIdentityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(useridentity.Table, useridentity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.IdentitiesTable, user.IdentitiesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConversations queries the conversations edge of a User.
func (c *UserClient) QueryConversations(u *User) *ConversationQuery {
	query := (&ConversationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(conversation.Table, conversation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ConversationsTable, user.ConversationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResumes queries the resumes edge of a User.
func (c *UserClient) QueryResumes(u *User) *ResumeQuery {
	query := (&ResumeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(resume.Table, resume.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ResumesTable, user.ResumesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedPositions queries the created_positions edge of a User.
func (c *UserClient) QueryCreatedPositions(u *User) *JobPositionQuery {
	query := (&JobPositionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(jobposition.Table, jobposition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedPositionsTable, user.CreatedPositionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedScreeningTasks queries the created_screening_tasks edge of a User.
func (c *UserClient) QueryCreatedScreeningTasks(u *User) *ScreeningTaskQuery {
	query := (&ScreeningTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(screeningtask.Table, screeningtask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedScreeningTasksTable, user.CreatedScreeningTasksColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	inters := c.inters.User
	return append(inters[:len(inters):len(inters)], user.Interceptors[:]...)
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown User mutation op: %q", m.Op())
	}
}

// UserIdentityClient is a client for the UserIdentity schema.
type UserIdentityClient struct {
	config
}

// NewUserIdentityClient returns a client for the UserIdentity from the given config.
func NewUserIdentityClient(c config) *UserIdentityClient {
	return &UserIdentityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `useridentity.Hooks(f(g(h())))`.
func (c *UserIdentityClient) Use(hooks ...Hook) {
	c.hooks.UserIdentity = append(c.hooks.UserIdentity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `useridentity.Intercept(f(g(h())))`.
func (c *UserIdentityClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserIdentity = append(c.inters.UserIdentity, interceptors...)
}

// Create returns a builder for creating a UserIdentity entity.
func (c *UserIdentityClient) Create() *UserIdentityCreate {
	mutation := newUserIdentityMutation(c.config, OpCreate)
	return &UserIdentityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserIdentity entities.
func (c *UserIdentityClient) CreateBulk(builders ...*UserIdentityCreate) *UserIdentityCreateBulk {
	return &UserIdentityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserIdentityClient) MapCreateBulk(slice any, setFunc func(*UserIdentityCreate, int)) *UserIdentityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserIdentityCreateBulk{err: fmt.Errorf("calling to UserIdentityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserIdentityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserIdentityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserIdentity.
func (c *UserIdentityClient) Update() *UserIdentityUpdate {
	mutation := newUserIdentityMutation(c.config, OpUpdate)
	return &UserIdentityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserIdentityClient) UpdateOne(ui *UserIdentity) *UserIdentityUpdateOne {
	mutation := newUserIdentityMutation(c.config, OpUpdateOne, withUserIdentity(ui))
	return &UserIdentityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserIdentityClient) UpdateOneID(id uuid.UUID) *UserIdentityUpdateOne {
	mutation := newUserIdentityMutation(c.config, OpUpdateOne, withUserIdentityID(id))
	return &UserIdentityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserIdentity.
func (c *UserIdentityClient) Delete() *UserIdentityDelete {
	mutation := newUserIdentityMutation(c.config, OpDelete)
	return &UserIdentityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserIdentityClient) DeleteOne(ui *UserIdentity) *UserIdentityDeleteOne {
	return c.DeleteOneID(ui.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserIdentityClient) DeleteOneID(id uuid.UUID) *UserIdentityDeleteOne {
	builder := c.Delete().Where(useridentity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserIdentityDeleteOne{builder}
}

// Query returns a query builder for UserIdentity.
func (c *UserIdentityClient) Query() *UserIdentityQuery {
	return &UserIdentityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserIdentity},
		inters: c.Interceptors(),
	}
}

// Get returns a UserIdentity entity by its id.
func (c *UserIdentityClient) Get(ctx context.Context, id uuid.UUID) (*UserIdentity, error) {
	return c.Query().Where(useridentity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserIdentityClient) GetX(ctx context.Context, id uuid.UUID) *UserIdentity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserIdentity.
func (c *UserIdentityClient) QueryUser(ui *UserIdentity) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ui.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useridentity.Table, useridentity.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, useridentity.UserTable, useridentity.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ui.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserIdentityClient) Hooks() []Hook {
	hooks := c.hooks.UserIdentity
	return append(hooks[:len(hooks):len(hooks)], useridentity.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserIdentityClient) Interceptors() []Interceptor {
	inters := c.inters.UserIdentity
	return append(inters[:len(inters):len(inters)], useridentity.Interceptors[:]...)
}

func (c *UserIdentityClient) mutate(ctx context.Context, m *UserIdentityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserIdentityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserIdentityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserIdentityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserIdentityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown UserIdentity mutation op: %q", m.Op())
	}
}

// UserLoginHistoryClient is a client for the UserLoginHistory schema.
type UserLoginHistoryClient struct {
	config
}

// NewUserLoginHistoryClient returns a client for the UserLoginHistory from the given config.
func NewUserLoginHistoryClient(c config) *UserLoginHistoryClient {
	return &UserLoginHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userloginhistory.Hooks(f(g(h())))`.
func (c *UserLoginHistoryClient) Use(hooks ...Hook) {
	c.hooks.UserLoginHistory = append(c.hooks.UserLoginHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userloginhistory.Intercept(f(g(h())))`.
func (c *UserLoginHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserLoginHistory = append(c.inters.UserLoginHistory, interceptors...)
}

// Create returns a builder for creating a UserLoginHistory entity.
func (c *UserLoginHistoryClient) Create() *UserLoginHistoryCreate {
	mutation := newUserLoginHistoryMutation(c.config, OpCreate)
	return &UserLoginHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserLoginHistory entities.
func (c *UserLoginHistoryClient) CreateBulk(builders ...*UserLoginHistoryCreate) *UserLoginHistoryCreateBulk {
	return &UserLoginHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserLoginHistoryClient) MapCreateBulk(slice any, setFunc func(*UserLoginHistoryCreate, int)) *UserLoginHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserLoginHistoryCreateBulk{err: fmt.Errorf("calling to UserLoginHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserLoginHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserLoginHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserLoginHistory.
func (c *UserLoginHistoryClient) Update() *UserLoginHistoryUpdate {
	mutation := newUserLoginHistoryMutation(c.config, OpUpdate)
	return &UserLoginHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserLoginHistoryClient) UpdateOne(ulh *UserLoginHistory) *UserLoginHistoryUpdateOne {
	mutation := newUserLoginHistoryMutation(c.config, OpUpdateOne, withUserLoginHistory(ulh))
	return &UserLoginHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserLoginHistoryClient) UpdateOneID(id uuid.UUID) *UserLoginHistoryUpdateOne {
	mutation := newUserLoginHistoryMutation(c.config, OpUpdateOne, withUserLoginHistoryID(id))
	return &UserLoginHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserLoginHistory.
func (c *UserLoginHistoryClient) Delete() *UserLoginHistoryDelete {
	mutation := newUserLoginHistoryMutation(c.config, OpDelete)
	return &UserLoginHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserLoginHistoryClient) DeleteOne(ulh *UserLoginHistory) *UserLoginHistoryDeleteOne {
	return c.DeleteOneID(ulh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserLoginHistoryClient) DeleteOneID(id uuid.UUID) *UserLoginHistoryDeleteOne {
	builder := c.Delete().Where(userloginhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserLoginHistoryDeleteOne{builder}
}

// Query returns a query builder for UserLoginHistory.
func (c *UserLoginHistoryClient) Query() *UserLoginHistoryQuery {
	return &UserLoginHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserLoginHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a UserLoginHistory entity by its id.
func (c *UserLoginHistoryClient) Get(ctx context.Context, id uuid.UUID) (*UserLoginHistory, error) {
	return c.Query().Where(userloginhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserLoginHistoryClient) GetX(ctx context.Context, id uuid.UUID) *UserLoginHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a UserLoginHistory.
func (c *UserLoginHistoryClient) QueryOwner(ulh *UserLoginHistory) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ulh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userloginhistory.Table, userloginhistory.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userloginhistory.OwnerTable, userloginhistory.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ulh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserLoginHistoryClient) Hooks() []Hook {
	return c.hooks.UserLoginHistory
}

// Interceptors returns the client interceptors.
func (c *UserLoginHistoryClient) Interceptors() []Interceptor {
	return c.inters.UserLoginHistory
}

func (c *UserLoginHistoryClient) mutate(ctx context.Context, m *UserLoginHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserLoginHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserLoginHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserLoginHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserLoginHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown UserLoginHistory mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Admin, AdminLoginHistory, AdminRole, Attachment, AuditLog, Conversation,
		Department, JobEducationRequirement, JobExperienceRequirement,
		JobIndustryRequirement, JobPosition, JobResponsibility, JobSkill, JobSkillMeta,
		Message, NotificationEvent, NotificationSetting, Resume, ResumeDocumentParse,
		ResumeEducation, ResumeExperience, ResumeJobApplication, ResumeLog,
		ResumeMailboxCursor, ResumeMailboxSetting, ResumeMailboxStatistic,
		ResumeProject, ResumeSkill, Role, ScreeningNodeRun, ScreeningResult,
		ScreeningRunMetric, ScreeningTask, ScreeningTaskResume, Setting,
		UniversityProfile, User, UserIdentity, UserLoginHistory []ent.Hook
	}
	inters struct {
		Admin, AdminLoginHistory, AdminRole, Attachment, AuditLog, Conversation,
		Department, JobEducationRequirement, JobExperienceRequirement,
		JobIndustryRequirement, JobPosition, JobResponsibility, JobSkill, JobSkillMeta,
		Message, NotificationEvent, NotificationSetting, Resume, ResumeDocumentParse,
		ResumeEducation, ResumeExperience, ResumeJobApplication, ResumeLog,
		ResumeMailboxCursor, ResumeMailboxSetting, ResumeMailboxStatistic,
		ResumeProject, ResumeSkill, Role, ScreeningNodeRun, ScreeningResult,
		ScreeningRunMetric, ScreeningTask, ScreeningTaskResume, Setting,
		UniversityProfile, User, UserIdentity, UserLoginHistory []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
