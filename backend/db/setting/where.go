// Code generated by ent, DO NOT EDIT.

package setting

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldID, id))
}

// EnableSSO applies equality check predicate on the "enable_sso" field. It's identical to EnableSSOEQ.
func EnableSSO(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldEnableSSO, v))
}

// ForceTwoFactorAuth applies equality check predicate on the "force_two_factor_auth" field. It's identical to ForceTwoFactorAuthEQ.
func ForceTwoFactorAuth(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldForceTwoFactorAuth, v))
}

// DisablePasswordLogin applies equality check predicate on the "disable_password_login" field. It's identical to DisablePasswordLoginEQ.
func DisablePasswordLogin(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldDisablePasswordLogin, v))
}

// EnableAutoLogin applies equality check predicate on the "enable_auto_login" field. It's identical to EnableAutoLoginEQ.
func EnableAutoLogin(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldEnableAutoLogin, v))
}

// BaseURL applies equality check predicate on the "base_url" field. It's identical to BaseURLEQ.
func BaseURL(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldBaseURL, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldUpdatedAt, v))
}

// EnableSSOEQ applies the EQ predicate on the "enable_sso" field.
func EnableSSOEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldEnableSSO, v))
}

// EnableSSONEQ applies the NEQ predicate on the "enable_sso" field.
func EnableSSONEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldEnableSSO, v))
}

// ForceTwoFactorAuthEQ applies the EQ predicate on the "force_two_factor_auth" field.
func ForceTwoFactorAuthEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldForceTwoFactorAuth, v))
}

// ForceTwoFactorAuthNEQ applies the NEQ predicate on the "force_two_factor_auth" field.
func ForceTwoFactorAuthNEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldForceTwoFactorAuth, v))
}

// DisablePasswordLoginEQ applies the EQ predicate on the "disable_password_login" field.
func DisablePasswordLoginEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldDisablePasswordLogin, v))
}

// DisablePasswordLoginNEQ applies the NEQ predicate on the "disable_password_login" field.
func DisablePasswordLoginNEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldDisablePasswordLogin, v))
}

// EnableAutoLoginEQ applies the EQ predicate on the "enable_auto_login" field.
func EnableAutoLoginEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldEnableAutoLogin, v))
}

// EnableAutoLoginNEQ applies the NEQ predicate on the "enable_auto_login" field.
func EnableAutoLoginNEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldEnableAutoLogin, v))
}

// DingtalkOauthIsNil applies the IsNil predicate on the "dingtalk_oauth" field.
func DingtalkOauthIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldDingtalkOauth))
}

// DingtalkOauthNotNil applies the NotNil predicate on the "dingtalk_oauth" field.
func DingtalkOauthNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldDingtalkOauth))
}

// CustomOauthIsNil applies the IsNil predicate on the "custom_oauth" field.
func CustomOauthIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldCustomOauth))
}

// CustomOauthNotNil applies the NotNil predicate on the "custom_oauth" field.
func CustomOauthNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldCustomOauth))
}

// BaseURLEQ applies the EQ predicate on the "base_url" field.
func BaseURLEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldBaseURL, v))
}

// BaseURLNEQ applies the NEQ predicate on the "base_url" field.
func BaseURLNEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldBaseURL, v))
}

// BaseURLIn applies the In predicate on the "base_url" field.
func BaseURLIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldBaseURL, vs...))
}

// BaseURLNotIn applies the NotIn predicate on the "base_url" field.
func BaseURLNotIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldBaseURL, vs...))
}

// BaseURLGT applies the GT predicate on the "base_url" field.
func BaseURLGT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldBaseURL, v))
}

// BaseURLGTE applies the GTE predicate on the "base_url" field.
func BaseURLGTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldBaseURL, v))
}

// BaseURLLT applies the LT predicate on the "base_url" field.
func BaseURLLT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldBaseURL, v))
}

// BaseURLLTE applies the LTE predicate on the "base_url" field.
func BaseURLLTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldBaseURL, v))
}

// BaseURLContains applies the Contains predicate on the "base_url" field.
func BaseURLContains(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContains(FieldBaseURL, v))
}

// BaseURLHasPrefix applies the HasPrefix predicate on the "base_url" field.
func BaseURLHasPrefix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasPrefix(FieldBaseURL, v))
}

// BaseURLHasSuffix applies the HasSuffix predicate on the "base_url" field.
func BaseURLHasSuffix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasSuffix(FieldBaseURL, v))
}

// BaseURLIsNil applies the IsNil predicate on the "base_url" field.
func BaseURLIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldBaseURL))
}

// BaseURLNotNil applies the NotNil predicate on the "base_url" field.
func BaseURLNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldBaseURL))
}

// BaseURLEqualFold applies the EqualFold predicate on the "base_url" field.
func BaseURLEqualFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEqualFold(FieldBaseURL, v))
}

// BaseURLContainsFold applies the ContainsFold predicate on the "base_url" field.
func BaseURLContainsFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContainsFold(FieldBaseURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Setting) predicate.Setting {
	return predicate.Setting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Setting) predicate.Setting {
	return predicate.Setting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Setting) predicate.Setting {
	return predicate.Setting(sql.NotPredicates(p))
}
