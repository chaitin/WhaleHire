// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumedocumentparse"
	"github.com/google/uuid"
)

// ResumeDocumentParseCreate is the builder for creating a ResumeDocumentParse entity.
type ResumeDocumentParseCreate struct {
	config
	mutation *ResumeDocumentParseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (rdpc *ResumeDocumentParseCreate) SetDeletedAt(t time.Time) *ResumeDocumentParseCreate {
	rdpc.mutation.SetDeletedAt(t)
	return rdpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rdpc *ResumeDocumentParseCreate) SetNillableDeletedAt(t *time.Time) *ResumeDocumentParseCreate {
	if t != nil {
		rdpc.SetDeletedAt(*t)
	}
	return rdpc
}

// SetResumeID sets the "resume_id" field.
func (rdpc *ResumeDocumentParseCreate) SetResumeID(u uuid.UUID) *ResumeDocumentParseCreate {
	rdpc.mutation.SetResumeID(u)
	return rdpc
}

// SetFileID sets the "file_id" field.
func (rdpc *ResumeDocumentParseCreate) SetFileID(s string) *ResumeDocumentParseCreate {
	rdpc.mutation.SetFileID(s)
	return rdpc
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (rdpc *ResumeDocumentParseCreate) SetNillableFileID(s *string) *ResumeDocumentParseCreate {
	if s != nil {
		rdpc.SetFileID(*s)
	}
	return rdpc
}

// SetContent sets the "content" field.
func (rdpc *ResumeDocumentParseCreate) SetContent(s string) *ResumeDocumentParseCreate {
	rdpc.mutation.SetContent(s)
	return rdpc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (rdpc *ResumeDocumentParseCreate) SetNillableContent(s *string) *ResumeDocumentParseCreate {
	if s != nil {
		rdpc.SetContent(*s)
	}
	return rdpc
}

// SetFileType sets the "file_type" field.
func (rdpc *ResumeDocumentParseCreate) SetFileType(s string) *ResumeDocumentParseCreate {
	rdpc.mutation.SetFileType(s)
	return rdpc
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (rdpc *ResumeDocumentParseCreate) SetNillableFileType(s *string) *ResumeDocumentParseCreate {
	if s != nil {
		rdpc.SetFileType(*s)
	}
	return rdpc
}

// SetFilename sets the "filename" field.
func (rdpc *ResumeDocumentParseCreate) SetFilename(s string) *ResumeDocumentParseCreate {
	rdpc.mutation.SetFilename(s)
	return rdpc
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (rdpc *ResumeDocumentParseCreate) SetNillableFilename(s *string) *ResumeDocumentParseCreate {
	if s != nil {
		rdpc.SetFilename(*s)
	}
	return rdpc
}

// SetTitle sets the "title" field.
func (rdpc *ResumeDocumentParseCreate) SetTitle(s string) *ResumeDocumentParseCreate {
	rdpc.mutation.SetTitle(s)
	return rdpc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (rdpc *ResumeDocumentParseCreate) SetNillableTitle(s *string) *ResumeDocumentParseCreate {
	if s != nil {
		rdpc.SetTitle(*s)
	}
	return rdpc
}

// SetUploadAt sets the "upload_at" field.
func (rdpc *ResumeDocumentParseCreate) SetUploadAt(t time.Time) *ResumeDocumentParseCreate {
	rdpc.mutation.SetUploadAt(t)
	return rdpc
}

// SetNillableUploadAt sets the "upload_at" field if the given value is not nil.
func (rdpc *ResumeDocumentParseCreate) SetNillableUploadAt(t *time.Time) *ResumeDocumentParseCreate {
	if t != nil {
		rdpc.SetUploadAt(*t)
	}
	return rdpc
}

// SetStatus sets the "status" field.
func (rdpc *ResumeDocumentParseCreate) SetStatus(s string) *ResumeDocumentParseCreate {
	rdpc.mutation.SetStatus(s)
	return rdpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rdpc *ResumeDocumentParseCreate) SetNillableStatus(s *string) *ResumeDocumentParseCreate {
	if s != nil {
		rdpc.SetStatus(*s)
	}
	return rdpc
}

// SetErrorMessage sets the "error_message" field.
func (rdpc *ResumeDocumentParseCreate) SetErrorMessage(s string) *ResumeDocumentParseCreate {
	rdpc.mutation.SetErrorMessage(s)
	return rdpc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (rdpc *ResumeDocumentParseCreate) SetNillableErrorMessage(s *string) *ResumeDocumentParseCreate {
	if s != nil {
		rdpc.SetErrorMessage(*s)
	}
	return rdpc
}

// SetCreatedAt sets the "created_at" field.
func (rdpc *ResumeDocumentParseCreate) SetCreatedAt(t time.Time) *ResumeDocumentParseCreate {
	rdpc.mutation.SetCreatedAt(t)
	return rdpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rdpc *ResumeDocumentParseCreate) SetNillableCreatedAt(t *time.Time) *ResumeDocumentParseCreate {
	if t != nil {
		rdpc.SetCreatedAt(*t)
	}
	return rdpc
}

// SetUpdatedAt sets the "updated_at" field.
func (rdpc *ResumeDocumentParseCreate) SetUpdatedAt(t time.Time) *ResumeDocumentParseCreate {
	rdpc.mutation.SetUpdatedAt(t)
	return rdpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rdpc *ResumeDocumentParseCreate) SetNillableUpdatedAt(t *time.Time) *ResumeDocumentParseCreate {
	if t != nil {
		rdpc.SetUpdatedAt(*t)
	}
	return rdpc
}

// SetID sets the "id" field.
func (rdpc *ResumeDocumentParseCreate) SetID(u uuid.UUID) *ResumeDocumentParseCreate {
	rdpc.mutation.SetID(u)
	return rdpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rdpc *ResumeDocumentParseCreate) SetNillableID(u *uuid.UUID) *ResumeDocumentParseCreate {
	if u != nil {
		rdpc.SetID(*u)
	}
	return rdpc
}

// SetResume sets the "resume" edge to the Resume entity.
func (rdpc *ResumeDocumentParseCreate) SetResume(r *Resume) *ResumeDocumentParseCreate {
	return rdpc.SetResumeID(r.ID)
}

// Mutation returns the ResumeDocumentParseMutation object of the builder.
func (rdpc *ResumeDocumentParseCreate) Mutation() *ResumeDocumentParseMutation {
	return rdpc.mutation
}

// Save creates the ResumeDocumentParse in the database.
func (rdpc *ResumeDocumentParseCreate) Save(ctx context.Context) (*ResumeDocumentParse, error) {
	if err := rdpc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rdpc.sqlSave, rdpc.mutation, rdpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rdpc *ResumeDocumentParseCreate) SaveX(ctx context.Context) *ResumeDocumentParse {
	v, err := rdpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdpc *ResumeDocumentParseCreate) Exec(ctx context.Context) error {
	_, err := rdpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdpc *ResumeDocumentParseCreate) ExecX(ctx context.Context) {
	if err := rdpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rdpc *ResumeDocumentParseCreate) defaults() error {
	if _, ok := rdpc.mutation.Status(); !ok {
		v := resumedocumentparse.DefaultStatus
		rdpc.mutation.SetStatus(v)
	}
	if _, ok := rdpc.mutation.CreatedAt(); !ok {
		if resumedocumentparse.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized resumedocumentparse.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := resumedocumentparse.DefaultCreatedAt()
		rdpc.mutation.SetCreatedAt(v)
	}
	if _, ok := rdpc.mutation.UpdatedAt(); !ok {
		if resumedocumentparse.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumedocumentparse.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumedocumentparse.DefaultUpdatedAt()
		rdpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rdpc.mutation.ID(); !ok {
		if resumedocumentparse.DefaultID == nil {
			return fmt.Errorf("db: uninitialized resumedocumentparse.DefaultID (forgotten import db/runtime?)")
		}
		v := resumedocumentparse.DefaultID()
		rdpc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rdpc *ResumeDocumentParseCreate) check() error {
	if _, ok := rdpc.mutation.ResumeID(); !ok {
		return &ValidationError{Name: "resume_id", err: errors.New(`db: missing required field "ResumeDocumentParse.resume_id"`)}
	}
	if _, ok := rdpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "ResumeDocumentParse.status"`)}
	}
	if _, ok := rdpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ResumeDocumentParse.created_at"`)}
	}
	if _, ok := rdpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "ResumeDocumentParse.updated_at"`)}
	}
	if len(rdpc.mutation.ResumeIDs()) == 0 {
		return &ValidationError{Name: "resume", err: errors.New(`db: missing required edge "ResumeDocumentParse.resume"`)}
	}
	return nil
}

func (rdpc *ResumeDocumentParseCreate) sqlSave(ctx context.Context) (*ResumeDocumentParse, error) {
	if err := rdpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rdpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rdpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rdpc.mutation.id = &_node.ID
	rdpc.mutation.done = true
	return _node, nil
}

func (rdpc *ResumeDocumentParseCreate) createSpec() (*ResumeDocumentParse, *sqlgraph.CreateSpec) {
	var (
		_node = &ResumeDocumentParse{config: rdpc.config}
		_spec = sqlgraph.NewCreateSpec(resumedocumentparse.Table, sqlgraph.NewFieldSpec(resumedocumentparse.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rdpc.conflict
	if id, ok := rdpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rdpc.mutation.DeletedAt(); ok {
		_spec.SetField(resumedocumentparse.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rdpc.mutation.FileID(); ok {
		_spec.SetField(resumedocumentparse.FieldFileID, field.TypeString, value)
		_node.FileID = value
	}
	if value, ok := rdpc.mutation.Content(); ok {
		_spec.SetField(resumedocumentparse.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := rdpc.mutation.FileType(); ok {
		_spec.SetField(resumedocumentparse.FieldFileType, field.TypeString, value)
		_node.FileType = value
	}
	if value, ok := rdpc.mutation.Filename(); ok {
		_spec.SetField(resumedocumentparse.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := rdpc.mutation.Title(); ok {
		_spec.SetField(resumedocumentparse.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := rdpc.mutation.UploadAt(); ok {
		_spec.SetField(resumedocumentparse.FieldUploadAt, field.TypeTime, value)
		_node.UploadAt = value
	}
	if value, ok := rdpc.mutation.Status(); ok {
		_spec.SetField(resumedocumentparse.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := rdpc.mutation.ErrorMessage(); ok {
		_spec.SetField(resumedocumentparse.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := rdpc.mutation.CreatedAt(); ok {
		_spec.SetField(resumedocumentparse.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rdpc.mutation.UpdatedAt(); ok {
		_spec.SetField(resumedocumentparse.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rdpc.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumedocumentparse.ResumeTable,
			Columns: []string{resumedocumentparse.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResumeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeDocumentParse.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeDocumentParseUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rdpc *ResumeDocumentParseCreate) OnConflict(opts ...sql.ConflictOption) *ResumeDocumentParseUpsertOne {
	rdpc.conflict = opts
	return &ResumeDocumentParseUpsertOne{
		create: rdpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeDocumentParse.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdpc *ResumeDocumentParseCreate) OnConflictColumns(columns ...string) *ResumeDocumentParseUpsertOne {
	rdpc.conflict = append(rdpc.conflict, sql.ConflictColumns(columns...))
	return &ResumeDocumentParseUpsertOne{
		create: rdpc,
	}
}

type (
	// ResumeDocumentParseUpsertOne is the builder for "upsert"-ing
	//  one ResumeDocumentParse node.
	ResumeDocumentParseUpsertOne struct {
		create *ResumeDocumentParseCreate
	}

	// ResumeDocumentParseUpsert is the "OnConflict" setter.
	ResumeDocumentParseUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeDocumentParseUpsert) SetDeletedAt(v time.Time) *ResumeDocumentParseUpsert {
	u.Set(resumedocumentparse.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsert) UpdateDeletedAt() *ResumeDocumentParseUpsert {
	u.SetExcluded(resumedocumentparse.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeDocumentParseUpsert) ClearDeletedAt() *ResumeDocumentParseUpsert {
	u.SetNull(resumedocumentparse.FieldDeletedAt)
	return u
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeDocumentParseUpsert) SetResumeID(v uuid.UUID) *ResumeDocumentParseUpsert {
	u.Set(resumedocumentparse.FieldResumeID, v)
	return u
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsert) UpdateResumeID() *ResumeDocumentParseUpsert {
	u.SetExcluded(resumedocumentparse.FieldResumeID)
	return u
}

// SetFileID sets the "file_id" field.
func (u *ResumeDocumentParseUpsert) SetFileID(v string) *ResumeDocumentParseUpsert {
	u.Set(resumedocumentparse.FieldFileID, v)
	return u
}

// UpdateFileID sets the "file_id" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsert) UpdateFileID() *ResumeDocumentParseUpsert {
	u.SetExcluded(resumedocumentparse.FieldFileID)
	return u
}

// ClearFileID clears the value of the "file_id" field.
func (u *ResumeDocumentParseUpsert) ClearFileID() *ResumeDocumentParseUpsert {
	u.SetNull(resumedocumentparse.FieldFileID)
	return u
}

// SetContent sets the "content" field.
func (u *ResumeDocumentParseUpsert) SetContent(v string) *ResumeDocumentParseUpsert {
	u.Set(resumedocumentparse.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsert) UpdateContent() *ResumeDocumentParseUpsert {
	u.SetExcluded(resumedocumentparse.FieldContent)
	return u
}

// ClearContent clears the value of the "content" field.
func (u *ResumeDocumentParseUpsert) ClearContent() *ResumeDocumentParseUpsert {
	u.SetNull(resumedocumentparse.FieldContent)
	return u
}

// SetFileType sets the "file_type" field.
func (u *ResumeDocumentParseUpsert) SetFileType(v string) *ResumeDocumentParseUpsert {
	u.Set(resumedocumentparse.FieldFileType, v)
	return u
}

// UpdateFileType sets the "file_type" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsert) UpdateFileType() *ResumeDocumentParseUpsert {
	u.SetExcluded(resumedocumentparse.FieldFileType)
	return u
}

// ClearFileType clears the value of the "file_type" field.
func (u *ResumeDocumentParseUpsert) ClearFileType() *ResumeDocumentParseUpsert {
	u.SetNull(resumedocumentparse.FieldFileType)
	return u
}

// SetFilename sets the "filename" field.
func (u *ResumeDocumentParseUpsert) SetFilename(v string) *ResumeDocumentParseUpsert {
	u.Set(resumedocumentparse.FieldFilename, v)
	return u
}

// UpdateFilename sets the "filename" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsert) UpdateFilename() *ResumeDocumentParseUpsert {
	u.SetExcluded(resumedocumentparse.FieldFilename)
	return u
}

// ClearFilename clears the value of the "filename" field.
func (u *ResumeDocumentParseUpsert) ClearFilename() *ResumeDocumentParseUpsert {
	u.SetNull(resumedocumentparse.FieldFilename)
	return u
}

// SetTitle sets the "title" field.
func (u *ResumeDocumentParseUpsert) SetTitle(v string) *ResumeDocumentParseUpsert {
	u.Set(resumedocumentparse.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsert) UpdateTitle() *ResumeDocumentParseUpsert {
	u.SetExcluded(resumedocumentparse.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *ResumeDocumentParseUpsert) ClearTitle() *ResumeDocumentParseUpsert {
	u.SetNull(resumedocumentparse.FieldTitle)
	return u
}

// SetUploadAt sets the "upload_at" field.
func (u *ResumeDocumentParseUpsert) SetUploadAt(v time.Time) *ResumeDocumentParseUpsert {
	u.Set(resumedocumentparse.FieldUploadAt, v)
	return u
}

// UpdateUploadAt sets the "upload_at" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsert) UpdateUploadAt() *ResumeDocumentParseUpsert {
	u.SetExcluded(resumedocumentparse.FieldUploadAt)
	return u
}

// ClearUploadAt clears the value of the "upload_at" field.
func (u *ResumeDocumentParseUpsert) ClearUploadAt() *ResumeDocumentParseUpsert {
	u.SetNull(resumedocumentparse.FieldUploadAt)
	return u
}

// SetStatus sets the "status" field.
func (u *ResumeDocumentParseUpsert) SetStatus(v string) *ResumeDocumentParseUpsert {
	u.Set(resumedocumentparse.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsert) UpdateStatus() *ResumeDocumentParseUpsert {
	u.SetExcluded(resumedocumentparse.FieldStatus)
	return u
}

// SetErrorMessage sets the "error_message" field.
func (u *ResumeDocumentParseUpsert) SetErrorMessage(v string) *ResumeDocumentParseUpsert {
	u.Set(resumedocumentparse.FieldErrorMessage, v)
	return u
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsert) UpdateErrorMessage() *ResumeDocumentParseUpsert {
	u.SetExcluded(resumedocumentparse.FieldErrorMessage)
	return u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *ResumeDocumentParseUpsert) ClearErrorMessage() *ResumeDocumentParseUpsert {
	u.SetNull(resumedocumentparse.FieldErrorMessage)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeDocumentParseUpsert) SetCreatedAt(v time.Time) *ResumeDocumentParseUpsert {
	u.Set(resumedocumentparse.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsert) UpdateCreatedAt() *ResumeDocumentParseUpsert {
	u.SetExcluded(resumedocumentparse.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeDocumentParseUpsert) SetUpdatedAt(v time.Time) *ResumeDocumentParseUpsert {
	u.Set(resumedocumentparse.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsert) UpdateUpdatedAt() *ResumeDocumentParseUpsert {
	u.SetExcluded(resumedocumentparse.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ResumeDocumentParse.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumedocumentparse.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeDocumentParseUpsertOne) UpdateNewValues() *ResumeDocumentParseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resumedocumentparse.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeDocumentParse.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResumeDocumentParseUpsertOne) Ignore() *ResumeDocumentParseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeDocumentParseUpsertOne) DoNothing() *ResumeDocumentParseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeDocumentParseCreate.OnConflict
// documentation for more info.
func (u *ResumeDocumentParseUpsertOne) Update(set func(*ResumeDocumentParseUpsert)) *ResumeDocumentParseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeDocumentParseUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeDocumentParseUpsertOne) SetDeletedAt(v time.Time) *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertOne) UpdateDeletedAt() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeDocumentParseUpsertOne) ClearDeletedAt() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.ClearDeletedAt()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeDocumentParseUpsertOne) SetResumeID(v uuid.UUID) *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertOne) UpdateResumeID() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateResumeID()
	})
}

// SetFileID sets the "file_id" field.
func (u *ResumeDocumentParseUpsertOne) SetFileID(v string) *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetFileID(v)
	})
}

// UpdateFileID sets the "file_id" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertOne) UpdateFileID() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateFileID()
	})
}

// ClearFileID clears the value of the "file_id" field.
func (u *ResumeDocumentParseUpsertOne) ClearFileID() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.ClearFileID()
	})
}

// SetContent sets the "content" field.
func (u *ResumeDocumentParseUpsertOne) SetContent(v string) *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertOne) UpdateContent() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *ResumeDocumentParseUpsertOne) ClearContent() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.ClearContent()
	})
}

// SetFileType sets the "file_type" field.
func (u *ResumeDocumentParseUpsertOne) SetFileType(v string) *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetFileType(v)
	})
}

// UpdateFileType sets the "file_type" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertOne) UpdateFileType() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateFileType()
	})
}

// ClearFileType clears the value of the "file_type" field.
func (u *ResumeDocumentParseUpsertOne) ClearFileType() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.ClearFileType()
	})
}

// SetFilename sets the "filename" field.
func (u *ResumeDocumentParseUpsertOne) SetFilename(v string) *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetFilename(v)
	})
}

// UpdateFilename sets the "filename" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertOne) UpdateFilename() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateFilename()
	})
}

// ClearFilename clears the value of the "filename" field.
func (u *ResumeDocumentParseUpsertOne) ClearFilename() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.ClearFilename()
	})
}

// SetTitle sets the "title" field.
func (u *ResumeDocumentParseUpsertOne) SetTitle(v string) *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertOne) UpdateTitle() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *ResumeDocumentParseUpsertOne) ClearTitle() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.ClearTitle()
	})
}

// SetUploadAt sets the "upload_at" field.
func (u *ResumeDocumentParseUpsertOne) SetUploadAt(v time.Time) *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetUploadAt(v)
	})
}

// UpdateUploadAt sets the "upload_at" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertOne) UpdateUploadAt() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateUploadAt()
	})
}

// ClearUploadAt clears the value of the "upload_at" field.
func (u *ResumeDocumentParseUpsertOne) ClearUploadAt() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.ClearUploadAt()
	})
}

// SetStatus sets the "status" field.
func (u *ResumeDocumentParseUpsertOne) SetStatus(v string) *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertOne) UpdateStatus() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateStatus()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *ResumeDocumentParseUpsertOne) SetErrorMessage(v string) *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertOne) UpdateErrorMessage() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *ResumeDocumentParseUpsertOne) ClearErrorMessage() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.ClearErrorMessage()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeDocumentParseUpsertOne) SetCreatedAt(v time.Time) *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertOne) UpdateCreatedAt() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeDocumentParseUpsertOne) SetUpdatedAt(v time.Time) *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertOne) UpdateUpdatedAt() *ResumeDocumentParseUpsertOne {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeDocumentParseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeDocumentParseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeDocumentParseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResumeDocumentParseUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ResumeDocumentParseUpsertOne.ID is not supported by MySQL driver. Use ResumeDocumentParseUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResumeDocumentParseUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResumeDocumentParseCreateBulk is the builder for creating many ResumeDocumentParse entities in bulk.
type ResumeDocumentParseCreateBulk struct {
	config
	err      error
	builders []*ResumeDocumentParseCreate
	conflict []sql.ConflictOption
}

// Save creates the ResumeDocumentParse entities in the database.
func (rdpcb *ResumeDocumentParseCreateBulk) Save(ctx context.Context) ([]*ResumeDocumentParse, error) {
	if rdpcb.err != nil {
		return nil, rdpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rdpcb.builders))
	nodes := make([]*ResumeDocumentParse, len(rdpcb.builders))
	mutators := make([]Mutator, len(rdpcb.builders))
	for i := range rdpcb.builders {
		func(i int, root context.Context) {
			builder := rdpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResumeDocumentParseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rdpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rdpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rdpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rdpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rdpcb *ResumeDocumentParseCreateBulk) SaveX(ctx context.Context) []*ResumeDocumentParse {
	v, err := rdpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdpcb *ResumeDocumentParseCreateBulk) Exec(ctx context.Context) error {
	_, err := rdpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdpcb *ResumeDocumentParseCreateBulk) ExecX(ctx context.Context) {
	if err := rdpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeDocumentParse.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeDocumentParseUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rdpcb *ResumeDocumentParseCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResumeDocumentParseUpsertBulk {
	rdpcb.conflict = opts
	return &ResumeDocumentParseUpsertBulk{
		create: rdpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeDocumentParse.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdpcb *ResumeDocumentParseCreateBulk) OnConflictColumns(columns ...string) *ResumeDocumentParseUpsertBulk {
	rdpcb.conflict = append(rdpcb.conflict, sql.ConflictColumns(columns...))
	return &ResumeDocumentParseUpsertBulk{
		create: rdpcb,
	}
}

// ResumeDocumentParseUpsertBulk is the builder for "upsert"-ing
// a bulk of ResumeDocumentParse nodes.
type ResumeDocumentParseUpsertBulk struct {
	create *ResumeDocumentParseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ResumeDocumentParse.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumedocumentparse.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeDocumentParseUpsertBulk) UpdateNewValues() *ResumeDocumentParseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resumedocumentparse.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeDocumentParse.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResumeDocumentParseUpsertBulk) Ignore() *ResumeDocumentParseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeDocumentParseUpsertBulk) DoNothing() *ResumeDocumentParseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeDocumentParseCreateBulk.OnConflict
// documentation for more info.
func (u *ResumeDocumentParseUpsertBulk) Update(set func(*ResumeDocumentParseUpsert)) *ResumeDocumentParseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeDocumentParseUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeDocumentParseUpsertBulk) SetDeletedAt(v time.Time) *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertBulk) UpdateDeletedAt() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeDocumentParseUpsertBulk) ClearDeletedAt() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.ClearDeletedAt()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeDocumentParseUpsertBulk) SetResumeID(v uuid.UUID) *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertBulk) UpdateResumeID() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateResumeID()
	})
}

// SetFileID sets the "file_id" field.
func (u *ResumeDocumentParseUpsertBulk) SetFileID(v string) *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetFileID(v)
	})
}

// UpdateFileID sets the "file_id" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertBulk) UpdateFileID() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateFileID()
	})
}

// ClearFileID clears the value of the "file_id" field.
func (u *ResumeDocumentParseUpsertBulk) ClearFileID() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.ClearFileID()
	})
}

// SetContent sets the "content" field.
func (u *ResumeDocumentParseUpsertBulk) SetContent(v string) *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertBulk) UpdateContent() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *ResumeDocumentParseUpsertBulk) ClearContent() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.ClearContent()
	})
}

// SetFileType sets the "file_type" field.
func (u *ResumeDocumentParseUpsertBulk) SetFileType(v string) *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetFileType(v)
	})
}

// UpdateFileType sets the "file_type" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertBulk) UpdateFileType() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateFileType()
	})
}

// ClearFileType clears the value of the "file_type" field.
func (u *ResumeDocumentParseUpsertBulk) ClearFileType() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.ClearFileType()
	})
}

// SetFilename sets the "filename" field.
func (u *ResumeDocumentParseUpsertBulk) SetFilename(v string) *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetFilename(v)
	})
}

// UpdateFilename sets the "filename" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertBulk) UpdateFilename() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateFilename()
	})
}

// ClearFilename clears the value of the "filename" field.
func (u *ResumeDocumentParseUpsertBulk) ClearFilename() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.ClearFilename()
	})
}

// SetTitle sets the "title" field.
func (u *ResumeDocumentParseUpsertBulk) SetTitle(v string) *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertBulk) UpdateTitle() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *ResumeDocumentParseUpsertBulk) ClearTitle() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.ClearTitle()
	})
}

// SetUploadAt sets the "upload_at" field.
func (u *ResumeDocumentParseUpsertBulk) SetUploadAt(v time.Time) *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetUploadAt(v)
	})
}

// UpdateUploadAt sets the "upload_at" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertBulk) UpdateUploadAt() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateUploadAt()
	})
}

// ClearUploadAt clears the value of the "upload_at" field.
func (u *ResumeDocumentParseUpsertBulk) ClearUploadAt() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.ClearUploadAt()
	})
}

// SetStatus sets the "status" field.
func (u *ResumeDocumentParseUpsertBulk) SetStatus(v string) *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertBulk) UpdateStatus() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateStatus()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *ResumeDocumentParseUpsertBulk) SetErrorMessage(v string) *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertBulk) UpdateErrorMessage() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *ResumeDocumentParseUpsertBulk) ClearErrorMessage() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.ClearErrorMessage()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeDocumentParseUpsertBulk) SetCreatedAt(v time.Time) *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertBulk) UpdateCreatedAt() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeDocumentParseUpsertBulk) SetUpdatedAt(v time.Time) *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeDocumentParseUpsertBulk) UpdateUpdatedAt() *ResumeDocumentParseUpsertBulk {
	return u.Update(func(s *ResumeDocumentParseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeDocumentParseUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ResumeDocumentParseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeDocumentParseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeDocumentParseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
