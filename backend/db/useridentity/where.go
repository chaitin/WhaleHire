// Code generated by ent, DO NOT EDIT.

package useridentity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldDeletedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldUserID, v))
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v consts.UserPlatform) predicate.UserIdentity {
	vc := string(v)
	return predicate.UserIdentity(sql.FieldEQ(FieldPlatform, vc))
}

// IdentityID applies equality check predicate on the "identity_id" field. It's identical to IdentityIDEQ.
func IdentityID(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldIdentityID, v))
}

// UnionID applies equality check predicate on the "union_id" field. It's identical to UnionIDEQ.
func UnionID(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldUnionID, v))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldNickname, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldEmail, v))
}

// AvatarURL applies equality check predicate on the "avatar_url" field. It's identical to AvatarURLEQ.
func AvatarURL(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldAvatarURL, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotNull(FieldDeletedAt))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotNull(FieldUserID))
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v consts.UserPlatform) predicate.UserIdentity {
	vc := string(v)
	return predicate.UserIdentity(sql.FieldEQ(FieldPlatform, vc))
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v consts.UserPlatform) predicate.UserIdentity {
	vc := string(v)
	return predicate.UserIdentity(sql.FieldNEQ(FieldPlatform, vc))
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...consts.UserPlatform) predicate.UserIdentity {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.UserIdentity(sql.FieldIn(FieldPlatform, v...))
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...consts.UserPlatform) predicate.UserIdentity {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.UserIdentity(sql.FieldNotIn(FieldPlatform, v...))
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v consts.UserPlatform) predicate.UserIdentity {
	vc := string(v)
	return predicate.UserIdentity(sql.FieldGT(FieldPlatform, vc))
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v consts.UserPlatform) predicate.UserIdentity {
	vc := string(v)
	return predicate.UserIdentity(sql.FieldGTE(FieldPlatform, vc))
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v consts.UserPlatform) predicate.UserIdentity {
	vc := string(v)
	return predicate.UserIdentity(sql.FieldLT(FieldPlatform, vc))
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v consts.UserPlatform) predicate.UserIdentity {
	vc := string(v)
	return predicate.UserIdentity(sql.FieldLTE(FieldPlatform, vc))
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v consts.UserPlatform) predicate.UserIdentity {
	vc := string(v)
	return predicate.UserIdentity(sql.FieldContains(FieldPlatform, vc))
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v consts.UserPlatform) predicate.UserIdentity {
	vc := string(v)
	return predicate.UserIdentity(sql.FieldHasPrefix(FieldPlatform, vc))
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v consts.UserPlatform) predicate.UserIdentity {
	vc := string(v)
	return predicate.UserIdentity(sql.FieldHasSuffix(FieldPlatform, vc))
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v consts.UserPlatform) predicate.UserIdentity {
	vc := string(v)
	return predicate.UserIdentity(sql.FieldEqualFold(FieldPlatform, vc))
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v consts.UserPlatform) predicate.UserIdentity {
	vc := string(v)
	return predicate.UserIdentity(sql.FieldContainsFold(FieldPlatform, vc))
}

// IdentityIDEQ applies the EQ predicate on the "identity_id" field.
func IdentityIDEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldIdentityID, v))
}

// IdentityIDNEQ applies the NEQ predicate on the "identity_id" field.
func IdentityIDNEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNEQ(FieldIdentityID, v))
}

// IdentityIDIn applies the In predicate on the "identity_id" field.
func IdentityIDIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIn(FieldIdentityID, vs...))
}

// IdentityIDNotIn applies the NotIn predicate on the "identity_id" field.
func IdentityIDNotIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotIn(FieldIdentityID, vs...))
}

// IdentityIDGT applies the GT predicate on the "identity_id" field.
func IdentityIDGT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGT(FieldIdentityID, v))
}

// IdentityIDGTE applies the GTE predicate on the "identity_id" field.
func IdentityIDGTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGTE(FieldIdentityID, v))
}

// IdentityIDLT applies the LT predicate on the "identity_id" field.
func IdentityIDLT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLT(FieldIdentityID, v))
}

// IdentityIDLTE applies the LTE predicate on the "identity_id" field.
func IdentityIDLTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLTE(FieldIdentityID, v))
}

// IdentityIDContains applies the Contains predicate on the "identity_id" field.
func IdentityIDContains(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContains(FieldIdentityID, v))
}

// IdentityIDHasPrefix applies the HasPrefix predicate on the "identity_id" field.
func IdentityIDHasPrefix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasPrefix(FieldIdentityID, v))
}

// IdentityIDHasSuffix applies the HasSuffix predicate on the "identity_id" field.
func IdentityIDHasSuffix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasSuffix(FieldIdentityID, v))
}

// IdentityIDEqualFold applies the EqualFold predicate on the "identity_id" field.
func IdentityIDEqualFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEqualFold(FieldIdentityID, v))
}

// IdentityIDContainsFold applies the ContainsFold predicate on the "identity_id" field.
func IdentityIDContainsFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContainsFold(FieldIdentityID, v))
}

// UnionIDEQ applies the EQ predicate on the "union_id" field.
func UnionIDEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldUnionID, v))
}

// UnionIDNEQ applies the NEQ predicate on the "union_id" field.
func UnionIDNEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNEQ(FieldUnionID, v))
}

// UnionIDIn applies the In predicate on the "union_id" field.
func UnionIDIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIn(FieldUnionID, vs...))
}

// UnionIDNotIn applies the NotIn predicate on the "union_id" field.
func UnionIDNotIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotIn(FieldUnionID, vs...))
}

// UnionIDGT applies the GT predicate on the "union_id" field.
func UnionIDGT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGT(FieldUnionID, v))
}

// UnionIDGTE applies the GTE predicate on the "union_id" field.
func UnionIDGTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGTE(FieldUnionID, v))
}

// UnionIDLT applies the LT predicate on the "union_id" field.
func UnionIDLT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLT(FieldUnionID, v))
}

// UnionIDLTE applies the LTE predicate on the "union_id" field.
func UnionIDLTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLTE(FieldUnionID, v))
}

// UnionIDContains applies the Contains predicate on the "union_id" field.
func UnionIDContains(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContains(FieldUnionID, v))
}

// UnionIDHasPrefix applies the HasPrefix predicate on the "union_id" field.
func UnionIDHasPrefix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasPrefix(FieldUnionID, v))
}

// UnionIDHasSuffix applies the HasSuffix predicate on the "union_id" field.
func UnionIDHasSuffix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasSuffix(FieldUnionID, v))
}

// UnionIDIsNil applies the IsNil predicate on the "union_id" field.
func UnionIDIsNil() predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIsNull(FieldUnionID))
}

// UnionIDNotNil applies the NotNil predicate on the "union_id" field.
func UnionIDNotNil() predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotNull(FieldUnionID))
}

// UnionIDEqualFold applies the EqualFold predicate on the "union_id" field.
func UnionIDEqualFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEqualFold(FieldUnionID, v))
}

// UnionIDContainsFold applies the ContainsFold predicate on the "union_id" field.
func UnionIDContainsFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContainsFold(FieldUnionID, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameIsNil applies the IsNil predicate on the "nickname" field.
func NicknameIsNil() predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIsNull(FieldNickname))
}

// NicknameNotNil applies the NotNil predicate on the "nickname" field.
func NicknameNotNil() predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotNull(FieldNickname))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContainsFold(FieldNickname, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContainsFold(FieldEmail, v))
}

// AvatarURLEQ applies the EQ predicate on the "avatar_url" field.
func AvatarURLEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldAvatarURL, v))
}

// AvatarURLNEQ applies the NEQ predicate on the "avatar_url" field.
func AvatarURLNEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNEQ(FieldAvatarURL, v))
}

// AvatarURLIn applies the In predicate on the "avatar_url" field.
func AvatarURLIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIn(FieldAvatarURL, vs...))
}

// AvatarURLNotIn applies the NotIn predicate on the "avatar_url" field.
func AvatarURLNotIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotIn(FieldAvatarURL, vs...))
}

// AvatarURLGT applies the GT predicate on the "avatar_url" field.
func AvatarURLGT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGT(FieldAvatarURL, v))
}

// AvatarURLGTE applies the GTE predicate on the "avatar_url" field.
func AvatarURLGTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGTE(FieldAvatarURL, v))
}

// AvatarURLLT applies the LT predicate on the "avatar_url" field.
func AvatarURLLT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLT(FieldAvatarURL, v))
}

// AvatarURLLTE applies the LTE predicate on the "avatar_url" field.
func AvatarURLLTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLTE(FieldAvatarURL, v))
}

// AvatarURLContains applies the Contains predicate on the "avatar_url" field.
func AvatarURLContains(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContains(FieldAvatarURL, v))
}

// AvatarURLHasPrefix applies the HasPrefix predicate on the "avatar_url" field.
func AvatarURLHasPrefix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasPrefix(FieldAvatarURL, v))
}

// AvatarURLHasSuffix applies the HasSuffix predicate on the "avatar_url" field.
func AvatarURLHasSuffix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasSuffix(FieldAvatarURL, v))
}

// AvatarURLIsNil applies the IsNil predicate on the "avatar_url" field.
func AvatarURLIsNil() predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIsNull(FieldAvatarURL))
}

// AvatarURLNotNil applies the NotNil predicate on the "avatar_url" field.
func AvatarURLNotNil() predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotNull(FieldAvatarURL))
}

// AvatarURLEqualFold applies the EqualFold predicate on the "avatar_url" field.
func AvatarURLEqualFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEqualFold(FieldAvatarURL, v))
}

// AvatarURLContainsFold applies the ContainsFold predicate on the "avatar_url" field.
func AvatarURLContainsFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContainsFold(FieldAvatarURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserIdentity {
	return predicate.UserIdentity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserIdentity {
	return predicate.UserIdentity(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserIdentity) predicate.UserIdentity {
	return predicate.UserIdentity(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserIdentity) predicate.UserIdentity {
	return predicate.UserIdentity(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserIdentity) predicate.UserIdentity {
	return predicate.UserIdentity(sql.NotPredicates(p))
}
