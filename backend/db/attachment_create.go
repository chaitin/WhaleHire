// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ptonlix/whalehire/backend/db/attachment"
	"github.com/ptonlix/whalehire/backend/db/message"
)

// AttachmentCreate is the builder for creating a Attachment entity.
type AttachmentCreate struct {
	config
	mutation *AttachmentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AttachmentCreate) SetDeletedAt(t time.Time) *AttachmentCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableDeletedAt(t *time.Time) *AttachmentCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetMessageID sets the "message_id" field.
func (ac *AttachmentCreate) SetMessageID(u uuid.UUID) *AttachmentCreate {
	ac.mutation.SetMessageID(u)
	return ac
}

// SetType sets the "type" field.
func (ac *AttachmentCreate) SetType(s string) *AttachmentCreate {
	ac.mutation.SetType(s)
	return ac
}

// SetURL sets the "url" field.
func (ac *AttachmentCreate) SetURL(s string) *AttachmentCreate {
	ac.mutation.SetURL(s)
	return ac
}

// SetMetadata sets the "metadata" field.
func (ac *AttachmentCreate) SetMetadata(m map[string]interface{}) *AttachmentCreate {
	ac.mutation.SetMetadata(m)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AttachmentCreate) SetCreatedAt(t time.Time) *AttachmentCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableCreatedAt(t *time.Time) *AttachmentCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AttachmentCreate) SetUpdatedAt(t time.Time) *AttachmentCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableUpdatedAt(t *time.Time) *AttachmentCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AttachmentCreate) SetID(u uuid.UUID) *AttachmentCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableID(u *uuid.UUID) *AttachmentCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// SetMessage sets the "message" edge to the Message entity.
func (ac *AttachmentCreate) SetMessage(m *Message) *AttachmentCreate {
	return ac.SetMessageID(m.ID)
}

// Mutation returns the AttachmentMutation object of the builder.
func (ac *AttachmentCreate) Mutation() *AttachmentMutation {
	return ac.mutation
}

// Save creates the Attachment in the database.
func (ac *AttachmentCreate) Save(ctx context.Context) (*Attachment, error) {
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AttachmentCreate) SaveX(ctx context.Context) *Attachment {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AttachmentCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AttachmentCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AttachmentCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if attachment.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized attachment.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := attachment.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if attachment.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized attachment.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := attachment.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		if attachment.DefaultID == nil {
			return fmt.Errorf("db: uninitialized attachment.DefaultID (forgotten import db/runtime?)")
		}
		v := attachment.DefaultID()
		ac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AttachmentCreate) check() error {
	if _, ok := ac.mutation.MessageID(); !ok {
		return &ValidationError{Name: "message_id", err: errors.New(`db: missing required field "Attachment.message_id"`)}
	}
	if _, ok := ac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "Attachment.type"`)}
	}
	if v, ok := ac.mutation.GetType(); ok {
		if err := attachment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "Attachment.type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`db: missing required field "Attachment.url"`)}
	}
	if v, ok := ac.mutation.URL(); ok {
		if err := attachment.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`db: validator failed for field "Attachment.url": %w`, err)}
		}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Attachment.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Attachment.updated_at"`)}
	}
	if len(ac.mutation.MessageIDs()) == 0 {
		return &ValidationError{Name: "message", err: errors.New(`db: missing required edge "Attachment.message"`)}
	}
	return nil
}

func (ac *AttachmentCreate) sqlSave(ctx context.Context) (*Attachment, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AttachmentCreate) createSpec() (*Attachment, *sqlgraph.CreateSpec) {
	var (
		_node = &Attachment{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(attachment.Table, sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(attachment.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.SetField(attachment.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ac.mutation.URL(); ok {
		_spec.SetField(attachment.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := ac.mutation.Metadata(); ok {
		_spec.SetField(attachment.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(attachment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(attachment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ac.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.MessageTable,
			Columns: []string{attachment.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MessageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Attachment.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttachmentUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (ac *AttachmentCreate) OnConflict(opts ...sql.ConflictOption) *AttachmentUpsertOne {
	ac.conflict = opts
	return &AttachmentUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Attachment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AttachmentCreate) OnConflictColumns(columns ...string) *AttachmentUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AttachmentUpsertOne{
		create: ac,
	}
}

type (
	// AttachmentUpsertOne is the builder for "upsert"-ing
	//  one Attachment node.
	AttachmentUpsertOne struct {
		create *AttachmentCreate
	}

	// AttachmentUpsert is the "OnConflict" setter.
	AttachmentUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *AttachmentUpsert) SetDeletedAt(v time.Time) *AttachmentUpsert {
	u.Set(attachment.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateDeletedAt() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AttachmentUpsert) ClearDeletedAt() *AttachmentUpsert {
	u.SetNull(attachment.FieldDeletedAt)
	return u
}

// SetMessageID sets the "message_id" field.
func (u *AttachmentUpsert) SetMessageID(v uuid.UUID) *AttachmentUpsert {
	u.Set(attachment.FieldMessageID, v)
	return u
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateMessageID() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldMessageID)
	return u
}

// SetType sets the "type" field.
func (u *AttachmentUpsert) SetType(v string) *AttachmentUpsert {
	u.Set(attachment.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateType() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldType)
	return u
}

// SetURL sets the "url" field.
func (u *AttachmentUpsert) SetURL(v string) *AttachmentUpsert {
	u.Set(attachment.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateURL() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldURL)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *AttachmentUpsert) SetMetadata(v map[string]interface{}) *AttachmentUpsert {
	u.Set(attachment.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateMetadata() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *AttachmentUpsert) ClearMetadata() *AttachmentUpsert {
	u.SetNull(attachment.FieldMetadata)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AttachmentUpsert) SetCreatedAt(v time.Time) *AttachmentUpsert {
	u.Set(attachment.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateCreatedAt() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AttachmentUpsert) SetUpdatedAt(v time.Time) *AttachmentUpsert {
	u.Set(attachment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateUpdatedAt() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Attachment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(attachment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AttachmentUpsertOne) UpdateNewValues() *AttachmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(attachment.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Attachment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AttachmentUpsertOne) Ignore() *AttachmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttachmentUpsertOne) DoNothing() *AttachmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttachmentCreate.OnConflict
// documentation for more info.
func (u *AttachmentUpsertOne) Update(set func(*AttachmentUpsert)) *AttachmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttachmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AttachmentUpsertOne) SetDeletedAt(v time.Time) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateDeletedAt() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AttachmentUpsertOne) ClearDeletedAt() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMessageID sets the "message_id" field.
func (u *AttachmentUpsertOne) SetMessageID(v uuid.UUID) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetMessageID(v)
	})
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateMessageID() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateMessageID()
	})
}

// SetType sets the "type" field.
func (u *AttachmentUpsertOne) SetType(v string) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateType() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateType()
	})
}

// SetURL sets the "url" field.
func (u *AttachmentUpsertOne) SetURL(v string) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateURL() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateURL()
	})
}

// SetMetadata sets the "metadata" field.
func (u *AttachmentUpsertOne) SetMetadata(v map[string]interface{}) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateMetadata() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *AttachmentUpsertOne) ClearMetadata() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearMetadata()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AttachmentUpsertOne) SetCreatedAt(v time.Time) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateCreatedAt() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AttachmentUpsertOne) SetUpdatedAt(v time.Time) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateUpdatedAt() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *AttachmentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for AttachmentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttachmentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AttachmentUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: AttachmentUpsertOne.ID is not supported by MySQL driver. Use AttachmentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AttachmentUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AttachmentCreateBulk is the builder for creating many Attachment entities in bulk.
type AttachmentCreateBulk struct {
	config
	err      error
	builders []*AttachmentCreate
	conflict []sql.ConflictOption
}

// Save creates the Attachment entities in the database.
func (acb *AttachmentCreateBulk) Save(ctx context.Context) ([]*Attachment, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Attachment, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttachmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AttachmentCreateBulk) SaveX(ctx context.Context) []*Attachment {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AttachmentCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AttachmentCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Attachment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttachmentUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (acb *AttachmentCreateBulk) OnConflict(opts ...sql.ConflictOption) *AttachmentUpsertBulk {
	acb.conflict = opts
	return &AttachmentUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Attachment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AttachmentCreateBulk) OnConflictColumns(columns ...string) *AttachmentUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AttachmentUpsertBulk{
		create: acb,
	}
}

// AttachmentUpsertBulk is the builder for "upsert"-ing
// a bulk of Attachment nodes.
type AttachmentUpsertBulk struct {
	create *AttachmentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Attachment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(attachment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AttachmentUpsertBulk) UpdateNewValues() *AttachmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(attachment.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Attachment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AttachmentUpsertBulk) Ignore() *AttachmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttachmentUpsertBulk) DoNothing() *AttachmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttachmentCreateBulk.OnConflict
// documentation for more info.
func (u *AttachmentUpsertBulk) Update(set func(*AttachmentUpsert)) *AttachmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttachmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AttachmentUpsertBulk) SetDeletedAt(v time.Time) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateDeletedAt() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AttachmentUpsertBulk) ClearDeletedAt() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMessageID sets the "message_id" field.
func (u *AttachmentUpsertBulk) SetMessageID(v uuid.UUID) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetMessageID(v)
	})
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateMessageID() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateMessageID()
	})
}

// SetType sets the "type" field.
func (u *AttachmentUpsertBulk) SetType(v string) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateType() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateType()
	})
}

// SetURL sets the "url" field.
func (u *AttachmentUpsertBulk) SetURL(v string) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateURL() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateURL()
	})
}

// SetMetadata sets the "metadata" field.
func (u *AttachmentUpsertBulk) SetMetadata(v map[string]interface{}) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateMetadata() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *AttachmentUpsertBulk) ClearMetadata() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearMetadata()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AttachmentUpsertBulk) SetCreatedAt(v time.Time) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateCreatedAt() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AttachmentUpsertBulk) SetUpdatedAt(v time.Time) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateUpdatedAt() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *AttachmentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the AttachmentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for AttachmentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttachmentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
