// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/jobskill"
	"github.com/chaitin/WhaleHire/backend/db/jobskillmeta"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// JobSkillUpdate is the builder for updating JobSkill entities.
type JobSkillUpdate struct {
	config
	hooks     []Hook
	mutation  *JobSkillMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the JobSkillUpdate builder.
func (jsu *JobSkillUpdate) Where(ps ...predicate.JobSkill) *JobSkillUpdate {
	jsu.mutation.Where(ps...)
	return jsu
}

// SetDeletedAt sets the "deleted_at" field.
func (jsu *JobSkillUpdate) SetDeletedAt(t time.Time) *JobSkillUpdate {
	jsu.mutation.SetDeletedAt(t)
	return jsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jsu *JobSkillUpdate) SetNillableDeletedAt(t *time.Time) *JobSkillUpdate {
	if t != nil {
		jsu.SetDeletedAt(*t)
	}
	return jsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jsu *JobSkillUpdate) ClearDeletedAt() *JobSkillUpdate {
	jsu.mutation.ClearDeletedAt()
	return jsu
}

// SetJobID sets the "job_id" field.
func (jsu *JobSkillUpdate) SetJobID(u uuid.UUID) *JobSkillUpdate {
	jsu.mutation.SetJobID(u)
	return jsu
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (jsu *JobSkillUpdate) SetNillableJobID(u *uuid.UUID) *JobSkillUpdate {
	if u != nil {
		jsu.SetJobID(*u)
	}
	return jsu
}

// SetSkillID sets the "skill_id" field.
func (jsu *JobSkillUpdate) SetSkillID(u uuid.UUID) *JobSkillUpdate {
	jsu.mutation.SetSkillID(u)
	return jsu
}

// SetNillableSkillID sets the "skill_id" field if the given value is not nil.
func (jsu *JobSkillUpdate) SetNillableSkillID(u *uuid.UUID) *JobSkillUpdate {
	if u != nil {
		jsu.SetSkillID(*u)
	}
	return jsu
}

// SetType sets the "type" field.
func (jsu *JobSkillUpdate) SetType(cst consts.JobSkillType) *JobSkillUpdate {
	jsu.mutation.SetType(cst)
	return jsu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (jsu *JobSkillUpdate) SetNillableType(cst *consts.JobSkillType) *JobSkillUpdate {
	if cst != nil {
		jsu.SetType(*cst)
	}
	return jsu
}

// SetUpdatedAt sets the "updated_at" field.
func (jsu *JobSkillUpdate) SetUpdatedAt(t time.Time) *JobSkillUpdate {
	jsu.mutation.SetUpdatedAt(t)
	return jsu
}

// SetJob sets the "job" edge to the JobPosition entity.
func (jsu *JobSkillUpdate) SetJob(j *JobPosition) *JobSkillUpdate {
	return jsu.SetJobID(j.ID)
}

// SetSkill sets the "skill" edge to the JobSkillMeta entity.
func (jsu *JobSkillUpdate) SetSkill(j *JobSkillMeta) *JobSkillUpdate {
	return jsu.SetSkillID(j.ID)
}

// Mutation returns the JobSkillMutation object of the builder.
func (jsu *JobSkillUpdate) Mutation() *JobSkillMutation {
	return jsu.mutation
}

// ClearJob clears the "job" edge to the JobPosition entity.
func (jsu *JobSkillUpdate) ClearJob() *JobSkillUpdate {
	jsu.mutation.ClearJob()
	return jsu
}

// ClearSkill clears the "skill" edge to the JobSkillMeta entity.
func (jsu *JobSkillUpdate) ClearSkill() *JobSkillUpdate {
	jsu.mutation.ClearSkill()
	return jsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jsu *JobSkillUpdate) Save(ctx context.Context) (int, error) {
	if err := jsu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, jsu.sqlSave, jsu.mutation, jsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jsu *JobSkillUpdate) SaveX(ctx context.Context) int {
	affected, err := jsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jsu *JobSkillUpdate) Exec(ctx context.Context) error {
	_, err := jsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jsu *JobSkillUpdate) ExecX(ctx context.Context) {
	if err := jsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jsu *JobSkillUpdate) defaults() error {
	if _, ok := jsu.mutation.UpdatedAt(); !ok {
		if jobskill.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized jobskill.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := jobskill.UpdateDefaultUpdatedAt()
		jsu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jsu *JobSkillUpdate) check() error {
	if jsu.mutation.JobCleared() && len(jsu.mutation.JobIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "JobSkill.job"`)
	}
	if jsu.mutation.SkillCleared() && len(jsu.mutation.SkillIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "JobSkill.skill"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jsu *JobSkillUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobSkillUpdate {
	jsu.modifiers = append(jsu.modifiers, modifiers...)
	return jsu
}

func (jsu *JobSkillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobskill.Table, jobskill.Columns, sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID))
	if ps := jsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jsu.mutation.DeletedAt(); ok {
		_spec.SetField(jobskill.FieldDeletedAt, field.TypeTime, value)
	}
	if jsu.mutation.DeletedAtCleared() {
		_spec.ClearField(jobskill.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jsu.mutation.GetType(); ok {
		_spec.SetField(jobskill.FieldType, field.TypeString, value)
	}
	if value, ok := jsu.mutation.UpdatedAt(); ok {
		_spec.SetField(jobskill.FieldUpdatedAt, field.TypeTime, value)
	}
	if jsu.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobskill.JobTable,
			Columns: []string{jobskill.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jsu.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobskill.JobTable,
			Columns: []string{jobskill.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jsu.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobskill.SkillTable,
			Columns: []string{jobskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskillmeta.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jsu.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobskill.SkillTable,
			Columns: []string{jobskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskillmeta.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(jsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, jsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobskill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jsu.mutation.done = true
	return n, nil
}

// JobSkillUpdateOne is the builder for updating a single JobSkill entity.
type JobSkillUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *JobSkillMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (jsuo *JobSkillUpdateOne) SetDeletedAt(t time.Time) *JobSkillUpdateOne {
	jsuo.mutation.SetDeletedAt(t)
	return jsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jsuo *JobSkillUpdateOne) SetNillableDeletedAt(t *time.Time) *JobSkillUpdateOne {
	if t != nil {
		jsuo.SetDeletedAt(*t)
	}
	return jsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jsuo *JobSkillUpdateOne) ClearDeletedAt() *JobSkillUpdateOne {
	jsuo.mutation.ClearDeletedAt()
	return jsuo
}

// SetJobID sets the "job_id" field.
func (jsuo *JobSkillUpdateOne) SetJobID(u uuid.UUID) *JobSkillUpdateOne {
	jsuo.mutation.SetJobID(u)
	return jsuo
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (jsuo *JobSkillUpdateOne) SetNillableJobID(u *uuid.UUID) *JobSkillUpdateOne {
	if u != nil {
		jsuo.SetJobID(*u)
	}
	return jsuo
}

// SetSkillID sets the "skill_id" field.
func (jsuo *JobSkillUpdateOne) SetSkillID(u uuid.UUID) *JobSkillUpdateOne {
	jsuo.mutation.SetSkillID(u)
	return jsuo
}

// SetNillableSkillID sets the "skill_id" field if the given value is not nil.
func (jsuo *JobSkillUpdateOne) SetNillableSkillID(u *uuid.UUID) *JobSkillUpdateOne {
	if u != nil {
		jsuo.SetSkillID(*u)
	}
	return jsuo
}

// SetType sets the "type" field.
func (jsuo *JobSkillUpdateOne) SetType(cst consts.JobSkillType) *JobSkillUpdateOne {
	jsuo.mutation.SetType(cst)
	return jsuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (jsuo *JobSkillUpdateOne) SetNillableType(cst *consts.JobSkillType) *JobSkillUpdateOne {
	if cst != nil {
		jsuo.SetType(*cst)
	}
	return jsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (jsuo *JobSkillUpdateOne) SetUpdatedAt(t time.Time) *JobSkillUpdateOne {
	jsuo.mutation.SetUpdatedAt(t)
	return jsuo
}

// SetJob sets the "job" edge to the JobPosition entity.
func (jsuo *JobSkillUpdateOne) SetJob(j *JobPosition) *JobSkillUpdateOne {
	return jsuo.SetJobID(j.ID)
}

// SetSkill sets the "skill" edge to the JobSkillMeta entity.
func (jsuo *JobSkillUpdateOne) SetSkill(j *JobSkillMeta) *JobSkillUpdateOne {
	return jsuo.SetSkillID(j.ID)
}

// Mutation returns the JobSkillMutation object of the builder.
func (jsuo *JobSkillUpdateOne) Mutation() *JobSkillMutation {
	return jsuo.mutation
}

// ClearJob clears the "job" edge to the JobPosition entity.
func (jsuo *JobSkillUpdateOne) ClearJob() *JobSkillUpdateOne {
	jsuo.mutation.ClearJob()
	return jsuo
}

// ClearSkill clears the "skill" edge to the JobSkillMeta entity.
func (jsuo *JobSkillUpdateOne) ClearSkill() *JobSkillUpdateOne {
	jsuo.mutation.ClearSkill()
	return jsuo
}

// Where appends a list predicates to the JobSkillUpdate builder.
func (jsuo *JobSkillUpdateOne) Where(ps ...predicate.JobSkill) *JobSkillUpdateOne {
	jsuo.mutation.Where(ps...)
	return jsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jsuo *JobSkillUpdateOne) Select(field string, fields ...string) *JobSkillUpdateOne {
	jsuo.fields = append([]string{field}, fields...)
	return jsuo
}

// Save executes the query and returns the updated JobSkill entity.
func (jsuo *JobSkillUpdateOne) Save(ctx context.Context) (*JobSkill, error) {
	if err := jsuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jsuo.sqlSave, jsuo.mutation, jsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jsuo *JobSkillUpdateOne) SaveX(ctx context.Context) *JobSkill {
	node, err := jsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jsuo *JobSkillUpdateOne) Exec(ctx context.Context) error {
	_, err := jsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jsuo *JobSkillUpdateOne) ExecX(ctx context.Context) {
	if err := jsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jsuo *JobSkillUpdateOne) defaults() error {
	if _, ok := jsuo.mutation.UpdatedAt(); !ok {
		if jobskill.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized jobskill.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := jobskill.UpdateDefaultUpdatedAt()
		jsuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jsuo *JobSkillUpdateOne) check() error {
	if jsuo.mutation.JobCleared() && len(jsuo.mutation.JobIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "JobSkill.job"`)
	}
	if jsuo.mutation.SkillCleared() && len(jsuo.mutation.SkillIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "JobSkill.skill"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jsuo *JobSkillUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobSkillUpdateOne {
	jsuo.modifiers = append(jsuo.modifiers, modifiers...)
	return jsuo
}

func (jsuo *JobSkillUpdateOne) sqlSave(ctx context.Context) (_node *JobSkill, err error) {
	if err := jsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobskill.Table, jobskill.Columns, sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID))
	id, ok := jsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "JobSkill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobskill.FieldID)
		for _, f := range fields {
			if !jobskill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != jobskill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jsuo.mutation.DeletedAt(); ok {
		_spec.SetField(jobskill.FieldDeletedAt, field.TypeTime, value)
	}
	if jsuo.mutation.DeletedAtCleared() {
		_spec.ClearField(jobskill.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jsuo.mutation.GetType(); ok {
		_spec.SetField(jobskill.FieldType, field.TypeString, value)
	}
	if value, ok := jsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobskill.FieldUpdatedAt, field.TypeTime, value)
	}
	if jsuo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobskill.JobTable,
			Columns: []string{jobskill.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jsuo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobskill.JobTable,
			Columns: []string{jobskill.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jsuo.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobskill.SkillTable,
			Columns: []string{jobskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskillmeta.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jsuo.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobskill.SkillTable,
			Columns: []string{jobskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskillmeta.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(jsuo.modifiers...)
	_node = &JobSkill{config: jsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobskill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jsuo.mutation.done = true
	return _node, nil
}
