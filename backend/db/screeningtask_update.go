// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/screeningresult"
	"github.com/chaitin/WhaleHire/backend/db/screeningrunmetric"
	"github.com/chaitin/WhaleHire/backend/db/screeningtask"
	"github.com/chaitin/WhaleHire/backend/db/screeningtaskresume"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/google/uuid"
)

// ScreeningTaskUpdate is the builder for updating ScreeningTask entities.
type ScreeningTaskUpdate struct {
	config
	hooks     []Hook
	mutation  *ScreeningTaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ScreeningTaskUpdate builder.
func (stu *ScreeningTaskUpdate) Where(ps ...predicate.ScreeningTask) *ScreeningTaskUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetDeletedAt sets the "deleted_at" field.
func (stu *ScreeningTaskUpdate) SetDeletedAt(t time.Time) *ScreeningTaskUpdate {
	stu.mutation.SetDeletedAt(t)
	return stu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (stu *ScreeningTaskUpdate) SetNillableDeletedAt(t *time.Time) *ScreeningTaskUpdate {
	if t != nil {
		stu.SetDeletedAt(*t)
	}
	return stu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (stu *ScreeningTaskUpdate) ClearDeletedAt() *ScreeningTaskUpdate {
	stu.mutation.ClearDeletedAt()
	return stu
}

// SetJobPositionID sets the "job_position_id" field.
func (stu *ScreeningTaskUpdate) SetJobPositionID(u uuid.UUID) *ScreeningTaskUpdate {
	stu.mutation.SetJobPositionID(u)
	return stu
}

// SetNillableJobPositionID sets the "job_position_id" field if the given value is not nil.
func (stu *ScreeningTaskUpdate) SetNillableJobPositionID(u *uuid.UUID) *ScreeningTaskUpdate {
	if u != nil {
		stu.SetJobPositionID(*u)
	}
	return stu
}

// SetCreatedBy sets the "created_by" field.
func (stu *ScreeningTaskUpdate) SetCreatedBy(u uuid.UUID) *ScreeningTaskUpdate {
	stu.mutation.SetCreatedBy(u)
	return stu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (stu *ScreeningTaskUpdate) SetNillableCreatedBy(u *uuid.UUID) *ScreeningTaskUpdate {
	if u != nil {
		stu.SetCreatedBy(*u)
	}
	return stu
}

// SetStatus sets the "status" field.
func (stu *ScreeningTaskUpdate) SetStatus(s string) *ScreeningTaskUpdate {
	stu.mutation.SetStatus(s)
	return stu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (stu *ScreeningTaskUpdate) SetNillableStatus(s *string) *ScreeningTaskUpdate {
	if s != nil {
		stu.SetStatus(*s)
	}
	return stu
}

// SetDimensionWeights sets the "dimension_weights" field.
func (stu *ScreeningTaskUpdate) SetDimensionWeights(m map[string]interface{}) *ScreeningTaskUpdate {
	stu.mutation.SetDimensionWeights(m)
	return stu
}

// ClearDimensionWeights clears the value of the "dimension_weights" field.
func (stu *ScreeningTaskUpdate) ClearDimensionWeights() *ScreeningTaskUpdate {
	stu.mutation.ClearDimensionWeights()
	return stu
}

// SetLlmConfig sets the "llm_config" field.
func (stu *ScreeningTaskUpdate) SetLlmConfig(m map[string]interface{}) *ScreeningTaskUpdate {
	stu.mutation.SetLlmConfig(m)
	return stu
}

// ClearLlmConfig clears the value of the "llm_config" field.
func (stu *ScreeningTaskUpdate) ClearLlmConfig() *ScreeningTaskUpdate {
	stu.mutation.ClearLlmConfig()
	return stu
}

// SetNotes sets the "notes" field.
func (stu *ScreeningTaskUpdate) SetNotes(s string) *ScreeningTaskUpdate {
	stu.mutation.SetNotes(s)
	return stu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (stu *ScreeningTaskUpdate) SetNillableNotes(s *string) *ScreeningTaskUpdate {
	if s != nil {
		stu.SetNotes(*s)
	}
	return stu
}

// ClearNotes clears the value of the "notes" field.
func (stu *ScreeningTaskUpdate) ClearNotes() *ScreeningTaskUpdate {
	stu.mutation.ClearNotes()
	return stu
}

// SetResumeTotal sets the "resume_total" field.
func (stu *ScreeningTaskUpdate) SetResumeTotal(i int) *ScreeningTaskUpdate {
	stu.mutation.ResetResumeTotal()
	stu.mutation.SetResumeTotal(i)
	return stu
}

// SetNillableResumeTotal sets the "resume_total" field if the given value is not nil.
func (stu *ScreeningTaskUpdate) SetNillableResumeTotal(i *int) *ScreeningTaskUpdate {
	if i != nil {
		stu.SetResumeTotal(*i)
	}
	return stu
}

// AddResumeTotal adds i to the "resume_total" field.
func (stu *ScreeningTaskUpdate) AddResumeTotal(i int) *ScreeningTaskUpdate {
	stu.mutation.AddResumeTotal(i)
	return stu
}

// SetResumeProcessed sets the "resume_processed" field.
func (stu *ScreeningTaskUpdate) SetResumeProcessed(i int) *ScreeningTaskUpdate {
	stu.mutation.ResetResumeProcessed()
	stu.mutation.SetResumeProcessed(i)
	return stu
}

// SetNillableResumeProcessed sets the "resume_processed" field if the given value is not nil.
func (stu *ScreeningTaskUpdate) SetNillableResumeProcessed(i *int) *ScreeningTaskUpdate {
	if i != nil {
		stu.SetResumeProcessed(*i)
	}
	return stu
}

// AddResumeProcessed adds i to the "resume_processed" field.
func (stu *ScreeningTaskUpdate) AddResumeProcessed(i int) *ScreeningTaskUpdate {
	stu.mutation.AddResumeProcessed(i)
	return stu
}

// SetResumeSucceeded sets the "resume_succeeded" field.
func (stu *ScreeningTaskUpdate) SetResumeSucceeded(i int) *ScreeningTaskUpdate {
	stu.mutation.ResetResumeSucceeded()
	stu.mutation.SetResumeSucceeded(i)
	return stu
}

// SetNillableResumeSucceeded sets the "resume_succeeded" field if the given value is not nil.
func (stu *ScreeningTaskUpdate) SetNillableResumeSucceeded(i *int) *ScreeningTaskUpdate {
	if i != nil {
		stu.SetResumeSucceeded(*i)
	}
	return stu
}

// AddResumeSucceeded adds i to the "resume_succeeded" field.
func (stu *ScreeningTaskUpdate) AddResumeSucceeded(i int) *ScreeningTaskUpdate {
	stu.mutation.AddResumeSucceeded(i)
	return stu
}

// SetResumeFailed sets the "resume_failed" field.
func (stu *ScreeningTaskUpdate) SetResumeFailed(i int) *ScreeningTaskUpdate {
	stu.mutation.ResetResumeFailed()
	stu.mutation.SetResumeFailed(i)
	return stu
}

// SetNillableResumeFailed sets the "resume_failed" field if the given value is not nil.
func (stu *ScreeningTaskUpdate) SetNillableResumeFailed(i *int) *ScreeningTaskUpdate {
	if i != nil {
		stu.SetResumeFailed(*i)
	}
	return stu
}

// AddResumeFailed adds i to the "resume_failed" field.
func (stu *ScreeningTaskUpdate) AddResumeFailed(i int) *ScreeningTaskUpdate {
	stu.mutation.AddResumeFailed(i)
	return stu
}

// SetAgentVersion sets the "agent_version" field.
func (stu *ScreeningTaskUpdate) SetAgentVersion(s string) *ScreeningTaskUpdate {
	stu.mutation.SetAgentVersion(s)
	return stu
}

// SetNillableAgentVersion sets the "agent_version" field if the given value is not nil.
func (stu *ScreeningTaskUpdate) SetNillableAgentVersion(s *string) *ScreeningTaskUpdate {
	if s != nil {
		stu.SetAgentVersion(*s)
	}
	return stu
}

// ClearAgentVersion clears the value of the "agent_version" field.
func (stu *ScreeningTaskUpdate) ClearAgentVersion() *ScreeningTaskUpdate {
	stu.mutation.ClearAgentVersion()
	return stu
}

// SetStartedAt sets the "started_at" field.
func (stu *ScreeningTaskUpdate) SetStartedAt(t time.Time) *ScreeningTaskUpdate {
	stu.mutation.SetStartedAt(t)
	return stu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (stu *ScreeningTaskUpdate) SetNillableStartedAt(t *time.Time) *ScreeningTaskUpdate {
	if t != nil {
		stu.SetStartedAt(*t)
	}
	return stu
}

// ClearStartedAt clears the value of the "started_at" field.
func (stu *ScreeningTaskUpdate) ClearStartedAt() *ScreeningTaskUpdate {
	stu.mutation.ClearStartedAt()
	return stu
}

// SetFinishedAt sets the "finished_at" field.
func (stu *ScreeningTaskUpdate) SetFinishedAt(t time.Time) *ScreeningTaskUpdate {
	stu.mutation.SetFinishedAt(t)
	return stu
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (stu *ScreeningTaskUpdate) SetNillableFinishedAt(t *time.Time) *ScreeningTaskUpdate {
	if t != nil {
		stu.SetFinishedAt(*t)
	}
	return stu
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (stu *ScreeningTaskUpdate) ClearFinishedAt() *ScreeningTaskUpdate {
	stu.mutation.ClearFinishedAt()
	return stu
}

// SetUpdatedAt sets the "updated_at" field.
func (stu *ScreeningTaskUpdate) SetUpdatedAt(t time.Time) *ScreeningTaskUpdate {
	stu.mutation.SetUpdatedAt(t)
	return stu
}

// SetJobPosition sets the "job_position" edge to the JobPosition entity.
func (stu *ScreeningTaskUpdate) SetJobPosition(j *JobPosition) *ScreeningTaskUpdate {
	return stu.SetJobPositionID(j.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (stu *ScreeningTaskUpdate) SetCreatorID(id uuid.UUID) *ScreeningTaskUpdate {
	stu.mutation.SetCreatorID(id)
	return stu
}

// SetCreator sets the "creator" edge to the User entity.
func (stu *ScreeningTaskUpdate) SetCreator(u *User) *ScreeningTaskUpdate {
	return stu.SetCreatorID(u.ID)
}

// AddTaskResumeIDs adds the "task_resumes" edge to the ScreeningTaskResume entity by IDs.
func (stu *ScreeningTaskUpdate) AddTaskResumeIDs(ids ...uuid.UUID) *ScreeningTaskUpdate {
	stu.mutation.AddTaskResumeIDs(ids...)
	return stu
}

// AddTaskResumes adds the "task_resumes" edges to the ScreeningTaskResume entity.
func (stu *ScreeningTaskUpdate) AddTaskResumes(s ...*ScreeningTaskResume) *ScreeningTaskUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddTaskResumeIDs(ids...)
}

// AddResultIDs adds the "results" edge to the ScreeningResult entity by IDs.
func (stu *ScreeningTaskUpdate) AddResultIDs(ids ...uuid.UUID) *ScreeningTaskUpdate {
	stu.mutation.AddResultIDs(ids...)
	return stu
}

// AddResults adds the "results" edges to the ScreeningResult entity.
func (stu *ScreeningTaskUpdate) AddResults(s ...*ScreeningResult) *ScreeningTaskUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddResultIDs(ids...)
}

// AddRunMetricIDs adds the "run_metrics" edge to the ScreeningRunMetric entity by IDs.
func (stu *ScreeningTaskUpdate) AddRunMetricIDs(ids ...uuid.UUID) *ScreeningTaskUpdate {
	stu.mutation.AddRunMetricIDs(ids...)
	return stu
}

// AddRunMetrics adds the "run_metrics" edges to the ScreeningRunMetric entity.
func (stu *ScreeningTaskUpdate) AddRunMetrics(s ...*ScreeningRunMetric) *ScreeningTaskUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddRunMetricIDs(ids...)
}

// Mutation returns the ScreeningTaskMutation object of the builder.
func (stu *ScreeningTaskUpdate) Mutation() *ScreeningTaskMutation {
	return stu.mutation
}

// ClearJobPosition clears the "job_position" edge to the JobPosition entity.
func (stu *ScreeningTaskUpdate) ClearJobPosition() *ScreeningTaskUpdate {
	stu.mutation.ClearJobPosition()
	return stu
}

// ClearCreator clears the "creator" edge to the User entity.
func (stu *ScreeningTaskUpdate) ClearCreator() *ScreeningTaskUpdate {
	stu.mutation.ClearCreator()
	return stu
}

// ClearTaskResumes clears all "task_resumes" edges to the ScreeningTaskResume entity.
func (stu *ScreeningTaskUpdate) ClearTaskResumes() *ScreeningTaskUpdate {
	stu.mutation.ClearTaskResumes()
	return stu
}

// RemoveTaskResumeIDs removes the "task_resumes" edge to ScreeningTaskResume entities by IDs.
func (stu *ScreeningTaskUpdate) RemoveTaskResumeIDs(ids ...uuid.UUID) *ScreeningTaskUpdate {
	stu.mutation.RemoveTaskResumeIDs(ids...)
	return stu
}

// RemoveTaskResumes removes "task_resumes" edges to ScreeningTaskResume entities.
func (stu *ScreeningTaskUpdate) RemoveTaskResumes(s ...*ScreeningTaskResume) *ScreeningTaskUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveTaskResumeIDs(ids...)
}

// ClearResults clears all "results" edges to the ScreeningResult entity.
func (stu *ScreeningTaskUpdate) ClearResults() *ScreeningTaskUpdate {
	stu.mutation.ClearResults()
	return stu
}

// RemoveResultIDs removes the "results" edge to ScreeningResult entities by IDs.
func (stu *ScreeningTaskUpdate) RemoveResultIDs(ids ...uuid.UUID) *ScreeningTaskUpdate {
	stu.mutation.RemoveResultIDs(ids...)
	return stu
}

// RemoveResults removes "results" edges to ScreeningResult entities.
func (stu *ScreeningTaskUpdate) RemoveResults(s ...*ScreeningResult) *ScreeningTaskUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveResultIDs(ids...)
}

// ClearRunMetrics clears all "run_metrics" edges to the ScreeningRunMetric entity.
func (stu *ScreeningTaskUpdate) ClearRunMetrics() *ScreeningTaskUpdate {
	stu.mutation.ClearRunMetrics()
	return stu
}

// RemoveRunMetricIDs removes the "run_metrics" edge to ScreeningRunMetric entities by IDs.
func (stu *ScreeningTaskUpdate) RemoveRunMetricIDs(ids ...uuid.UUID) *ScreeningTaskUpdate {
	stu.mutation.RemoveRunMetricIDs(ids...)
	return stu
}

// RemoveRunMetrics removes "run_metrics" edges to ScreeningRunMetric entities.
func (stu *ScreeningTaskUpdate) RemoveRunMetrics(s ...*ScreeningRunMetric) *ScreeningTaskUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveRunMetricIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *ScreeningTaskUpdate) Save(ctx context.Context) (int, error) {
	if err := stu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *ScreeningTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *ScreeningTaskUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *ScreeningTaskUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *ScreeningTaskUpdate) defaults() error {
	if _, ok := stu.mutation.UpdatedAt(); !ok {
		if screeningtask.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningtask.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := screeningtask.UpdateDefaultUpdatedAt()
		stu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (stu *ScreeningTaskUpdate) check() error {
	if v, ok := stu.mutation.AgentVersion(); ok {
		if err := screeningtask.AgentVersionValidator(v); err != nil {
			return &ValidationError{Name: "agent_version", err: fmt.Errorf(`db: validator failed for field "ScreeningTask.agent_version": %w`, err)}
		}
	}
	if stu.mutation.JobPositionCleared() && len(stu.mutation.JobPositionIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ScreeningTask.job_position"`)
	}
	if stu.mutation.CreatorCleared() && len(stu.mutation.CreatorIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ScreeningTask.creator"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (stu *ScreeningTaskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScreeningTaskUpdate {
	stu.modifiers = append(stu.modifiers, modifiers...)
	return stu
}

func (stu *ScreeningTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := stu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(screeningtask.Table, screeningtask.Columns, sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.DeletedAt(); ok {
		_spec.SetField(screeningtask.FieldDeletedAt, field.TypeTime, value)
	}
	if stu.mutation.DeletedAtCleared() {
		_spec.ClearField(screeningtask.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := stu.mutation.Status(); ok {
		_spec.SetField(screeningtask.FieldStatus, field.TypeString, value)
	}
	if value, ok := stu.mutation.DimensionWeights(); ok {
		_spec.SetField(screeningtask.FieldDimensionWeights, field.TypeJSON, value)
	}
	if stu.mutation.DimensionWeightsCleared() {
		_spec.ClearField(screeningtask.FieldDimensionWeights, field.TypeJSON)
	}
	if value, ok := stu.mutation.LlmConfig(); ok {
		_spec.SetField(screeningtask.FieldLlmConfig, field.TypeJSON, value)
	}
	if stu.mutation.LlmConfigCleared() {
		_spec.ClearField(screeningtask.FieldLlmConfig, field.TypeJSON)
	}
	if value, ok := stu.mutation.Notes(); ok {
		_spec.SetField(screeningtask.FieldNotes, field.TypeString, value)
	}
	if stu.mutation.NotesCleared() {
		_spec.ClearField(screeningtask.FieldNotes, field.TypeString)
	}
	if value, ok := stu.mutation.ResumeTotal(); ok {
		_spec.SetField(screeningtask.FieldResumeTotal, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedResumeTotal(); ok {
		_spec.AddField(screeningtask.FieldResumeTotal, field.TypeInt, value)
	}
	if value, ok := stu.mutation.ResumeProcessed(); ok {
		_spec.SetField(screeningtask.FieldResumeProcessed, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedResumeProcessed(); ok {
		_spec.AddField(screeningtask.FieldResumeProcessed, field.TypeInt, value)
	}
	if value, ok := stu.mutation.ResumeSucceeded(); ok {
		_spec.SetField(screeningtask.FieldResumeSucceeded, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedResumeSucceeded(); ok {
		_spec.AddField(screeningtask.FieldResumeSucceeded, field.TypeInt, value)
	}
	if value, ok := stu.mutation.ResumeFailed(); ok {
		_spec.SetField(screeningtask.FieldResumeFailed, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedResumeFailed(); ok {
		_spec.AddField(screeningtask.FieldResumeFailed, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AgentVersion(); ok {
		_spec.SetField(screeningtask.FieldAgentVersion, field.TypeString, value)
	}
	if stu.mutation.AgentVersionCleared() {
		_spec.ClearField(screeningtask.FieldAgentVersion, field.TypeString)
	}
	if value, ok := stu.mutation.StartedAt(); ok {
		_spec.SetField(screeningtask.FieldStartedAt, field.TypeTime, value)
	}
	if stu.mutation.StartedAtCleared() {
		_spec.ClearField(screeningtask.FieldStartedAt, field.TypeTime)
	}
	if value, ok := stu.mutation.FinishedAt(); ok {
		_spec.SetField(screeningtask.FieldFinishedAt, field.TypeTime, value)
	}
	if stu.mutation.FinishedAtCleared() {
		_spec.ClearField(screeningtask.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := stu.mutation.UpdatedAt(); ok {
		_spec.SetField(screeningtask.FieldUpdatedAt, field.TypeTime, value)
	}
	if stu.mutation.JobPositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningtask.JobPositionTable,
			Columns: []string{screeningtask.JobPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.JobPositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningtask.JobPositionTable,
			Columns: []string{screeningtask.JobPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningtask.CreatorTable,
			Columns: []string{screeningtask.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningtask.CreatorTable,
			Columns: []string{screeningtask.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.TaskResumesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.TaskResumesTable,
			Columns: []string{screeningtask.TaskResumesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtaskresume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedTaskResumesIDs(); len(nodes) > 0 && !stu.mutation.TaskResumesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.TaskResumesTable,
			Columns: []string{screeningtask.TaskResumesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtaskresume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.TaskResumesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.TaskResumesTable,
			Columns: []string{screeningtask.TaskResumesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtaskresume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.ResultsTable,
			Columns: []string{screeningtask.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningresult.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedResultsIDs(); len(nodes) > 0 && !stu.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.ResultsTable,
			Columns: []string{screeningtask.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.ResultsTable,
			Columns: []string{screeningtask.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.RunMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.RunMetricsTable,
			Columns: []string{screeningtask.RunMetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningrunmetric.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedRunMetricsIDs(); len(nodes) > 0 && !stu.mutation.RunMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.RunMetricsTable,
			Columns: []string{screeningtask.RunMetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningrunmetric.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RunMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.RunMetricsTable,
			Columns: []string{screeningtask.RunMetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningrunmetric.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(stu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{screeningtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// ScreeningTaskUpdateOne is the builder for updating a single ScreeningTask entity.
type ScreeningTaskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ScreeningTaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (stuo *ScreeningTaskUpdateOne) SetDeletedAt(t time.Time) *ScreeningTaskUpdateOne {
	stuo.mutation.SetDeletedAt(t)
	return stuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (stuo *ScreeningTaskUpdateOne) SetNillableDeletedAt(t *time.Time) *ScreeningTaskUpdateOne {
	if t != nil {
		stuo.SetDeletedAt(*t)
	}
	return stuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (stuo *ScreeningTaskUpdateOne) ClearDeletedAt() *ScreeningTaskUpdateOne {
	stuo.mutation.ClearDeletedAt()
	return stuo
}

// SetJobPositionID sets the "job_position_id" field.
func (stuo *ScreeningTaskUpdateOne) SetJobPositionID(u uuid.UUID) *ScreeningTaskUpdateOne {
	stuo.mutation.SetJobPositionID(u)
	return stuo
}

// SetNillableJobPositionID sets the "job_position_id" field if the given value is not nil.
func (stuo *ScreeningTaskUpdateOne) SetNillableJobPositionID(u *uuid.UUID) *ScreeningTaskUpdateOne {
	if u != nil {
		stuo.SetJobPositionID(*u)
	}
	return stuo
}

// SetCreatedBy sets the "created_by" field.
func (stuo *ScreeningTaskUpdateOne) SetCreatedBy(u uuid.UUID) *ScreeningTaskUpdateOne {
	stuo.mutation.SetCreatedBy(u)
	return stuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (stuo *ScreeningTaskUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *ScreeningTaskUpdateOne {
	if u != nil {
		stuo.SetCreatedBy(*u)
	}
	return stuo
}

// SetStatus sets the "status" field.
func (stuo *ScreeningTaskUpdateOne) SetStatus(s string) *ScreeningTaskUpdateOne {
	stuo.mutation.SetStatus(s)
	return stuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (stuo *ScreeningTaskUpdateOne) SetNillableStatus(s *string) *ScreeningTaskUpdateOne {
	if s != nil {
		stuo.SetStatus(*s)
	}
	return stuo
}

// SetDimensionWeights sets the "dimension_weights" field.
func (stuo *ScreeningTaskUpdateOne) SetDimensionWeights(m map[string]interface{}) *ScreeningTaskUpdateOne {
	stuo.mutation.SetDimensionWeights(m)
	return stuo
}

// ClearDimensionWeights clears the value of the "dimension_weights" field.
func (stuo *ScreeningTaskUpdateOne) ClearDimensionWeights() *ScreeningTaskUpdateOne {
	stuo.mutation.ClearDimensionWeights()
	return stuo
}

// SetLlmConfig sets the "llm_config" field.
func (stuo *ScreeningTaskUpdateOne) SetLlmConfig(m map[string]interface{}) *ScreeningTaskUpdateOne {
	stuo.mutation.SetLlmConfig(m)
	return stuo
}

// ClearLlmConfig clears the value of the "llm_config" field.
func (stuo *ScreeningTaskUpdateOne) ClearLlmConfig() *ScreeningTaskUpdateOne {
	stuo.mutation.ClearLlmConfig()
	return stuo
}

// SetNotes sets the "notes" field.
func (stuo *ScreeningTaskUpdateOne) SetNotes(s string) *ScreeningTaskUpdateOne {
	stuo.mutation.SetNotes(s)
	return stuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (stuo *ScreeningTaskUpdateOne) SetNillableNotes(s *string) *ScreeningTaskUpdateOne {
	if s != nil {
		stuo.SetNotes(*s)
	}
	return stuo
}

// ClearNotes clears the value of the "notes" field.
func (stuo *ScreeningTaskUpdateOne) ClearNotes() *ScreeningTaskUpdateOne {
	stuo.mutation.ClearNotes()
	return stuo
}

// SetResumeTotal sets the "resume_total" field.
func (stuo *ScreeningTaskUpdateOne) SetResumeTotal(i int) *ScreeningTaskUpdateOne {
	stuo.mutation.ResetResumeTotal()
	stuo.mutation.SetResumeTotal(i)
	return stuo
}

// SetNillableResumeTotal sets the "resume_total" field if the given value is not nil.
func (stuo *ScreeningTaskUpdateOne) SetNillableResumeTotal(i *int) *ScreeningTaskUpdateOne {
	if i != nil {
		stuo.SetResumeTotal(*i)
	}
	return stuo
}

// AddResumeTotal adds i to the "resume_total" field.
func (stuo *ScreeningTaskUpdateOne) AddResumeTotal(i int) *ScreeningTaskUpdateOne {
	stuo.mutation.AddResumeTotal(i)
	return stuo
}

// SetResumeProcessed sets the "resume_processed" field.
func (stuo *ScreeningTaskUpdateOne) SetResumeProcessed(i int) *ScreeningTaskUpdateOne {
	stuo.mutation.ResetResumeProcessed()
	stuo.mutation.SetResumeProcessed(i)
	return stuo
}

// SetNillableResumeProcessed sets the "resume_processed" field if the given value is not nil.
func (stuo *ScreeningTaskUpdateOne) SetNillableResumeProcessed(i *int) *ScreeningTaskUpdateOne {
	if i != nil {
		stuo.SetResumeProcessed(*i)
	}
	return stuo
}

// AddResumeProcessed adds i to the "resume_processed" field.
func (stuo *ScreeningTaskUpdateOne) AddResumeProcessed(i int) *ScreeningTaskUpdateOne {
	stuo.mutation.AddResumeProcessed(i)
	return stuo
}

// SetResumeSucceeded sets the "resume_succeeded" field.
func (stuo *ScreeningTaskUpdateOne) SetResumeSucceeded(i int) *ScreeningTaskUpdateOne {
	stuo.mutation.ResetResumeSucceeded()
	stuo.mutation.SetResumeSucceeded(i)
	return stuo
}

// SetNillableResumeSucceeded sets the "resume_succeeded" field if the given value is not nil.
func (stuo *ScreeningTaskUpdateOne) SetNillableResumeSucceeded(i *int) *ScreeningTaskUpdateOne {
	if i != nil {
		stuo.SetResumeSucceeded(*i)
	}
	return stuo
}

// AddResumeSucceeded adds i to the "resume_succeeded" field.
func (stuo *ScreeningTaskUpdateOne) AddResumeSucceeded(i int) *ScreeningTaskUpdateOne {
	stuo.mutation.AddResumeSucceeded(i)
	return stuo
}

// SetResumeFailed sets the "resume_failed" field.
func (stuo *ScreeningTaskUpdateOne) SetResumeFailed(i int) *ScreeningTaskUpdateOne {
	stuo.mutation.ResetResumeFailed()
	stuo.mutation.SetResumeFailed(i)
	return stuo
}

// SetNillableResumeFailed sets the "resume_failed" field if the given value is not nil.
func (stuo *ScreeningTaskUpdateOne) SetNillableResumeFailed(i *int) *ScreeningTaskUpdateOne {
	if i != nil {
		stuo.SetResumeFailed(*i)
	}
	return stuo
}

// AddResumeFailed adds i to the "resume_failed" field.
func (stuo *ScreeningTaskUpdateOne) AddResumeFailed(i int) *ScreeningTaskUpdateOne {
	stuo.mutation.AddResumeFailed(i)
	return stuo
}

// SetAgentVersion sets the "agent_version" field.
func (stuo *ScreeningTaskUpdateOne) SetAgentVersion(s string) *ScreeningTaskUpdateOne {
	stuo.mutation.SetAgentVersion(s)
	return stuo
}

// SetNillableAgentVersion sets the "agent_version" field if the given value is not nil.
func (stuo *ScreeningTaskUpdateOne) SetNillableAgentVersion(s *string) *ScreeningTaskUpdateOne {
	if s != nil {
		stuo.SetAgentVersion(*s)
	}
	return stuo
}

// ClearAgentVersion clears the value of the "agent_version" field.
func (stuo *ScreeningTaskUpdateOne) ClearAgentVersion() *ScreeningTaskUpdateOne {
	stuo.mutation.ClearAgentVersion()
	return stuo
}

// SetStartedAt sets the "started_at" field.
func (stuo *ScreeningTaskUpdateOne) SetStartedAt(t time.Time) *ScreeningTaskUpdateOne {
	stuo.mutation.SetStartedAt(t)
	return stuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (stuo *ScreeningTaskUpdateOne) SetNillableStartedAt(t *time.Time) *ScreeningTaskUpdateOne {
	if t != nil {
		stuo.SetStartedAt(*t)
	}
	return stuo
}

// ClearStartedAt clears the value of the "started_at" field.
func (stuo *ScreeningTaskUpdateOne) ClearStartedAt() *ScreeningTaskUpdateOne {
	stuo.mutation.ClearStartedAt()
	return stuo
}

// SetFinishedAt sets the "finished_at" field.
func (stuo *ScreeningTaskUpdateOne) SetFinishedAt(t time.Time) *ScreeningTaskUpdateOne {
	stuo.mutation.SetFinishedAt(t)
	return stuo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (stuo *ScreeningTaskUpdateOne) SetNillableFinishedAt(t *time.Time) *ScreeningTaskUpdateOne {
	if t != nil {
		stuo.SetFinishedAt(*t)
	}
	return stuo
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (stuo *ScreeningTaskUpdateOne) ClearFinishedAt() *ScreeningTaskUpdateOne {
	stuo.mutation.ClearFinishedAt()
	return stuo
}

// SetUpdatedAt sets the "updated_at" field.
func (stuo *ScreeningTaskUpdateOne) SetUpdatedAt(t time.Time) *ScreeningTaskUpdateOne {
	stuo.mutation.SetUpdatedAt(t)
	return stuo
}

// SetJobPosition sets the "job_position" edge to the JobPosition entity.
func (stuo *ScreeningTaskUpdateOne) SetJobPosition(j *JobPosition) *ScreeningTaskUpdateOne {
	return stuo.SetJobPositionID(j.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (stuo *ScreeningTaskUpdateOne) SetCreatorID(id uuid.UUID) *ScreeningTaskUpdateOne {
	stuo.mutation.SetCreatorID(id)
	return stuo
}

// SetCreator sets the "creator" edge to the User entity.
func (stuo *ScreeningTaskUpdateOne) SetCreator(u *User) *ScreeningTaskUpdateOne {
	return stuo.SetCreatorID(u.ID)
}

// AddTaskResumeIDs adds the "task_resumes" edge to the ScreeningTaskResume entity by IDs.
func (stuo *ScreeningTaskUpdateOne) AddTaskResumeIDs(ids ...uuid.UUID) *ScreeningTaskUpdateOne {
	stuo.mutation.AddTaskResumeIDs(ids...)
	return stuo
}

// AddTaskResumes adds the "task_resumes" edges to the ScreeningTaskResume entity.
func (stuo *ScreeningTaskUpdateOne) AddTaskResumes(s ...*ScreeningTaskResume) *ScreeningTaskUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddTaskResumeIDs(ids...)
}

// AddResultIDs adds the "results" edge to the ScreeningResult entity by IDs.
func (stuo *ScreeningTaskUpdateOne) AddResultIDs(ids ...uuid.UUID) *ScreeningTaskUpdateOne {
	stuo.mutation.AddResultIDs(ids...)
	return stuo
}

// AddResults adds the "results" edges to the ScreeningResult entity.
func (stuo *ScreeningTaskUpdateOne) AddResults(s ...*ScreeningResult) *ScreeningTaskUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddResultIDs(ids...)
}

// AddRunMetricIDs adds the "run_metrics" edge to the ScreeningRunMetric entity by IDs.
func (stuo *ScreeningTaskUpdateOne) AddRunMetricIDs(ids ...uuid.UUID) *ScreeningTaskUpdateOne {
	stuo.mutation.AddRunMetricIDs(ids...)
	return stuo
}

// AddRunMetrics adds the "run_metrics" edges to the ScreeningRunMetric entity.
func (stuo *ScreeningTaskUpdateOne) AddRunMetrics(s ...*ScreeningRunMetric) *ScreeningTaskUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddRunMetricIDs(ids...)
}

// Mutation returns the ScreeningTaskMutation object of the builder.
func (stuo *ScreeningTaskUpdateOne) Mutation() *ScreeningTaskMutation {
	return stuo.mutation
}

// ClearJobPosition clears the "job_position" edge to the JobPosition entity.
func (stuo *ScreeningTaskUpdateOne) ClearJobPosition() *ScreeningTaskUpdateOne {
	stuo.mutation.ClearJobPosition()
	return stuo
}

// ClearCreator clears the "creator" edge to the User entity.
func (stuo *ScreeningTaskUpdateOne) ClearCreator() *ScreeningTaskUpdateOne {
	stuo.mutation.ClearCreator()
	return stuo
}

// ClearTaskResumes clears all "task_resumes" edges to the ScreeningTaskResume entity.
func (stuo *ScreeningTaskUpdateOne) ClearTaskResumes() *ScreeningTaskUpdateOne {
	stuo.mutation.ClearTaskResumes()
	return stuo
}

// RemoveTaskResumeIDs removes the "task_resumes" edge to ScreeningTaskResume entities by IDs.
func (stuo *ScreeningTaskUpdateOne) RemoveTaskResumeIDs(ids ...uuid.UUID) *ScreeningTaskUpdateOne {
	stuo.mutation.RemoveTaskResumeIDs(ids...)
	return stuo
}

// RemoveTaskResumes removes "task_resumes" edges to ScreeningTaskResume entities.
func (stuo *ScreeningTaskUpdateOne) RemoveTaskResumes(s ...*ScreeningTaskResume) *ScreeningTaskUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveTaskResumeIDs(ids...)
}

// ClearResults clears all "results" edges to the ScreeningResult entity.
func (stuo *ScreeningTaskUpdateOne) ClearResults() *ScreeningTaskUpdateOne {
	stuo.mutation.ClearResults()
	return stuo
}

// RemoveResultIDs removes the "results" edge to ScreeningResult entities by IDs.
func (stuo *ScreeningTaskUpdateOne) RemoveResultIDs(ids ...uuid.UUID) *ScreeningTaskUpdateOne {
	stuo.mutation.RemoveResultIDs(ids...)
	return stuo
}

// RemoveResults removes "results" edges to ScreeningResult entities.
func (stuo *ScreeningTaskUpdateOne) RemoveResults(s ...*ScreeningResult) *ScreeningTaskUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveResultIDs(ids...)
}

// ClearRunMetrics clears all "run_metrics" edges to the ScreeningRunMetric entity.
func (stuo *ScreeningTaskUpdateOne) ClearRunMetrics() *ScreeningTaskUpdateOne {
	stuo.mutation.ClearRunMetrics()
	return stuo
}

// RemoveRunMetricIDs removes the "run_metrics" edge to ScreeningRunMetric entities by IDs.
func (stuo *ScreeningTaskUpdateOne) RemoveRunMetricIDs(ids ...uuid.UUID) *ScreeningTaskUpdateOne {
	stuo.mutation.RemoveRunMetricIDs(ids...)
	return stuo
}

// RemoveRunMetrics removes "run_metrics" edges to ScreeningRunMetric entities.
func (stuo *ScreeningTaskUpdateOne) RemoveRunMetrics(s ...*ScreeningRunMetric) *ScreeningTaskUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveRunMetricIDs(ids...)
}

// Where appends a list predicates to the ScreeningTaskUpdate builder.
func (stuo *ScreeningTaskUpdateOne) Where(ps ...predicate.ScreeningTask) *ScreeningTaskUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *ScreeningTaskUpdateOne) Select(field string, fields ...string) *ScreeningTaskUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated ScreeningTask entity.
func (stuo *ScreeningTaskUpdateOne) Save(ctx context.Context) (*ScreeningTask, error) {
	if err := stuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *ScreeningTaskUpdateOne) SaveX(ctx context.Context) *ScreeningTask {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *ScreeningTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *ScreeningTaskUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *ScreeningTaskUpdateOne) defaults() error {
	if _, ok := stuo.mutation.UpdatedAt(); !ok {
		if screeningtask.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized screeningtask.UpdateDefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := screeningtask.UpdateDefaultUpdatedAt()
		stuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (stuo *ScreeningTaskUpdateOne) check() error {
	if v, ok := stuo.mutation.AgentVersion(); ok {
		if err := screeningtask.AgentVersionValidator(v); err != nil {
			return &ValidationError{Name: "agent_version", err: fmt.Errorf(`db: validator failed for field "ScreeningTask.agent_version": %w`, err)}
		}
	}
	if stuo.mutation.JobPositionCleared() && len(stuo.mutation.JobPositionIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ScreeningTask.job_position"`)
	}
	if stuo.mutation.CreatorCleared() && len(stuo.mutation.CreatorIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ScreeningTask.creator"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (stuo *ScreeningTaskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScreeningTaskUpdateOne {
	stuo.modifiers = append(stuo.modifiers, modifiers...)
	return stuo
}

func (stuo *ScreeningTaskUpdateOne) sqlSave(ctx context.Context) (_node *ScreeningTask, err error) {
	if err := stuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(screeningtask.Table, screeningtask.Columns, sqlgraph.NewFieldSpec(screeningtask.FieldID, field.TypeUUID))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ScreeningTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, screeningtask.FieldID)
		for _, f := range fields {
			if !screeningtask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != screeningtask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.DeletedAt(); ok {
		_spec.SetField(screeningtask.FieldDeletedAt, field.TypeTime, value)
	}
	if stuo.mutation.DeletedAtCleared() {
		_spec.ClearField(screeningtask.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := stuo.mutation.Status(); ok {
		_spec.SetField(screeningtask.FieldStatus, field.TypeString, value)
	}
	if value, ok := stuo.mutation.DimensionWeights(); ok {
		_spec.SetField(screeningtask.FieldDimensionWeights, field.TypeJSON, value)
	}
	if stuo.mutation.DimensionWeightsCleared() {
		_spec.ClearField(screeningtask.FieldDimensionWeights, field.TypeJSON)
	}
	if value, ok := stuo.mutation.LlmConfig(); ok {
		_spec.SetField(screeningtask.FieldLlmConfig, field.TypeJSON, value)
	}
	if stuo.mutation.LlmConfigCleared() {
		_spec.ClearField(screeningtask.FieldLlmConfig, field.TypeJSON)
	}
	if value, ok := stuo.mutation.Notes(); ok {
		_spec.SetField(screeningtask.FieldNotes, field.TypeString, value)
	}
	if stuo.mutation.NotesCleared() {
		_spec.ClearField(screeningtask.FieldNotes, field.TypeString)
	}
	if value, ok := stuo.mutation.ResumeTotal(); ok {
		_spec.SetField(screeningtask.FieldResumeTotal, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedResumeTotal(); ok {
		_spec.AddField(screeningtask.FieldResumeTotal, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.ResumeProcessed(); ok {
		_spec.SetField(screeningtask.FieldResumeProcessed, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedResumeProcessed(); ok {
		_spec.AddField(screeningtask.FieldResumeProcessed, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.ResumeSucceeded(); ok {
		_spec.SetField(screeningtask.FieldResumeSucceeded, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedResumeSucceeded(); ok {
		_spec.AddField(screeningtask.FieldResumeSucceeded, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.ResumeFailed(); ok {
		_spec.SetField(screeningtask.FieldResumeFailed, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedResumeFailed(); ok {
		_spec.AddField(screeningtask.FieldResumeFailed, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AgentVersion(); ok {
		_spec.SetField(screeningtask.FieldAgentVersion, field.TypeString, value)
	}
	if stuo.mutation.AgentVersionCleared() {
		_spec.ClearField(screeningtask.FieldAgentVersion, field.TypeString)
	}
	if value, ok := stuo.mutation.StartedAt(); ok {
		_spec.SetField(screeningtask.FieldStartedAt, field.TypeTime, value)
	}
	if stuo.mutation.StartedAtCleared() {
		_spec.ClearField(screeningtask.FieldStartedAt, field.TypeTime)
	}
	if value, ok := stuo.mutation.FinishedAt(); ok {
		_spec.SetField(screeningtask.FieldFinishedAt, field.TypeTime, value)
	}
	if stuo.mutation.FinishedAtCleared() {
		_spec.ClearField(screeningtask.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := stuo.mutation.UpdatedAt(); ok {
		_spec.SetField(screeningtask.FieldUpdatedAt, field.TypeTime, value)
	}
	if stuo.mutation.JobPositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningtask.JobPositionTable,
			Columns: []string{screeningtask.JobPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.JobPositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningtask.JobPositionTable,
			Columns: []string{screeningtask.JobPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningtask.CreatorTable,
			Columns: []string{screeningtask.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screeningtask.CreatorTable,
			Columns: []string{screeningtask.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.TaskResumesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.TaskResumesTable,
			Columns: []string{screeningtask.TaskResumesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtaskresume.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedTaskResumesIDs(); len(nodes) > 0 && !stuo.mutation.TaskResumesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.TaskResumesTable,
			Columns: []string{screeningtask.TaskResumesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtaskresume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.TaskResumesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.TaskResumesTable,
			Columns: []string{screeningtask.TaskResumesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningtaskresume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.ResultsTable,
			Columns: []string{screeningtask.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningresult.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedResultsIDs(); len(nodes) > 0 && !stuo.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.ResultsTable,
			Columns: []string{screeningtask.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.ResultsTable,
			Columns: []string{screeningtask.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.RunMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.RunMetricsTable,
			Columns: []string{screeningtask.RunMetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningrunmetric.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedRunMetricsIDs(); len(nodes) > 0 && !stuo.mutation.RunMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.RunMetricsTable,
			Columns: []string{screeningtask.RunMetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningrunmetric.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RunMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screeningtask.RunMetricsTable,
			Columns: []string{screeningtask.RunMetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screeningrunmetric.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(stuo.modifiers...)
	_node = &ScreeningTask{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{screeningtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
