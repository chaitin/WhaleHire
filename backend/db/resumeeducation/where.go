// Code generated by ent, DO NOT EDIT.

package resumeeducation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldDeletedAt, v))
}

// ResumeID applies equality check predicate on the "resume_id" field. It's identical to ResumeIDEQ.
func ResumeID(v uuid.UUID) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldResumeID, v))
}

// School applies equality check predicate on the "school" field. It's identical to SchoolEQ.
func School(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldSchool, v))
}

// Degree applies equality check predicate on the "degree" field. It's identical to DegreeEQ.
func Degree(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldDegree, v))
}

// Major applies equality check predicate on the "major" field. It's identical to MajorEQ.
func Major(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldMajor, v))
}

// Gpa applies equality check predicate on the "gpa" field. It's identical to GpaEQ.
func Gpa(v float64) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldGpa, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldEndDate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotNull(FieldDeletedAt))
}

// ResumeIDEQ applies the EQ predicate on the "resume_id" field.
func ResumeIDEQ(v uuid.UUID) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldResumeID, v))
}

// ResumeIDNEQ applies the NEQ predicate on the "resume_id" field.
func ResumeIDNEQ(v uuid.UUID) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNEQ(FieldResumeID, v))
}

// ResumeIDIn applies the In predicate on the "resume_id" field.
func ResumeIDIn(vs ...uuid.UUID) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIn(FieldResumeID, vs...))
}

// ResumeIDNotIn applies the NotIn predicate on the "resume_id" field.
func ResumeIDNotIn(vs ...uuid.UUID) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotIn(FieldResumeID, vs...))
}

// SchoolEQ applies the EQ predicate on the "school" field.
func SchoolEQ(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldSchool, v))
}

// SchoolNEQ applies the NEQ predicate on the "school" field.
func SchoolNEQ(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNEQ(FieldSchool, v))
}

// SchoolIn applies the In predicate on the "school" field.
func SchoolIn(vs ...string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIn(FieldSchool, vs...))
}

// SchoolNotIn applies the NotIn predicate on the "school" field.
func SchoolNotIn(vs ...string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotIn(FieldSchool, vs...))
}

// SchoolGT applies the GT predicate on the "school" field.
func SchoolGT(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGT(FieldSchool, v))
}

// SchoolGTE applies the GTE predicate on the "school" field.
func SchoolGTE(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGTE(FieldSchool, v))
}

// SchoolLT applies the LT predicate on the "school" field.
func SchoolLT(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLT(FieldSchool, v))
}

// SchoolLTE applies the LTE predicate on the "school" field.
func SchoolLTE(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLTE(FieldSchool, v))
}

// SchoolContains applies the Contains predicate on the "school" field.
func SchoolContains(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldContains(FieldSchool, v))
}

// SchoolHasPrefix applies the HasPrefix predicate on the "school" field.
func SchoolHasPrefix(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldHasPrefix(FieldSchool, v))
}

// SchoolHasSuffix applies the HasSuffix predicate on the "school" field.
func SchoolHasSuffix(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldHasSuffix(FieldSchool, v))
}

// SchoolIsNil applies the IsNil predicate on the "school" field.
func SchoolIsNil() predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIsNull(FieldSchool))
}

// SchoolNotNil applies the NotNil predicate on the "school" field.
func SchoolNotNil() predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotNull(FieldSchool))
}

// SchoolEqualFold applies the EqualFold predicate on the "school" field.
func SchoolEqualFold(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEqualFold(FieldSchool, v))
}

// SchoolContainsFold applies the ContainsFold predicate on the "school" field.
func SchoolContainsFold(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldContainsFold(FieldSchool, v))
}

// DegreeEQ applies the EQ predicate on the "degree" field.
func DegreeEQ(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldDegree, v))
}

// DegreeNEQ applies the NEQ predicate on the "degree" field.
func DegreeNEQ(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNEQ(FieldDegree, v))
}

// DegreeIn applies the In predicate on the "degree" field.
func DegreeIn(vs ...string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIn(FieldDegree, vs...))
}

// DegreeNotIn applies the NotIn predicate on the "degree" field.
func DegreeNotIn(vs ...string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotIn(FieldDegree, vs...))
}

// DegreeGT applies the GT predicate on the "degree" field.
func DegreeGT(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGT(FieldDegree, v))
}

// DegreeGTE applies the GTE predicate on the "degree" field.
func DegreeGTE(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGTE(FieldDegree, v))
}

// DegreeLT applies the LT predicate on the "degree" field.
func DegreeLT(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLT(FieldDegree, v))
}

// DegreeLTE applies the LTE predicate on the "degree" field.
func DegreeLTE(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLTE(FieldDegree, v))
}

// DegreeContains applies the Contains predicate on the "degree" field.
func DegreeContains(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldContains(FieldDegree, v))
}

// DegreeHasPrefix applies the HasPrefix predicate on the "degree" field.
func DegreeHasPrefix(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldHasPrefix(FieldDegree, v))
}

// DegreeHasSuffix applies the HasSuffix predicate on the "degree" field.
func DegreeHasSuffix(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldHasSuffix(FieldDegree, v))
}

// DegreeIsNil applies the IsNil predicate on the "degree" field.
func DegreeIsNil() predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIsNull(FieldDegree))
}

// DegreeNotNil applies the NotNil predicate on the "degree" field.
func DegreeNotNil() predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotNull(FieldDegree))
}

// DegreeEqualFold applies the EqualFold predicate on the "degree" field.
func DegreeEqualFold(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEqualFold(FieldDegree, v))
}

// DegreeContainsFold applies the ContainsFold predicate on the "degree" field.
func DegreeContainsFold(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldContainsFold(FieldDegree, v))
}

// MajorEQ applies the EQ predicate on the "major" field.
func MajorEQ(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldMajor, v))
}

// MajorNEQ applies the NEQ predicate on the "major" field.
func MajorNEQ(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNEQ(FieldMajor, v))
}

// MajorIn applies the In predicate on the "major" field.
func MajorIn(vs ...string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIn(FieldMajor, vs...))
}

// MajorNotIn applies the NotIn predicate on the "major" field.
func MajorNotIn(vs ...string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotIn(FieldMajor, vs...))
}

// MajorGT applies the GT predicate on the "major" field.
func MajorGT(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGT(FieldMajor, v))
}

// MajorGTE applies the GTE predicate on the "major" field.
func MajorGTE(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGTE(FieldMajor, v))
}

// MajorLT applies the LT predicate on the "major" field.
func MajorLT(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLT(FieldMajor, v))
}

// MajorLTE applies the LTE predicate on the "major" field.
func MajorLTE(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLTE(FieldMajor, v))
}

// MajorContains applies the Contains predicate on the "major" field.
func MajorContains(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldContains(FieldMajor, v))
}

// MajorHasPrefix applies the HasPrefix predicate on the "major" field.
func MajorHasPrefix(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldHasPrefix(FieldMajor, v))
}

// MajorHasSuffix applies the HasSuffix predicate on the "major" field.
func MajorHasSuffix(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldHasSuffix(FieldMajor, v))
}

// MajorIsNil applies the IsNil predicate on the "major" field.
func MajorIsNil() predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIsNull(FieldMajor))
}

// MajorNotNil applies the NotNil predicate on the "major" field.
func MajorNotNil() predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotNull(FieldMajor))
}

// MajorEqualFold applies the EqualFold predicate on the "major" field.
func MajorEqualFold(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEqualFold(FieldMajor, v))
}

// MajorContainsFold applies the ContainsFold predicate on the "major" field.
func MajorContainsFold(v string) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldContainsFold(FieldMajor, v))
}

// GpaEQ applies the EQ predicate on the "gpa" field.
func GpaEQ(v float64) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldGpa, v))
}

// GpaNEQ applies the NEQ predicate on the "gpa" field.
func GpaNEQ(v float64) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNEQ(FieldGpa, v))
}

// GpaIn applies the In predicate on the "gpa" field.
func GpaIn(vs ...float64) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIn(FieldGpa, vs...))
}

// GpaNotIn applies the NotIn predicate on the "gpa" field.
func GpaNotIn(vs ...float64) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotIn(FieldGpa, vs...))
}

// GpaGT applies the GT predicate on the "gpa" field.
func GpaGT(v float64) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGT(FieldGpa, v))
}

// GpaGTE applies the GTE predicate on the "gpa" field.
func GpaGTE(v float64) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGTE(FieldGpa, v))
}

// GpaLT applies the LT predicate on the "gpa" field.
func GpaLT(v float64) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLT(FieldGpa, v))
}

// GpaLTE applies the LTE predicate on the "gpa" field.
func GpaLTE(v float64) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLTE(FieldGpa, v))
}

// GpaIsNil applies the IsNil predicate on the "gpa" field.
func GpaIsNil() predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIsNull(FieldGpa))
}

// GpaNotNil applies the NotNil predicate on the "gpa" field.
func GpaNotNil() predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotNull(FieldGpa))
}

// UniversityTypesIsNil applies the IsNil predicate on the "university_types" field.
func UniversityTypesIsNil() predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIsNull(FieldUniversityTypes))
}

// UniversityTypesNotNil applies the NotNil predicate on the "university_types" field.
func UniversityTypesNotNil() predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotNull(FieldUniversityTypes))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLTE(FieldStartDate, v))
}

// StartDateIsNil applies the IsNil predicate on the "start_date" field.
func StartDateIsNil() predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIsNull(FieldStartDate))
}

// StartDateNotNil applies the NotNil predicate on the "start_date" field.
func StartDateNotNil() predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotNull(FieldStartDate))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotNull(FieldEndDate))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasResume applies the HasEdge predicate on the "resume" edge.
func HasResume() predicate.ResumeEducation {
	return predicate.ResumeEducation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ResumeTable, ResumeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResumeWith applies the HasEdge predicate on the "resume" edge with a given conditions (other predicates).
func HasResumeWith(preds ...predicate.Resume) predicate.ResumeEducation {
	return predicate.ResumeEducation(func(s *sql.Selector) {
		step := newResumeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ResumeEducation) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ResumeEducation) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ResumeEducation) predicate.ResumeEducation {
	return predicate.ResumeEducation(sql.NotPredicates(p))
}
