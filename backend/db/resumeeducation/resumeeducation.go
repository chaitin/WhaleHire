// Code generated by ent, DO NOT EDIT.

package resumeeducation

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the resumeeducation type in the database.
	Label = "resume_education"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldResumeID holds the string denoting the resume_id field in the database.
	FieldResumeID = "resume_id"
	// FieldSchool holds the string denoting the school field in the database.
	FieldSchool = "school"
	// FieldDegree holds the string denoting the degree field in the database.
	FieldDegree = "degree"
	// FieldMajor holds the string denoting the major field in the database.
	FieldMajor = "major"
	// FieldGpa holds the string denoting the gpa field in the database.
	FieldGpa = "gpa"
	// FieldUniversityTypes holds the string denoting the university_types field in the database.
	FieldUniversityTypes = "university_types"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeResume holds the string denoting the resume edge name in mutations.
	EdgeResume = "resume"
	// Table holds the table name of the resumeeducation in the database.
	Table = "resume_educations"
	// ResumeTable is the table that holds the resume relation/edge.
	ResumeTable = "resume_educations"
	// ResumeInverseTable is the table name for the Resume entity.
	// It exists in this package in order to avoid circular dependency with the "resume" package.
	ResumeInverseTable = "resumes"
	// ResumeColumn is the table column denoting the resume relation/edge.
	ResumeColumn = "resume_id"
)

// Columns holds all SQL columns for resumeeducation fields.
var Columns = []string{
	FieldID,
	FieldDeletedAt,
	FieldResumeID,
	FieldSchool,
	FieldDegree,
	FieldMajor,
	FieldGpa,
	FieldUniversityTypes,
	FieldStartDate,
	FieldEndDate,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/chaitin/WhaleHire/backend/db/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ResumeEducation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByResumeID orders the results by the resume_id field.
func ByResumeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResumeID, opts...).ToFunc()
}

// BySchool orders the results by the school field.
func BySchool(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSchool, opts...).ToFunc()
}

// ByDegree orders the results by the degree field.
func ByDegree(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDegree, opts...).ToFunc()
}

// ByMajor orders the results by the major field.
func ByMajor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMajor, opts...).ToFunc()
}

// ByGpa orders the results by the gpa field.
func ByGpa(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGpa, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByResumeField orders the results by resume field.
func ByResumeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResumeStep(), sql.OrderByField(field, opts...))
	}
}
func newResumeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResumeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ResumeTable, ResumeColumn),
	)
}
