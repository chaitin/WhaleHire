// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxsetting"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/google/uuid"
)

// ResumeMailboxSetting is the model entity for the ResumeMailboxSetting schema.
type ResumeMailboxSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 任务名称，页面展示用
	Name string `json:"name,omitempty"`
	// 邮箱账号
	EmailAddress string `json:"email_address,omitempty"`
	// 邮箱协议
	Protocol string `json:"protocol,omitempty"`
	// 邮箱服务器地址
	Host string `json:"host,omitempty"`
	// 邮箱服务器端口
	Port int `json:"port,omitempty"`
	// 是否使用SSL/TLS
	UseSsl bool `json:"use_ssl,omitempty"`
	// IMAP专用文件夹，默认INBOX
	Folder string `json:"folder,omitempty"`
	// 认证类型
	AuthType string `json:"auth_type,omitempty"`
	// 加密后的凭证信息
	EncryptedCredential map[string]interface{} `json:"encrypted_credential,omitempty"`
	// 上传人用户ID
	UploaderID uuid.UUID `json:"uploader_id,omitempty"`
	// 岗位画像ID列表
	JobProfileIds []uuid.UUID `json:"job_profile_ids,omitempty"`
	// 自定义同步频率(分钟)，为空则使用平台默认
	SyncIntervalMinutes *int `json:"sync_interval_minutes,omitempty"`
	// 状态
	Status string `json:"status,omitempty"`
	// 最后同步时间
	LastSyncedAt *time.Time `json:"last_synced_at,omitempty"`
	// 最后一次错误信息
	LastError string `json:"last_error,omitempty"`
	// 重试次数
	RetryCount int `json:"retry_count,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResumeMailboxSettingQuery when eager-loading is set.
	Edges        ResumeMailboxSettingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ResumeMailboxSettingEdges holds the relations/edges for other nodes in the graph.
type ResumeMailboxSettingEdges struct {
	// Uploader holds the value of the uploader edge.
	Uploader *User `json:"uploader,omitempty"`
	// Cursors holds the value of the cursors edge.
	Cursors []*ResumeMailboxCursor `json:"cursors,omitempty"`
	// Statistics holds the value of the statistics edge.
	Statistics []*ResumeMailboxStatistic `json:"statistics,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UploaderOrErr returns the Uploader value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResumeMailboxSettingEdges) UploaderOrErr() (*User, error) {
	if e.Uploader != nil {
		return e.Uploader, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "uploader"}
}

// CursorsOrErr returns the Cursors value or an error if the edge
// was not loaded in eager-loading.
func (e ResumeMailboxSettingEdges) CursorsOrErr() ([]*ResumeMailboxCursor, error) {
	if e.loadedTypes[1] {
		return e.Cursors, nil
	}
	return nil, &NotLoadedError{edge: "cursors"}
}

// StatisticsOrErr returns the Statistics value or an error if the edge
// was not loaded in eager-loading.
func (e ResumeMailboxSettingEdges) StatisticsOrErr() ([]*ResumeMailboxStatistic, error) {
	if e.loadedTypes[2] {
		return e.Statistics, nil
	}
	return nil, &NotLoadedError{edge: "statistics"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResumeMailboxSetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resumemailboxsetting.FieldEncryptedCredential, resumemailboxsetting.FieldJobProfileIds:
			values[i] = new([]byte)
		case resumemailboxsetting.FieldUseSsl:
			values[i] = new(sql.NullBool)
		case resumemailboxsetting.FieldPort, resumemailboxsetting.FieldSyncIntervalMinutes, resumemailboxsetting.FieldRetryCount:
			values[i] = new(sql.NullInt64)
		case resumemailboxsetting.FieldName, resumemailboxsetting.FieldEmailAddress, resumemailboxsetting.FieldProtocol, resumemailboxsetting.FieldHost, resumemailboxsetting.FieldFolder, resumemailboxsetting.FieldAuthType, resumemailboxsetting.FieldStatus, resumemailboxsetting.FieldLastError:
			values[i] = new(sql.NullString)
		case resumemailboxsetting.FieldDeletedAt, resumemailboxsetting.FieldLastSyncedAt, resumemailboxsetting.FieldCreatedAt, resumemailboxsetting.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case resumemailboxsetting.FieldID, resumemailboxsetting.FieldUploaderID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResumeMailboxSetting fields.
func (rms *ResumeMailboxSetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resumemailboxsetting.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rms.ID = *value
			}
		case resumemailboxsetting.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rms.DeletedAt = value.Time
			}
		case resumemailboxsetting.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rms.Name = value.String
			}
		case resumemailboxsetting.FieldEmailAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email_address", values[i])
			} else if value.Valid {
				rms.EmailAddress = value.String
			}
		case resumemailboxsetting.FieldProtocol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field protocol", values[i])
			} else if value.Valid {
				rms.Protocol = value.String
			}
		case resumemailboxsetting.FieldHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				rms.Host = value.String
			}
		case resumemailboxsetting.FieldPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				rms.Port = int(value.Int64)
			}
		case resumemailboxsetting.FieldUseSsl:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field use_ssl", values[i])
			} else if value.Valid {
				rms.UseSsl = value.Bool
			}
		case resumemailboxsetting.FieldFolder:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field folder", values[i])
			} else if value.Valid {
				rms.Folder = value.String
			}
		case resumemailboxsetting.FieldAuthType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_type", values[i])
			} else if value.Valid {
				rms.AuthType = value.String
			}
		case resumemailboxsetting.FieldEncryptedCredential:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field encrypted_credential", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rms.EncryptedCredential); err != nil {
					return fmt.Errorf("unmarshal field encrypted_credential: %w", err)
				}
			}
		case resumemailboxsetting.FieldUploaderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uploader_id", values[i])
			} else if value != nil {
				rms.UploaderID = *value
			}
		case resumemailboxsetting.FieldJobProfileIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field job_profile_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rms.JobProfileIds); err != nil {
					return fmt.Errorf("unmarshal field job_profile_ids: %w", err)
				}
			}
		case resumemailboxsetting.FieldSyncIntervalMinutes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sync_interval_minutes", values[i])
			} else if value.Valid {
				rms.SyncIntervalMinutes = new(int)
				*rms.SyncIntervalMinutes = int(value.Int64)
			}
		case resumemailboxsetting.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				rms.Status = value.String
			}
		case resumemailboxsetting.FieldLastSyncedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_synced_at", values[i])
			} else if value.Valid {
				rms.LastSyncedAt = new(time.Time)
				*rms.LastSyncedAt = value.Time
			}
		case resumemailboxsetting.FieldLastError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_error", values[i])
			} else if value.Valid {
				rms.LastError = value.String
			}
		case resumemailboxsetting.FieldRetryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retry_count", values[i])
			} else if value.Valid {
				rms.RetryCount = int(value.Int64)
			}
		case resumemailboxsetting.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rms.CreatedAt = value.Time
			}
		case resumemailboxsetting.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rms.UpdatedAt = value.Time
			}
		default:
			rms.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ResumeMailboxSetting.
// This includes values selected through modifiers, order, etc.
func (rms *ResumeMailboxSetting) Value(name string) (ent.Value, error) {
	return rms.selectValues.Get(name)
}

// QueryUploader queries the "uploader" edge of the ResumeMailboxSetting entity.
func (rms *ResumeMailboxSetting) QueryUploader() *UserQuery {
	return NewResumeMailboxSettingClient(rms.config).QueryUploader(rms)
}

// QueryCursors queries the "cursors" edge of the ResumeMailboxSetting entity.
func (rms *ResumeMailboxSetting) QueryCursors() *ResumeMailboxCursorQuery {
	return NewResumeMailboxSettingClient(rms.config).QueryCursors(rms)
}

// QueryStatistics queries the "statistics" edge of the ResumeMailboxSetting entity.
func (rms *ResumeMailboxSetting) QueryStatistics() *ResumeMailboxStatisticQuery {
	return NewResumeMailboxSettingClient(rms.config).QueryStatistics(rms)
}

// Update returns a builder for updating this ResumeMailboxSetting.
// Note that you need to call ResumeMailboxSetting.Unwrap() before calling this method if this ResumeMailboxSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (rms *ResumeMailboxSetting) Update() *ResumeMailboxSettingUpdateOne {
	return NewResumeMailboxSettingClient(rms.config).UpdateOne(rms)
}

// Unwrap unwraps the ResumeMailboxSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rms *ResumeMailboxSetting) Unwrap() *ResumeMailboxSetting {
	_tx, ok := rms.config.driver.(*txDriver)
	if !ok {
		panic("db: ResumeMailboxSetting is not a transactional entity")
	}
	rms.config.driver = _tx.drv
	return rms
}

// String implements the fmt.Stringer.
func (rms *ResumeMailboxSetting) String() string {
	var builder strings.Builder
	builder.WriteString("ResumeMailboxSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rms.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(rms.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(rms.Name)
	builder.WriteString(", ")
	builder.WriteString("email_address=")
	builder.WriteString(rms.EmailAddress)
	builder.WriteString(", ")
	builder.WriteString("protocol=")
	builder.WriteString(rms.Protocol)
	builder.WriteString(", ")
	builder.WriteString("host=")
	builder.WriteString(rms.Host)
	builder.WriteString(", ")
	builder.WriteString("port=")
	builder.WriteString(fmt.Sprintf("%v", rms.Port))
	builder.WriteString(", ")
	builder.WriteString("use_ssl=")
	builder.WriteString(fmt.Sprintf("%v", rms.UseSsl))
	builder.WriteString(", ")
	builder.WriteString("folder=")
	builder.WriteString(rms.Folder)
	builder.WriteString(", ")
	builder.WriteString("auth_type=")
	builder.WriteString(rms.AuthType)
	builder.WriteString(", ")
	builder.WriteString("encrypted_credential=")
	builder.WriteString(fmt.Sprintf("%v", rms.EncryptedCredential))
	builder.WriteString(", ")
	builder.WriteString("uploader_id=")
	builder.WriteString(fmt.Sprintf("%v", rms.UploaderID))
	builder.WriteString(", ")
	builder.WriteString("job_profile_ids=")
	builder.WriteString(fmt.Sprintf("%v", rms.JobProfileIds))
	builder.WriteString(", ")
	if v := rms.SyncIntervalMinutes; v != nil {
		builder.WriteString("sync_interval_minutes=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(rms.Status)
	builder.WriteString(", ")
	if v := rms.LastSyncedAt; v != nil {
		builder.WriteString("last_synced_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("last_error=")
	builder.WriteString(rms.LastError)
	builder.WriteString(", ")
	builder.WriteString("retry_count=")
	builder.WriteString(fmt.Sprintf("%v", rms.RetryCount))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rms.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rms.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ResumeMailboxSettings is a parsable slice of ResumeMailboxSetting.
type ResumeMailboxSettings []*ResumeMailboxSetting
