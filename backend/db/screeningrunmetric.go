// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/screeningrunmetric"
	"github.com/chaitin/WhaleHire/backend/db/screeningtask"
	"github.com/google/uuid"
)

// ScreeningRunMetric is the model entity for the ScreeningRunMetric schema.
type ScreeningRunMetric struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID uuid.UUID `json:"task_id,omitempty"`
	// 平均分数
	AvgScore float64 `json:"avg_score,omitempty"`
	// 分数段分布
	Histogram map[string]interface{} `json:"histogram,omitempty"`
	// 任务总输入tokens
	TokensInput int64 `json:"tokens_input,omitempty"`
	// 任务总输出tokens
	TokensOutput int64 `json:"tokens_output,omitempty"`
	// 模型调用成本统计
	TotalCost float64 `json:"total_cost,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScreeningRunMetricQuery when eager-loading is set.
	Edges        ScreeningRunMetricEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScreeningRunMetricEdges holds the relations/edges for other nodes in the graph.
type ScreeningRunMetricEdges struct {
	// Task holds the value of the task edge.
	Task *ScreeningTask `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScreeningRunMetricEdges) TaskOrErr() (*ScreeningTask, error) {
	if e.Task != nil {
		return e.Task, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: screeningtask.Label}
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScreeningRunMetric) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case screeningrunmetric.FieldHistogram:
			values[i] = new([]byte)
		case screeningrunmetric.FieldAvgScore, screeningrunmetric.FieldTotalCost:
			values[i] = new(sql.NullFloat64)
		case screeningrunmetric.FieldTokensInput, screeningrunmetric.FieldTokensOutput:
			values[i] = new(sql.NullInt64)
		case screeningrunmetric.FieldDeletedAt, screeningrunmetric.FieldCreatedAt, screeningrunmetric.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case screeningrunmetric.FieldID, screeningrunmetric.FieldTaskID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScreeningRunMetric fields.
func (srm *ScreeningRunMetric) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case screeningrunmetric.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				srm.ID = *value
			}
		case screeningrunmetric.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				srm.DeletedAt = value.Time
			}
		case screeningrunmetric.FieldTaskID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value != nil {
				srm.TaskID = *value
			}
		case screeningrunmetric.FieldAvgScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field avg_score", values[i])
			} else if value.Valid {
				srm.AvgScore = value.Float64
			}
		case screeningrunmetric.FieldHistogram:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field histogram", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &srm.Histogram); err != nil {
					return fmt.Errorf("unmarshal field histogram: %w", err)
				}
			}
		case screeningrunmetric.FieldTokensInput:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tokens_input", values[i])
			} else if value.Valid {
				srm.TokensInput = value.Int64
			}
		case screeningrunmetric.FieldTokensOutput:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tokens_output", values[i])
			} else if value.Valid {
				srm.TokensOutput = value.Int64
			}
		case screeningrunmetric.FieldTotalCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_cost", values[i])
			} else if value.Valid {
				srm.TotalCost = value.Float64
			}
		case screeningrunmetric.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				srm.CreatedAt = value.Time
			}
		case screeningrunmetric.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				srm.UpdatedAt = value.Time
			}
		default:
			srm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScreeningRunMetric.
// This includes values selected through modifiers, order, etc.
func (srm *ScreeningRunMetric) Value(name string) (ent.Value, error) {
	return srm.selectValues.Get(name)
}

// QueryTask queries the "task" edge of the ScreeningRunMetric entity.
func (srm *ScreeningRunMetric) QueryTask() *ScreeningTaskQuery {
	return NewScreeningRunMetricClient(srm.config).QueryTask(srm)
}

// Update returns a builder for updating this ScreeningRunMetric.
// Note that you need to call ScreeningRunMetric.Unwrap() before calling this method if this ScreeningRunMetric
// was returned from a transaction, and the transaction was committed or rolled back.
func (srm *ScreeningRunMetric) Update() *ScreeningRunMetricUpdateOne {
	return NewScreeningRunMetricClient(srm.config).UpdateOne(srm)
}

// Unwrap unwraps the ScreeningRunMetric entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (srm *ScreeningRunMetric) Unwrap() *ScreeningRunMetric {
	_tx, ok := srm.config.driver.(*txDriver)
	if !ok {
		panic("db: ScreeningRunMetric is not a transactional entity")
	}
	srm.config.driver = _tx.drv
	return srm
}

// String implements the fmt.Stringer.
func (srm *ScreeningRunMetric) String() string {
	var builder strings.Builder
	builder.WriteString("ScreeningRunMetric(")
	builder.WriteString(fmt.Sprintf("id=%v, ", srm.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(srm.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", srm.TaskID))
	builder.WriteString(", ")
	builder.WriteString("avg_score=")
	builder.WriteString(fmt.Sprintf("%v", srm.AvgScore))
	builder.WriteString(", ")
	builder.WriteString("histogram=")
	builder.WriteString(fmt.Sprintf("%v", srm.Histogram))
	builder.WriteString(", ")
	builder.WriteString("tokens_input=")
	builder.WriteString(fmt.Sprintf("%v", srm.TokensInput))
	builder.WriteString(", ")
	builder.WriteString("tokens_output=")
	builder.WriteString(fmt.Sprintf("%v", srm.TokensOutput))
	builder.WriteString(", ")
	builder.WriteString("total_cost=")
	builder.WriteString(fmt.Sprintf("%v", srm.TotalCost))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(srm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(srm.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ScreeningRunMetrics is a parsable slice of ScreeningRunMetric.
type ScreeningRunMetrics []*ScreeningRunMetric
