// Code generated by ent, DO NOT EDIT.

package message

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/ptonlix/whalehire/backend/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDeletedAt, v))
}

// ConversationID applies equality check predicate on the "conversation_id" field. It's identical to ConversationIDEQ.
func ConversationID(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldConversationID, v))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldRole, v))
}

// AgentName applies equality check predicate on the "agent_name" field. It's identical to AgentNameEQ.
func AgentName(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldAgentName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldType, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldContent, v))
}

// MediaURL applies equality check predicate on the "media_url" field. It's identical to MediaURLEQ.
func MediaURL(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMediaURL, v))
}

// Sequence applies equality check predicate on the "sequence" field. It's identical to SequenceEQ.
func Sequence(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSequence, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldDeletedAt))
}

// ConversationIDEQ applies the EQ predicate on the "conversation_id" field.
func ConversationIDEQ(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldConversationID, v))
}

// ConversationIDNEQ applies the NEQ predicate on the "conversation_id" field.
func ConversationIDNEQ(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldConversationID, v))
}

// ConversationIDIn applies the In predicate on the "conversation_id" field.
func ConversationIDIn(vs ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldConversationID, vs...))
}

// ConversationIDNotIn applies the NotIn predicate on the "conversation_id" field.
func ConversationIDNotIn(vs ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldConversationID, vs...))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldRole, v))
}

// RoleContains applies the Contains predicate on the "role" field.
func RoleContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldRole, v))
}

// RoleHasPrefix applies the HasPrefix predicate on the "role" field.
func RoleHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldRole, v))
}

// RoleHasSuffix applies the HasSuffix predicate on the "role" field.
func RoleHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldRole, v))
}

// RoleEqualFold applies the EqualFold predicate on the "role" field.
func RoleEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldRole, v))
}

// RoleContainsFold applies the ContainsFold predicate on the "role" field.
func RoleContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldRole, v))
}

// AgentNameEQ applies the EQ predicate on the "agent_name" field.
func AgentNameEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldAgentName, v))
}

// AgentNameNEQ applies the NEQ predicate on the "agent_name" field.
func AgentNameNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldAgentName, v))
}

// AgentNameIn applies the In predicate on the "agent_name" field.
func AgentNameIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldAgentName, vs...))
}

// AgentNameNotIn applies the NotIn predicate on the "agent_name" field.
func AgentNameNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldAgentName, vs...))
}

// AgentNameGT applies the GT predicate on the "agent_name" field.
func AgentNameGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldAgentName, v))
}

// AgentNameGTE applies the GTE predicate on the "agent_name" field.
func AgentNameGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldAgentName, v))
}

// AgentNameLT applies the LT predicate on the "agent_name" field.
func AgentNameLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldAgentName, v))
}

// AgentNameLTE applies the LTE predicate on the "agent_name" field.
func AgentNameLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldAgentName, v))
}

// AgentNameContains applies the Contains predicate on the "agent_name" field.
func AgentNameContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldAgentName, v))
}

// AgentNameHasPrefix applies the HasPrefix predicate on the "agent_name" field.
func AgentNameHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldAgentName, v))
}

// AgentNameHasSuffix applies the HasSuffix predicate on the "agent_name" field.
func AgentNameHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldAgentName, v))
}

// AgentNameIsNil applies the IsNil predicate on the "agent_name" field.
func AgentNameIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldAgentName))
}

// AgentNameNotNil applies the NotNil predicate on the "agent_name" field.
func AgentNameNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldAgentName))
}

// AgentNameEqualFold applies the EqualFold predicate on the "agent_name" field.
func AgentNameEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldAgentName, v))
}

// AgentNameContainsFold applies the ContainsFold predicate on the "agent_name" field.
func AgentNameContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldAgentName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldType, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldContent, v))
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldContent))
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldContent))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldContent, v))
}

// MediaURLEQ applies the EQ predicate on the "media_url" field.
func MediaURLEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMediaURL, v))
}

// MediaURLNEQ applies the NEQ predicate on the "media_url" field.
func MediaURLNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldMediaURL, v))
}

// MediaURLIn applies the In predicate on the "media_url" field.
func MediaURLIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldMediaURL, vs...))
}

// MediaURLNotIn applies the NotIn predicate on the "media_url" field.
func MediaURLNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldMediaURL, vs...))
}

// MediaURLGT applies the GT predicate on the "media_url" field.
func MediaURLGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldMediaURL, v))
}

// MediaURLGTE applies the GTE predicate on the "media_url" field.
func MediaURLGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldMediaURL, v))
}

// MediaURLLT applies the LT predicate on the "media_url" field.
func MediaURLLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldMediaURL, v))
}

// MediaURLLTE applies the LTE predicate on the "media_url" field.
func MediaURLLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldMediaURL, v))
}

// MediaURLContains applies the Contains predicate on the "media_url" field.
func MediaURLContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldMediaURL, v))
}

// MediaURLHasPrefix applies the HasPrefix predicate on the "media_url" field.
func MediaURLHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldMediaURL, v))
}

// MediaURLHasSuffix applies the HasSuffix predicate on the "media_url" field.
func MediaURLHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldMediaURL, v))
}

// MediaURLIsNil applies the IsNil predicate on the "media_url" field.
func MediaURLIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldMediaURL))
}

// MediaURLNotNil applies the NotNil predicate on the "media_url" field.
func MediaURLNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldMediaURL))
}

// MediaURLEqualFold applies the EqualFold predicate on the "media_url" field.
func MediaURLEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldMediaURL, v))
}

// MediaURLContainsFold applies the ContainsFold predicate on the "media_url" field.
func MediaURLContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldMediaURL, v))
}

// SequenceEQ applies the EQ predicate on the "sequence" field.
func SequenceEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSequence, v))
}

// SequenceNEQ applies the NEQ predicate on the "sequence" field.
func SequenceNEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldSequence, v))
}

// SequenceIn applies the In predicate on the "sequence" field.
func SequenceIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldSequence, vs...))
}

// SequenceNotIn applies the NotIn predicate on the "sequence" field.
func SequenceNotIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldSequence, vs...))
}

// SequenceGT applies the GT predicate on the "sequence" field.
func SequenceGT(v int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldSequence, v))
}

// SequenceGTE applies the GTE predicate on the "sequence" field.
func SequenceGTE(v int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldSequence, v))
}

// SequenceLT applies the LT predicate on the "sequence" field.
func SequenceLT(v int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldSequence, v))
}

// SequenceLTE applies the LTE predicate on the "sequence" field.
func SequenceLTE(v int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldSequence, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasConversation applies the HasEdge predicate on the "conversation" edge.
func HasConversation() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConversationTable, ConversationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConversationWith applies the HasEdge predicate on the "conversation" edge with a given conditions (other predicates).
func HasConversationWith(preds ...predicate.Conversation) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newConversationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttachments applies the HasEdge predicate on the "attachments" edge.
func HasAttachments() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttachmentsTable, AttachmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttachmentsWith applies the HasEdge predicate on the "attachments" edge with a given conditions (other predicates).
func HasAttachmentsWith(preds ...predicate.Attachment) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newAttachmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(sql.NotPredicates(p))
}
