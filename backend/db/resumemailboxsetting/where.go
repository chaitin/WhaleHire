// Code generated by ent, DO NOT EDIT.

package resumemailboxsetting

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldName, v))
}

// EmailAddress applies equality check predicate on the "email_address" field. It's identical to EmailAddressEQ.
func EmailAddress(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldEmailAddress, v))
}

// Host applies equality check predicate on the "host" field. It's identical to HostEQ.
func Host(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldHost, v))
}

// Port applies equality check predicate on the "port" field. It's identical to PortEQ.
func Port(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldPort, v))
}

// UseSsl applies equality check predicate on the "use_ssl" field. It's identical to UseSslEQ.
func UseSsl(v bool) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldUseSsl, v))
}

// Folder applies equality check predicate on the "folder" field. It's identical to FolderEQ.
func Folder(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldFolder, v))
}

// UploaderID applies equality check predicate on the "uploader_id" field. It's identical to UploaderIDEQ.
func UploaderID(v uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldUploaderID, v))
}

// JobProfileID applies equality check predicate on the "job_profile_id" field. It's identical to JobProfileIDEQ.
func JobProfileID(v uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldJobProfileID, v))
}

// SyncIntervalMinutes applies equality check predicate on the "sync_interval_minutes" field. It's identical to SyncIntervalMinutesEQ.
func SyncIntervalMinutes(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldSyncIntervalMinutes, v))
}

// LastSyncedAt applies equality check predicate on the "last_synced_at" field. It's identical to LastSyncedAtEQ.
func LastSyncedAt(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldLastSyncedAt, v))
}

// LastError applies equality check predicate on the "last_error" field. It's identical to LastErrorEQ.
func LastError(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldLastError, v))
}

// RetryCount applies equality check predicate on the "retry_count" field. It's identical to RetryCountEQ.
func RetryCount(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldRetryCount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldContainsFold(FieldName, v))
}

// EmailAddressEQ applies the EQ predicate on the "email_address" field.
func EmailAddressEQ(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldEmailAddress, v))
}

// EmailAddressNEQ applies the NEQ predicate on the "email_address" field.
func EmailAddressNEQ(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldEmailAddress, v))
}

// EmailAddressIn applies the In predicate on the "email_address" field.
func EmailAddressIn(vs ...string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldEmailAddress, vs...))
}

// EmailAddressNotIn applies the NotIn predicate on the "email_address" field.
func EmailAddressNotIn(vs ...string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldEmailAddress, vs...))
}

// EmailAddressGT applies the GT predicate on the "email_address" field.
func EmailAddressGT(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGT(FieldEmailAddress, v))
}

// EmailAddressGTE applies the GTE predicate on the "email_address" field.
func EmailAddressGTE(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGTE(FieldEmailAddress, v))
}

// EmailAddressLT applies the LT predicate on the "email_address" field.
func EmailAddressLT(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLT(FieldEmailAddress, v))
}

// EmailAddressLTE applies the LTE predicate on the "email_address" field.
func EmailAddressLTE(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLTE(FieldEmailAddress, v))
}

// EmailAddressContains applies the Contains predicate on the "email_address" field.
func EmailAddressContains(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldContains(FieldEmailAddress, v))
}

// EmailAddressHasPrefix applies the HasPrefix predicate on the "email_address" field.
func EmailAddressHasPrefix(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldHasPrefix(FieldEmailAddress, v))
}

// EmailAddressHasSuffix applies the HasSuffix predicate on the "email_address" field.
func EmailAddressHasSuffix(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldHasSuffix(FieldEmailAddress, v))
}

// EmailAddressEqualFold applies the EqualFold predicate on the "email_address" field.
func EmailAddressEqualFold(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEqualFold(FieldEmailAddress, v))
}

// EmailAddressContainsFold applies the ContainsFold predicate on the "email_address" field.
func EmailAddressContainsFold(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldContainsFold(FieldEmailAddress, v))
}

// ProtocolEQ applies the EQ predicate on the "protocol" field.
func ProtocolEQ(v Protocol) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldProtocol, v))
}

// ProtocolNEQ applies the NEQ predicate on the "protocol" field.
func ProtocolNEQ(v Protocol) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldProtocol, v))
}

// ProtocolIn applies the In predicate on the "protocol" field.
func ProtocolIn(vs ...Protocol) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldProtocol, vs...))
}

// ProtocolNotIn applies the NotIn predicate on the "protocol" field.
func ProtocolNotIn(vs ...Protocol) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldProtocol, vs...))
}

// HostEQ applies the EQ predicate on the "host" field.
func HostEQ(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldHost, v))
}

// HostNEQ applies the NEQ predicate on the "host" field.
func HostNEQ(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldHost, v))
}

// HostIn applies the In predicate on the "host" field.
func HostIn(vs ...string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldHost, vs...))
}

// HostNotIn applies the NotIn predicate on the "host" field.
func HostNotIn(vs ...string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldHost, vs...))
}

// HostGT applies the GT predicate on the "host" field.
func HostGT(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGT(FieldHost, v))
}

// HostGTE applies the GTE predicate on the "host" field.
func HostGTE(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGTE(FieldHost, v))
}

// HostLT applies the LT predicate on the "host" field.
func HostLT(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLT(FieldHost, v))
}

// HostLTE applies the LTE predicate on the "host" field.
func HostLTE(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLTE(FieldHost, v))
}

// HostContains applies the Contains predicate on the "host" field.
func HostContains(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldContains(FieldHost, v))
}

// HostHasPrefix applies the HasPrefix predicate on the "host" field.
func HostHasPrefix(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldHasPrefix(FieldHost, v))
}

// HostHasSuffix applies the HasSuffix predicate on the "host" field.
func HostHasSuffix(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldHasSuffix(FieldHost, v))
}

// HostEqualFold applies the EqualFold predicate on the "host" field.
func HostEqualFold(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEqualFold(FieldHost, v))
}

// HostContainsFold applies the ContainsFold predicate on the "host" field.
func HostContainsFold(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldContainsFold(FieldHost, v))
}

// PortEQ applies the EQ predicate on the "port" field.
func PortEQ(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldPort, v))
}

// PortNEQ applies the NEQ predicate on the "port" field.
func PortNEQ(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldPort, v))
}

// PortIn applies the In predicate on the "port" field.
func PortIn(vs ...int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldPort, vs...))
}

// PortNotIn applies the NotIn predicate on the "port" field.
func PortNotIn(vs ...int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldPort, vs...))
}

// PortGT applies the GT predicate on the "port" field.
func PortGT(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGT(FieldPort, v))
}

// PortGTE applies the GTE predicate on the "port" field.
func PortGTE(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGTE(FieldPort, v))
}

// PortLT applies the LT predicate on the "port" field.
func PortLT(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLT(FieldPort, v))
}

// PortLTE applies the LTE predicate on the "port" field.
func PortLTE(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLTE(FieldPort, v))
}

// UseSslEQ applies the EQ predicate on the "use_ssl" field.
func UseSslEQ(v bool) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldUseSsl, v))
}

// UseSslNEQ applies the NEQ predicate on the "use_ssl" field.
func UseSslNEQ(v bool) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldUseSsl, v))
}

// FolderEQ applies the EQ predicate on the "folder" field.
func FolderEQ(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldFolder, v))
}

// FolderNEQ applies the NEQ predicate on the "folder" field.
func FolderNEQ(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldFolder, v))
}

// FolderIn applies the In predicate on the "folder" field.
func FolderIn(vs ...string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldFolder, vs...))
}

// FolderNotIn applies the NotIn predicate on the "folder" field.
func FolderNotIn(vs ...string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldFolder, vs...))
}

// FolderGT applies the GT predicate on the "folder" field.
func FolderGT(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGT(FieldFolder, v))
}

// FolderGTE applies the GTE predicate on the "folder" field.
func FolderGTE(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGTE(FieldFolder, v))
}

// FolderLT applies the LT predicate on the "folder" field.
func FolderLT(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLT(FieldFolder, v))
}

// FolderLTE applies the LTE predicate on the "folder" field.
func FolderLTE(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLTE(FieldFolder, v))
}

// FolderContains applies the Contains predicate on the "folder" field.
func FolderContains(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldContains(FieldFolder, v))
}

// FolderHasPrefix applies the HasPrefix predicate on the "folder" field.
func FolderHasPrefix(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldHasPrefix(FieldFolder, v))
}

// FolderHasSuffix applies the HasSuffix predicate on the "folder" field.
func FolderHasSuffix(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldHasSuffix(FieldFolder, v))
}

// FolderIsNil applies the IsNil predicate on the "folder" field.
func FolderIsNil() predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIsNull(FieldFolder))
}

// FolderNotNil applies the NotNil predicate on the "folder" field.
func FolderNotNil() predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotNull(FieldFolder))
}

// FolderEqualFold applies the EqualFold predicate on the "folder" field.
func FolderEqualFold(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEqualFold(FieldFolder, v))
}

// FolderContainsFold applies the ContainsFold predicate on the "folder" field.
func FolderContainsFold(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldContainsFold(FieldFolder, v))
}

// AuthTypeEQ applies the EQ predicate on the "auth_type" field.
func AuthTypeEQ(v AuthType) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldAuthType, v))
}

// AuthTypeNEQ applies the NEQ predicate on the "auth_type" field.
func AuthTypeNEQ(v AuthType) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldAuthType, v))
}

// AuthTypeIn applies the In predicate on the "auth_type" field.
func AuthTypeIn(vs ...AuthType) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldAuthType, vs...))
}

// AuthTypeNotIn applies the NotIn predicate on the "auth_type" field.
func AuthTypeNotIn(vs ...AuthType) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldAuthType, vs...))
}

// UploaderIDEQ applies the EQ predicate on the "uploader_id" field.
func UploaderIDEQ(v uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldUploaderID, v))
}

// UploaderIDNEQ applies the NEQ predicate on the "uploader_id" field.
func UploaderIDNEQ(v uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldUploaderID, v))
}

// UploaderIDIn applies the In predicate on the "uploader_id" field.
func UploaderIDIn(vs ...uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldUploaderID, vs...))
}

// UploaderIDNotIn applies the NotIn predicate on the "uploader_id" field.
func UploaderIDNotIn(vs ...uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldUploaderID, vs...))
}

// JobProfileIDEQ applies the EQ predicate on the "job_profile_id" field.
func JobProfileIDEQ(v uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldJobProfileID, v))
}

// JobProfileIDNEQ applies the NEQ predicate on the "job_profile_id" field.
func JobProfileIDNEQ(v uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldJobProfileID, v))
}

// JobProfileIDIn applies the In predicate on the "job_profile_id" field.
func JobProfileIDIn(vs ...uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldJobProfileID, vs...))
}

// JobProfileIDNotIn applies the NotIn predicate on the "job_profile_id" field.
func JobProfileIDNotIn(vs ...uuid.UUID) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldJobProfileID, vs...))
}

// JobProfileIDIsNil applies the IsNil predicate on the "job_profile_id" field.
func JobProfileIDIsNil() predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIsNull(FieldJobProfileID))
}

// JobProfileIDNotNil applies the NotNil predicate on the "job_profile_id" field.
func JobProfileIDNotNil() predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotNull(FieldJobProfileID))
}

// SyncIntervalMinutesEQ applies the EQ predicate on the "sync_interval_minutes" field.
func SyncIntervalMinutesEQ(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldSyncIntervalMinutes, v))
}

// SyncIntervalMinutesNEQ applies the NEQ predicate on the "sync_interval_minutes" field.
func SyncIntervalMinutesNEQ(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldSyncIntervalMinutes, v))
}

// SyncIntervalMinutesIn applies the In predicate on the "sync_interval_minutes" field.
func SyncIntervalMinutesIn(vs ...int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldSyncIntervalMinutes, vs...))
}

// SyncIntervalMinutesNotIn applies the NotIn predicate on the "sync_interval_minutes" field.
func SyncIntervalMinutesNotIn(vs ...int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldSyncIntervalMinutes, vs...))
}

// SyncIntervalMinutesGT applies the GT predicate on the "sync_interval_minutes" field.
func SyncIntervalMinutesGT(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGT(FieldSyncIntervalMinutes, v))
}

// SyncIntervalMinutesGTE applies the GTE predicate on the "sync_interval_minutes" field.
func SyncIntervalMinutesGTE(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGTE(FieldSyncIntervalMinutes, v))
}

// SyncIntervalMinutesLT applies the LT predicate on the "sync_interval_minutes" field.
func SyncIntervalMinutesLT(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLT(FieldSyncIntervalMinutes, v))
}

// SyncIntervalMinutesLTE applies the LTE predicate on the "sync_interval_minutes" field.
func SyncIntervalMinutesLTE(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLTE(FieldSyncIntervalMinutes, v))
}

// SyncIntervalMinutesIsNil applies the IsNil predicate on the "sync_interval_minutes" field.
func SyncIntervalMinutesIsNil() predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIsNull(FieldSyncIntervalMinutes))
}

// SyncIntervalMinutesNotNil applies the NotNil predicate on the "sync_interval_minutes" field.
func SyncIntervalMinutesNotNil() predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotNull(FieldSyncIntervalMinutes))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldStatus, vs...))
}

// LastSyncedAtEQ applies the EQ predicate on the "last_synced_at" field.
func LastSyncedAtEQ(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldLastSyncedAt, v))
}

// LastSyncedAtNEQ applies the NEQ predicate on the "last_synced_at" field.
func LastSyncedAtNEQ(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldLastSyncedAt, v))
}

// LastSyncedAtIn applies the In predicate on the "last_synced_at" field.
func LastSyncedAtIn(vs ...time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldLastSyncedAt, vs...))
}

// LastSyncedAtNotIn applies the NotIn predicate on the "last_synced_at" field.
func LastSyncedAtNotIn(vs ...time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldLastSyncedAt, vs...))
}

// LastSyncedAtGT applies the GT predicate on the "last_synced_at" field.
func LastSyncedAtGT(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGT(FieldLastSyncedAt, v))
}

// LastSyncedAtGTE applies the GTE predicate on the "last_synced_at" field.
func LastSyncedAtGTE(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGTE(FieldLastSyncedAt, v))
}

// LastSyncedAtLT applies the LT predicate on the "last_synced_at" field.
func LastSyncedAtLT(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLT(FieldLastSyncedAt, v))
}

// LastSyncedAtLTE applies the LTE predicate on the "last_synced_at" field.
func LastSyncedAtLTE(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLTE(FieldLastSyncedAt, v))
}

// LastSyncedAtIsNil applies the IsNil predicate on the "last_synced_at" field.
func LastSyncedAtIsNil() predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIsNull(FieldLastSyncedAt))
}

// LastSyncedAtNotNil applies the NotNil predicate on the "last_synced_at" field.
func LastSyncedAtNotNil() predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotNull(FieldLastSyncedAt))
}

// LastErrorEQ applies the EQ predicate on the "last_error" field.
func LastErrorEQ(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldLastError, v))
}

// LastErrorNEQ applies the NEQ predicate on the "last_error" field.
func LastErrorNEQ(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldLastError, v))
}

// LastErrorIn applies the In predicate on the "last_error" field.
func LastErrorIn(vs ...string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldLastError, vs...))
}

// LastErrorNotIn applies the NotIn predicate on the "last_error" field.
func LastErrorNotIn(vs ...string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldLastError, vs...))
}

// LastErrorGT applies the GT predicate on the "last_error" field.
func LastErrorGT(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGT(FieldLastError, v))
}

// LastErrorGTE applies the GTE predicate on the "last_error" field.
func LastErrorGTE(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGTE(FieldLastError, v))
}

// LastErrorLT applies the LT predicate on the "last_error" field.
func LastErrorLT(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLT(FieldLastError, v))
}

// LastErrorLTE applies the LTE predicate on the "last_error" field.
func LastErrorLTE(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLTE(FieldLastError, v))
}

// LastErrorContains applies the Contains predicate on the "last_error" field.
func LastErrorContains(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldContains(FieldLastError, v))
}

// LastErrorHasPrefix applies the HasPrefix predicate on the "last_error" field.
func LastErrorHasPrefix(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldHasPrefix(FieldLastError, v))
}

// LastErrorHasSuffix applies the HasSuffix predicate on the "last_error" field.
func LastErrorHasSuffix(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldHasSuffix(FieldLastError, v))
}

// LastErrorIsNil applies the IsNil predicate on the "last_error" field.
func LastErrorIsNil() predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIsNull(FieldLastError))
}

// LastErrorNotNil applies the NotNil predicate on the "last_error" field.
func LastErrorNotNil() predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotNull(FieldLastError))
}

// LastErrorEqualFold applies the EqualFold predicate on the "last_error" field.
func LastErrorEqualFold(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEqualFold(FieldLastError, v))
}

// LastErrorContainsFold applies the ContainsFold predicate on the "last_error" field.
func LastErrorContainsFold(v string) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldContainsFold(FieldLastError, v))
}

// RetryCountEQ applies the EQ predicate on the "retry_count" field.
func RetryCountEQ(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldRetryCount, v))
}

// RetryCountNEQ applies the NEQ predicate on the "retry_count" field.
func RetryCountNEQ(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldRetryCount, v))
}

// RetryCountIn applies the In predicate on the "retry_count" field.
func RetryCountIn(vs ...int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldRetryCount, vs...))
}

// RetryCountNotIn applies the NotIn predicate on the "retry_count" field.
func RetryCountNotIn(vs ...int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldRetryCount, vs...))
}

// RetryCountGT applies the GT predicate on the "retry_count" field.
func RetryCountGT(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGT(FieldRetryCount, v))
}

// RetryCountGTE applies the GTE predicate on the "retry_count" field.
func RetryCountGTE(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGTE(FieldRetryCount, v))
}

// RetryCountLT applies the LT predicate on the "retry_count" field.
func RetryCountLT(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLT(FieldRetryCount, v))
}

// RetryCountLTE applies the LTE predicate on the "retry_count" field.
func RetryCountLTE(v int) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLTE(FieldRetryCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUploader applies the HasEdge predicate on the "uploader" edge.
func HasUploader() predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UploaderTable, UploaderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUploaderWith applies the HasEdge predicate on the "uploader" edge with a given conditions (other predicates).
func HasUploaderWith(preds ...predicate.User) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(func(s *sql.Selector) {
		step := newUploaderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobProfile applies the HasEdge predicate on the "job_profile" edge.
func HasJobProfile() predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, JobProfileTable, JobProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobProfileWith applies the HasEdge predicate on the "job_profile" edge with a given conditions (other predicates).
func HasJobProfileWith(preds ...predicate.JobPosition) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(func(s *sql.Selector) {
		step := newJobProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCursors applies the HasEdge predicate on the "cursors" edge.
func HasCursors() predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CursorsTable, CursorsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCursorsWith applies the HasEdge predicate on the "cursors" edge with a given conditions (other predicates).
func HasCursorsWith(preds ...predicate.ResumeMailboxCursor) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(func(s *sql.Selector) {
		step := newCursorsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatistics applies the HasEdge predicate on the "statistics" edge.
func HasStatistics() predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatisticsTable, StatisticsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatisticsWith applies the HasEdge predicate on the "statistics" edge with a given conditions (other predicates).
func HasStatisticsWith(preds ...predicate.ResumeMailboxStatistic) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(func(s *sql.Selector) {
		step := newStatisticsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ResumeMailboxSetting) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ResumeMailboxSetting) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ResumeMailboxSetting) predicate.ResumeMailboxSetting {
	return predicate.ResumeMailboxSetting(sql.NotPredicates(p))
}
