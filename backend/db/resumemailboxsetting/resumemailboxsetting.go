// Code generated by ent, DO NOT EDIT.

package resumemailboxsetting

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the resumemailboxsetting type in the database.
	Label = "resume_mailbox_setting"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmailAddress holds the string denoting the email_address field in the database.
	FieldEmailAddress = "email_address"
	// FieldProtocol holds the string denoting the protocol field in the database.
	FieldProtocol = "protocol"
	// FieldHost holds the string denoting the host field in the database.
	FieldHost = "host"
	// FieldPort holds the string denoting the port field in the database.
	FieldPort = "port"
	// FieldUseSsl holds the string denoting the use_ssl field in the database.
	FieldUseSsl = "use_ssl"
	// FieldFolder holds the string denoting the folder field in the database.
	FieldFolder = "folder"
	// FieldAuthType holds the string denoting the auth_type field in the database.
	FieldAuthType = "auth_type"
	// FieldEncryptedCredential holds the string denoting the encrypted_credential field in the database.
	FieldEncryptedCredential = "encrypted_credential"
	// FieldUploaderID holds the string denoting the uploader_id field in the database.
	FieldUploaderID = "uploader_id"
	// FieldJobProfileID holds the string denoting the job_profile_id field in the database.
	FieldJobProfileID = "job_profile_id"
	// FieldSyncIntervalMinutes holds the string denoting the sync_interval_minutes field in the database.
	FieldSyncIntervalMinutes = "sync_interval_minutes"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldLastSyncedAt holds the string denoting the last_synced_at field in the database.
	FieldLastSyncedAt = "last_synced_at"
	// FieldLastError holds the string denoting the last_error field in the database.
	FieldLastError = "last_error"
	// FieldRetryCount holds the string denoting the retry_count field in the database.
	FieldRetryCount = "retry_count"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUploader holds the string denoting the uploader edge name in mutations.
	EdgeUploader = "uploader"
	// EdgeJobProfile holds the string denoting the job_profile edge name in mutations.
	EdgeJobProfile = "job_profile"
	// EdgeCursors holds the string denoting the cursors edge name in mutations.
	EdgeCursors = "cursors"
	// EdgeStatistics holds the string denoting the statistics edge name in mutations.
	EdgeStatistics = "statistics"
	// Table holds the table name of the resumemailboxsetting in the database.
	Table = "resume_mailbox_settings"
	// UploaderTable is the table that holds the uploader relation/edge.
	UploaderTable = "resume_mailbox_settings"
	// UploaderInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UploaderInverseTable = "users"
	// UploaderColumn is the table column denoting the uploader relation/edge.
	UploaderColumn = "uploader_id"
	// JobProfileTable is the table that holds the job_profile relation/edge.
	JobProfileTable = "resume_mailbox_settings"
	// JobProfileInverseTable is the table name for the JobPosition entity.
	// It exists in this package in order to avoid circular dependency with the "jobposition" package.
	JobProfileInverseTable = "job_position"
	// JobProfileColumn is the table column denoting the job_profile relation/edge.
	JobProfileColumn = "job_profile_id"
	// CursorsTable is the table that holds the cursors relation/edge.
	CursorsTable = "resume_mailbox_cursors"
	// CursorsInverseTable is the table name for the ResumeMailboxCursor entity.
	// It exists in this package in order to avoid circular dependency with the "resumemailboxcursor" package.
	CursorsInverseTable = "resume_mailbox_cursors"
	// CursorsColumn is the table column denoting the cursors relation/edge.
	CursorsColumn = "mailbox_id"
	// StatisticsTable is the table that holds the statistics relation/edge.
	StatisticsTable = "resume_mailbox_statistics"
	// StatisticsInverseTable is the table name for the ResumeMailboxStatistic entity.
	// It exists in this package in order to avoid circular dependency with the "resumemailboxstatistic" package.
	StatisticsInverseTable = "resume_mailbox_statistics"
	// StatisticsColumn is the table column denoting the statistics relation/edge.
	StatisticsColumn = "mailbox_id"
)

// Columns holds all SQL columns for resumemailboxsetting fields.
var Columns = []string{
	FieldID,
	FieldDeletedAt,
	FieldName,
	FieldEmailAddress,
	FieldProtocol,
	FieldHost,
	FieldPort,
	FieldUseSsl,
	FieldFolder,
	FieldAuthType,
	FieldEncryptedCredential,
	FieldUploaderID,
	FieldJobProfileID,
	FieldSyncIntervalMinutes,
	FieldStatus,
	FieldLastSyncedAt,
	FieldLastError,
	FieldRetryCount,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/chaitin/WhaleHire/backend/db/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// EmailAddressValidator is a validator for the "email_address" field. It is called by the builders before save.
	EmailAddressValidator func(string) error
	// HostValidator is a validator for the "host" field. It is called by the builders before save.
	HostValidator func(string) error
	// DefaultUseSsl holds the default value on creation for the "use_ssl" field.
	DefaultUseSsl bool
	// FolderValidator is a validator for the "folder" field. It is called by the builders before save.
	FolderValidator func(string) error
	// DefaultRetryCount holds the default value on creation for the "retry_count" field.
	DefaultRetryCount int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Protocol defines the type for the "protocol" enum field.
type Protocol string

// Protocol values.
const (
	ProtocolImap Protocol = "imap"
	ProtocolPop3 Protocol = "pop3"
)

func (pr Protocol) String() string {
	return string(pr)
}

// ProtocolValidator is a validator for the "protocol" field enum values. It is called by the builders before save.
func ProtocolValidator(pr Protocol) error {
	switch pr {
	case ProtocolImap, ProtocolPop3:
		return nil
	default:
		return fmt.Errorf("resumemailboxsetting: invalid enum value for protocol field: %q", pr)
	}
}

// AuthType defines the type for the "auth_type" enum field.
type AuthType string

// AuthTypePassword is the default value of the AuthType enum.
const DefaultAuthType = AuthTypePassword

// AuthType values.
const (
	AuthTypePassword AuthType = "password"
	AuthTypeOauth    AuthType = "oauth"
)

func (at AuthType) String() string {
	return string(at)
}

// AuthTypeValidator is a validator for the "auth_type" field enum values. It is called by the builders before save.
func AuthTypeValidator(at AuthType) error {
	switch at {
	case AuthTypePassword, AuthTypeOauth:
		return nil
	default:
		return fmt.Errorf("resumemailboxsetting: invalid enum value for auth_type field: %q", at)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusEnabled is the default value of the Status enum.
const DefaultStatus = StatusEnabled

// Status values.
const (
	StatusEnabled  Status = "enabled"
	StatusDisabled Status = "disabled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusEnabled, StatusDisabled:
		return nil
	default:
		return fmt.Errorf("resumemailboxsetting: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the ResumeMailboxSetting queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmailAddress orders the results by the email_address field.
func ByEmailAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailAddress, opts...).ToFunc()
}

// ByProtocol orders the results by the protocol field.
func ByProtocol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProtocol, opts...).ToFunc()
}

// ByHost orders the results by the host field.
func ByHost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHost, opts...).ToFunc()
}

// ByPort orders the results by the port field.
func ByPort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPort, opts...).ToFunc()
}

// ByUseSsl orders the results by the use_ssl field.
func ByUseSsl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseSsl, opts...).ToFunc()
}

// ByFolder orders the results by the folder field.
func ByFolder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFolder, opts...).ToFunc()
}

// ByAuthType orders the results by the auth_type field.
func ByAuthType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthType, opts...).ToFunc()
}

// ByUploaderID orders the results by the uploader_id field.
func ByUploaderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploaderID, opts...).ToFunc()
}

// ByJobProfileID orders the results by the job_profile_id field.
func ByJobProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobProfileID, opts...).ToFunc()
}

// BySyncIntervalMinutes orders the results by the sync_interval_minutes field.
func BySyncIntervalMinutes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSyncIntervalMinutes, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByLastSyncedAt orders the results by the last_synced_at field.
func ByLastSyncedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastSyncedAt, opts...).ToFunc()
}

// ByLastError orders the results by the last_error field.
func ByLastError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastError, opts...).ToFunc()
}

// ByRetryCount orders the results by the retry_count field.
func ByRetryCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetryCount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUploaderField orders the results by uploader field.
func ByUploaderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUploaderStep(), sql.OrderByField(field, opts...))
	}
}

// ByJobProfileField orders the results by job_profile field.
func ByJobProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByCursorsCount orders the results by cursors count.
func ByCursorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCursorsStep(), opts...)
	}
}

// ByCursors orders the results by cursors terms.
func ByCursors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCursorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStatisticsCount orders the results by statistics count.
func ByStatisticsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStatisticsStep(), opts...)
	}
}

// ByStatistics orders the results by statistics terms.
func ByStatistics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStatisticsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUploaderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UploaderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UploaderTable, UploaderColumn),
	)
}
func newJobProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, JobProfileTable, JobProfileColumn),
	)
}
func newCursorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CursorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CursorsTable, CursorsColumn),
	)
}
func newStatisticsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StatisticsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StatisticsTable, StatisticsColumn),
	)
}
