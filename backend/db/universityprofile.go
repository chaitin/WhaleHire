// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/WhaleHire/backend/db/universityprofile"
	"github.com/google/uuid"
	pgvector "github.com/pgvector/pgvector-go"
)

// UniversityProfile is the model entity for the UniversityProfile schema.
type UniversityProfile struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 中文名称
	NameCn string `json:"name_cn,omitempty"`
	// 英文名称
	NameEn string `json:"name_en,omitempty"`
	// 别名
	Alias string `json:"alias,omitempty"`
	// 国家/地区
	Country string `json:"country,omitempty"`
	// 是否为双一流
	IsDoubleFirstClass bool `json:"is_double_first_class,omitempty"`
	// 是否为985工程
	IsProject985 bool `json:"is_project_985,omitempty"`
	// 是否为211工程
	IsProject211 bool `json:"is_project_211,omitempty"`
	// 是否为QS Top 100
	IsQsTop100 bool `json:"is_qs_top100,omitempty"`
	// QS最新排名
	RankQs int `json:"rank_qs,omitempty"`
	// 综合评分
	OverallScore float64 `json:"overall_score,omitempty"`
	// 元数据，包含数据源、维护时间等
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// 用于向量化的文档内容
	VectorContent string `json:"vector_content,omitempty"`
	// 向量嵌入（需要在迁移中执行 CREATE EXTENSION IF NOT EXISTS vector;）
	Vector *pgvector.Vector `json:"vector,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UniversityProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case universityprofile.FieldMetadata:
			values[i] = new([]byte)
		case universityprofile.FieldVector:
			values[i] = new(pgvector.Vector)
		case universityprofile.FieldIsDoubleFirstClass, universityprofile.FieldIsProject985, universityprofile.FieldIsProject211, universityprofile.FieldIsQsTop100:
			values[i] = new(sql.NullBool)
		case universityprofile.FieldOverallScore:
			values[i] = new(sql.NullFloat64)
		case universityprofile.FieldRankQs:
			values[i] = new(sql.NullInt64)
		case universityprofile.FieldNameCn, universityprofile.FieldNameEn, universityprofile.FieldAlias, universityprofile.FieldCountry, universityprofile.FieldVectorContent:
			values[i] = new(sql.NullString)
		case universityprofile.FieldDeletedAt, universityprofile.FieldCreatedAt, universityprofile.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case universityprofile.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UniversityProfile fields.
func (up *UniversityProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case universityprofile.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				up.ID = *value
			}
		case universityprofile.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				up.DeletedAt = value.Time
			}
		case universityprofile.FieldNameCn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_cn", values[i])
			} else if value.Valid {
				up.NameCn = value.String
			}
		case universityprofile.FieldNameEn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_en", values[i])
			} else if value.Valid {
				up.NameEn = value.String
			}
		case universityprofile.FieldAlias:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alias", values[i])
			} else if value.Valid {
				up.Alias = value.String
			}
		case universityprofile.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				up.Country = value.String
			}
		case universityprofile.FieldIsDoubleFirstClass:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_double_first_class", values[i])
			} else if value.Valid {
				up.IsDoubleFirstClass = value.Bool
			}
		case universityprofile.FieldIsProject985:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_project_985", values[i])
			} else if value.Valid {
				up.IsProject985 = value.Bool
			}
		case universityprofile.FieldIsProject211:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_project_211", values[i])
			} else if value.Valid {
				up.IsProject211 = value.Bool
			}
		case universityprofile.FieldIsQsTop100:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_qs_top100", values[i])
			} else if value.Valid {
				up.IsQsTop100 = value.Bool
			}
		case universityprofile.FieldRankQs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank_qs", values[i])
			} else if value.Valid {
				up.RankQs = int(value.Int64)
			}
		case universityprofile.FieldOverallScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field overall_score", values[i])
			} else if value.Valid {
				up.OverallScore = value.Float64
			}
		case universityprofile.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &up.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case universityprofile.FieldVectorContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vector_content", values[i])
			} else if value.Valid {
				up.VectorContent = value.String
			}
		case universityprofile.FieldVector:
			if value, ok := values[i].(*pgvector.Vector); !ok {
				return fmt.Errorf("unexpected type %T for field vector", values[i])
			} else if value != nil {
				up.Vector = value
			}
		case universityprofile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				up.CreatedAt = value.Time
			}
		case universityprofile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				up.UpdatedAt = value.Time
			}
		default:
			up.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UniversityProfile.
// This includes values selected through modifiers, order, etc.
func (up *UniversityProfile) Value(name string) (ent.Value, error) {
	return up.selectValues.Get(name)
}

// Update returns a builder for updating this UniversityProfile.
// Note that you need to call UniversityProfile.Unwrap() before calling this method if this UniversityProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UniversityProfile) Update() *UniversityProfileUpdateOne {
	return NewUniversityProfileClient(up.config).UpdateOne(up)
}

// Unwrap unwraps the UniversityProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UniversityProfile) Unwrap() *UniversityProfile {
	_tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("db: UniversityProfile is not a transactional entity")
	}
	up.config.driver = _tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UniversityProfile) String() string {
	var builder strings.Builder
	builder.WriteString("UniversityProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", up.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(up.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name_cn=")
	builder.WriteString(up.NameCn)
	builder.WriteString(", ")
	builder.WriteString("name_en=")
	builder.WriteString(up.NameEn)
	builder.WriteString(", ")
	builder.WriteString("alias=")
	builder.WriteString(up.Alias)
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(up.Country)
	builder.WriteString(", ")
	builder.WriteString("is_double_first_class=")
	builder.WriteString(fmt.Sprintf("%v", up.IsDoubleFirstClass))
	builder.WriteString(", ")
	builder.WriteString("is_project_985=")
	builder.WriteString(fmt.Sprintf("%v", up.IsProject985))
	builder.WriteString(", ")
	builder.WriteString("is_project_211=")
	builder.WriteString(fmt.Sprintf("%v", up.IsProject211))
	builder.WriteString(", ")
	builder.WriteString("is_qs_top100=")
	builder.WriteString(fmt.Sprintf("%v", up.IsQsTop100))
	builder.WriteString(", ")
	builder.WriteString("rank_qs=")
	builder.WriteString(fmt.Sprintf("%v", up.RankQs))
	builder.WriteString(", ")
	builder.WriteString("overall_score=")
	builder.WriteString(fmt.Sprintf("%v", up.OverallScore))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", up.Metadata))
	builder.WriteString(", ")
	builder.WriteString("vector_content=")
	builder.WriteString(up.VectorContent)
	builder.WriteString(", ")
	builder.WriteString("vector=")
	builder.WriteString(fmt.Sprintf("%v", up.Vector))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(up.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(up.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UniversityProfiles is a parsable slice of UniversityProfile.
type UniversityProfiles []*UniversityProfile
