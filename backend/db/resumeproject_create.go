// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/resume"
	"github.com/chaitin/WhaleHire/backend/db/resumeproject"
	"github.com/google/uuid"
)

// ResumeProjectCreate is the builder for creating a ResumeProject entity.
type ResumeProjectCreate struct {
	config
	mutation *ResumeProjectMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (rpc *ResumeProjectCreate) SetDeletedAt(t time.Time) *ResumeProjectCreate {
	rpc.mutation.SetDeletedAt(t)
	return rpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rpc *ResumeProjectCreate) SetNillableDeletedAt(t *time.Time) *ResumeProjectCreate {
	if t != nil {
		rpc.SetDeletedAt(*t)
	}
	return rpc
}

// SetResumeID sets the "resume_id" field.
func (rpc *ResumeProjectCreate) SetResumeID(u uuid.UUID) *ResumeProjectCreate {
	rpc.mutation.SetResumeID(u)
	return rpc
}

// SetName sets the "name" field.
func (rpc *ResumeProjectCreate) SetName(s string) *ResumeProjectCreate {
	rpc.mutation.SetName(s)
	return rpc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rpc *ResumeProjectCreate) SetNillableName(s *string) *ResumeProjectCreate {
	if s != nil {
		rpc.SetName(*s)
	}
	return rpc
}

// SetRole sets the "role" field.
func (rpc *ResumeProjectCreate) SetRole(s string) *ResumeProjectCreate {
	rpc.mutation.SetRole(s)
	return rpc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (rpc *ResumeProjectCreate) SetNillableRole(s *string) *ResumeProjectCreate {
	if s != nil {
		rpc.SetRole(*s)
	}
	return rpc
}

// SetCompany sets the "company" field.
func (rpc *ResumeProjectCreate) SetCompany(s string) *ResumeProjectCreate {
	rpc.mutation.SetCompany(s)
	return rpc
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (rpc *ResumeProjectCreate) SetNillableCompany(s *string) *ResumeProjectCreate {
	if s != nil {
		rpc.SetCompany(*s)
	}
	return rpc
}

// SetStartDate sets the "start_date" field.
func (rpc *ResumeProjectCreate) SetStartDate(t time.Time) *ResumeProjectCreate {
	rpc.mutation.SetStartDate(t)
	return rpc
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (rpc *ResumeProjectCreate) SetNillableStartDate(t *time.Time) *ResumeProjectCreate {
	if t != nil {
		rpc.SetStartDate(*t)
	}
	return rpc
}

// SetEndDate sets the "end_date" field.
func (rpc *ResumeProjectCreate) SetEndDate(t time.Time) *ResumeProjectCreate {
	rpc.mutation.SetEndDate(t)
	return rpc
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (rpc *ResumeProjectCreate) SetNillableEndDate(t *time.Time) *ResumeProjectCreate {
	if t != nil {
		rpc.SetEndDate(*t)
	}
	return rpc
}

// SetDescription sets the "description" field.
func (rpc *ResumeProjectCreate) SetDescription(s string) *ResumeProjectCreate {
	rpc.mutation.SetDescription(s)
	return rpc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rpc *ResumeProjectCreate) SetNillableDescription(s *string) *ResumeProjectCreate {
	if s != nil {
		rpc.SetDescription(*s)
	}
	return rpc
}

// SetResponsibilities sets the "responsibilities" field.
func (rpc *ResumeProjectCreate) SetResponsibilities(s string) *ResumeProjectCreate {
	rpc.mutation.SetResponsibilities(s)
	return rpc
}

// SetNillableResponsibilities sets the "responsibilities" field if the given value is not nil.
func (rpc *ResumeProjectCreate) SetNillableResponsibilities(s *string) *ResumeProjectCreate {
	if s != nil {
		rpc.SetResponsibilities(*s)
	}
	return rpc
}

// SetAchievements sets the "achievements" field.
func (rpc *ResumeProjectCreate) SetAchievements(s string) *ResumeProjectCreate {
	rpc.mutation.SetAchievements(s)
	return rpc
}

// SetNillableAchievements sets the "achievements" field if the given value is not nil.
func (rpc *ResumeProjectCreate) SetNillableAchievements(s *string) *ResumeProjectCreate {
	if s != nil {
		rpc.SetAchievements(*s)
	}
	return rpc
}

// SetTechnologies sets the "technologies" field.
func (rpc *ResumeProjectCreate) SetTechnologies(s string) *ResumeProjectCreate {
	rpc.mutation.SetTechnologies(s)
	return rpc
}

// SetNillableTechnologies sets the "technologies" field if the given value is not nil.
func (rpc *ResumeProjectCreate) SetNillableTechnologies(s *string) *ResumeProjectCreate {
	if s != nil {
		rpc.SetTechnologies(*s)
	}
	return rpc
}

// SetProjectURL sets the "project_url" field.
func (rpc *ResumeProjectCreate) SetProjectURL(s string) *ResumeProjectCreate {
	rpc.mutation.SetProjectURL(s)
	return rpc
}

// SetNillableProjectURL sets the "project_url" field if the given value is not nil.
func (rpc *ResumeProjectCreate) SetNillableProjectURL(s *string) *ResumeProjectCreate {
	if s != nil {
		rpc.SetProjectURL(*s)
	}
	return rpc
}

// SetProjectType sets the "project_type" field.
func (rpc *ResumeProjectCreate) SetProjectType(ct consts.ProjectType) *ResumeProjectCreate {
	rpc.mutation.SetProjectType(ct)
	return rpc
}

// SetNillableProjectType sets the "project_type" field if the given value is not nil.
func (rpc *ResumeProjectCreate) SetNillableProjectType(ct *consts.ProjectType) *ResumeProjectCreate {
	if ct != nil {
		rpc.SetProjectType(*ct)
	}
	return rpc
}

// SetCreatedAt sets the "created_at" field.
func (rpc *ResumeProjectCreate) SetCreatedAt(t time.Time) *ResumeProjectCreate {
	rpc.mutation.SetCreatedAt(t)
	return rpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rpc *ResumeProjectCreate) SetNillableCreatedAt(t *time.Time) *ResumeProjectCreate {
	if t != nil {
		rpc.SetCreatedAt(*t)
	}
	return rpc
}

// SetUpdatedAt sets the "updated_at" field.
func (rpc *ResumeProjectCreate) SetUpdatedAt(t time.Time) *ResumeProjectCreate {
	rpc.mutation.SetUpdatedAt(t)
	return rpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rpc *ResumeProjectCreate) SetNillableUpdatedAt(t *time.Time) *ResumeProjectCreate {
	if t != nil {
		rpc.SetUpdatedAt(*t)
	}
	return rpc
}

// SetID sets the "id" field.
func (rpc *ResumeProjectCreate) SetID(u uuid.UUID) *ResumeProjectCreate {
	rpc.mutation.SetID(u)
	return rpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rpc *ResumeProjectCreate) SetNillableID(u *uuid.UUID) *ResumeProjectCreate {
	if u != nil {
		rpc.SetID(*u)
	}
	return rpc
}

// SetResume sets the "resume" edge to the Resume entity.
func (rpc *ResumeProjectCreate) SetResume(r *Resume) *ResumeProjectCreate {
	return rpc.SetResumeID(r.ID)
}

// Mutation returns the ResumeProjectMutation object of the builder.
func (rpc *ResumeProjectCreate) Mutation() *ResumeProjectMutation {
	return rpc.mutation
}

// Save creates the ResumeProject in the database.
func (rpc *ResumeProjectCreate) Save(ctx context.Context) (*ResumeProject, error) {
	if err := rpc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rpc.sqlSave, rpc.mutation, rpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rpc *ResumeProjectCreate) SaveX(ctx context.Context) *ResumeProject {
	v, err := rpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpc *ResumeProjectCreate) Exec(ctx context.Context) error {
	_, err := rpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpc *ResumeProjectCreate) ExecX(ctx context.Context) {
	if err := rpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpc *ResumeProjectCreate) defaults() error {
	if _, ok := rpc.mutation.CreatedAt(); !ok {
		if resumeproject.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized resumeproject.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := resumeproject.DefaultCreatedAt()
		rpc.mutation.SetCreatedAt(v)
	}
	if _, ok := rpc.mutation.UpdatedAt(); !ok {
		if resumeproject.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized resumeproject.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := resumeproject.DefaultUpdatedAt()
		rpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rpc.mutation.ID(); !ok {
		if resumeproject.DefaultID == nil {
			return fmt.Errorf("db: uninitialized resumeproject.DefaultID (forgotten import db/runtime?)")
		}
		v := resumeproject.DefaultID()
		rpc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rpc *ResumeProjectCreate) check() error {
	if _, ok := rpc.mutation.ResumeID(); !ok {
		return &ValidationError{Name: "resume_id", err: errors.New(`db: missing required field "ResumeProject.resume_id"`)}
	}
	if _, ok := rpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ResumeProject.created_at"`)}
	}
	if _, ok := rpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "ResumeProject.updated_at"`)}
	}
	if len(rpc.mutation.ResumeIDs()) == 0 {
		return &ValidationError{Name: "resume", err: errors.New(`db: missing required edge "ResumeProject.resume"`)}
	}
	return nil
}

func (rpc *ResumeProjectCreate) sqlSave(ctx context.Context) (*ResumeProject, error) {
	if err := rpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rpc.mutation.id = &_node.ID
	rpc.mutation.done = true
	return _node, nil
}

func (rpc *ResumeProjectCreate) createSpec() (*ResumeProject, *sqlgraph.CreateSpec) {
	var (
		_node = &ResumeProject{config: rpc.config}
		_spec = sqlgraph.NewCreateSpec(resumeproject.Table, sqlgraph.NewFieldSpec(resumeproject.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rpc.conflict
	if id, ok := rpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rpc.mutation.DeletedAt(); ok {
		_spec.SetField(resumeproject.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rpc.mutation.Name(); ok {
		_spec.SetField(resumeproject.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rpc.mutation.Role(); ok {
		_spec.SetField(resumeproject.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	if value, ok := rpc.mutation.Company(); ok {
		_spec.SetField(resumeproject.FieldCompany, field.TypeString, value)
		_node.Company = value
	}
	if value, ok := rpc.mutation.StartDate(); ok {
		_spec.SetField(resumeproject.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := rpc.mutation.EndDate(); ok {
		_spec.SetField(resumeproject.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := rpc.mutation.Description(); ok {
		_spec.SetField(resumeproject.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rpc.mutation.Responsibilities(); ok {
		_spec.SetField(resumeproject.FieldResponsibilities, field.TypeString, value)
		_node.Responsibilities = value
	}
	if value, ok := rpc.mutation.Achievements(); ok {
		_spec.SetField(resumeproject.FieldAchievements, field.TypeString, value)
		_node.Achievements = value
	}
	if value, ok := rpc.mutation.Technologies(); ok {
		_spec.SetField(resumeproject.FieldTechnologies, field.TypeString, value)
		_node.Technologies = value
	}
	if value, ok := rpc.mutation.ProjectURL(); ok {
		_spec.SetField(resumeproject.FieldProjectURL, field.TypeString, value)
		_node.ProjectURL = value
	}
	if value, ok := rpc.mutation.ProjectType(); ok {
		_spec.SetField(resumeproject.FieldProjectType, field.TypeString, value)
		_node.ProjectType = value
	}
	if value, ok := rpc.mutation.CreatedAt(); ok {
		_spec.SetField(resumeproject.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rpc.mutation.UpdatedAt(); ok {
		_spec.SetField(resumeproject.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rpc.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resumeproject.ResumeTable,
			Columns: []string{resumeproject.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResumeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeProject.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeProjectUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rpc *ResumeProjectCreate) OnConflict(opts ...sql.ConflictOption) *ResumeProjectUpsertOne {
	rpc.conflict = opts
	return &ResumeProjectUpsertOne{
		create: rpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeProject.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rpc *ResumeProjectCreate) OnConflictColumns(columns ...string) *ResumeProjectUpsertOne {
	rpc.conflict = append(rpc.conflict, sql.ConflictColumns(columns...))
	return &ResumeProjectUpsertOne{
		create: rpc,
	}
}

type (
	// ResumeProjectUpsertOne is the builder for "upsert"-ing
	//  one ResumeProject node.
	ResumeProjectUpsertOne struct {
		create *ResumeProjectCreate
	}

	// ResumeProjectUpsert is the "OnConflict" setter.
	ResumeProjectUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeProjectUpsert) SetDeletedAt(v time.Time) *ResumeProjectUpsert {
	u.Set(resumeproject.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeProjectUpsert) UpdateDeletedAt() *ResumeProjectUpsert {
	u.SetExcluded(resumeproject.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeProjectUpsert) ClearDeletedAt() *ResumeProjectUpsert {
	u.SetNull(resumeproject.FieldDeletedAt)
	return u
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeProjectUpsert) SetResumeID(v uuid.UUID) *ResumeProjectUpsert {
	u.Set(resumeproject.FieldResumeID, v)
	return u
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeProjectUpsert) UpdateResumeID() *ResumeProjectUpsert {
	u.SetExcluded(resumeproject.FieldResumeID)
	return u
}

// SetName sets the "name" field.
func (u *ResumeProjectUpsert) SetName(v string) *ResumeProjectUpsert {
	u.Set(resumeproject.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ResumeProjectUpsert) UpdateName() *ResumeProjectUpsert {
	u.SetExcluded(resumeproject.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *ResumeProjectUpsert) ClearName() *ResumeProjectUpsert {
	u.SetNull(resumeproject.FieldName)
	return u
}

// SetRole sets the "role" field.
func (u *ResumeProjectUpsert) SetRole(v string) *ResumeProjectUpsert {
	u.Set(resumeproject.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *ResumeProjectUpsert) UpdateRole() *ResumeProjectUpsert {
	u.SetExcluded(resumeproject.FieldRole)
	return u
}

// ClearRole clears the value of the "role" field.
func (u *ResumeProjectUpsert) ClearRole() *ResumeProjectUpsert {
	u.SetNull(resumeproject.FieldRole)
	return u
}

// SetCompany sets the "company" field.
func (u *ResumeProjectUpsert) SetCompany(v string) *ResumeProjectUpsert {
	u.Set(resumeproject.FieldCompany, v)
	return u
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *ResumeProjectUpsert) UpdateCompany() *ResumeProjectUpsert {
	u.SetExcluded(resumeproject.FieldCompany)
	return u
}

// ClearCompany clears the value of the "company" field.
func (u *ResumeProjectUpsert) ClearCompany() *ResumeProjectUpsert {
	u.SetNull(resumeproject.FieldCompany)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *ResumeProjectUpsert) SetStartDate(v time.Time) *ResumeProjectUpsert {
	u.Set(resumeproject.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *ResumeProjectUpsert) UpdateStartDate() *ResumeProjectUpsert {
	u.SetExcluded(resumeproject.FieldStartDate)
	return u
}

// ClearStartDate clears the value of the "start_date" field.
func (u *ResumeProjectUpsert) ClearStartDate() *ResumeProjectUpsert {
	u.SetNull(resumeproject.FieldStartDate)
	return u
}

// SetEndDate sets the "end_date" field.
func (u *ResumeProjectUpsert) SetEndDate(v time.Time) *ResumeProjectUpsert {
	u.Set(resumeproject.FieldEndDate, v)
	return u
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *ResumeProjectUpsert) UpdateEndDate() *ResumeProjectUpsert {
	u.SetExcluded(resumeproject.FieldEndDate)
	return u
}

// ClearEndDate clears the value of the "end_date" field.
func (u *ResumeProjectUpsert) ClearEndDate() *ResumeProjectUpsert {
	u.SetNull(resumeproject.FieldEndDate)
	return u
}

// SetDescription sets the "description" field.
func (u *ResumeProjectUpsert) SetDescription(v string) *ResumeProjectUpsert {
	u.Set(resumeproject.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResumeProjectUpsert) UpdateDescription() *ResumeProjectUpsert {
	u.SetExcluded(resumeproject.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ResumeProjectUpsert) ClearDescription() *ResumeProjectUpsert {
	u.SetNull(resumeproject.FieldDescription)
	return u
}

// SetResponsibilities sets the "responsibilities" field.
func (u *ResumeProjectUpsert) SetResponsibilities(v string) *ResumeProjectUpsert {
	u.Set(resumeproject.FieldResponsibilities, v)
	return u
}

// UpdateResponsibilities sets the "responsibilities" field to the value that was provided on create.
func (u *ResumeProjectUpsert) UpdateResponsibilities() *ResumeProjectUpsert {
	u.SetExcluded(resumeproject.FieldResponsibilities)
	return u
}

// ClearResponsibilities clears the value of the "responsibilities" field.
func (u *ResumeProjectUpsert) ClearResponsibilities() *ResumeProjectUpsert {
	u.SetNull(resumeproject.FieldResponsibilities)
	return u
}

// SetAchievements sets the "achievements" field.
func (u *ResumeProjectUpsert) SetAchievements(v string) *ResumeProjectUpsert {
	u.Set(resumeproject.FieldAchievements, v)
	return u
}

// UpdateAchievements sets the "achievements" field to the value that was provided on create.
func (u *ResumeProjectUpsert) UpdateAchievements() *ResumeProjectUpsert {
	u.SetExcluded(resumeproject.FieldAchievements)
	return u
}

// ClearAchievements clears the value of the "achievements" field.
func (u *ResumeProjectUpsert) ClearAchievements() *ResumeProjectUpsert {
	u.SetNull(resumeproject.FieldAchievements)
	return u
}

// SetTechnologies sets the "technologies" field.
func (u *ResumeProjectUpsert) SetTechnologies(v string) *ResumeProjectUpsert {
	u.Set(resumeproject.FieldTechnologies, v)
	return u
}

// UpdateTechnologies sets the "technologies" field to the value that was provided on create.
func (u *ResumeProjectUpsert) UpdateTechnologies() *ResumeProjectUpsert {
	u.SetExcluded(resumeproject.FieldTechnologies)
	return u
}

// ClearTechnologies clears the value of the "technologies" field.
func (u *ResumeProjectUpsert) ClearTechnologies() *ResumeProjectUpsert {
	u.SetNull(resumeproject.FieldTechnologies)
	return u
}

// SetProjectURL sets the "project_url" field.
func (u *ResumeProjectUpsert) SetProjectURL(v string) *ResumeProjectUpsert {
	u.Set(resumeproject.FieldProjectURL, v)
	return u
}

// UpdateProjectURL sets the "project_url" field to the value that was provided on create.
func (u *ResumeProjectUpsert) UpdateProjectURL() *ResumeProjectUpsert {
	u.SetExcluded(resumeproject.FieldProjectURL)
	return u
}

// ClearProjectURL clears the value of the "project_url" field.
func (u *ResumeProjectUpsert) ClearProjectURL() *ResumeProjectUpsert {
	u.SetNull(resumeproject.FieldProjectURL)
	return u
}

// SetProjectType sets the "project_type" field.
func (u *ResumeProjectUpsert) SetProjectType(v consts.ProjectType) *ResumeProjectUpsert {
	u.Set(resumeproject.FieldProjectType, v)
	return u
}

// UpdateProjectType sets the "project_type" field to the value that was provided on create.
func (u *ResumeProjectUpsert) UpdateProjectType() *ResumeProjectUpsert {
	u.SetExcluded(resumeproject.FieldProjectType)
	return u
}

// ClearProjectType clears the value of the "project_type" field.
func (u *ResumeProjectUpsert) ClearProjectType() *ResumeProjectUpsert {
	u.SetNull(resumeproject.FieldProjectType)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeProjectUpsert) SetCreatedAt(v time.Time) *ResumeProjectUpsert {
	u.Set(resumeproject.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeProjectUpsert) UpdateCreatedAt() *ResumeProjectUpsert {
	u.SetExcluded(resumeproject.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeProjectUpsert) SetUpdatedAt(v time.Time) *ResumeProjectUpsert {
	u.Set(resumeproject.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeProjectUpsert) UpdateUpdatedAt() *ResumeProjectUpsert {
	u.SetExcluded(resumeproject.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ResumeProject.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumeproject.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeProjectUpsertOne) UpdateNewValues() *ResumeProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resumeproject.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeProject.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResumeProjectUpsertOne) Ignore() *ResumeProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeProjectUpsertOne) DoNothing() *ResumeProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeProjectCreate.OnConflict
// documentation for more info.
func (u *ResumeProjectUpsertOne) Update(set func(*ResumeProjectUpsert)) *ResumeProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeProjectUpsertOne) SetDeletedAt(v time.Time) *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeProjectUpsertOne) UpdateDeletedAt() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeProjectUpsertOne) ClearDeletedAt() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearDeletedAt()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeProjectUpsertOne) SetResumeID(v uuid.UUID) *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeProjectUpsertOne) UpdateResumeID() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateResumeID()
	})
}

// SetName sets the "name" field.
func (u *ResumeProjectUpsertOne) SetName(v string) *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ResumeProjectUpsertOne) UpdateName() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *ResumeProjectUpsertOne) ClearName() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearName()
	})
}

// SetRole sets the "role" field.
func (u *ResumeProjectUpsertOne) SetRole(v string) *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *ResumeProjectUpsertOne) UpdateRole() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateRole()
	})
}

// ClearRole clears the value of the "role" field.
func (u *ResumeProjectUpsertOne) ClearRole() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearRole()
	})
}

// SetCompany sets the "company" field.
func (u *ResumeProjectUpsertOne) SetCompany(v string) *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *ResumeProjectUpsertOne) UpdateCompany() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateCompany()
	})
}

// ClearCompany clears the value of the "company" field.
func (u *ResumeProjectUpsertOne) ClearCompany() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearCompany()
	})
}

// SetStartDate sets the "start_date" field.
func (u *ResumeProjectUpsertOne) SetStartDate(v time.Time) *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *ResumeProjectUpsertOne) UpdateStartDate() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *ResumeProjectUpsertOne) ClearStartDate() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *ResumeProjectUpsertOne) SetEndDate(v time.Time) *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *ResumeProjectUpsertOne) UpdateEndDate() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *ResumeProjectUpsertOne) ClearEndDate() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearEndDate()
	})
}

// SetDescription sets the "description" field.
func (u *ResumeProjectUpsertOne) SetDescription(v string) *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResumeProjectUpsertOne) UpdateDescription() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ResumeProjectUpsertOne) ClearDescription() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearDescription()
	})
}

// SetResponsibilities sets the "responsibilities" field.
func (u *ResumeProjectUpsertOne) SetResponsibilities(v string) *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetResponsibilities(v)
	})
}

// UpdateResponsibilities sets the "responsibilities" field to the value that was provided on create.
func (u *ResumeProjectUpsertOne) UpdateResponsibilities() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateResponsibilities()
	})
}

// ClearResponsibilities clears the value of the "responsibilities" field.
func (u *ResumeProjectUpsertOne) ClearResponsibilities() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearResponsibilities()
	})
}

// SetAchievements sets the "achievements" field.
func (u *ResumeProjectUpsertOne) SetAchievements(v string) *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetAchievements(v)
	})
}

// UpdateAchievements sets the "achievements" field to the value that was provided on create.
func (u *ResumeProjectUpsertOne) UpdateAchievements() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateAchievements()
	})
}

// ClearAchievements clears the value of the "achievements" field.
func (u *ResumeProjectUpsertOne) ClearAchievements() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearAchievements()
	})
}

// SetTechnologies sets the "technologies" field.
func (u *ResumeProjectUpsertOne) SetTechnologies(v string) *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetTechnologies(v)
	})
}

// UpdateTechnologies sets the "technologies" field to the value that was provided on create.
func (u *ResumeProjectUpsertOne) UpdateTechnologies() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateTechnologies()
	})
}

// ClearTechnologies clears the value of the "technologies" field.
func (u *ResumeProjectUpsertOne) ClearTechnologies() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearTechnologies()
	})
}

// SetProjectURL sets the "project_url" field.
func (u *ResumeProjectUpsertOne) SetProjectURL(v string) *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetProjectURL(v)
	})
}

// UpdateProjectURL sets the "project_url" field to the value that was provided on create.
func (u *ResumeProjectUpsertOne) UpdateProjectURL() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateProjectURL()
	})
}

// ClearProjectURL clears the value of the "project_url" field.
func (u *ResumeProjectUpsertOne) ClearProjectURL() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearProjectURL()
	})
}

// SetProjectType sets the "project_type" field.
func (u *ResumeProjectUpsertOne) SetProjectType(v consts.ProjectType) *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetProjectType(v)
	})
}

// UpdateProjectType sets the "project_type" field to the value that was provided on create.
func (u *ResumeProjectUpsertOne) UpdateProjectType() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateProjectType()
	})
}

// ClearProjectType clears the value of the "project_type" field.
func (u *ResumeProjectUpsertOne) ClearProjectType() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearProjectType()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeProjectUpsertOne) SetCreatedAt(v time.Time) *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeProjectUpsertOne) UpdateCreatedAt() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeProjectUpsertOne) SetUpdatedAt(v time.Time) *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeProjectUpsertOne) UpdateUpdatedAt() *ResumeProjectUpsertOne {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeProjectUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeProjectCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeProjectUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResumeProjectUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ResumeProjectUpsertOne.ID is not supported by MySQL driver. Use ResumeProjectUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResumeProjectUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResumeProjectCreateBulk is the builder for creating many ResumeProject entities in bulk.
type ResumeProjectCreateBulk struct {
	config
	err      error
	builders []*ResumeProjectCreate
	conflict []sql.ConflictOption
}

// Save creates the ResumeProject entities in the database.
func (rpcb *ResumeProjectCreateBulk) Save(ctx context.Context) ([]*ResumeProject, error) {
	if rpcb.err != nil {
		return nil, rpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rpcb.builders))
	nodes := make([]*ResumeProject, len(rpcb.builders))
	mutators := make([]Mutator, len(rpcb.builders))
	for i := range rpcb.builders {
		func(i int, root context.Context) {
			builder := rpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResumeProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rpcb *ResumeProjectCreateBulk) SaveX(ctx context.Context) []*ResumeProject {
	v, err := rpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpcb *ResumeProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := rpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpcb *ResumeProjectCreateBulk) ExecX(ctx context.Context) {
	if err := rpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResumeProject.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResumeProjectUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rpcb *ResumeProjectCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResumeProjectUpsertBulk {
	rpcb.conflict = opts
	return &ResumeProjectUpsertBulk{
		create: rpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResumeProject.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rpcb *ResumeProjectCreateBulk) OnConflictColumns(columns ...string) *ResumeProjectUpsertBulk {
	rpcb.conflict = append(rpcb.conflict, sql.ConflictColumns(columns...))
	return &ResumeProjectUpsertBulk{
		create: rpcb,
	}
}

// ResumeProjectUpsertBulk is the builder for "upsert"-ing
// a bulk of ResumeProject nodes.
type ResumeProjectUpsertBulk struct {
	create *ResumeProjectCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ResumeProject.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resumeproject.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResumeProjectUpsertBulk) UpdateNewValues() *ResumeProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resumeproject.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResumeProject.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResumeProjectUpsertBulk) Ignore() *ResumeProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResumeProjectUpsertBulk) DoNothing() *ResumeProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResumeProjectCreateBulk.OnConflict
// documentation for more info.
func (u *ResumeProjectUpsertBulk) Update(set func(*ResumeProjectUpsert)) *ResumeProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResumeProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ResumeProjectUpsertBulk) SetDeletedAt(v time.Time) *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ResumeProjectUpsertBulk) UpdateDeletedAt() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ResumeProjectUpsertBulk) ClearDeletedAt() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearDeletedAt()
	})
}

// SetResumeID sets the "resume_id" field.
func (u *ResumeProjectUpsertBulk) SetResumeID(v uuid.UUID) *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetResumeID(v)
	})
}

// UpdateResumeID sets the "resume_id" field to the value that was provided on create.
func (u *ResumeProjectUpsertBulk) UpdateResumeID() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateResumeID()
	})
}

// SetName sets the "name" field.
func (u *ResumeProjectUpsertBulk) SetName(v string) *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ResumeProjectUpsertBulk) UpdateName() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *ResumeProjectUpsertBulk) ClearName() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearName()
	})
}

// SetRole sets the "role" field.
func (u *ResumeProjectUpsertBulk) SetRole(v string) *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *ResumeProjectUpsertBulk) UpdateRole() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateRole()
	})
}

// ClearRole clears the value of the "role" field.
func (u *ResumeProjectUpsertBulk) ClearRole() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearRole()
	})
}

// SetCompany sets the "company" field.
func (u *ResumeProjectUpsertBulk) SetCompany(v string) *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *ResumeProjectUpsertBulk) UpdateCompany() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateCompany()
	})
}

// ClearCompany clears the value of the "company" field.
func (u *ResumeProjectUpsertBulk) ClearCompany() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearCompany()
	})
}

// SetStartDate sets the "start_date" field.
func (u *ResumeProjectUpsertBulk) SetStartDate(v time.Time) *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *ResumeProjectUpsertBulk) UpdateStartDate() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *ResumeProjectUpsertBulk) ClearStartDate() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *ResumeProjectUpsertBulk) SetEndDate(v time.Time) *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *ResumeProjectUpsertBulk) UpdateEndDate() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *ResumeProjectUpsertBulk) ClearEndDate() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearEndDate()
	})
}

// SetDescription sets the "description" field.
func (u *ResumeProjectUpsertBulk) SetDescription(v string) *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResumeProjectUpsertBulk) UpdateDescription() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ResumeProjectUpsertBulk) ClearDescription() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearDescription()
	})
}

// SetResponsibilities sets the "responsibilities" field.
func (u *ResumeProjectUpsertBulk) SetResponsibilities(v string) *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetResponsibilities(v)
	})
}

// UpdateResponsibilities sets the "responsibilities" field to the value that was provided on create.
func (u *ResumeProjectUpsertBulk) UpdateResponsibilities() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateResponsibilities()
	})
}

// ClearResponsibilities clears the value of the "responsibilities" field.
func (u *ResumeProjectUpsertBulk) ClearResponsibilities() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearResponsibilities()
	})
}

// SetAchievements sets the "achievements" field.
func (u *ResumeProjectUpsertBulk) SetAchievements(v string) *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetAchievements(v)
	})
}

// UpdateAchievements sets the "achievements" field to the value that was provided on create.
func (u *ResumeProjectUpsertBulk) UpdateAchievements() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateAchievements()
	})
}

// ClearAchievements clears the value of the "achievements" field.
func (u *ResumeProjectUpsertBulk) ClearAchievements() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearAchievements()
	})
}

// SetTechnologies sets the "technologies" field.
func (u *ResumeProjectUpsertBulk) SetTechnologies(v string) *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetTechnologies(v)
	})
}

// UpdateTechnologies sets the "technologies" field to the value that was provided on create.
func (u *ResumeProjectUpsertBulk) UpdateTechnologies() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateTechnologies()
	})
}

// ClearTechnologies clears the value of the "technologies" field.
func (u *ResumeProjectUpsertBulk) ClearTechnologies() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearTechnologies()
	})
}

// SetProjectURL sets the "project_url" field.
func (u *ResumeProjectUpsertBulk) SetProjectURL(v string) *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetProjectURL(v)
	})
}

// UpdateProjectURL sets the "project_url" field to the value that was provided on create.
func (u *ResumeProjectUpsertBulk) UpdateProjectURL() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateProjectURL()
	})
}

// ClearProjectURL clears the value of the "project_url" field.
func (u *ResumeProjectUpsertBulk) ClearProjectURL() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearProjectURL()
	})
}

// SetProjectType sets the "project_type" field.
func (u *ResumeProjectUpsertBulk) SetProjectType(v consts.ProjectType) *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetProjectType(v)
	})
}

// UpdateProjectType sets the "project_type" field to the value that was provided on create.
func (u *ResumeProjectUpsertBulk) UpdateProjectType() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateProjectType()
	})
}

// ClearProjectType clears the value of the "project_type" field.
func (u *ResumeProjectUpsertBulk) ClearProjectType() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.ClearProjectType()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResumeProjectUpsertBulk) SetCreatedAt(v time.Time) *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResumeProjectUpsertBulk) UpdateCreatedAt() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ResumeProjectUpsertBulk) SetUpdatedAt(v time.Time) *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ResumeProjectUpsertBulk) UpdateUpdatedAt() *ResumeProjectUpsertBulk {
	return u.Update(func(s *ResumeProjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ResumeProjectUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ResumeProjectCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ResumeProjectCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResumeProjectUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
