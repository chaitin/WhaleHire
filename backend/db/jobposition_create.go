// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/consts"
	"github.com/chaitin/WhaleHire/backend/db/department"
	"github.com/chaitin/WhaleHire/backend/db/jobeducationrequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobexperiencerequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobindustryrequirement"
	"github.com/chaitin/WhaleHire/backend/db/jobposition"
	"github.com/chaitin/WhaleHire/backend/db/jobresponsibility"
	"github.com/chaitin/WhaleHire/backend/db/jobskill"
	"github.com/chaitin/WhaleHire/backend/db/resumejobapplication"
	"github.com/chaitin/WhaleHire/backend/db/user"
	"github.com/google/uuid"
)

// JobPositionCreate is the builder for creating a JobPosition entity.
type JobPositionCreate struct {
	config
	mutation *JobPositionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (jpc *JobPositionCreate) SetDeletedAt(t time.Time) *JobPositionCreate {
	jpc.mutation.SetDeletedAt(t)
	return jpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jpc *JobPositionCreate) SetNillableDeletedAt(t *time.Time) *JobPositionCreate {
	if t != nil {
		jpc.SetDeletedAt(*t)
	}
	return jpc
}

// SetName sets the "name" field.
func (jpc *JobPositionCreate) SetName(s string) *JobPositionCreate {
	jpc.mutation.SetName(s)
	return jpc
}

// SetDepartmentID sets the "department_id" field.
func (jpc *JobPositionCreate) SetDepartmentID(u uuid.UUID) *JobPositionCreate {
	jpc.mutation.SetDepartmentID(u)
	return jpc
}

// SetCreatedBy sets the "created_by" field.
func (jpc *JobPositionCreate) SetCreatedBy(u uuid.UUID) *JobPositionCreate {
	jpc.mutation.SetCreatedBy(u)
	return jpc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (jpc *JobPositionCreate) SetNillableCreatedBy(u *uuid.UUID) *JobPositionCreate {
	if u != nil {
		jpc.SetCreatedBy(*u)
	}
	return jpc
}

// SetStatus sets the "status" field.
func (jpc *JobPositionCreate) SetStatus(cps consts.JobPositionStatus) *JobPositionCreate {
	jpc.mutation.SetStatus(cps)
	return jpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (jpc *JobPositionCreate) SetNillableStatus(cps *consts.JobPositionStatus) *JobPositionCreate {
	if cps != nil {
		jpc.SetStatus(*cps)
	}
	return jpc
}

// SetWorkType sets the "work_type" field.
func (jpc *JobPositionCreate) SetWorkType(cwt consts.JobWorkType) *JobPositionCreate {
	jpc.mutation.SetWorkType(cwt)
	return jpc
}

// SetNillableWorkType sets the "work_type" field if the given value is not nil.
func (jpc *JobPositionCreate) SetNillableWorkType(cwt *consts.JobWorkType) *JobPositionCreate {
	if cwt != nil {
		jpc.SetWorkType(*cwt)
	}
	return jpc
}

// SetLocation sets the "location" field.
func (jpc *JobPositionCreate) SetLocation(s string) *JobPositionCreate {
	jpc.mutation.SetLocation(s)
	return jpc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (jpc *JobPositionCreate) SetNillableLocation(s *string) *JobPositionCreate {
	if s != nil {
		jpc.SetLocation(*s)
	}
	return jpc
}

// SetSalaryMin sets the "salary_min" field.
func (jpc *JobPositionCreate) SetSalaryMin(f float64) *JobPositionCreate {
	jpc.mutation.SetSalaryMin(f)
	return jpc
}

// SetNillableSalaryMin sets the "salary_min" field if the given value is not nil.
func (jpc *JobPositionCreate) SetNillableSalaryMin(f *float64) *JobPositionCreate {
	if f != nil {
		jpc.SetSalaryMin(*f)
	}
	return jpc
}

// SetSalaryMax sets the "salary_max" field.
func (jpc *JobPositionCreate) SetSalaryMax(f float64) *JobPositionCreate {
	jpc.mutation.SetSalaryMax(f)
	return jpc
}

// SetNillableSalaryMax sets the "salary_max" field if the given value is not nil.
func (jpc *JobPositionCreate) SetNillableSalaryMax(f *float64) *JobPositionCreate {
	if f != nil {
		jpc.SetSalaryMax(*f)
	}
	return jpc
}

// SetDescription sets the "description" field.
func (jpc *JobPositionCreate) SetDescription(s string) *JobPositionCreate {
	jpc.mutation.SetDescription(s)
	return jpc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (jpc *JobPositionCreate) SetNillableDescription(s *string) *JobPositionCreate {
	if s != nil {
		jpc.SetDescription(*s)
	}
	return jpc
}

// SetCreatedAt sets the "created_at" field.
func (jpc *JobPositionCreate) SetCreatedAt(t time.Time) *JobPositionCreate {
	jpc.mutation.SetCreatedAt(t)
	return jpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jpc *JobPositionCreate) SetNillableCreatedAt(t *time.Time) *JobPositionCreate {
	if t != nil {
		jpc.SetCreatedAt(*t)
	}
	return jpc
}

// SetUpdatedAt sets the "updated_at" field.
func (jpc *JobPositionCreate) SetUpdatedAt(t time.Time) *JobPositionCreate {
	jpc.mutation.SetUpdatedAt(t)
	return jpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jpc *JobPositionCreate) SetNillableUpdatedAt(t *time.Time) *JobPositionCreate {
	if t != nil {
		jpc.SetUpdatedAt(*t)
	}
	return jpc
}

// SetID sets the "id" field.
func (jpc *JobPositionCreate) SetID(u uuid.UUID) *JobPositionCreate {
	jpc.mutation.SetID(u)
	return jpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jpc *JobPositionCreate) SetNillableID(u *uuid.UUID) *JobPositionCreate {
	if u != nil {
		jpc.SetID(*u)
	}
	return jpc
}

// SetDepartment sets the "department" edge to the Department entity.
func (jpc *JobPositionCreate) SetDepartment(d *Department) *JobPositionCreate {
	return jpc.SetDepartmentID(d.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (jpc *JobPositionCreate) SetCreatorID(id uuid.UUID) *JobPositionCreate {
	jpc.mutation.SetCreatorID(id)
	return jpc
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (jpc *JobPositionCreate) SetNillableCreatorID(id *uuid.UUID) *JobPositionCreate {
	if id != nil {
		jpc = jpc.SetCreatorID(*id)
	}
	return jpc
}

// SetCreator sets the "creator" edge to the User entity.
func (jpc *JobPositionCreate) SetCreator(u *User) *JobPositionCreate {
	return jpc.SetCreatorID(u.ID)
}

// AddResponsibilityIDs adds the "responsibilities" edge to the JobResponsibility entity by IDs.
func (jpc *JobPositionCreate) AddResponsibilityIDs(ids ...uuid.UUID) *JobPositionCreate {
	jpc.mutation.AddResponsibilityIDs(ids...)
	return jpc
}

// AddResponsibilities adds the "responsibilities" edges to the JobResponsibility entity.
func (jpc *JobPositionCreate) AddResponsibilities(j ...*JobResponsibility) *JobPositionCreate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpc.AddResponsibilityIDs(ids...)
}

// AddSkillIDs adds the "skills" edge to the JobSkill entity by IDs.
func (jpc *JobPositionCreate) AddSkillIDs(ids ...uuid.UUID) *JobPositionCreate {
	jpc.mutation.AddSkillIDs(ids...)
	return jpc
}

// AddSkills adds the "skills" edges to the JobSkill entity.
func (jpc *JobPositionCreate) AddSkills(j ...*JobSkill) *JobPositionCreate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpc.AddSkillIDs(ids...)
}

// AddEducationRequirementIDs adds the "education_requirements" edge to the JobEducationRequirement entity by IDs.
func (jpc *JobPositionCreate) AddEducationRequirementIDs(ids ...uuid.UUID) *JobPositionCreate {
	jpc.mutation.AddEducationRequirementIDs(ids...)
	return jpc
}

// AddEducationRequirements adds the "education_requirements" edges to the JobEducationRequirement entity.
func (jpc *JobPositionCreate) AddEducationRequirements(j ...*JobEducationRequirement) *JobPositionCreate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpc.AddEducationRequirementIDs(ids...)
}

// AddExperienceRequirementIDs adds the "experience_requirements" edge to the JobExperienceRequirement entity by IDs.
func (jpc *JobPositionCreate) AddExperienceRequirementIDs(ids ...uuid.UUID) *JobPositionCreate {
	jpc.mutation.AddExperienceRequirementIDs(ids...)
	return jpc
}

// AddExperienceRequirements adds the "experience_requirements" edges to the JobExperienceRequirement entity.
func (jpc *JobPositionCreate) AddExperienceRequirements(j ...*JobExperienceRequirement) *JobPositionCreate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpc.AddExperienceRequirementIDs(ids...)
}

// AddIndustryRequirementIDs adds the "industry_requirements" edge to the JobIndustryRequirement entity by IDs.
func (jpc *JobPositionCreate) AddIndustryRequirementIDs(ids ...uuid.UUID) *JobPositionCreate {
	jpc.mutation.AddIndustryRequirementIDs(ids...)
	return jpc
}

// AddIndustryRequirements adds the "industry_requirements" edges to the JobIndustryRequirement entity.
func (jpc *JobPositionCreate) AddIndustryRequirements(j ...*JobIndustryRequirement) *JobPositionCreate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpc.AddIndustryRequirementIDs(ids...)
}

// AddResumeApplicationIDs adds the "resume_applications" edge to the ResumeJobApplication entity by IDs.
func (jpc *JobPositionCreate) AddResumeApplicationIDs(ids ...uuid.UUID) *JobPositionCreate {
	jpc.mutation.AddResumeApplicationIDs(ids...)
	return jpc
}

// AddResumeApplications adds the "resume_applications" edges to the ResumeJobApplication entity.
func (jpc *JobPositionCreate) AddResumeApplications(r ...*ResumeJobApplication) *JobPositionCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return jpc.AddResumeApplicationIDs(ids...)
}

// Mutation returns the JobPositionMutation object of the builder.
func (jpc *JobPositionCreate) Mutation() *JobPositionMutation {
	return jpc.mutation
}

// Save creates the JobPosition in the database.
func (jpc *JobPositionCreate) Save(ctx context.Context) (*JobPosition, error) {
	if err := jpc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jpc.sqlSave, jpc.mutation, jpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jpc *JobPositionCreate) SaveX(ctx context.Context) *JobPosition {
	v, err := jpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jpc *JobPositionCreate) Exec(ctx context.Context) error {
	_, err := jpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jpc *JobPositionCreate) ExecX(ctx context.Context) {
	if err := jpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jpc *JobPositionCreate) defaults() error {
	if _, ok := jpc.mutation.Status(); !ok {
		v := jobposition.DefaultStatus
		jpc.mutation.SetStatus(v)
	}
	if _, ok := jpc.mutation.CreatedAt(); !ok {
		if jobposition.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized jobposition.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := jobposition.DefaultCreatedAt()
		jpc.mutation.SetCreatedAt(v)
	}
	if _, ok := jpc.mutation.UpdatedAt(); !ok {
		if jobposition.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized jobposition.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := jobposition.DefaultUpdatedAt()
		jpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jpc.mutation.ID(); !ok {
		if jobposition.DefaultID == nil {
			return fmt.Errorf("db: uninitialized jobposition.DefaultID (forgotten import db/runtime?)")
		}
		v := jobposition.DefaultID()
		jpc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jpc *JobPositionCreate) check() error {
	if _, ok := jpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "JobPosition.name"`)}
	}
	if v, ok := jpc.mutation.Name(); ok {
		if err := jobposition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "JobPosition.name": %w`, err)}
		}
	}
	if _, ok := jpc.mutation.DepartmentID(); !ok {
		return &ValidationError{Name: "department_id", err: errors.New(`db: missing required field "JobPosition.department_id"`)}
	}
	if _, ok := jpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "JobPosition.status"`)}
	}
	if v, ok := jpc.mutation.Location(); ok {
		if err := jobposition.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`db: validator failed for field "JobPosition.location": %w`, err)}
		}
	}
	if _, ok := jpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "JobPosition.created_at"`)}
	}
	if _, ok := jpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "JobPosition.updated_at"`)}
	}
	if len(jpc.mutation.DepartmentIDs()) == 0 {
		return &ValidationError{Name: "department", err: errors.New(`db: missing required edge "JobPosition.department"`)}
	}
	return nil
}

func (jpc *JobPositionCreate) sqlSave(ctx context.Context) (*JobPosition, error) {
	if err := jpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	jpc.mutation.id = &_node.ID
	jpc.mutation.done = true
	return _node, nil
}

func (jpc *JobPositionCreate) createSpec() (*JobPosition, *sqlgraph.CreateSpec) {
	var (
		_node = &JobPosition{config: jpc.config}
		_spec = sqlgraph.NewCreateSpec(jobposition.Table, sqlgraph.NewFieldSpec(jobposition.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = jpc.conflict
	if id, ok := jpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := jpc.mutation.DeletedAt(); ok {
		_spec.SetField(jobposition.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := jpc.mutation.Name(); ok {
		_spec.SetField(jobposition.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := jpc.mutation.Status(); ok {
		_spec.SetField(jobposition.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := jpc.mutation.WorkType(); ok {
		_spec.SetField(jobposition.FieldWorkType, field.TypeString, value)
		_node.WorkType = value
	}
	if value, ok := jpc.mutation.Location(); ok {
		_spec.SetField(jobposition.FieldLocation, field.TypeString, value)
		_node.Location = &value
	}
	if value, ok := jpc.mutation.SalaryMin(); ok {
		_spec.SetField(jobposition.FieldSalaryMin, field.TypeFloat64, value)
		_node.SalaryMin = &value
	}
	if value, ok := jpc.mutation.SalaryMax(); ok {
		_spec.SetField(jobposition.FieldSalaryMax, field.TypeFloat64, value)
		_node.SalaryMax = &value
	}
	if value, ok := jpc.mutation.Description(); ok {
		_spec.SetField(jobposition.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := jpc.mutation.CreatedAt(); ok {
		_spec.SetField(jobposition.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jpc.mutation.UpdatedAt(); ok {
		_spec.SetField(jobposition.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := jpc.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobposition.DepartmentTable,
			Columns: []string{jobposition.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DepartmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jpc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobposition.CreatorTable,
			Columns: []string{jobposition.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jpc.mutation.ResponsibilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.ResponsibilitiesTable,
			Columns: []string{jobposition.ResponsibilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobresponsibility.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jpc.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.SkillsTable,
			Columns: []string{jobposition.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobskill.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jpc.mutation.EducationRequirementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.EducationRequirementsTable,
			Columns: []string{jobposition.EducationRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobeducationrequirement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jpc.mutation.ExperienceRequirementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.ExperienceRequirementsTable,
			Columns: []string{jobposition.ExperienceRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobexperiencerequirement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jpc.mutation.IndustryRequirementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.IndustryRequirementsTable,
			Columns: []string{jobposition.IndustryRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobindustryrequirement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jpc.mutation.ResumeApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.ResumeApplicationsTable,
			Columns: []string{jobposition.ResumeApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resumejobapplication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobPosition.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobPositionUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (jpc *JobPositionCreate) OnConflict(opts ...sql.ConflictOption) *JobPositionUpsertOne {
	jpc.conflict = opts
	return &JobPositionUpsertOne{
		create: jpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobPosition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jpc *JobPositionCreate) OnConflictColumns(columns ...string) *JobPositionUpsertOne {
	jpc.conflict = append(jpc.conflict, sql.ConflictColumns(columns...))
	return &JobPositionUpsertOne{
		create: jpc,
	}
}

type (
	// JobPositionUpsertOne is the builder for "upsert"-ing
	//  one JobPosition node.
	JobPositionUpsertOne struct {
		create *JobPositionCreate
	}

	// JobPositionUpsert is the "OnConflict" setter.
	JobPositionUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *JobPositionUpsert) SetDeletedAt(v time.Time) *JobPositionUpsert {
	u.Set(jobposition.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobPositionUpsert) UpdateDeletedAt() *JobPositionUpsert {
	u.SetExcluded(jobposition.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobPositionUpsert) ClearDeletedAt() *JobPositionUpsert {
	u.SetNull(jobposition.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *JobPositionUpsert) SetName(v string) *JobPositionUpsert {
	u.Set(jobposition.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *JobPositionUpsert) UpdateName() *JobPositionUpsert {
	u.SetExcluded(jobposition.FieldName)
	return u
}

// SetDepartmentID sets the "department_id" field.
func (u *JobPositionUpsert) SetDepartmentID(v uuid.UUID) *JobPositionUpsert {
	u.Set(jobposition.FieldDepartmentID, v)
	return u
}

// UpdateDepartmentID sets the "department_id" field to the value that was provided on create.
func (u *JobPositionUpsert) UpdateDepartmentID() *JobPositionUpsert {
	u.SetExcluded(jobposition.FieldDepartmentID)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *JobPositionUpsert) SetCreatedBy(v uuid.UUID) *JobPositionUpsert {
	u.Set(jobposition.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *JobPositionUpsert) UpdateCreatedBy() *JobPositionUpsert {
	u.SetExcluded(jobposition.FieldCreatedBy)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *JobPositionUpsert) ClearCreatedBy() *JobPositionUpsert {
	u.SetNull(jobposition.FieldCreatedBy)
	return u
}

// SetStatus sets the "status" field.
func (u *JobPositionUpsert) SetStatus(v consts.JobPositionStatus) *JobPositionUpsert {
	u.Set(jobposition.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *JobPositionUpsert) UpdateStatus() *JobPositionUpsert {
	u.SetExcluded(jobposition.FieldStatus)
	return u
}

// SetWorkType sets the "work_type" field.
func (u *JobPositionUpsert) SetWorkType(v consts.JobWorkType) *JobPositionUpsert {
	u.Set(jobposition.FieldWorkType, v)
	return u
}

// UpdateWorkType sets the "work_type" field to the value that was provided on create.
func (u *JobPositionUpsert) UpdateWorkType() *JobPositionUpsert {
	u.SetExcluded(jobposition.FieldWorkType)
	return u
}

// ClearWorkType clears the value of the "work_type" field.
func (u *JobPositionUpsert) ClearWorkType() *JobPositionUpsert {
	u.SetNull(jobposition.FieldWorkType)
	return u
}

// SetLocation sets the "location" field.
func (u *JobPositionUpsert) SetLocation(v string) *JobPositionUpsert {
	u.Set(jobposition.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *JobPositionUpsert) UpdateLocation() *JobPositionUpsert {
	u.SetExcluded(jobposition.FieldLocation)
	return u
}

// ClearLocation clears the value of the "location" field.
func (u *JobPositionUpsert) ClearLocation() *JobPositionUpsert {
	u.SetNull(jobposition.FieldLocation)
	return u
}

// SetSalaryMin sets the "salary_min" field.
func (u *JobPositionUpsert) SetSalaryMin(v float64) *JobPositionUpsert {
	u.Set(jobposition.FieldSalaryMin, v)
	return u
}

// UpdateSalaryMin sets the "salary_min" field to the value that was provided on create.
func (u *JobPositionUpsert) UpdateSalaryMin() *JobPositionUpsert {
	u.SetExcluded(jobposition.FieldSalaryMin)
	return u
}

// AddSalaryMin adds v to the "salary_min" field.
func (u *JobPositionUpsert) AddSalaryMin(v float64) *JobPositionUpsert {
	u.Add(jobposition.FieldSalaryMin, v)
	return u
}

// ClearSalaryMin clears the value of the "salary_min" field.
func (u *JobPositionUpsert) ClearSalaryMin() *JobPositionUpsert {
	u.SetNull(jobposition.FieldSalaryMin)
	return u
}

// SetSalaryMax sets the "salary_max" field.
func (u *JobPositionUpsert) SetSalaryMax(v float64) *JobPositionUpsert {
	u.Set(jobposition.FieldSalaryMax, v)
	return u
}

// UpdateSalaryMax sets the "salary_max" field to the value that was provided on create.
func (u *JobPositionUpsert) UpdateSalaryMax() *JobPositionUpsert {
	u.SetExcluded(jobposition.FieldSalaryMax)
	return u
}

// AddSalaryMax adds v to the "salary_max" field.
func (u *JobPositionUpsert) AddSalaryMax(v float64) *JobPositionUpsert {
	u.Add(jobposition.FieldSalaryMax, v)
	return u
}

// ClearSalaryMax clears the value of the "salary_max" field.
func (u *JobPositionUpsert) ClearSalaryMax() *JobPositionUpsert {
	u.SetNull(jobposition.FieldSalaryMax)
	return u
}

// SetDescription sets the "description" field.
func (u *JobPositionUpsert) SetDescription(v string) *JobPositionUpsert {
	u.Set(jobposition.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *JobPositionUpsert) UpdateDescription() *JobPositionUpsert {
	u.SetExcluded(jobposition.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *JobPositionUpsert) ClearDescription() *JobPositionUpsert {
	u.SetNull(jobposition.FieldDescription)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobPositionUpsert) SetUpdatedAt(v time.Time) *JobPositionUpsert {
	u.Set(jobposition.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobPositionUpsert) UpdateUpdatedAt() *JobPositionUpsert {
	u.SetExcluded(jobposition.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.JobPosition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobposition.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobPositionUpsertOne) UpdateNewValues() *JobPositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(jobposition.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(jobposition.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobPosition.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *JobPositionUpsertOne) Ignore() *JobPositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobPositionUpsertOne) DoNothing() *JobPositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobPositionCreate.OnConflict
// documentation for more info.
func (u *JobPositionUpsertOne) Update(set func(*JobPositionUpsert)) *JobPositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobPositionUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *JobPositionUpsertOne) SetDeletedAt(v time.Time) *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobPositionUpsertOne) UpdateDeletedAt() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobPositionUpsertOne) ClearDeletedAt() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *JobPositionUpsertOne) SetName(v string) *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *JobPositionUpsertOne) UpdateName() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateName()
	})
}

// SetDepartmentID sets the "department_id" field.
func (u *JobPositionUpsertOne) SetDepartmentID(v uuid.UUID) *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetDepartmentID(v)
	})
}

// UpdateDepartmentID sets the "department_id" field to the value that was provided on create.
func (u *JobPositionUpsertOne) UpdateDepartmentID() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateDepartmentID()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *JobPositionUpsertOne) SetCreatedBy(v uuid.UUID) *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *JobPositionUpsertOne) UpdateCreatedBy() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *JobPositionUpsertOne) ClearCreatedBy() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.ClearCreatedBy()
	})
}

// SetStatus sets the "status" field.
func (u *JobPositionUpsertOne) SetStatus(v consts.JobPositionStatus) *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *JobPositionUpsertOne) UpdateStatus() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateStatus()
	})
}

// SetWorkType sets the "work_type" field.
func (u *JobPositionUpsertOne) SetWorkType(v consts.JobWorkType) *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetWorkType(v)
	})
}

// UpdateWorkType sets the "work_type" field to the value that was provided on create.
func (u *JobPositionUpsertOne) UpdateWorkType() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateWorkType()
	})
}

// ClearWorkType clears the value of the "work_type" field.
func (u *JobPositionUpsertOne) ClearWorkType() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.ClearWorkType()
	})
}

// SetLocation sets the "location" field.
func (u *JobPositionUpsertOne) SetLocation(v string) *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *JobPositionUpsertOne) UpdateLocation() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *JobPositionUpsertOne) ClearLocation() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.ClearLocation()
	})
}

// SetSalaryMin sets the "salary_min" field.
func (u *JobPositionUpsertOne) SetSalaryMin(v float64) *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetSalaryMin(v)
	})
}

// AddSalaryMin adds v to the "salary_min" field.
func (u *JobPositionUpsertOne) AddSalaryMin(v float64) *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.AddSalaryMin(v)
	})
}

// UpdateSalaryMin sets the "salary_min" field to the value that was provided on create.
func (u *JobPositionUpsertOne) UpdateSalaryMin() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateSalaryMin()
	})
}

// ClearSalaryMin clears the value of the "salary_min" field.
func (u *JobPositionUpsertOne) ClearSalaryMin() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.ClearSalaryMin()
	})
}

// SetSalaryMax sets the "salary_max" field.
func (u *JobPositionUpsertOne) SetSalaryMax(v float64) *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetSalaryMax(v)
	})
}

// AddSalaryMax adds v to the "salary_max" field.
func (u *JobPositionUpsertOne) AddSalaryMax(v float64) *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.AddSalaryMax(v)
	})
}

// UpdateSalaryMax sets the "salary_max" field to the value that was provided on create.
func (u *JobPositionUpsertOne) UpdateSalaryMax() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateSalaryMax()
	})
}

// ClearSalaryMax clears the value of the "salary_max" field.
func (u *JobPositionUpsertOne) ClearSalaryMax() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.ClearSalaryMax()
	})
}

// SetDescription sets the "description" field.
func (u *JobPositionUpsertOne) SetDescription(v string) *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *JobPositionUpsertOne) UpdateDescription() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *JobPositionUpsertOne) ClearDescription() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.ClearDescription()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobPositionUpsertOne) SetUpdatedAt(v time.Time) *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobPositionUpsertOne) UpdateUpdatedAt() *JobPositionUpsertOne {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *JobPositionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for JobPositionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobPositionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *JobPositionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: JobPositionUpsertOne.ID is not supported by MySQL driver. Use JobPositionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *JobPositionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// JobPositionCreateBulk is the builder for creating many JobPosition entities in bulk.
type JobPositionCreateBulk struct {
	config
	err      error
	builders []*JobPositionCreate
	conflict []sql.ConflictOption
}

// Save creates the JobPosition entities in the database.
func (jpcb *JobPositionCreateBulk) Save(ctx context.Context) ([]*JobPosition, error) {
	if jpcb.err != nil {
		return nil, jpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jpcb.builders))
	nodes := make([]*JobPosition, len(jpcb.builders))
	mutators := make([]Mutator, len(jpcb.builders))
	for i := range jpcb.builders {
		func(i int, root context.Context) {
			builder := jpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobPositionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = jpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jpcb *JobPositionCreateBulk) SaveX(ctx context.Context) []*JobPosition {
	v, err := jpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jpcb *JobPositionCreateBulk) Exec(ctx context.Context) error {
	_, err := jpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jpcb *JobPositionCreateBulk) ExecX(ctx context.Context) {
	if err := jpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobPosition.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobPositionUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (jpcb *JobPositionCreateBulk) OnConflict(opts ...sql.ConflictOption) *JobPositionUpsertBulk {
	jpcb.conflict = opts
	return &JobPositionUpsertBulk{
		create: jpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobPosition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jpcb *JobPositionCreateBulk) OnConflictColumns(columns ...string) *JobPositionUpsertBulk {
	jpcb.conflict = append(jpcb.conflict, sql.ConflictColumns(columns...))
	return &JobPositionUpsertBulk{
		create: jpcb,
	}
}

// JobPositionUpsertBulk is the builder for "upsert"-ing
// a bulk of JobPosition nodes.
type JobPositionUpsertBulk struct {
	create *JobPositionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.JobPosition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(jobposition.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *JobPositionUpsertBulk) UpdateNewValues() *JobPositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(jobposition.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(jobposition.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobPosition.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *JobPositionUpsertBulk) Ignore() *JobPositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobPositionUpsertBulk) DoNothing() *JobPositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobPositionCreateBulk.OnConflict
// documentation for more info.
func (u *JobPositionUpsertBulk) Update(set func(*JobPositionUpsert)) *JobPositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobPositionUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *JobPositionUpsertBulk) SetDeletedAt(v time.Time) *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *JobPositionUpsertBulk) UpdateDeletedAt() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *JobPositionUpsertBulk) ClearDeletedAt() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *JobPositionUpsertBulk) SetName(v string) *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *JobPositionUpsertBulk) UpdateName() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateName()
	})
}

// SetDepartmentID sets the "department_id" field.
func (u *JobPositionUpsertBulk) SetDepartmentID(v uuid.UUID) *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetDepartmentID(v)
	})
}

// UpdateDepartmentID sets the "department_id" field to the value that was provided on create.
func (u *JobPositionUpsertBulk) UpdateDepartmentID() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateDepartmentID()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *JobPositionUpsertBulk) SetCreatedBy(v uuid.UUID) *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *JobPositionUpsertBulk) UpdateCreatedBy() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *JobPositionUpsertBulk) ClearCreatedBy() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.ClearCreatedBy()
	})
}

// SetStatus sets the "status" field.
func (u *JobPositionUpsertBulk) SetStatus(v consts.JobPositionStatus) *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *JobPositionUpsertBulk) UpdateStatus() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateStatus()
	})
}

// SetWorkType sets the "work_type" field.
func (u *JobPositionUpsertBulk) SetWorkType(v consts.JobWorkType) *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetWorkType(v)
	})
}

// UpdateWorkType sets the "work_type" field to the value that was provided on create.
func (u *JobPositionUpsertBulk) UpdateWorkType() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateWorkType()
	})
}

// ClearWorkType clears the value of the "work_type" field.
func (u *JobPositionUpsertBulk) ClearWorkType() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.ClearWorkType()
	})
}

// SetLocation sets the "location" field.
func (u *JobPositionUpsertBulk) SetLocation(v string) *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *JobPositionUpsertBulk) UpdateLocation() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *JobPositionUpsertBulk) ClearLocation() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.ClearLocation()
	})
}

// SetSalaryMin sets the "salary_min" field.
func (u *JobPositionUpsertBulk) SetSalaryMin(v float64) *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetSalaryMin(v)
	})
}

// AddSalaryMin adds v to the "salary_min" field.
func (u *JobPositionUpsertBulk) AddSalaryMin(v float64) *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.AddSalaryMin(v)
	})
}

// UpdateSalaryMin sets the "salary_min" field to the value that was provided on create.
func (u *JobPositionUpsertBulk) UpdateSalaryMin() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateSalaryMin()
	})
}

// ClearSalaryMin clears the value of the "salary_min" field.
func (u *JobPositionUpsertBulk) ClearSalaryMin() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.ClearSalaryMin()
	})
}

// SetSalaryMax sets the "salary_max" field.
func (u *JobPositionUpsertBulk) SetSalaryMax(v float64) *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetSalaryMax(v)
	})
}

// AddSalaryMax adds v to the "salary_max" field.
func (u *JobPositionUpsertBulk) AddSalaryMax(v float64) *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.AddSalaryMax(v)
	})
}

// UpdateSalaryMax sets the "salary_max" field to the value that was provided on create.
func (u *JobPositionUpsertBulk) UpdateSalaryMax() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateSalaryMax()
	})
}

// ClearSalaryMax clears the value of the "salary_max" field.
func (u *JobPositionUpsertBulk) ClearSalaryMax() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.ClearSalaryMax()
	})
}

// SetDescription sets the "description" field.
func (u *JobPositionUpsertBulk) SetDescription(v string) *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *JobPositionUpsertBulk) UpdateDescription() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *JobPositionUpsertBulk) ClearDescription() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.ClearDescription()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobPositionUpsertBulk) SetUpdatedAt(v time.Time) *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobPositionUpsertBulk) UpdateUpdatedAt() *JobPositionUpsertBulk {
	return u.Update(func(s *JobPositionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *JobPositionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the JobPositionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for JobPositionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobPositionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
