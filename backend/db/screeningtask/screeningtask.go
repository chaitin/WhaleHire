// Code generated by ent, DO NOT EDIT.

package screeningtask

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the screeningtask type in the database.
	Label = "screening_task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldJobPositionID holds the string denoting the job_position_id field in the database.
	FieldJobPositionID = "job_position_id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDimensionWeights holds the string denoting the dimension_weights field in the database.
	FieldDimensionWeights = "dimension_weights"
	// FieldLlmConfig holds the string denoting the llm_config field in the database.
	FieldLlmConfig = "llm_config"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldResumeTotal holds the string denoting the resume_total field in the database.
	FieldResumeTotal = "resume_total"
	// FieldResumeProcessed holds the string denoting the resume_processed field in the database.
	FieldResumeProcessed = "resume_processed"
	// FieldResumeSucceeded holds the string denoting the resume_succeeded field in the database.
	FieldResumeSucceeded = "resume_succeeded"
	// FieldResumeFailed holds the string denoting the resume_failed field in the database.
	FieldResumeFailed = "resume_failed"
	// FieldAgentVersion holds the string denoting the agent_version field in the database.
	FieldAgentVersion = "agent_version"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldFinishedAt holds the string denoting the finished_at field in the database.
	FieldFinishedAt = "finished_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeJobPosition holds the string denoting the job_position edge name in mutations.
	EdgeJobPosition = "job_position"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeTaskResumes holds the string denoting the task_resumes edge name in mutations.
	EdgeTaskResumes = "task_resumes"
	// EdgeResults holds the string denoting the results edge name in mutations.
	EdgeResults = "results"
	// EdgeRunMetrics holds the string denoting the run_metrics edge name in mutations.
	EdgeRunMetrics = "run_metrics"
	// Table holds the table name of the screeningtask in the database.
	Table = "screening_tasks"
	// JobPositionTable is the table that holds the job_position relation/edge.
	JobPositionTable = "screening_tasks"
	// JobPositionInverseTable is the table name for the JobPosition entity.
	// It exists in this package in order to avoid circular dependency with the "jobposition" package.
	JobPositionInverseTable = "job_position"
	// JobPositionColumn is the table column denoting the job_position relation/edge.
	JobPositionColumn = "job_position_id"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "screening_tasks"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "created_by"
	// TaskResumesTable is the table that holds the task_resumes relation/edge.
	TaskResumesTable = "screening_task_resumes"
	// TaskResumesInverseTable is the table name for the ScreeningTaskResume entity.
	// It exists in this package in order to avoid circular dependency with the "screeningtaskresume" package.
	TaskResumesInverseTable = "screening_task_resumes"
	// TaskResumesColumn is the table column denoting the task_resumes relation/edge.
	TaskResumesColumn = "task_id"
	// ResultsTable is the table that holds the results relation/edge.
	ResultsTable = "screening_results"
	// ResultsInverseTable is the table name for the ScreeningResult entity.
	// It exists in this package in order to avoid circular dependency with the "screeningresult" package.
	ResultsInverseTable = "screening_results"
	// ResultsColumn is the table column denoting the results relation/edge.
	ResultsColumn = "task_id"
	// RunMetricsTable is the table that holds the run_metrics relation/edge.
	RunMetricsTable = "screening_run_metrics"
	// RunMetricsInverseTable is the table name for the ScreeningRunMetric entity.
	// It exists in this package in order to avoid circular dependency with the "screeningrunmetric" package.
	RunMetricsInverseTable = "screening_run_metrics"
	// RunMetricsColumn is the table column denoting the run_metrics relation/edge.
	RunMetricsColumn = "task_id"
)

// Columns holds all SQL columns for screeningtask fields.
var Columns = []string{
	FieldID,
	FieldDeletedAt,
	FieldJobPositionID,
	FieldCreatedBy,
	FieldStatus,
	FieldDimensionWeights,
	FieldLlmConfig,
	FieldNotes,
	FieldResumeTotal,
	FieldResumeProcessed,
	FieldResumeSucceeded,
	FieldResumeFailed,
	FieldAgentVersion,
	FieldStartedAt,
	FieldFinishedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/chaitin/WhaleHire/backend/db/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultResumeTotal holds the default value on creation for the "resume_total" field.
	DefaultResumeTotal int
	// DefaultResumeProcessed holds the default value on creation for the "resume_processed" field.
	DefaultResumeProcessed int
	// DefaultResumeSucceeded holds the default value on creation for the "resume_succeeded" field.
	DefaultResumeSucceeded int
	// DefaultResumeFailed holds the default value on creation for the "resume_failed" field.
	DefaultResumeFailed int
	// AgentVersionValidator is a validator for the "agent_version" field. It is called by the builders before save.
	AgentVersionValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ScreeningTask queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByJobPositionID orders the results by the job_position_id field.
func ByJobPositionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobPositionID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByResumeTotal orders the results by the resume_total field.
func ByResumeTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResumeTotal, opts...).ToFunc()
}

// ByResumeProcessed orders the results by the resume_processed field.
func ByResumeProcessed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResumeProcessed, opts...).ToFunc()
}

// ByResumeSucceeded orders the results by the resume_succeeded field.
func ByResumeSucceeded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResumeSucceeded, opts...).ToFunc()
}

// ByResumeFailed orders the results by the resume_failed field.
func ByResumeFailed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResumeFailed, opts...).ToFunc()
}

// ByAgentVersion orders the results by the agent_version field.
func ByAgentVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgentVersion, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByFinishedAt orders the results by the finished_at field.
func ByFinishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByJobPositionField orders the results by job_position field.
func ByJobPositionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobPositionStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByTaskResumesCount orders the results by task_resumes count.
func ByTaskResumesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaskResumesStep(), opts...)
	}
}

// ByTaskResumes orders the results by task_resumes terms.
func ByTaskResumes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskResumesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByResultsCount orders the results by results count.
func ByResultsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newResultsStep(), opts...)
	}
}

// ByResults orders the results by results terms.
func ByResults(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResultsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRunMetricsCount orders the results by run_metrics count.
func ByRunMetricsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRunMetricsStep(), opts...)
	}
}

// ByRunMetrics orders the results by run_metrics terms.
func ByRunMetrics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRunMetricsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newJobPositionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobPositionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, JobPositionTable, JobPositionColumn),
	)
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
func newTaskResumesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskResumesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TaskResumesTable, TaskResumesColumn),
	)
}
func newResultsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResultsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ResultsTable, ResultsColumn),
	)
}
func newRunMetricsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RunMetricsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RunMetricsTable, RunMetricsColumn),
	)
}
