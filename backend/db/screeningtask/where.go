// Code generated by ent, DO NOT EDIT.

package screeningtask

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldDeletedAt, v))
}

// JobPositionID applies equality check predicate on the "job_position_id" field. It's identical to JobPositionIDEQ.
func JobPositionID(v uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldJobPositionID, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldCreatedBy, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldStatus, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldNotes, v))
}

// ResumeTotal applies equality check predicate on the "resume_total" field. It's identical to ResumeTotalEQ.
func ResumeTotal(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldResumeTotal, v))
}

// ResumeProcessed applies equality check predicate on the "resume_processed" field. It's identical to ResumeProcessedEQ.
func ResumeProcessed(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldResumeProcessed, v))
}

// ResumeSucceeded applies equality check predicate on the "resume_succeeded" field. It's identical to ResumeSucceededEQ.
func ResumeSucceeded(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldResumeSucceeded, v))
}

// ResumeFailed applies equality check predicate on the "resume_failed" field. It's identical to ResumeFailedEQ.
func ResumeFailed(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldResumeFailed, v))
}

// AgentVersion applies equality check predicate on the "agent_version" field. It's identical to AgentVersionEQ.
func AgentVersion(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldAgentVersion, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldFinishedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotNull(FieldDeletedAt))
}

// JobPositionIDEQ applies the EQ predicate on the "job_position_id" field.
func JobPositionIDEQ(v uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldJobPositionID, v))
}

// JobPositionIDNEQ applies the NEQ predicate on the "job_position_id" field.
func JobPositionIDNEQ(v uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNEQ(FieldJobPositionID, v))
}

// JobPositionIDIn applies the In predicate on the "job_position_id" field.
func JobPositionIDIn(vs ...uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIn(FieldJobPositionID, vs...))
}

// JobPositionIDNotIn applies the NotIn predicate on the "job_position_id" field.
func JobPositionIDNotIn(vs ...uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotIn(FieldJobPositionID, vs...))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uuid.UUID) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldContainsFold(FieldStatus, v))
}

// DimensionWeightsIsNil applies the IsNil predicate on the "dimension_weights" field.
func DimensionWeightsIsNil() predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIsNull(FieldDimensionWeights))
}

// DimensionWeightsNotNil applies the NotNil predicate on the "dimension_weights" field.
func DimensionWeightsNotNil() predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotNull(FieldDimensionWeights))
}

// LlmConfigIsNil applies the IsNil predicate on the "llm_config" field.
func LlmConfigIsNil() predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIsNull(FieldLlmConfig))
}

// LlmConfigNotNil applies the NotNil predicate on the "llm_config" field.
func LlmConfigNotNil() predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotNull(FieldLlmConfig))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldContainsFold(FieldNotes, v))
}

// ResumeTotalEQ applies the EQ predicate on the "resume_total" field.
func ResumeTotalEQ(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldResumeTotal, v))
}

// ResumeTotalNEQ applies the NEQ predicate on the "resume_total" field.
func ResumeTotalNEQ(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNEQ(FieldResumeTotal, v))
}

// ResumeTotalIn applies the In predicate on the "resume_total" field.
func ResumeTotalIn(vs ...int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIn(FieldResumeTotal, vs...))
}

// ResumeTotalNotIn applies the NotIn predicate on the "resume_total" field.
func ResumeTotalNotIn(vs ...int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotIn(FieldResumeTotal, vs...))
}

// ResumeTotalGT applies the GT predicate on the "resume_total" field.
func ResumeTotalGT(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGT(FieldResumeTotal, v))
}

// ResumeTotalGTE applies the GTE predicate on the "resume_total" field.
func ResumeTotalGTE(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGTE(FieldResumeTotal, v))
}

// ResumeTotalLT applies the LT predicate on the "resume_total" field.
func ResumeTotalLT(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLT(FieldResumeTotal, v))
}

// ResumeTotalLTE applies the LTE predicate on the "resume_total" field.
func ResumeTotalLTE(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLTE(FieldResumeTotal, v))
}

// ResumeProcessedEQ applies the EQ predicate on the "resume_processed" field.
func ResumeProcessedEQ(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldResumeProcessed, v))
}

// ResumeProcessedNEQ applies the NEQ predicate on the "resume_processed" field.
func ResumeProcessedNEQ(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNEQ(FieldResumeProcessed, v))
}

// ResumeProcessedIn applies the In predicate on the "resume_processed" field.
func ResumeProcessedIn(vs ...int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIn(FieldResumeProcessed, vs...))
}

// ResumeProcessedNotIn applies the NotIn predicate on the "resume_processed" field.
func ResumeProcessedNotIn(vs ...int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotIn(FieldResumeProcessed, vs...))
}

// ResumeProcessedGT applies the GT predicate on the "resume_processed" field.
func ResumeProcessedGT(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGT(FieldResumeProcessed, v))
}

// ResumeProcessedGTE applies the GTE predicate on the "resume_processed" field.
func ResumeProcessedGTE(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGTE(FieldResumeProcessed, v))
}

// ResumeProcessedLT applies the LT predicate on the "resume_processed" field.
func ResumeProcessedLT(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLT(FieldResumeProcessed, v))
}

// ResumeProcessedLTE applies the LTE predicate on the "resume_processed" field.
func ResumeProcessedLTE(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLTE(FieldResumeProcessed, v))
}

// ResumeSucceededEQ applies the EQ predicate on the "resume_succeeded" field.
func ResumeSucceededEQ(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldResumeSucceeded, v))
}

// ResumeSucceededNEQ applies the NEQ predicate on the "resume_succeeded" field.
func ResumeSucceededNEQ(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNEQ(FieldResumeSucceeded, v))
}

// ResumeSucceededIn applies the In predicate on the "resume_succeeded" field.
func ResumeSucceededIn(vs ...int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIn(FieldResumeSucceeded, vs...))
}

// ResumeSucceededNotIn applies the NotIn predicate on the "resume_succeeded" field.
func ResumeSucceededNotIn(vs ...int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotIn(FieldResumeSucceeded, vs...))
}

// ResumeSucceededGT applies the GT predicate on the "resume_succeeded" field.
func ResumeSucceededGT(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGT(FieldResumeSucceeded, v))
}

// ResumeSucceededGTE applies the GTE predicate on the "resume_succeeded" field.
func ResumeSucceededGTE(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGTE(FieldResumeSucceeded, v))
}

// ResumeSucceededLT applies the LT predicate on the "resume_succeeded" field.
func ResumeSucceededLT(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLT(FieldResumeSucceeded, v))
}

// ResumeSucceededLTE applies the LTE predicate on the "resume_succeeded" field.
func ResumeSucceededLTE(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLTE(FieldResumeSucceeded, v))
}

// ResumeFailedEQ applies the EQ predicate on the "resume_failed" field.
func ResumeFailedEQ(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldResumeFailed, v))
}

// ResumeFailedNEQ applies the NEQ predicate on the "resume_failed" field.
func ResumeFailedNEQ(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNEQ(FieldResumeFailed, v))
}

// ResumeFailedIn applies the In predicate on the "resume_failed" field.
func ResumeFailedIn(vs ...int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIn(FieldResumeFailed, vs...))
}

// ResumeFailedNotIn applies the NotIn predicate on the "resume_failed" field.
func ResumeFailedNotIn(vs ...int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotIn(FieldResumeFailed, vs...))
}

// ResumeFailedGT applies the GT predicate on the "resume_failed" field.
func ResumeFailedGT(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGT(FieldResumeFailed, v))
}

// ResumeFailedGTE applies the GTE predicate on the "resume_failed" field.
func ResumeFailedGTE(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGTE(FieldResumeFailed, v))
}

// ResumeFailedLT applies the LT predicate on the "resume_failed" field.
func ResumeFailedLT(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLT(FieldResumeFailed, v))
}

// ResumeFailedLTE applies the LTE predicate on the "resume_failed" field.
func ResumeFailedLTE(v int) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLTE(FieldResumeFailed, v))
}

// AgentVersionEQ applies the EQ predicate on the "agent_version" field.
func AgentVersionEQ(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldAgentVersion, v))
}

// AgentVersionNEQ applies the NEQ predicate on the "agent_version" field.
func AgentVersionNEQ(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNEQ(FieldAgentVersion, v))
}

// AgentVersionIn applies the In predicate on the "agent_version" field.
func AgentVersionIn(vs ...string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIn(FieldAgentVersion, vs...))
}

// AgentVersionNotIn applies the NotIn predicate on the "agent_version" field.
func AgentVersionNotIn(vs ...string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotIn(FieldAgentVersion, vs...))
}

// AgentVersionGT applies the GT predicate on the "agent_version" field.
func AgentVersionGT(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGT(FieldAgentVersion, v))
}

// AgentVersionGTE applies the GTE predicate on the "agent_version" field.
func AgentVersionGTE(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGTE(FieldAgentVersion, v))
}

// AgentVersionLT applies the LT predicate on the "agent_version" field.
func AgentVersionLT(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLT(FieldAgentVersion, v))
}

// AgentVersionLTE applies the LTE predicate on the "agent_version" field.
func AgentVersionLTE(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLTE(FieldAgentVersion, v))
}

// AgentVersionContains applies the Contains predicate on the "agent_version" field.
func AgentVersionContains(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldContains(FieldAgentVersion, v))
}

// AgentVersionHasPrefix applies the HasPrefix predicate on the "agent_version" field.
func AgentVersionHasPrefix(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldHasPrefix(FieldAgentVersion, v))
}

// AgentVersionHasSuffix applies the HasSuffix predicate on the "agent_version" field.
func AgentVersionHasSuffix(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldHasSuffix(FieldAgentVersion, v))
}

// AgentVersionIsNil applies the IsNil predicate on the "agent_version" field.
func AgentVersionIsNil() predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIsNull(FieldAgentVersion))
}

// AgentVersionNotNil applies the NotNil predicate on the "agent_version" field.
func AgentVersionNotNil() predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotNull(FieldAgentVersion))
}

// AgentVersionEqualFold applies the EqualFold predicate on the "agent_version" field.
func AgentVersionEqualFold(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEqualFold(FieldAgentVersion, v))
}

// AgentVersionContainsFold applies the ContainsFold predicate on the "agent_version" field.
func AgentVersionContainsFold(v string) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldContainsFold(FieldAgentVersion, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotNull(FieldStartedAt))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLTE(FieldFinishedAt, v))
}

// FinishedAtIsNil applies the IsNil predicate on the "finished_at" field.
func FinishedAtIsNil() predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIsNull(FieldFinishedAt))
}

// FinishedAtNotNil applies the NotNil predicate on the "finished_at" field.
func FinishedAtNotNil() predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotNull(FieldFinishedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasJobPosition applies the HasEdge predicate on the "job_position" edge.
func HasJobPosition() predicate.ScreeningTask {
	return predicate.ScreeningTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobPositionTable, JobPositionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobPositionWith applies the HasEdge predicate on the "job_position" edge with a given conditions (other predicates).
func HasJobPositionWith(preds ...predicate.JobPosition) predicate.ScreeningTask {
	return predicate.ScreeningTask(func(s *sql.Selector) {
		step := newJobPositionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.ScreeningTask {
	return predicate.ScreeningTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.User) predicate.ScreeningTask {
	return predicate.ScreeningTask(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaskResumes applies the HasEdge predicate on the "task_resumes" edge.
func HasTaskResumes() predicate.ScreeningTask {
	return predicate.ScreeningTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TaskResumesTable, TaskResumesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskResumesWith applies the HasEdge predicate on the "task_resumes" edge with a given conditions (other predicates).
func HasTaskResumesWith(preds ...predicate.ScreeningTaskResume) predicate.ScreeningTask {
	return predicate.ScreeningTask(func(s *sql.Selector) {
		step := newTaskResumesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasResults applies the HasEdge predicate on the "results" edge.
func HasResults() predicate.ScreeningTask {
	return predicate.ScreeningTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ResultsTable, ResultsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResultsWith applies the HasEdge predicate on the "results" edge with a given conditions (other predicates).
func HasResultsWith(preds ...predicate.ScreeningResult) predicate.ScreeningTask {
	return predicate.ScreeningTask(func(s *sql.Selector) {
		step := newResultsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRunMetrics applies the HasEdge predicate on the "run_metrics" edge.
func HasRunMetrics() predicate.ScreeningTask {
	return predicate.ScreeningTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RunMetricsTable, RunMetricsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRunMetricsWith applies the HasEdge predicate on the "run_metrics" edge with a given conditions (other predicates).
func HasRunMetricsWith(preds ...predicate.ScreeningRunMetric) predicate.ScreeningTask {
	return predicate.ScreeningTask(func(s *sql.Selector) {
		step := newRunMetricsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNodeRuns applies the HasEdge predicate on the "node_runs" edge.
func HasNodeRuns() predicate.ScreeningTask {
	return predicate.ScreeningTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NodeRunsTable, NodeRunsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeRunsWith applies the HasEdge predicate on the "node_runs" edge with a given conditions (other predicates).
func HasNodeRunsWith(preds ...predicate.ScreeningNodeRun) predicate.ScreeningTask {
	return predicate.ScreeningTask(func(s *sql.Selector) {
		step := newNodeRunsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScreeningTask) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScreeningTask) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScreeningTask) predicate.ScreeningTask {
	return predicate.ScreeningTask(sql.NotPredicates(p))
}
