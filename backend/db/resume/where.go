// Code generated by ent, DO NOT EDIT.

package resume

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldDeletedAt, v))
}

// UploaderID applies equality check predicate on the "uploader_id" field. It's identical to UploaderIDEQ.
func UploaderID(v uuid.UUID) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldUploaderID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldName, v))
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldGender, v))
}

// Birthday applies equality check predicate on the "birthday" field. It's identical to BirthdayEQ.
func Birthday(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldBirthday, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldEmail, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldPhone, v))
}

// CurrentCity applies equality check predicate on the "current_city" field. It's identical to CurrentCityEQ.
func CurrentCity(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldCurrentCity, v))
}

// HighestEducation applies equality check predicate on the "highest_education" field. It's identical to HighestEducationEQ.
func HighestEducation(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldHighestEducation, v))
}

// YearsExperience applies equality check predicate on the "years_experience" field. It's identical to YearsExperienceEQ.
func YearsExperience(v float64) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldYearsExperience, v))
}

// ResumeFileURL applies equality check predicate on the "resume_file_url" field. It's identical to ResumeFileURLEQ.
func ResumeFileURL(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldResumeFileURL, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldStatus, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldErrorMessage, v))
}

// ParsedAt applies equality check predicate on the "parsed_at" field. It's identical to ParsedAtEQ.
func ParsedAt(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldParsedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Resume {
	return predicate.Resume(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Resume {
	return predicate.Resume(sql.FieldNotNull(FieldDeletedAt))
}

// UploaderIDEQ applies the EQ predicate on the "uploader_id" field.
func UploaderIDEQ(v uuid.UUID) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldUploaderID, v))
}

// UploaderIDNEQ applies the NEQ predicate on the "uploader_id" field.
func UploaderIDNEQ(v uuid.UUID) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldUploaderID, v))
}

// UploaderIDIn applies the In predicate on the "uploader_id" field.
func UploaderIDIn(vs ...uuid.UUID) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldUploaderID, vs...))
}

// UploaderIDNotIn applies the NotIn predicate on the "uploader_id" field.
func UploaderIDNotIn(vs ...uuid.UUID) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldUploaderID, vs...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Resume {
	return predicate.Resume(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Resume {
	return predicate.Resume(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContainsFold(FieldName, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldGender, v))
}

// GenderContains applies the Contains predicate on the "gender" field.
func GenderContains(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContains(FieldGender, v))
}

// GenderHasPrefix applies the HasPrefix predicate on the "gender" field.
func GenderHasPrefix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasPrefix(FieldGender, v))
}

// GenderHasSuffix applies the HasSuffix predicate on the "gender" field.
func GenderHasSuffix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasSuffix(FieldGender, v))
}

// GenderIsNil applies the IsNil predicate on the "gender" field.
func GenderIsNil() predicate.Resume {
	return predicate.Resume(sql.FieldIsNull(FieldGender))
}

// GenderNotNil applies the NotNil predicate on the "gender" field.
func GenderNotNil() predicate.Resume {
	return predicate.Resume(sql.FieldNotNull(FieldGender))
}

// GenderEqualFold applies the EqualFold predicate on the "gender" field.
func GenderEqualFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEqualFold(FieldGender, v))
}

// GenderContainsFold applies the ContainsFold predicate on the "gender" field.
func GenderContainsFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContainsFold(FieldGender, v))
}

// BirthdayEQ applies the EQ predicate on the "birthday" field.
func BirthdayEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldBirthday, v))
}

// BirthdayNEQ applies the NEQ predicate on the "birthday" field.
func BirthdayNEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldBirthday, v))
}

// BirthdayIn applies the In predicate on the "birthday" field.
func BirthdayIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldBirthday, vs...))
}

// BirthdayNotIn applies the NotIn predicate on the "birthday" field.
func BirthdayNotIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldBirthday, vs...))
}

// BirthdayGT applies the GT predicate on the "birthday" field.
func BirthdayGT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldBirthday, v))
}

// BirthdayGTE applies the GTE predicate on the "birthday" field.
func BirthdayGTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldBirthday, v))
}

// BirthdayLT applies the LT predicate on the "birthday" field.
func BirthdayLT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldBirthday, v))
}

// BirthdayLTE applies the LTE predicate on the "birthday" field.
func BirthdayLTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldBirthday, v))
}

// BirthdayIsNil applies the IsNil predicate on the "birthday" field.
func BirthdayIsNil() predicate.Resume {
	return predicate.Resume(sql.FieldIsNull(FieldBirthday))
}

// BirthdayNotNil applies the NotNil predicate on the "birthday" field.
func BirthdayNotNil() predicate.Resume {
	return predicate.Resume(sql.FieldNotNull(FieldBirthday))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.Resume {
	return predicate.Resume(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.Resume {
	return predicate.Resume(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContainsFold(FieldEmail, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.Resume {
	return predicate.Resume(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.Resume {
	return predicate.Resume(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContainsFold(FieldPhone, v))
}

// CurrentCityEQ applies the EQ predicate on the "current_city" field.
func CurrentCityEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldCurrentCity, v))
}

// CurrentCityNEQ applies the NEQ predicate on the "current_city" field.
func CurrentCityNEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldCurrentCity, v))
}

// CurrentCityIn applies the In predicate on the "current_city" field.
func CurrentCityIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldCurrentCity, vs...))
}

// CurrentCityNotIn applies the NotIn predicate on the "current_city" field.
func CurrentCityNotIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldCurrentCity, vs...))
}

// CurrentCityGT applies the GT predicate on the "current_city" field.
func CurrentCityGT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldCurrentCity, v))
}

// CurrentCityGTE applies the GTE predicate on the "current_city" field.
func CurrentCityGTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldCurrentCity, v))
}

// CurrentCityLT applies the LT predicate on the "current_city" field.
func CurrentCityLT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldCurrentCity, v))
}

// CurrentCityLTE applies the LTE predicate on the "current_city" field.
func CurrentCityLTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldCurrentCity, v))
}

// CurrentCityContains applies the Contains predicate on the "current_city" field.
func CurrentCityContains(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContains(FieldCurrentCity, v))
}

// CurrentCityHasPrefix applies the HasPrefix predicate on the "current_city" field.
func CurrentCityHasPrefix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasPrefix(FieldCurrentCity, v))
}

// CurrentCityHasSuffix applies the HasSuffix predicate on the "current_city" field.
func CurrentCityHasSuffix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasSuffix(FieldCurrentCity, v))
}

// CurrentCityIsNil applies the IsNil predicate on the "current_city" field.
func CurrentCityIsNil() predicate.Resume {
	return predicate.Resume(sql.FieldIsNull(FieldCurrentCity))
}

// CurrentCityNotNil applies the NotNil predicate on the "current_city" field.
func CurrentCityNotNil() predicate.Resume {
	return predicate.Resume(sql.FieldNotNull(FieldCurrentCity))
}

// CurrentCityEqualFold applies the EqualFold predicate on the "current_city" field.
func CurrentCityEqualFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEqualFold(FieldCurrentCity, v))
}

// CurrentCityContainsFold applies the ContainsFold predicate on the "current_city" field.
func CurrentCityContainsFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContainsFold(FieldCurrentCity, v))
}

// HighestEducationEQ applies the EQ predicate on the "highest_education" field.
func HighestEducationEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldHighestEducation, v))
}

// HighestEducationNEQ applies the NEQ predicate on the "highest_education" field.
func HighestEducationNEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldHighestEducation, v))
}

// HighestEducationIn applies the In predicate on the "highest_education" field.
func HighestEducationIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldHighestEducation, vs...))
}

// HighestEducationNotIn applies the NotIn predicate on the "highest_education" field.
func HighestEducationNotIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldHighestEducation, vs...))
}

// HighestEducationGT applies the GT predicate on the "highest_education" field.
func HighestEducationGT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldHighestEducation, v))
}

// HighestEducationGTE applies the GTE predicate on the "highest_education" field.
func HighestEducationGTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldHighestEducation, v))
}

// HighestEducationLT applies the LT predicate on the "highest_education" field.
func HighestEducationLT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldHighestEducation, v))
}

// HighestEducationLTE applies the LTE predicate on the "highest_education" field.
func HighestEducationLTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldHighestEducation, v))
}

// HighestEducationContains applies the Contains predicate on the "highest_education" field.
func HighestEducationContains(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContains(FieldHighestEducation, v))
}

// HighestEducationHasPrefix applies the HasPrefix predicate on the "highest_education" field.
func HighestEducationHasPrefix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasPrefix(FieldHighestEducation, v))
}

// HighestEducationHasSuffix applies the HasSuffix predicate on the "highest_education" field.
func HighestEducationHasSuffix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasSuffix(FieldHighestEducation, v))
}

// HighestEducationIsNil applies the IsNil predicate on the "highest_education" field.
func HighestEducationIsNil() predicate.Resume {
	return predicate.Resume(sql.FieldIsNull(FieldHighestEducation))
}

// HighestEducationNotNil applies the NotNil predicate on the "highest_education" field.
func HighestEducationNotNil() predicate.Resume {
	return predicate.Resume(sql.FieldNotNull(FieldHighestEducation))
}

// HighestEducationEqualFold applies the EqualFold predicate on the "highest_education" field.
func HighestEducationEqualFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEqualFold(FieldHighestEducation, v))
}

// HighestEducationContainsFold applies the ContainsFold predicate on the "highest_education" field.
func HighestEducationContainsFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContainsFold(FieldHighestEducation, v))
}

// YearsExperienceEQ applies the EQ predicate on the "years_experience" field.
func YearsExperienceEQ(v float64) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldYearsExperience, v))
}

// YearsExperienceNEQ applies the NEQ predicate on the "years_experience" field.
func YearsExperienceNEQ(v float64) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldYearsExperience, v))
}

// YearsExperienceIn applies the In predicate on the "years_experience" field.
func YearsExperienceIn(vs ...float64) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldYearsExperience, vs...))
}

// YearsExperienceNotIn applies the NotIn predicate on the "years_experience" field.
func YearsExperienceNotIn(vs ...float64) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldYearsExperience, vs...))
}

// YearsExperienceGT applies the GT predicate on the "years_experience" field.
func YearsExperienceGT(v float64) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldYearsExperience, v))
}

// YearsExperienceGTE applies the GTE predicate on the "years_experience" field.
func YearsExperienceGTE(v float64) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldYearsExperience, v))
}

// YearsExperienceLT applies the LT predicate on the "years_experience" field.
func YearsExperienceLT(v float64) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldYearsExperience, v))
}

// YearsExperienceLTE applies the LTE predicate on the "years_experience" field.
func YearsExperienceLTE(v float64) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldYearsExperience, v))
}

// YearsExperienceIsNil applies the IsNil predicate on the "years_experience" field.
func YearsExperienceIsNil() predicate.Resume {
	return predicate.Resume(sql.FieldIsNull(FieldYearsExperience))
}

// YearsExperienceNotNil applies the NotNil predicate on the "years_experience" field.
func YearsExperienceNotNil() predicate.Resume {
	return predicate.Resume(sql.FieldNotNull(FieldYearsExperience))
}

// ResumeFileURLEQ applies the EQ predicate on the "resume_file_url" field.
func ResumeFileURLEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldResumeFileURL, v))
}

// ResumeFileURLNEQ applies the NEQ predicate on the "resume_file_url" field.
func ResumeFileURLNEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldResumeFileURL, v))
}

// ResumeFileURLIn applies the In predicate on the "resume_file_url" field.
func ResumeFileURLIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldResumeFileURL, vs...))
}

// ResumeFileURLNotIn applies the NotIn predicate on the "resume_file_url" field.
func ResumeFileURLNotIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldResumeFileURL, vs...))
}

// ResumeFileURLGT applies the GT predicate on the "resume_file_url" field.
func ResumeFileURLGT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldResumeFileURL, v))
}

// ResumeFileURLGTE applies the GTE predicate on the "resume_file_url" field.
func ResumeFileURLGTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldResumeFileURL, v))
}

// ResumeFileURLLT applies the LT predicate on the "resume_file_url" field.
func ResumeFileURLLT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldResumeFileURL, v))
}

// ResumeFileURLLTE applies the LTE predicate on the "resume_file_url" field.
func ResumeFileURLLTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldResumeFileURL, v))
}

// ResumeFileURLContains applies the Contains predicate on the "resume_file_url" field.
func ResumeFileURLContains(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContains(FieldResumeFileURL, v))
}

// ResumeFileURLHasPrefix applies the HasPrefix predicate on the "resume_file_url" field.
func ResumeFileURLHasPrefix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasPrefix(FieldResumeFileURL, v))
}

// ResumeFileURLHasSuffix applies the HasSuffix predicate on the "resume_file_url" field.
func ResumeFileURLHasSuffix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasSuffix(FieldResumeFileURL, v))
}

// ResumeFileURLIsNil applies the IsNil predicate on the "resume_file_url" field.
func ResumeFileURLIsNil() predicate.Resume {
	return predicate.Resume(sql.FieldIsNull(FieldResumeFileURL))
}

// ResumeFileURLNotNil applies the NotNil predicate on the "resume_file_url" field.
func ResumeFileURLNotNil() predicate.Resume {
	return predicate.Resume(sql.FieldNotNull(FieldResumeFileURL))
}

// ResumeFileURLEqualFold applies the EqualFold predicate on the "resume_file_url" field.
func ResumeFileURLEqualFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEqualFold(FieldResumeFileURL, v))
}

// ResumeFileURLContainsFold applies the ContainsFold predicate on the "resume_file_url" field.
func ResumeFileURLContainsFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContainsFold(FieldResumeFileURL, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContainsFold(FieldStatus, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.Resume {
	return predicate.Resume(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.Resume {
	return predicate.Resume(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContainsFold(FieldErrorMessage, v))
}

// ParsedAtEQ applies the EQ predicate on the "parsed_at" field.
func ParsedAtEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldParsedAt, v))
}

// ParsedAtNEQ applies the NEQ predicate on the "parsed_at" field.
func ParsedAtNEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldParsedAt, v))
}

// ParsedAtIn applies the In predicate on the "parsed_at" field.
func ParsedAtIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldParsedAt, vs...))
}

// ParsedAtNotIn applies the NotIn predicate on the "parsed_at" field.
func ParsedAtNotIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldParsedAt, vs...))
}

// ParsedAtGT applies the GT predicate on the "parsed_at" field.
func ParsedAtGT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldParsedAt, v))
}

// ParsedAtGTE applies the GTE predicate on the "parsed_at" field.
func ParsedAtGTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldParsedAt, v))
}

// ParsedAtLT applies the LT predicate on the "parsed_at" field.
func ParsedAtLT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldParsedAt, v))
}

// ParsedAtLTE applies the LTE predicate on the "parsed_at" field.
func ParsedAtLTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldParsedAt, v))
}

// ParsedAtIsNil applies the IsNil predicate on the "parsed_at" field.
func ParsedAtIsNil() predicate.Resume {
	return predicate.Resume(sql.FieldIsNull(FieldParsedAt))
}

// ParsedAtNotNil applies the NotNil predicate on the "parsed_at" field.
func ParsedAtNotNil() predicate.Resume {
	return predicate.Resume(sql.FieldNotNull(FieldParsedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEducations applies the HasEdge predicate on the "educations" edge.
func HasEducations() predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EducationsTable, EducationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEducationsWith applies the HasEdge predicate on the "educations" edge with a given conditions (other predicates).
func HasEducationsWith(preds ...predicate.ResumeEducation) predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := newEducationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExperiences applies the HasEdge predicate on the "experiences" edge.
func HasExperiences() predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExperiencesTable, ExperiencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExperiencesWith applies the HasEdge predicate on the "experiences" edge with a given conditions (other predicates).
func HasExperiencesWith(preds ...predicate.ResumeExperience) predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := newExperiencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjects applies the HasEdge predicate on the "projects" edge.
func HasProjects() predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectsTable, ProjectsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectsWith applies the HasEdge predicate on the "projects" edge with a given conditions (other predicates).
func HasProjectsWith(preds ...predicate.ResumeProject) predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := newProjectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSkills applies the HasEdge predicate on the "skills" edge.
func HasSkills() predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SkillsTable, SkillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSkillsWith applies the HasEdge predicate on the "skills" edge with a given conditions (other predicates).
func HasSkillsWith(preds ...predicate.ResumeSkill) predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := newSkillsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLogs applies the HasEdge predicate on the "logs" edge.
func HasLogs() predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogsTable, LogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogsWith applies the HasEdge predicate on the "logs" edge with a given conditions (other predicates).
func HasLogsWith(preds ...predicate.ResumeLog) predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := newLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDocumentParse applies the HasEdge predicate on the "document_parse" edge.
func HasDocumentParse() predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DocumentParseTable, DocumentParseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocumentParseWith applies the HasEdge predicate on the "document_parse" edge with a given conditions (other predicates).
func HasDocumentParseWith(preds ...predicate.ResumeDocumentParse) predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := newDocumentParseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Resume) predicate.Resume {
	return predicate.Resume(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Resume) predicate.Resume {
	return predicate.Resume(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Resume) predicate.Resume {
	return predicate.Resume(sql.NotPredicates(p))
}
