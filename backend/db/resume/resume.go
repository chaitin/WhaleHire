// Code generated by ent, DO NOT EDIT.

package resume

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the resume type in the database.
	Label = "resume"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUploaderID holds the string denoting the uploader_id field in the database.
	FieldUploaderID = "uploader_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldBirthday holds the string denoting the birthday field in the database.
	FieldBirthday = "birthday"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldCurrentCity holds the string denoting the current_city field in the database.
	FieldCurrentCity = "current_city"
	// FieldHighestEducation holds the string denoting the highest_education field in the database.
	FieldHighestEducation = "highest_education"
	// FieldYearsExperience holds the string denoting the years_experience field in the database.
	FieldYearsExperience = "years_experience"
	// FieldResumeFileURL holds the string denoting the resume_file_url field in the database.
	FieldResumeFileURL = "resume_file_url"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldParsedAt holds the string denoting the parsed_at field in the database.
	FieldParsedAt = "parsed_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeEducations holds the string denoting the educations edge name in mutations.
	EdgeEducations = "educations"
	// EdgeExperiences holds the string denoting the experiences edge name in mutations.
	EdgeExperiences = "experiences"
	// EdgeSkills holds the string denoting the skills edge name in mutations.
	EdgeSkills = "skills"
	// EdgeLogs holds the string denoting the logs edge name in mutations.
	EdgeLogs = "logs"
	// EdgeDocumentParse holds the string denoting the document_parse edge name in mutations.
	EdgeDocumentParse = "document_parse"
	// Table holds the table name of the resume in the database.
	Table = "resumes"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "resumes"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "uploader_id"
	// EducationsTable is the table that holds the educations relation/edge.
	EducationsTable = "resume_educations"
	// EducationsInverseTable is the table name for the ResumeEducation entity.
	// It exists in this package in order to avoid circular dependency with the "resumeeducation" package.
	EducationsInverseTable = "resume_educations"
	// EducationsColumn is the table column denoting the educations relation/edge.
	EducationsColumn = "resume_id"
	// ExperiencesTable is the table that holds the experiences relation/edge.
	ExperiencesTable = "resume_experiences"
	// ExperiencesInverseTable is the table name for the ResumeExperience entity.
	// It exists in this package in order to avoid circular dependency with the "resumeexperience" package.
	ExperiencesInverseTable = "resume_experiences"
	// ExperiencesColumn is the table column denoting the experiences relation/edge.
	ExperiencesColumn = "resume_id"
	// SkillsTable is the table that holds the skills relation/edge.
	SkillsTable = "resume_skills"
	// SkillsInverseTable is the table name for the ResumeSkill entity.
	// It exists in this package in order to avoid circular dependency with the "resumeskill" package.
	SkillsInverseTable = "resume_skills"
	// SkillsColumn is the table column denoting the skills relation/edge.
	SkillsColumn = "resume_id"
	// LogsTable is the table that holds the logs relation/edge.
	LogsTable = "resume_logs"
	// LogsInverseTable is the table name for the ResumeLog entity.
	// It exists in this package in order to avoid circular dependency with the "resumelog" package.
	LogsInverseTable = "resume_logs"
	// LogsColumn is the table column denoting the logs relation/edge.
	LogsColumn = "resume_id"
	// DocumentParseTable is the table that holds the document_parse relation/edge.
	DocumentParseTable = "resume_document_parses"
	// DocumentParseInverseTable is the table name for the ResumeDocumentParse entity.
	// It exists in this package in order to avoid circular dependency with the "resumedocumentparse" package.
	DocumentParseInverseTable = "resume_document_parses"
	// DocumentParseColumn is the table column denoting the document_parse relation/edge.
	DocumentParseColumn = "resume_id"
)

// Columns holds all SQL columns for resume fields.
var Columns = []string{
	FieldID,
	FieldDeletedAt,
	FieldUploaderID,
	FieldName,
	FieldGender,
	FieldBirthday,
	FieldEmail,
	FieldPhone,
	FieldCurrentCity,
	FieldHighestEducation,
	FieldYearsExperience,
	FieldResumeFileURL,
	FieldStatus,
	FieldErrorMessage,
	FieldParsedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/chaitin/WhaleHire/backend/db/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// HighestEducationValidator is a validator for the "highest_education" field. It is called by the builders before save.
	HighestEducationValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Resume queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUploaderID orders the results by the uploader_id field.
func ByUploaderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploaderID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByBirthday orders the results by the birthday field.
func ByBirthday(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthday, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByCurrentCity orders the results by the current_city field.
func ByCurrentCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentCity, opts...).ToFunc()
}

// ByHighestEducation orders the results by the highest_education field.
func ByHighestEducation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHighestEducation, opts...).ToFunc()
}

// ByYearsExperience orders the results by the years_experience field.
func ByYearsExperience(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYearsExperience, opts...).ToFunc()
}

// ByResumeFileURL orders the results by the resume_file_url field.
func ByResumeFileURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResumeFileURL, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByParsedAt orders the results by the parsed_at field.
func ByParsedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParsedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByEducationsCount orders the results by educations count.
func ByEducationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEducationsStep(), opts...)
	}
}

// ByEducations orders the results by educations terms.
func ByEducations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEducationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExperiencesCount orders the results by experiences count.
func ByExperiencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExperiencesStep(), opts...)
	}
}

// ByExperiences orders the results by experiences terms.
func ByExperiences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExperiencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySkillsCount orders the results by skills count.
func BySkillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSkillsStep(), opts...)
	}
}

// BySkills orders the results by skills terms.
func BySkills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSkillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLogsCount orders the results by logs count.
func ByLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLogsStep(), opts...)
	}
}

// ByLogs orders the results by logs terms.
func ByLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDocumentParseCount orders the results by document_parse count.
func ByDocumentParseCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDocumentParseStep(), opts...)
	}
}

// ByDocumentParse orders the results by document_parse terms.
func ByDocumentParse(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentParseStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newEducationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EducationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EducationsTable, EducationsColumn),
	)
}
func newExperiencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExperiencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExperiencesTable, ExperiencesColumn),
	)
}
func newSkillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SkillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SkillsTable, SkillsColumn),
	)
}
func newLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LogsTable, LogsColumn),
	)
}
func newDocumentParseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentParseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DocumentParseTable, DocumentParseColumn),
	)
}
