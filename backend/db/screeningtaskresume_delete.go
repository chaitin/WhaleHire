// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/screeningtaskresume"
)

// ScreeningTaskResumeDelete is the builder for deleting a ScreeningTaskResume entity.
type ScreeningTaskResumeDelete struct {
	config
	hooks    []Hook
	mutation *ScreeningTaskResumeMutation
}

// Where appends a list predicates to the ScreeningTaskResumeDelete builder.
func (strd *ScreeningTaskResumeDelete) Where(ps ...predicate.ScreeningTaskResume) *ScreeningTaskResumeDelete {
	strd.mutation.Where(ps...)
	return strd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (strd *ScreeningTaskResumeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, strd.sqlExec, strd.mutation, strd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (strd *ScreeningTaskResumeDelete) ExecX(ctx context.Context) int {
	n, err := strd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (strd *ScreeningTaskResumeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(screeningtaskresume.Table, sqlgraph.NewFieldSpec(screeningtaskresume.FieldID, field.TypeUUID))
	if ps := strd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, strd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	strd.mutation.done = true
	return affected, err
}

// ScreeningTaskResumeDeleteOne is the builder for deleting a single ScreeningTaskResume entity.
type ScreeningTaskResumeDeleteOne struct {
	strd *ScreeningTaskResumeDelete
}

// Where appends a list predicates to the ScreeningTaskResumeDelete builder.
func (strdo *ScreeningTaskResumeDeleteOne) Where(ps ...predicate.ScreeningTaskResume) *ScreeningTaskResumeDeleteOne {
	strdo.strd.mutation.Where(ps...)
	return strdo
}

// Exec executes the deletion query.
func (strdo *ScreeningTaskResumeDeleteOne) Exec(ctx context.Context) error {
	n, err := strdo.strd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{screeningtaskresume.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (strdo *ScreeningTaskResumeDeleteOne) ExecX(ctx context.Context) {
	if err := strdo.Exec(ctx); err != nil {
		panic(err)
	}
}
