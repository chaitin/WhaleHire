// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/WhaleHire/backend/db/predicate"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxsetting"
	"github.com/chaitin/WhaleHire/backend/db/resumemailboxstatistic"
	"github.com/google/uuid"
)

// ResumeMailboxStatisticQuery is the builder for querying ResumeMailboxStatistic entities.
type ResumeMailboxStatisticQuery struct {
	config
	ctx         *QueryContext
	order       []resumemailboxstatistic.OrderOption
	inters      []Interceptor
	predicates  []predicate.ResumeMailboxStatistic
	withMailbox *ResumeMailboxSettingQuery
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ResumeMailboxStatisticQuery builder.
func (rmsq *ResumeMailboxStatisticQuery) Where(ps ...predicate.ResumeMailboxStatistic) *ResumeMailboxStatisticQuery {
	rmsq.predicates = append(rmsq.predicates, ps...)
	return rmsq
}

// Limit the number of records to be returned by this query.
func (rmsq *ResumeMailboxStatisticQuery) Limit(limit int) *ResumeMailboxStatisticQuery {
	rmsq.ctx.Limit = &limit
	return rmsq
}

// Offset to start from.
func (rmsq *ResumeMailboxStatisticQuery) Offset(offset int) *ResumeMailboxStatisticQuery {
	rmsq.ctx.Offset = &offset
	return rmsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rmsq *ResumeMailboxStatisticQuery) Unique(unique bool) *ResumeMailboxStatisticQuery {
	rmsq.ctx.Unique = &unique
	return rmsq
}

// Order specifies how the records should be ordered.
func (rmsq *ResumeMailboxStatisticQuery) Order(o ...resumemailboxstatistic.OrderOption) *ResumeMailboxStatisticQuery {
	rmsq.order = append(rmsq.order, o...)
	return rmsq
}

// QueryMailbox chains the current query on the "mailbox" edge.
func (rmsq *ResumeMailboxStatisticQuery) QueryMailbox() *ResumeMailboxSettingQuery {
	query := (&ResumeMailboxSettingClient{config: rmsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rmsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rmsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resumemailboxstatistic.Table, resumemailboxstatistic.FieldID, selector),
			sqlgraph.To(resumemailboxsetting.Table, resumemailboxsetting.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resumemailboxstatistic.MailboxTable, resumemailboxstatistic.MailboxColumn),
		)
		fromU = sqlgraph.SetNeighbors(rmsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ResumeMailboxStatistic entity from the query.
// Returns a *NotFoundError when no ResumeMailboxStatistic was found.
func (rmsq *ResumeMailboxStatisticQuery) First(ctx context.Context) (*ResumeMailboxStatistic, error) {
	nodes, err := rmsq.Limit(1).All(setContextOp(ctx, rmsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{resumemailboxstatistic.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rmsq *ResumeMailboxStatisticQuery) FirstX(ctx context.Context) *ResumeMailboxStatistic {
	node, err := rmsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ResumeMailboxStatistic ID from the query.
// Returns a *NotFoundError when no ResumeMailboxStatistic ID was found.
func (rmsq *ResumeMailboxStatisticQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = rmsq.Limit(1).IDs(setContextOp(ctx, rmsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{resumemailboxstatistic.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rmsq *ResumeMailboxStatisticQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := rmsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ResumeMailboxStatistic entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ResumeMailboxStatistic entity is found.
// Returns a *NotFoundError when no ResumeMailboxStatistic entities are found.
func (rmsq *ResumeMailboxStatisticQuery) Only(ctx context.Context) (*ResumeMailboxStatistic, error) {
	nodes, err := rmsq.Limit(2).All(setContextOp(ctx, rmsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{resumemailboxstatistic.Label}
	default:
		return nil, &NotSingularError{resumemailboxstatistic.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rmsq *ResumeMailboxStatisticQuery) OnlyX(ctx context.Context) *ResumeMailboxStatistic {
	node, err := rmsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ResumeMailboxStatistic ID in the query.
// Returns a *NotSingularError when more than one ResumeMailboxStatistic ID is found.
// Returns a *NotFoundError when no entities are found.
func (rmsq *ResumeMailboxStatisticQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = rmsq.Limit(2).IDs(setContextOp(ctx, rmsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{resumemailboxstatistic.Label}
	default:
		err = &NotSingularError{resumemailboxstatistic.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rmsq *ResumeMailboxStatisticQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := rmsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ResumeMailboxStatistics.
func (rmsq *ResumeMailboxStatisticQuery) All(ctx context.Context) ([]*ResumeMailboxStatistic, error) {
	ctx = setContextOp(ctx, rmsq.ctx, ent.OpQueryAll)
	if err := rmsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ResumeMailboxStatistic, *ResumeMailboxStatisticQuery]()
	return withInterceptors[[]*ResumeMailboxStatistic](ctx, rmsq, qr, rmsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rmsq *ResumeMailboxStatisticQuery) AllX(ctx context.Context) []*ResumeMailboxStatistic {
	nodes, err := rmsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ResumeMailboxStatistic IDs.
func (rmsq *ResumeMailboxStatisticQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if rmsq.ctx.Unique == nil && rmsq.path != nil {
		rmsq.Unique(true)
	}
	ctx = setContextOp(ctx, rmsq.ctx, ent.OpQueryIDs)
	if err = rmsq.Select(resumemailboxstatistic.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rmsq *ResumeMailboxStatisticQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := rmsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rmsq *ResumeMailboxStatisticQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rmsq.ctx, ent.OpQueryCount)
	if err := rmsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rmsq, querierCount[*ResumeMailboxStatisticQuery](), rmsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rmsq *ResumeMailboxStatisticQuery) CountX(ctx context.Context) int {
	count, err := rmsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rmsq *ResumeMailboxStatisticQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rmsq.ctx, ent.OpQueryExist)
	switch _, err := rmsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rmsq *ResumeMailboxStatisticQuery) ExistX(ctx context.Context) bool {
	exist, err := rmsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ResumeMailboxStatisticQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rmsq *ResumeMailboxStatisticQuery) Clone() *ResumeMailboxStatisticQuery {
	if rmsq == nil {
		return nil
	}
	return &ResumeMailboxStatisticQuery{
		config:      rmsq.config,
		ctx:         rmsq.ctx.Clone(),
		order:       append([]resumemailboxstatistic.OrderOption{}, rmsq.order...),
		inters:      append([]Interceptor{}, rmsq.inters...),
		predicates:  append([]predicate.ResumeMailboxStatistic{}, rmsq.predicates...),
		withMailbox: rmsq.withMailbox.Clone(),
		// clone intermediate query.
		sql:       rmsq.sql.Clone(),
		path:      rmsq.path,
		modifiers: append([]func(*sql.Selector){}, rmsq.modifiers...),
	}
}

// WithMailbox tells the query-builder to eager-load the nodes that are connected to
// the "mailbox" edge. The optional arguments are used to configure the query builder of the edge.
func (rmsq *ResumeMailboxStatisticQuery) WithMailbox(opts ...func(*ResumeMailboxSettingQuery)) *ResumeMailboxStatisticQuery {
	query := (&ResumeMailboxSettingClient{config: rmsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rmsq.withMailbox = query
	return rmsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ResumeMailboxStatistic.Query().
//		GroupBy(resumemailboxstatistic.FieldDeletedAt).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (rmsq *ResumeMailboxStatisticQuery) GroupBy(field string, fields ...string) *ResumeMailboxStatisticGroupBy {
	rmsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ResumeMailboxStatisticGroupBy{build: rmsq}
	grbuild.flds = &rmsq.ctx.Fields
	grbuild.label = resumemailboxstatistic.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//	}
//
//	client.ResumeMailboxStatistic.Query().
//		Select(resumemailboxstatistic.FieldDeletedAt).
//		Scan(ctx, &v)
func (rmsq *ResumeMailboxStatisticQuery) Select(fields ...string) *ResumeMailboxStatisticSelect {
	rmsq.ctx.Fields = append(rmsq.ctx.Fields, fields...)
	sbuild := &ResumeMailboxStatisticSelect{ResumeMailboxStatisticQuery: rmsq}
	sbuild.label = resumemailboxstatistic.Label
	sbuild.flds, sbuild.scan = &rmsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ResumeMailboxStatisticSelect configured with the given aggregations.
func (rmsq *ResumeMailboxStatisticQuery) Aggregate(fns ...AggregateFunc) *ResumeMailboxStatisticSelect {
	return rmsq.Select().Aggregate(fns...)
}

func (rmsq *ResumeMailboxStatisticQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rmsq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rmsq); err != nil {
				return err
			}
		}
	}
	for _, f := range rmsq.ctx.Fields {
		if !resumemailboxstatistic.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if rmsq.path != nil {
		prev, err := rmsq.path(ctx)
		if err != nil {
			return err
		}
		rmsq.sql = prev
	}
	return nil
}

func (rmsq *ResumeMailboxStatisticQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ResumeMailboxStatistic, error) {
	var (
		nodes       = []*ResumeMailboxStatistic{}
		_spec       = rmsq.querySpec()
		loadedTypes = [1]bool{
			rmsq.withMailbox != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ResumeMailboxStatistic).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ResumeMailboxStatistic{config: rmsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(rmsq.modifiers) > 0 {
		_spec.Modifiers = rmsq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rmsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rmsq.withMailbox; query != nil {
		if err := rmsq.loadMailbox(ctx, query, nodes, nil,
			func(n *ResumeMailboxStatistic, e *ResumeMailboxSetting) { n.Edges.Mailbox = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rmsq *ResumeMailboxStatisticQuery) loadMailbox(ctx context.Context, query *ResumeMailboxSettingQuery, nodes []*ResumeMailboxStatistic, init func(*ResumeMailboxStatistic), assign func(*ResumeMailboxStatistic, *ResumeMailboxSetting)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ResumeMailboxStatistic)
	for i := range nodes {
		fk := nodes[i].MailboxID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(resumemailboxsetting.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mailbox_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (rmsq *ResumeMailboxStatisticQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rmsq.querySpec()
	if len(rmsq.modifiers) > 0 {
		_spec.Modifiers = rmsq.modifiers
	}
	_spec.Node.Columns = rmsq.ctx.Fields
	if len(rmsq.ctx.Fields) > 0 {
		_spec.Unique = rmsq.ctx.Unique != nil && *rmsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rmsq.driver, _spec)
}

func (rmsq *ResumeMailboxStatisticQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(resumemailboxstatistic.Table, resumemailboxstatistic.Columns, sqlgraph.NewFieldSpec(resumemailboxstatistic.FieldID, field.TypeUUID))
	_spec.From = rmsq.sql
	if unique := rmsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rmsq.path != nil {
		_spec.Unique = true
	}
	if fields := rmsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resumemailboxstatistic.FieldID)
		for i := range fields {
			if fields[i] != resumemailboxstatistic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if rmsq.withMailbox != nil {
			_spec.Node.AddColumnOnce(resumemailboxstatistic.FieldMailboxID)
		}
	}
	if ps := rmsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rmsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rmsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rmsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rmsq *ResumeMailboxStatisticQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rmsq.driver.Dialect())
	t1 := builder.Table(resumemailboxstatistic.Table)
	columns := rmsq.ctx.Fields
	if len(columns) == 0 {
		columns = resumemailboxstatistic.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rmsq.sql != nil {
		selector = rmsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rmsq.ctx.Unique != nil && *rmsq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range rmsq.modifiers {
		m(selector)
	}
	for _, p := range rmsq.predicates {
		p(selector)
	}
	for _, p := range rmsq.order {
		p(selector)
	}
	if offset := rmsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rmsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (rmsq *ResumeMailboxStatisticQuery) ForUpdate(opts ...sql.LockOption) *ResumeMailboxStatisticQuery {
	if rmsq.driver.Dialect() == dialect.Postgres {
		rmsq.Unique(false)
	}
	rmsq.modifiers = append(rmsq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return rmsq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (rmsq *ResumeMailboxStatisticQuery) ForShare(opts ...sql.LockOption) *ResumeMailboxStatisticQuery {
	if rmsq.driver.Dialect() == dialect.Postgres {
		rmsq.Unique(false)
	}
	rmsq.modifiers = append(rmsq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return rmsq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rmsq *ResumeMailboxStatisticQuery) Modify(modifiers ...func(s *sql.Selector)) *ResumeMailboxStatisticSelect {
	rmsq.modifiers = append(rmsq.modifiers, modifiers...)
	return rmsq.Select()
}

// ResumeMailboxStatisticGroupBy is the group-by builder for ResumeMailboxStatistic entities.
type ResumeMailboxStatisticGroupBy struct {
	selector
	build *ResumeMailboxStatisticQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rmsgb *ResumeMailboxStatisticGroupBy) Aggregate(fns ...AggregateFunc) *ResumeMailboxStatisticGroupBy {
	rmsgb.fns = append(rmsgb.fns, fns...)
	return rmsgb
}

// Scan applies the selector query and scans the result into the given value.
func (rmsgb *ResumeMailboxStatisticGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rmsgb.build.ctx, ent.OpQueryGroupBy)
	if err := rmsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ResumeMailboxStatisticQuery, *ResumeMailboxStatisticGroupBy](ctx, rmsgb.build, rmsgb, rmsgb.build.inters, v)
}

func (rmsgb *ResumeMailboxStatisticGroupBy) sqlScan(ctx context.Context, root *ResumeMailboxStatisticQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rmsgb.fns))
	for _, fn := range rmsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rmsgb.flds)+len(rmsgb.fns))
		for _, f := range *rmsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rmsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rmsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ResumeMailboxStatisticSelect is the builder for selecting fields of ResumeMailboxStatistic entities.
type ResumeMailboxStatisticSelect struct {
	*ResumeMailboxStatisticQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rmss *ResumeMailboxStatisticSelect) Aggregate(fns ...AggregateFunc) *ResumeMailboxStatisticSelect {
	rmss.fns = append(rmss.fns, fns...)
	return rmss
}

// Scan applies the selector query and scans the result into the given value.
func (rmss *ResumeMailboxStatisticSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rmss.ctx, ent.OpQuerySelect)
	if err := rmss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ResumeMailboxStatisticQuery, *ResumeMailboxStatisticSelect](ctx, rmss.ResumeMailboxStatisticQuery, rmss, rmss.inters, v)
}

func (rmss *ResumeMailboxStatisticSelect) sqlScan(ctx context.Context, root *ResumeMailboxStatisticQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rmss.fns))
	for _, fn := range rmss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rmss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rmss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rmss *ResumeMailboxStatisticSelect) Modify(modifiers ...func(s *sql.Selector)) *ResumeMailboxStatisticSelect {
	rmss.modifiers = append(rmss.modifiers, modifiers...)
	return rmss
}
