// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"log/slog"

	"github.com/GoYoko/web"
	"github.com/ptonlix/whalehire/backend/config"
	"github.com/ptonlix/whalehire/backend/db"
	"github.com/ptonlix/whalehire/backend/internal/middleware"
	v1 "github.com/ptonlix/whalehire/backend/internal/user/handler/v1"
	"github.com/ptonlix/whalehire/backend/internal/user/repo"
	"github.com/ptonlix/whalehire/backend/internal/user/usecase"
	"github.com/ptonlix/whalehire/backend/pkg"
	"github.com/ptonlix/whalehire/backend/pkg/ipdb"
	"github.com/ptonlix/whalehire/backend/pkg/logger"
	"github.com/ptonlix/whalehire/backend/pkg/session"
	"github.com/ptonlix/whalehire/backend/pkg/store"
	"github.com/ptonlix/whalehire/backend/pkg/version"
)

// Injectors from wire.go:

func newServer() (*Server, error) {
	configConfig, err := config.Init()
	if err != nil {
		return nil, err
	}
	web := pkg.NewWeb(configConfig)
	loggerConfig := configConfig.Logger
	slogLogger := logger.NewLogger(loggerConfig)
	client, err := store.NewEntDB(configConfig, slogLogger)
	if err != nil {
		return nil, err
	}
	redisClient := store.NewRedisCli(configConfig)
	ipdbIPDB, err := ipdb.NewIPDB(slogLogger)
	if err != nil {
		return nil, err
	}
	userRepo := repo.NewUserRepo(client, ipdbIPDB, redisClient, configConfig)
	sessionSession := session.NewSession(configConfig)
	userUsecase := usecase.NewUserUsecase(configConfig, redisClient, userRepo, slogLogger, sessionSession)
	authMiddleware := middleware.NewAuthMiddleware(userUsecase, sessionSession, slogLogger)
	activeMiddleware := middleware.NewActiveMiddleware(redisClient, slogLogger)
	readOnlyMiddleware := middleware.NewReadOnlyMiddleware(configConfig)
	userHandler := v1.NewUserHandler(web, userUsecase, authMiddleware, activeMiddleware, readOnlyMiddleware, sessionSession, slogLogger, configConfig)
	versionInfo := version.NewVersionInfo()
	server := &Server{
		config:  configConfig,
		web:     web,
		ent:     client,
		logger:  slogLogger,
		userV1:  userHandler,
		version: versionInfo,
	}
	return server, nil
}

// wire.go:

type Server struct {
	config  *config.Config
	web     *web.Web
	ent     *db.Client
	logger  *slog.Logger
	userV1  *v1.UserHandler
	version *version.VersionInfo
}
