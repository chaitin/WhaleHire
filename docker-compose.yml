version: '3.8'

services:
  # PostgreSQL 数据库
  whalehire-db:
    image: portus.in.chaitin.net/whalehire/pgvector:pg17
    container_name: whalehire-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - whalehire-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  whalehire-redis:
    image: portus.in.chaitin.net/whalehire/redis:7-alpine
    container_name: whalehire-redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - whalehire-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 后端服务
  whalehire-backend:
    image: portus.in.chaitin.net/whalehire/backend:v0.1.14
    container_name: whalehire-backend
    environment:
      WHALEHIRE_DATABASE_MASTER: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@whalehire-db:5432/${POSTGRES_DB}?sslmode=disable&timezone=Asia/Shanghai"
      WHALEHIRE_DATABASE_SLAVE: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@whalehire-db:5432/${POSTGRES_DB}?sslmode=disable&timezone=Asia/Shanghai"   
      WHALEHIRE_REDIS_HOST: whalehire-redis
      WHALEHIRE_REDIS_PORT: 6379
      WHALEHIRE_REDIS_PASS: ${REDIS_PASSWORD}
      WHALEHIRE_ADMIN_USER: ${WHALEHIRE_ADMIN_USER}
      WHALEHIRE_ADMIN_PASSWORD: ${WHALEHIRE_ADMIN_PASSWORD}
      WHALEHIRE_GENERAL_AGENT_LLM_MODEL_NAME: ${WHALEHIRE_GENERAL_AGENT_LLM_MODEL_NAME}
      WHALEHIRE_GENERAL_AGENT_LLM_BASE_URL: ${WHALEHIRE_GENERAL_AGENT_LLM_BASE_URL}
      WHALEHIRE_GENERAL_AGENT_LLM_API_KEY: ${WHALEHIRE_GENERAL_AGENT_LLM_API_KEY}
      WHALEHIRE_S3_SECRET_KEY: ${WHALEHIRE_S3_SECRET_KEY}
      WHALEHIRE_MINIO_ROOT_USER: ${WHALEHIRE_MINIO_ROOT_USER}
      WHALEHIRE_MINIO_ROOT_PASSWORD: ${WHALEHIRE_MINIO_ROOT_PASSWORD}
      WHALEHIRE_DOCUMENT_PARSER_API_KEY: ${WHALEHIRE_DOCUMENT_PARSER_API_KEY}
      WHALEHIRE_DOCUMENT_PARSER_BASE_URL: ${WHALEHIRE_DOCUMENT_PARSER_BASE_URL}
      # 代理配置
      https_proxy: ${https_proxy:-}
      http_proxy: ${http_proxy:-}
      no_proxy: ${no_proxy:-}
    ports:
      - "8888:8888"
    depends_on:
      whalehire-db:
        condition: service_healthy
      whalehire-redis:
        condition: service_healthy
      whalehire-minio:
        condition: service_healthy
    networks:
      - whalehire-network
    restart: unless-stopped

  # 前端服务
  whalehire-frontend:
    image: portus.in.chaitin.net/whalehire/frontend:v0.1.14
    container_name: whalehire-frontend
    ports:
      - "3000:80"
    environment:
      NODE_ENV: production
      BACKEND_HOST: http://whalehire-backend:8888
    depends_on:
      - whalehire-backend
    networks:
      - whalehire-network
    restart: unless-stopped
    volumes:
      - ${PWD}/nginx.conf:/etc/nginx/nginx.conf:ro
      
  # MinIO 对象存储
  whalehire-minio:
    image: portus.in.chaitin.net/whalehire/minio:RELEASE.2025-09-07T16-13-09Z
    container_name: whalehire-minio
    environment:
      MINIO_ROOT_USER: ${WHALEHIRE_MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${WHALEHIRE_MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - whalehire-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  whalehire-network:
    driver: bridge